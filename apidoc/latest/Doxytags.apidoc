<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>Arpack.h</name>
    <path>/vol/medic01/users/as12312/Software/MIRTK/Modules/Numerics/include/mirtk/</path>
    <filename>Arpack_8h</filename>
  </compound>
  <compound kind="file">
    <name>ArrayHeap.h</name>
    <path>/vol/medic01/users/as12312/Software/MIRTK/Modules/Common/include/mirtk/</path>
    <filename>ArrayHeap_8h</filename>
    <namespace>mirtk</namespace>
  </compound>
  <compound kind="file">
    <name>DataOp.h</name>
    <path>/vol/medic01/users/as12312/Software/MIRTK/Modules/Image/include/mirtk/</path>
    <filename>DataOp_8h</filename>
    <class kind="class">mirtk::data::Op</class>
    <class kind="class">mirtk::data::Write</class>
    <namespace>mirtk</namespace>
  </compound>
  <compound kind="file">
    <name>Eigen.h</name>
    <path>/vol/medic01/users/as12312/Software/MIRTK/Modules/Numerics/include/mirtk/</path>
    <filename>Eigen_8h</filename>
    <namespace>mirtk</namespace>
  </compound>
  <compound kind="file">
    <name>Umfpack.h</name>
    <path>/vol/medic01/users/as12312/Software/MIRTK/Modules/Numerics/include/mirtk/</path>
    <filename>Umfpack_8h</filename>
    <namespace>mirtk</namespace>
    <member kind="function">
      <type>const char *</type>
      <name>umfpack_status_message</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a285456e1bfe2f727c80d6911a245d4f2</anchor>
      <arglist>(int status)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Utils.h</name>
    <path>/vol/medic01/users/as12312/Software/MIRTK/Modules/Common/include/mirtk/</path>
    <filename>Utils_8h</filename>
    <namespace>mirtk</namespace>
    <member kind="function">
      <type>double</type>
      <name>AverageInterval</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a3889bb394a84e5b6e34b0818617204eb</anchor>
      <arglist>(const OrderedSet&lt; double &gt; &amp;values)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>mirtk</name>
    <filename>namespacemirtk.html</filename>
    <namespace>mirtk::ConvolutionFunction</namespace>
    <namespace>mirtk::ForEachVoxelDomain</namespace>
    <namespace>mirtk::InterpolationDomain</namespace>
    <namespace>mirtk::MultipleVoxelTransformation</namespace>
    <namespace>mirtk::NaryVoxelFunction</namespace>
    <namespace>mirtk::TernaryVoxelFunction</namespace>
    <namespace>mirtk::UnaryVoxelFunction</namespace>
    <class kind="class">mirtk::AdaptiveLineSearch</class>
    <class kind="class">mirtk::AddBSplineSVFFD</class>
    <class kind="class">mirtk::AddBSplineSVFFD3D</class>
    <class kind="class">mirtk::AddDOFsOfBSplineSVFFD</class>
    <class kind="class">mirtk::AffineTransformation</class>
    <class kind="class">mirtk::AsConformalAsPossibleVolumeParameterizer</class>
    <class kind="class">mirtk::BalloonForce</class>
    <class kind="class">mirtk::BaseImage</class>
    <class kind="class">mirtk::BiharmonicMap</class>
    <class kind="struct">mirtk::BinaryForEachVoxelBody</class>
    <class kind="struct">mirtk::BinaryForEachVoxelBody_1Const</class>
    <class kind="struct">mirtk::BinaryForEachVoxelBody_Const</class>
    <class kind="struct">mirtk::BinaryForEachVoxelIfBody</class>
    <class kind="struct">mirtk::BinaryForEachVoxelIfBody_1Const</class>
    <class kind="struct">mirtk::BinaryForEachVoxelIfBody_Const</class>
    <class kind="class">mirtk::blocked_range</class>
    <class kind="class">mirtk::blocked_range2d</class>
    <class kind="class">mirtk::blocked_range3d</class>
    <class kind="class">mirtk::BrentLineSearch</class>
    <class kind="class">mirtk::BSpline</class>
    <class kind="class">mirtk::BSplineFreeFormTransformation3D</class>
    <class kind="class">mirtk::BSplineFreeFormTransformation4D</class>
    <class kind="class">mirtk::BSplineFreeFormTransformationStatistical</class>
    <class kind="class">mirtk::BSplineFreeFormTransformationSV</class>
    <class kind="class">mirtk::BSplineFreeFormTransformationTD</class>
    <class kind="class">mirtk::BSplineInterpolateImageFunction</class>
    <class kind="class">mirtk::BSplineInterpolateImageFunction2D</class>
    <class kind="class">mirtk::BSplineInterpolateImageFunction3D</class>
    <class kind="class">mirtk::BSplineInterpolateImageFunction4D</class>
    <class kind="class">mirtk::CharbonnierErrorFunction</class>
    <class kind="class">mirtk::Cifstream</class>
    <class kind="class">mirtk::CityBlockDistanceTransform</class>
    <class kind="class">mirtk::ClosestCell</class>
    <class kind="class">mirtk::ClosestPoint</class>
    <class kind="class">mirtk::ClosestPointLabel</class>
    <class kind="class">mirtk::Cofstream</class>
    <class kind="class">mirtk::Configurable</class>
    <class kind="class">mirtk::ConjugateGradientDescent</class>
    <class kind="class">mirtk::ConnectedComponents</class>
    <class kind="class">mirtk::ConstExtrapolateImageFunction</class>
    <class kind="class">mirtk::ConstExtrapolateImageFunctionWithPeriodicTime</class>
    <class kind="class">mirtk::ConstGenericImageIterator</class>
    <class kind="class">mirtk::ConstImageIterator</class>
    <class kind="class">mirtk::CosineOfNormalizedGradientField</class>
    <class kind="class">mirtk::CSplineInterpolateImageFunction</class>
    <class kind="class">mirtk::CSplineInterpolateImageFunction2D</class>
    <class kind="class">mirtk::CSplineInterpolateImageFunction3D</class>
    <class kind="class">mirtk::CSplineInterpolateImageFunction4D</class>
    <class kind="class">mirtk::CubicBSplineInterpolateImageFunction</class>
    <class kind="class">mirtk::CubicBSplineInterpolateImageFunction2D</class>
    <class kind="class">mirtk::CubicBSplineInterpolateImageFunction3D</class>
    <class kind="class">mirtk::CubicBSplineInterpolateImageFunction4D</class>
    <class kind="class">mirtk::CurrentsDistance</class>
    <class kind="class">mirtk::CurvatureConstraint</class>
    <class kind="class">mirtk::DataFidelity</class>
    <class kind="class">mirtk::DeformableSurfaceDebugger</class>
    <class kind="class">mirtk::DeformableSurfaceLogger</class>
    <class kind="class">mirtk::DeformableSurfaceModel</class>
    <class kind="class">mirtk::DifferenceOfCompositionLieBracketImageFilter3D</class>
    <class kind="class">mirtk::Dilation</class>
    <class kind="class">mirtk::DiscreteMap</class>
    <class kind="class">mirtk::DisplacementToVelocityField</class>
    <class kind="class">mirtk::DisplacementToVelocityFieldBCH</class>
    <class kind="class">mirtk::DistanceErrorFunction</class>
    <class kind="struct">mirtk::double2x2</class>
    <class kind="struct">mirtk::double3x3</class>
    <class kind="struct">mirtk::double3x4</class>
    <class kind="struct">mirtk::double4x4</class>
    <class kind="class">mirtk::Downsampling</class>
    <class kind="class">mirtk::EdgeConnectivity</class>
    <class kind="class">mirtk::EdgeIterator</class>
    <class kind="class">mirtk::EdgeTable</class>
    <class kind="class">mirtk::EnergyTerm</class>
    <class kind="class">mirtk::EnergyThreshold</class>
    <class kind="class">mirtk::Erosion</class>
    <class kind="class">mirtk::EulerMethod</class>
    <class kind="class">mirtk::EulerMethodWithDamping</class>
    <class kind="class">mirtk::EulerMethodWithMomentum</class>
    <class kind="class">mirtk::EvaluateBSplineSVFFD</class>
    <class kind="class">mirtk::EvaluateBSplineSVFFD3D</class>
    <class kind="class">mirtk::EvaluateGlobalSVFFD</class>
    <class kind="class">mirtk::EvaluateGlobalSVFFD3D</class>
    <class kind="class">mirtk::EventDelegate</class>
    <class kind="class">mirtk::ExternalForce</class>
    <class kind="class">mirtk::ExtrapolateImageFunction</class>
    <class kind="class">mirtk::FastCubicBSplineInterpolateImageFunction</class>
    <class kind="class">mirtk::FastCubicBSplineInterpolateImageFunction2D</class>
    <class kind="class">mirtk::FastCubicBSplineInterpolateImageFunction3D</class>
    <class kind="class">mirtk::FastCubicBSplineInterpolateImageFunction4D</class>
    <class kind="class">mirtk::FastLinearImageGradientFunction</class>
    <class kind="class">mirtk::FastLinearImageGradientFunction2D</class>
    <class kind="class">mirtk::FastLinearImageGradientFunction3D</class>
    <class kind="class">mirtk::FiducialMatch</class>
    <class kind="class">mirtk::FiducialRegistrationError</class>
    <class kind="struct">mirtk::float2x2</class>
    <class kind="struct">mirtk::float3x3</class>
    <class kind="struct">mirtk::float3x4</class>
    <class kind="struct">mirtk::float4x4</class>
    <class kind="class">mirtk::FluidFreeFormTransformation</class>
    <class kind="struct">mirtk::ForEachVoxelBody</class>
    <class kind="struct">mirtk::ForEachVoxelIfBody</class>
    <class kind="class">mirtk::FreeFormTransformation</class>
    <class kind="class">mirtk::FreeFormTransformation3D</class>
    <class kind="class">mirtk::FreeFormTransformation4D</class>
    <class kind="class">mirtk::FreeFormTransformationEmbeddedRungeKutta</class>
    <class kind="class">mirtk::FreeFormTransformationExplicitRungeKutta</class>
    <class kind="class">mirtk::FreeFormTransformationIntegrationRK4</class>
    <class kind="class">mirtk::FreeFormTransformationIntegrationRKBS23</class>
    <class kind="class">mirtk::FreeFormTransformationIntegrationRKCK45</class>
    <class kind="class">mirtk::FreeFormTransformationIntegrationRKDP45</class>
    <class kind="class">mirtk::FreeFormTransformationIntegrationRKE1</class>
    <class kind="class">mirtk::FreeFormTransformationIntegrationRKE2</class>
    <class kind="class">mirtk::FreeFormTransformationIntegrationRKEH12</class>
    <class kind="class">mirtk::FreeFormTransformationIntegrationRKF45</class>
    <class kind="class">mirtk::FreeFormTransformationIntegrationRKH2</class>
    <class kind="class">mirtk::FreeFormTransformationRungeKutta</class>
    <class kind="class">mirtk::FundamentalMap</class>
    <class kind="class">mirtk::FundamentalVolumeParameterizer</class>
    <class kind="class">mirtk::FuzzyCorrespondence</class>
    <class kind="class">mirtk::GaussianBlurring</class>
    <class kind="class">mirtk::GaussianBlurring2D</class>
    <class kind="class">mirtk::GaussianBlurring4D</class>
    <class kind="class">mirtk::GaussianBlurringWithPadding</class>
    <class kind="class">mirtk::GaussianBlurringWithPadding2D</class>
    <class kind="class">mirtk::GaussianErrorFunction</class>
    <class kind="class">mirtk::GaussianInterpolateImageFunction</class>
    <class kind="class">mirtk::GaussianInterpolateImageFunction2D</class>
    <class kind="class">mirtk::GaussianInterpolateImageFunction3D</class>
    <class kind="class">mirtk::GaussianInterpolateImageFunction4D</class>
    <class kind="class">mirtk::GaussianPyramidFilter</class>
    <class kind="class">mirtk::GenericBSplineInterpolateImageFunction</class>
    <class kind="class">mirtk::GenericBSplineInterpolateImageFunction2D</class>
    <class kind="class">mirtk::GenericBSplineInterpolateImageFunction3D</class>
    <class kind="class">mirtk::GenericBSplineInterpolateImageFunction4D</class>
    <class kind="class">mirtk::GenericConstExtrapolateImageFunction</class>
    <class kind="class">mirtk::GenericConstExtrapolateImageFunctionWithPeriodicTime</class>
    <class kind="class">mirtk::GenericCSplineInterpolateImageFunction</class>
    <class kind="class">mirtk::GenericCSplineInterpolateImageFunction2D</class>
    <class kind="class">mirtk::GenericCSplineInterpolateImageFunction3D</class>
    <class kind="class">mirtk::GenericCSplineInterpolateImageFunction4D</class>
    <class kind="class">mirtk::GenericCubicBSplineInterpolateImageFunction</class>
    <class kind="class">mirtk::GenericCubicBSplineInterpolateImageFunction2D</class>
    <class kind="class">mirtk::GenericCubicBSplineInterpolateImageFunction3D</class>
    <class kind="class">mirtk::GenericCubicBSplineInterpolateImageFunction4D</class>
    <class kind="class">mirtk::GenericExtrapolateImageFunction</class>
    <class kind="class">mirtk::GenericFastCubicBSplineInterpolateImageFunction</class>
    <class kind="class">mirtk::GenericFastCubicBSplineInterpolateImageFunction2D</class>
    <class kind="class">mirtk::GenericFastCubicBSplineInterpolateImageFunction3D</class>
    <class kind="class">mirtk::GenericFastCubicBSplineInterpolateImageFunction4D</class>
    <class kind="class">mirtk::GenericFastLinearImageGradientFunction</class>
    <class kind="class">mirtk::GenericFastLinearImageGradientFunction2D</class>
    <class kind="class">mirtk::GenericFastLinearImageGradientFunction3D</class>
    <class kind="class">mirtk::GenericGaussianInterpolateImageFunction</class>
    <class kind="class">mirtk::GenericGaussianInterpolateImageFunction2D</class>
    <class kind="class">mirtk::GenericGaussianInterpolateImageFunction3D</class>
    <class kind="class">mirtk::GenericGaussianInterpolateImageFunction4D</class>
    <class kind="class">mirtk::GenericImage</class>
    <class kind="class">mirtk::GenericImageGradientFunction</class>
    <class kind="class">mirtk::GenericImageIterator</class>
    <class kind="class">mirtk::GenericInterpolateImageFunction</class>
    <class kind="class">mirtk::GenericLinearImageGradientFunction</class>
    <class kind="class">mirtk::GenericLinearImageGradientFunction2D</class>
    <class kind="class">mirtk::GenericLinearImageGradientFunction3D</class>
    <class kind="class">mirtk::GenericLinearInterpolateImageFunction</class>
    <class kind="class">mirtk::GenericLinearInterpolateImageFunction2D</class>
    <class kind="class">mirtk::GenericLinearInterpolateImageFunction3D</class>
    <class kind="class">mirtk::GenericLinearInterpolateImageFunction4D</class>
    <class kind="class">mirtk::GenericMirrorExtrapolateImageFunction</class>
    <class kind="class">mirtk::GenericNearestNeighborExtrapolateImageFunction</class>
    <class kind="class">mirtk::GenericNearestNeighborInterpolateImageFunction</class>
    <class kind="class">mirtk::GenericRegistrationDebugger</class>
    <class kind="class">mirtk::GenericRegistrationFilter</class>
    <class kind="class">mirtk::GenericRegistrationLogger</class>
    <class kind="class">mirtk::GenericRepeatExtrapolateImageFunction</class>
    <class kind="class">mirtk::GenericSincInterpolateImageFunction</class>
    <class kind="class">mirtk::GenericSincInterpolateImageFunction2D</class>
    <class kind="class">mirtk::GenericSincInterpolateImageFunction3D</class>
    <class kind="class">mirtk::GenericSincInterpolateImageFunction4D</class>
    <class kind="class">mirtk::GenericSparseMatrix</class>
    <class kind="class">mirtk::GIPLImageReader</class>
    <class kind="class">mirtk::GIPLImageWriter</class>
    <class kind="class">mirtk::GradientDescent</class>
    <class kind="class">mirtk::GradientFieldSimilarity</class>
    <class kind="class">mirtk::GradientImageFilter</class>
    <class kind="class">mirtk::HarmonicFundamentalVolumeParameterizer</class>
    <class kind="class">mirtk::HarmonicMap</class>
    <class kind="class">mirtk::HarmonicTetrahedralVolumeParameterizer</class>
    <class kind="class">mirtk::HashImage</class>
    <class kind="class">mirtk::HessianImageFilter</class>
    <class kind="class">mirtk::Histogram1D</class>
    <class kind="class">mirtk::Histogram2D</class>
    <class kind="class">mirtk::HistogramImageSimilarity</class>
    <class kind="class">mirtk::HomogeneousTransformation</class>
    <class kind="class">mirtk::HomogeneousTransformationIterator</class>
    <class kind="struct">mirtk::ImageAttributes</class>
    <class kind="class">mirtk::ImageChannel</class>
    <class kind="class">mirtk::ImageCovariance</class>
    <class kind="class">mirtk::ImageEdgeForce</class>
    <class kind="class">mirtk::ImageFrame</class>
    <class kind="class">mirtk::ImageFunction</class>
    <class kind="class">mirtk::ImageGradientFunction</class>
    <class kind="class">mirtk::ImageIterator</class>
    <class kind="class">mirtk::ImageReader</class>
    <class kind="class">mirtk::ImageReaderFactory</class>
    <class kind="class">mirtk::ImageRegion</class>
    <class kind="class">mirtk::ImageSequence</class>
    <class kind="class">mirtk::ImageSimilarity</class>
    <class kind="class">mirtk::ImageToImage</class>
    <class kind="class">mirtk::ImageTransformation</class>
    <class kind="class">mirtk::ImageTransformationCache</class>
    <class kind="class">mirtk::ImageWriter</class>
    <class kind="class">mirtk::ImageWriterFactory</class>
    <class kind="class">mirtk::ImplicitSurfaceDistance</class>
    <class kind="class">mirtk::ImplicitSurfaceForce</class>
    <class kind="class">mirtk::ImplicitSurfaceSpringForce</class>
    <class kind="class">mirtk::Indent</class>
    <class kind="class">mirtk::IndexExtrapolateImageFunction</class>
    <class kind="class">mirtk::InexactLineSearch</class>
    <class kind="class">mirtk::InflationForce</class>
    <class kind="class">mirtk::InflationStoppingCriterion</class>
    <class kind="class">mirtk::IntensityCorrelationRatioXY</class>
    <class kind="class">mirtk::IntensityCorrelationRatioYX</class>
    <class kind="class">mirtk::IntensityCrossCorrelation</class>
    <class kind="class">mirtk::InternalForce</class>
    <class kind="class">mirtk::InterpolateImageFunction</class>
    <class kind="class">mirtk::InverseAffineTransformation</class>
    <class kind="struct">mirtk::Iteration</class>
    <class kind="class">mirtk::JacobianConstraint</class>
    <class kind="class">mirtk::JointImageEntropy</class>
    <class kind="class">mirtk::LabelConsistency</class>
    <class kind="class">mirtk::LieBracketImageFilter</class>
    <class kind="class">mirtk::LieBracketImageFilter2D</class>
    <class kind="class">mirtk::LieBracketImageFilter3D</class>
    <class kind="class">mirtk::LimitedMemoryBFGSDescent</class>
    <class kind="class">mirtk::LinearFreeFormTransformation3D</class>
    <class kind="class">mirtk::LinearFreeFormTransformation4D</class>
    <class kind="class">mirtk::LinearFreeFormTransformationTD</class>
    <class kind="class">mirtk::LinearImageGradientFunction</class>
    <class kind="class">mirtk::LinearImageGradientFunction2D</class>
    <class kind="class">mirtk::LinearImageGradientFunction3D</class>
    <class kind="class">mirtk::LinearInterpolateImageFunction</class>
    <class kind="class">mirtk::LinearInterpolateImageFunction2D</class>
    <class kind="class">mirtk::LinearInterpolateImageFunction3D</class>
    <class kind="class">mirtk::LinearInterpolateImageFunction4D</class>
    <class kind="class">mirtk::LinearTetrahedralVolumeParameterizer</class>
    <class kind="class">mirtk::LineSearch</class>
    <class kind="struct">mirtk::LineSearchStep</class>
    <class kind="class">mirtk::LocalOptimizer</class>
    <class kind="class">mirtk::LogJacobianConstraint</class>
    <class kind="class">mirtk::Matlab</class>
    <class kind="class">mirtk::Matrix</class>
    <class kind="class">mirtk::MaxStepLineSearch</class>
    <class kind="class">mirtk::MetricDistortion</class>
    <class kind="class">mirtk::MinActiveStoppingCriterion</class>
    <class kind="class">mirtk::MinJacobianConstraint</class>
    <class kind="class">mirtk::MirrorExtrapolateImageFunction</class>
    <class kind="class">mirtk::MultiLevelFreeFormTransformation</class>
    <class kind="class">mirtk::MultiLevelStationaryVelocityTransformation</class>
    <class kind="class">mirtk::MultiLevelTransformation</class>
    <class kind="class">mirtk::MutualImageInformation</class>
    <class kind="class">mirtk::NearestNeighborExtrapolateImageFunction</class>
    <class kind="class">mirtk::NearestNeighborInterpolateImageFunction</class>
    <class kind="class">mirtk::NeighborhoodOffsets</class>
    <class kind="class">mirtk::NiftiImage</class>
    <class kind="struct">mirtk::NiftiImageInfo</class>
    <class kind="class">mirtk::NiftiImageReader</class>
    <class kind="class">mirtk::NiftiImageWriter</class>
    <class kind="struct">mirtk::NonaryForEachVoxelBody</class>
    <class kind="struct">mirtk::NonaryForEachVoxelBody_1Const</class>
    <class kind="struct">mirtk::NonaryForEachVoxelBody_2Const</class>
    <class kind="struct">mirtk::NonaryForEachVoxelBody_3Const</class>
    <class kind="struct">mirtk::NonaryForEachVoxelBody_4Const</class>
    <class kind="struct">mirtk::NonaryForEachVoxelBody_5Const</class>
    <class kind="struct">mirtk::NonaryForEachVoxelBody_6Const</class>
    <class kind="struct">mirtk::NonaryForEachVoxelBody_7Const</class>
    <class kind="struct">mirtk::NonaryForEachVoxelBody_8Const</class>
    <class kind="struct">mirtk::NonaryForEachVoxelBody_Const</class>
    <class kind="struct">mirtk::NonaryForEachVoxelIfBody</class>
    <class kind="struct">mirtk::NonaryForEachVoxelIfBody_1Const</class>
    <class kind="struct">mirtk::NonaryForEachVoxelIfBody_2Const</class>
    <class kind="struct">mirtk::NonaryForEachVoxelIfBody_3Const</class>
    <class kind="struct">mirtk::NonaryForEachVoxelIfBody_4Const</class>
    <class kind="struct">mirtk::NonaryForEachVoxelIfBody_5Const</class>
    <class kind="struct">mirtk::NonaryForEachVoxelIfBody_6Const</class>
    <class kind="struct">mirtk::NonaryForEachVoxelIfBody_7Const</class>
    <class kind="struct">mirtk::NonaryForEachVoxelIfBody_8Const</class>
    <class kind="struct">mirtk::NonaryForEachVoxelIfBody_Const</class>
    <class kind="class">mirtk::NonSelfIntersectionConstraint</class>
    <class kind="class">mirtk::NormalizedGradientFieldSimilarity</class>
    <class kind="class">mirtk::NormalizedIntensityCrossCorrelation</class>
    <class kind="class">mirtk::NormalizedMutualImageInformation</class>
    <class kind="class">mirtk::Object</class>
    <class kind="class">mirtk::ObjectFactory</class>
    <class kind="class">mirtk::ObjectiveFunction</class>
    <class kind="class">mirtk::Observable</class>
    <class kind="class">mirtk::Observer</class>
    <class kind="struct">mirtk::OctaryForEachVoxelBody</class>
    <class kind="struct">mirtk::OctaryForEachVoxelBody_1Const</class>
    <class kind="struct">mirtk::OctaryForEachVoxelBody_2Const</class>
    <class kind="struct">mirtk::OctaryForEachVoxelBody_3Const</class>
    <class kind="struct">mirtk::OctaryForEachVoxelBody_4Const</class>
    <class kind="struct">mirtk::OctaryForEachVoxelBody_5Const</class>
    <class kind="struct">mirtk::OctaryForEachVoxelBody_6Const</class>
    <class kind="struct">mirtk::OctaryForEachVoxelBody_7Const</class>
    <class kind="struct">mirtk::OctaryForEachVoxelBody_Const</class>
    <class kind="struct">mirtk::OctaryForEachVoxelIfBody</class>
    <class kind="struct">mirtk::OctaryForEachVoxelIfBody_1Const</class>
    <class kind="struct">mirtk::OctaryForEachVoxelIfBody_2Const</class>
    <class kind="struct">mirtk::OctaryForEachVoxelIfBody_3Const</class>
    <class kind="struct">mirtk::OctaryForEachVoxelIfBody_4Const</class>
    <class kind="struct">mirtk::OctaryForEachVoxelIfBody_5Const</class>
    <class kind="struct">mirtk::OctaryForEachVoxelIfBody_6Const</class>
    <class kind="struct">mirtk::OctaryForEachVoxelIfBody_7Const</class>
    <class kind="struct">mirtk::OctaryForEachVoxelIfBody_Const</class>
    <class kind="class">mirtk::PartialAffineTransformation</class>
    <class kind="class">mirtk::PartialBSplineFreeFormTransformationSV</class>
    <class kind="class">mirtk::PartialMultiLevelStationaryVelocityTransformation</class>
    <class kind="class">mirtk::PeakSignalToNoiseRatio</class>
    <class kind="class">mirtk::PeronaMalikErrorFunction</class>
    <class kind="class">mirtk::PGMImageReader</class>
    <class kind="class">mirtk::PGMImageWriter</class>
    <class kind="class">mirtk::Plane</class>
    <class kind="class">mirtk::PNGImageWriter</class>
    <class kind="class">mirtk::Point</class>
    <class kind="class">mirtk::PointCorrespondence</class>
    <class kind="class">mirtk::PointCorrespondenceDistance</class>
    <class kind="class">mirtk::PointLocator</class>
    <class kind="class">mirtk::PointSamples</class>
    <class kind="class">mirtk::PointSet</class>
    <class kind="class">mirtk::PointSetDistance</class>
    <class kind="class">mirtk::PointSetForce</class>
    <class kind="class">mirtk::PolyDataCurvature</class>
    <class kind="class">mirtk::PolyDataFilter</class>
    <class kind="class">mirtk::PolyDataRemeshing</class>
    <class kind="class">mirtk::PolyDataSmoothing</class>
    <class kind="class">mirtk::Polyhedron</class>
    <class kind="class">mirtk::Polynomial</class>
    <class kind="class">mirtk::QuadraticCurvatureConstraint</class>
    <class kind="struct">mirtk::QuaternaryForEachVoxelBody</class>
    <class kind="struct">mirtk::QuaternaryForEachVoxelBody_1Const</class>
    <class kind="struct">mirtk::QuaternaryForEachVoxelBody_2Const</class>
    <class kind="struct">mirtk::QuaternaryForEachVoxelBody_3Const</class>
    <class kind="struct">mirtk::QuaternaryForEachVoxelBody_Const</class>
    <class kind="struct">mirtk::QuaternaryForEachVoxelIfBody</class>
    <class kind="struct">mirtk::QuaternaryForEachVoxelIfBody_1Const</class>
    <class kind="struct">mirtk::QuaternaryForEachVoxelIfBody_2Const</class>
    <class kind="struct">mirtk::QuaternaryForEachVoxelIfBody_3Const</class>
    <class kind="struct">mirtk::QuaternaryForEachVoxelIfBody_Const</class>
    <class kind="struct">mirtk::QuinaryForEachVoxelBody</class>
    <class kind="struct">mirtk::QuinaryForEachVoxelBody_1Const</class>
    <class kind="struct">mirtk::QuinaryForEachVoxelBody_2Const</class>
    <class kind="struct">mirtk::QuinaryForEachVoxelBody_3Const</class>
    <class kind="struct">mirtk::QuinaryForEachVoxelBody_4Const</class>
    <class kind="struct">mirtk::QuinaryForEachVoxelBody_Const</class>
    <class kind="struct">mirtk::QuinaryForEachVoxelIfBody</class>
    <class kind="struct">mirtk::QuinaryForEachVoxelIfBody_1Const</class>
    <class kind="struct">mirtk::QuinaryForEachVoxelIfBody_2Const</class>
    <class kind="struct">mirtk::QuinaryForEachVoxelIfBody_3Const</class>
    <class kind="struct">mirtk::QuinaryForEachVoxelIfBody_4Const</class>
    <class kind="struct">mirtk::QuinaryForEachVoxelIfBody_Const</class>
    <class kind="class">mirtk::RadialErrorFunction</class>
    <class kind="class">mirtk::RegisteredImage</class>
    <class kind="class">mirtk::RegisteredPointSet</class>
    <class kind="class">mirtk::RegisteredSurface</class>
    <class kind="class">mirtk::RegistrationEnergy</class>
    <class kind="class">mirtk::RegistrationEnergyParser</class>
    <class kind="class">mirtk::RegistrationFilter</class>
    <class kind="class">mirtk::RepeatExtrapolateImageFunction</class>
    <class kind="class">mirtk::RepulsiveForce</class>
    <class kind="class">mirtk::Resampling</class>
    <class kind="class">mirtk::ResamplingWithPadding</class>
    <class kind="class">mirtk::RigidTransformation</class>
    <class kind="class">mirtk::RobustClosestPoint</class>
    <class kind="class">mirtk::RobustPointMatch</class>
    <class kind="class">mirtk::ScalarFunction</class>
    <class kind="class">mirtk::ScalarFunctionToImage</class>
    <class kind="class">mirtk::ScalarGaussian</class>
    <class kind="class">mirtk::ScalingAndSquaring</class>
    <class kind="struct">mirtk::SenaryForEachVoxelBody</class>
    <class kind="struct">mirtk::SenaryForEachVoxelBody_1Const</class>
    <class kind="struct">mirtk::SenaryForEachVoxelBody_2Const</class>
    <class kind="struct">mirtk::SenaryForEachVoxelBody_3Const</class>
    <class kind="struct">mirtk::SenaryForEachVoxelBody_4Const</class>
    <class kind="struct">mirtk::SenaryForEachVoxelBody_5Const</class>
    <class kind="struct">mirtk::SenaryForEachVoxelBody_Const</class>
    <class kind="struct">mirtk::SenaryForEachVoxelIfBody</class>
    <class kind="struct">mirtk::SenaryForEachVoxelIfBody_1Const</class>
    <class kind="struct">mirtk::SenaryForEachVoxelIfBody_2Const</class>
    <class kind="struct">mirtk::SenaryForEachVoxelIfBody_3Const</class>
    <class kind="struct">mirtk::SenaryForEachVoxelIfBody_4Const</class>
    <class kind="struct">mirtk::SenaryForEachVoxelIfBody_5Const</class>
    <class kind="struct">mirtk::SenaryForEachVoxelIfBody_Const</class>
    <class kind="struct">mirtk::SeptenaryForEachVoxelBody</class>
    <class kind="struct">mirtk::SeptenaryForEachVoxelBody_1Const</class>
    <class kind="struct">mirtk::SeptenaryForEachVoxelBody_2Const</class>
    <class kind="struct">mirtk::SeptenaryForEachVoxelBody_3Const</class>
    <class kind="struct">mirtk::SeptenaryForEachVoxelBody_4Const</class>
    <class kind="struct">mirtk::SeptenaryForEachVoxelBody_5Const</class>
    <class kind="struct">mirtk::SeptenaryForEachVoxelBody_6Const</class>
    <class kind="struct">mirtk::SeptenaryForEachVoxelBody_Const</class>
    <class kind="struct">mirtk::SeptenaryForEachVoxelIfBody</class>
    <class kind="struct">mirtk::SeptenaryForEachVoxelIfBody_1Const</class>
    <class kind="struct">mirtk::SeptenaryForEachVoxelIfBody_2Const</class>
    <class kind="struct">mirtk::SeptenaryForEachVoxelIfBody_3Const</class>
    <class kind="struct">mirtk::SeptenaryForEachVoxelIfBody_4Const</class>
    <class kind="struct">mirtk::SeptenaryForEachVoxelIfBody_5Const</class>
    <class kind="struct">mirtk::SeptenaryForEachVoxelIfBody_6Const</class>
    <class kind="struct">mirtk::SeptenaryForEachVoxelIfBody_Const</class>
    <class kind="class">mirtk::ShapeBasedInterpolateImageFunction</class>
    <class kind="class">mirtk::SimilarityTransformation</class>
    <class kind="class">mirtk::Sinc</class>
    <class kind="class">mirtk::SincInterpolateImageFunction</class>
    <class kind="class">mirtk::SincInterpolateImageFunction2D</class>
    <class kind="class">mirtk::SincInterpolateImageFunction3D</class>
    <class kind="class">mirtk::SincInterpolateImageFunction4D</class>
    <class kind="class">mirtk::SmoothnessConstraint</class>
    <class kind="class">mirtk::SortIndicesOfArray</class>
    <class kind="class">mirtk::SparsityConstraint</class>
    <class kind="class">mirtk::SpectralMatch</class>
    <class kind="struct">mirtk::split</class>
    <class kind="class">mirtk::SpringForce</class>
    <class kind="class">mirtk::SquaredErrorFunction</class>
    <class kind="class">mirtk::StoppingCriterion</class>
    <class kind="class">mirtk::StretchingForce</class>
    <class kind="class">mirtk::SumOfSquaredIntensityDifferences</class>
    <class kind="class">mirtk::SurfaceCollisions</class>
    <class kind="class">mirtk::SurfaceConstraint</class>
    <class kind="class">mirtk::SurfaceDistance</class>
    <class kind="class">mirtk::SurfaceForce</class>
    <class kind="class">mirtk::task_scheduler_init</class>
    <class kind="struct">mirtk::TernaryForEachVoxelBody</class>
    <class kind="struct">mirtk::TernaryForEachVoxelBody_1Const</class>
    <class kind="struct">mirtk::TernaryForEachVoxelBody_2Const</class>
    <class kind="struct">mirtk::TernaryForEachVoxelBody_Const</class>
    <class kind="struct">mirtk::TernaryForEachVoxelIfBody</class>
    <class kind="struct">mirtk::TernaryForEachVoxelIfBody_1Const</class>
    <class kind="struct">mirtk::TernaryForEachVoxelIfBody_2Const</class>
    <class kind="struct">mirtk::TernaryForEachVoxelIfBody_Const</class>
    <class kind="class">mirtk::TetrahedralVolumeParameterizer</class>
    <class kind="class">mirtk::TopologyPreservationConstraint</class>
    <class kind="class">mirtk::Transformation</class>
    <class kind="class">mirtk::TransformationApproximationError</class>
    <class kind="class">mirtk::TransformationConstraint</class>
    <class kind="class">mirtk::TransformationJacobian</class>
    <class kind="class">mirtk::Triangle</class>
    <class kind="struct">mirtk::UnaryForEachVoxelBody</class>
    <class kind="struct">mirtk::UnaryForEachVoxelBody_Const</class>
    <class kind="struct">mirtk::UnaryForEachVoxelIfBody</class>
    <class kind="struct">mirtk::UnaryForEachVoxelIfBody_Const</class>
    <class kind="class">mirtk::Vector</class>
    <class kind="class">mirtk::Vector3</class>
    <class kind="struct">mirtk::Vector3D</class>
    <class kind="struct">mirtk::Vector4D</class>
    <class kind="class">mirtk::VelocityToDisplacementField</class>
    <class kind="class">mirtk::VelocityToDisplacementFieldEuler</class>
    <class kind="class">mirtk::VelocityToDisplacementFieldSS</class>
    <class kind="class">mirtk::Version</class>
    <class kind="class">mirtk::VolumeParameterizer</class>
    <class kind="class">mirtk::VolumePreservationConstraint</class>
    <class kind="class">mirtk::VolumetricMap</class>
    <class kind="struct">mirtk::VoxelCaster</class>
    <class kind="struct">mirtk::VoxelFunction</class>
    <class kind="struct">mirtk::VoxelReduction</class>
    <member kind="typedef">
      <type>GenericImage&lt; BinaryPixel &gt;</type>
      <name>BinaryImage</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aa836e931b727773686e0dd5b09638c76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BaseImage</type>
      <name>Image</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>acb3e01a589bce21ee672665c17828e37</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Array&lt; Pair&lt; string, string &gt; &gt;</type>
      <name>ParameterList</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a848997e3f86ef7bba3c6710a54443bc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericSparseMatrix&lt; float &gt;</type>
      <name>SparseFloatMatrix</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>afac9f28d70d56d6268c7805e65b732bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SparseDoubleMatrix</type>
      <name>SparseMatrix</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a2d986cc22bb65aaf119b91a8abbc42d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericImage&lt; double &gt;</type>
      <name>WorldCoordsImage</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a93ad56a0441dd1800c5e8f031f5d9a82</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ByteOrder</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a5b39ad8d7c0e81873fd6404f810bfc8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ConnectedComponentsOrdering</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4293d50ea61bb4c2334d9f1b01b1cc3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CC_NoOrdering</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4293d50ea61bb4c2334d9f1b01b1cc3ca238c8e2cfa639946ea8152914e198148</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CC_LargestFirst</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4293d50ea61bb4c2334d9f1b01b1cc3ca625bd539ab5c79e1168bc9d8d0b74068</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CC_SmallestFirst</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4293d50ea61bb4c2334d9f1b01b1cc3ca52e399975a1fb07923fc33a619a7bb7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ConnectivityType</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a3fc6a19e803926d919274359271a0024</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ConstraintMeasure</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a7c4d982e02878dd19acd4ddf782c5b6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CM_Unknown</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a7c4d982e02878dd19acd4ddf782c5b6bae1e4c0214278d1be2acf08d70ef24c54</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CM_VolumePreservation</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a7c4d982e02878dd19acd4ddf782c5b6baaaadaf8a79f84aa47e581d5be9094a41</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CM_TopologyPreservation</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a7c4d982e02878dd19acd4ddf782c5b6bab37a0961aed5912093eb5d670fe328b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CM_Sparsity</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a7c4d982e02878dd19acd4ddf782c5b6ba984cf962aad2ee8917be4d1f95862827</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CM_BendingEnergy</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a7c4d982e02878dd19acd4ddf782c5b6ba2f087f8c20ec331c27f2cb09e7e13c57</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CM_L0Norm</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a7c4d982e02878dd19acd4ddf782c5b6ba3409675d1cf7b6f2d2b7d78c4dc48ee5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CM_L1Norm</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a7c4d982e02878dd19acd4ddf782c5b6ba2508ef4bef9aab6f0cbef8232ba10b81</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CM_L2Norm</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a7c4d982e02878dd19acd4ddf782c5b6ba26b3bfb0226f338962474f52be6f62fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CM_SqLogDetJac</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a7c4d982e02878dd19acd4ddf782c5b6bae23a6c82a5d7f6ba81cd71db28c7177e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CM_MinDetJac</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a7c4d982e02878dd19acd4ddf782c5b6ba3945df3f174efc1fb5b393f24795321a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EnergyMeasure</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EM_Unknown</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956ad8c2e85b8031ebec503d622c29c3cad0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EM_JE</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956a5b37c7b76c6f1fe00f27c760051b6cd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EM_CC</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956a7fab3a70fe207f5de2dfc269eed2387e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EM_MI</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956a6826d419cddb776f5d5bc6560f25f9d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EM_NMI</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956a69e219374a8b901d816117caf8d26dc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EM_SSD</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956a25ae839b581e5831022fc4a1d3041843</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EM_CR_XY</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956ac032ce5eec4a005c338437a56ab49c12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EM_CR_YX</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956a22e7e504a2eabf5481954d4cb8c66142</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EM_LC</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956acaf8c638f7a11a2c5b211409907cdb25</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EM_K</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956a0c5ce666f2070d4e51820714999454b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EM_ML</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956a04d539547505ab78def0ba71dfbd7901</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EM_NGF_COS</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956ab535eaa39d11004c5b8eff1d3782128a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EM_LNCC</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956a8a62b9d15ac5290abeb4f7e8d4b45189</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EM_CoVar</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956aac29d9660ad1a9036404cb784009e9b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EM_PSNR</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956a396494ead7e202875d22acf4cf12fb89</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EM_FRE</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956a23b53a467e96a56483dc59e7931f6f1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EM_CorrespondenceDistance</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956a58343a85e40a0f26087a4c42b47a9b68</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EM_CurrentsDistance</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956aec013289af28c155e624e8e5b2df421e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EM_VarifoldDistance</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956a3560a13866eefc591496bb9ea2cd9ea3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EM_BalloonForce</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956a059e8f2ce0f4a443d5e095f982276425</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EM_ImageEdgeForce</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956a771c95d9f8d3c81f893d8a65d27bcb04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EM_ImplicitSurfaceDistance</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956ac62fd9dca1ddd7c055951c1f48289140</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EM_ImplicitSurfaceSpringForce</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956ac1c1d72329c63f6ea2ce8cc15b47a588</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EM_MetricDistortion</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956aa41c9db937693b3ad98f7915757770a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EM_Stretching</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956a208b2902e2c267992240b435cbb33114</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EM_Curvature</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956a610d57585a3e09294292d69397491812</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EM_QuadraticCurvature</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956a7f7530902f4d1893b5b337c5f5596735</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EM_NonSelfIntersection</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956a64de3a9dde383eeff2dd17f46b9158b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EM_RepulsiveForce</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956aa92bb6047d8d909b153f73db37db6a1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EM_InflationForce</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956ad3cb6189c82f5ca877867c4065f15847</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EM_SpringForce</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956afd0f75012767d4c51e1060ea0fc2aff3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EM_VolumePreservation</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956afd19f45028f5900d14c3e101dff406e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EM_TopologyPreservation</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956a9f8ada9c78dab202100b6e40f1b38f3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EM_Sparsity</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956af633e501ea3fff4431a7974b776f99e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EM_BendingEnergy</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956a960edd62811e521aa2573ab9dc0e43bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EM_L0Norm</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956a95fbb4223c543b4ed7570d8250d0d649</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EM_L1Norm</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956a95cee12ba3871920511c7280831b259f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EM_L2Norm</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956ac1c54cecd35399b9e2fc481e989dbb5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EM_SqLogDetJac</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956a648c42f00aae941fecde66dbacaf3d3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EM_MinDetJac</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956afd0ed662f3ab33819d83c4a54d344488</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EM_Last</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e2bd5047994f20f19a5cff74da68956ae511fb8b6093c860c4a3d2bb76d7bbe8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Event</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a713bab184e30352ae34d9d6b0605744d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>AnyEvent</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a713bab184e30352ae34d9d6b0605744dae30169c76fd34e8df87b41c4e088bc87</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ModifiedEvent</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a713bab184e30352ae34d9d6b0605744da31bcffb52ea20576f01b7cc4192688ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>StatusEvent</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a713bab184e30352ae34d9d6b0605744da47876da7a63c4f80b254f1bd4d7e299b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LogEvent</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a713bab184e30352ae34d9d6b0605744da48bee63449e1b99d246e1c63f05939e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>InitEvent</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a713bab184e30352ae34d9d6b0605744da4251e3f156cc4fd25e03e2c2d340e1c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>StartEvent</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a713bab184e30352ae34d9d6b0605744dabe6d89095930a04bc023eea0155b4118</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RestartEvent</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a713bab184e30352ae34d9d6b0605744dabed529d52634a6f44aeb8338e2a9ab03</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EndEvent</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a713bab184e30352ae34d9d6b0605744da0374c98bf7f6add85913f8767b5c1ca1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FinishEvent</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a713bab184e30352ae34d9d6b0605744da97c9555fe64e302e952d4c160adcd25b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IterationEvent</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a713bab184e30352ae34d9d6b0605744da6c1ec58ad41cfe94c6befa5c34250321</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IterationStartEvent</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a713bab184e30352ae34d9d6b0605744da20e8b4d32469aaba8173cedceef90488</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IterationEndEvent</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a713bab184e30352ae34d9d6b0605744da8f294ed0fbe1d95cb89e930650daa183</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RegisteredEvent</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a713bab184e30352ae34d9d6b0605744da52c880aa59ea5069a8507aedbcd9ccae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UnregisteredEvent</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a713bab184e30352ae34d9d6b0605744dabdc566b5956dbadc3308b036f7118fdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LineSearchStartEvent</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a713bab184e30352ae34d9d6b0605744da12c38836553620c4853706af9bfb640a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LineSearchIterationStartEvent</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a713bab184e30352ae34d9d6b0605744da17f476f00fa4924f1058caa36877ef96</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LineSearchIterationEndEvent</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a713bab184e30352ae34d9d6b0605744daa3c5b98229069435ef836ed60dfbe790</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LineSearchEndEvent</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a713bab184e30352ae34d9d6b0605744da6473aff5301a69fcfb6be97a71bf4b3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>AcceptedStepEvent</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a713bab184e30352ae34d9d6b0605744da1e1fe37b0175aaab3896209a318429bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RejectedStepEvent</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a713bab184e30352ae34d9d6b0605744dac85b7eb9574f72abbd68bb61f7be024d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ExtensionMode</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a2704664f6231b7a59b70d394be8a8793</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EXT_Default</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a2704664f6231b7a59b70d394be8a8793a17656072676b79166b9260cf978bd052</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EXT_None</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a2704664f6231b7a59b70d394be8a8793a6cb63c7f745772c8ea2c10f9c6e3744b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EXT_Last</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a2704664f6231b7a59b70d394be8a8793a48f19d9bc3d70205f9d3e0c5419a820c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EXT_LastWithGz</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a2704664f6231b7a59b70d394be8a8793adaa28a34886334e179319e6e829bcd59</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EXT_LastWithoutGz</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a2704664f6231b7a59b70d394be8a8793aa70c15e7031d9853498d6a51e4dfb2a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EXT_All</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a2704664f6231b7a59b70d394be8a8793ae55071ca432cfd52c0abd8b77d7c4b15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ExternalForceTerm</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a60301de4a6d4132b8ae7b75f1fe598d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ExtrapolationMode</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a70f62923b58ec4f0cf97fd1e73d0f559</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FFDIntegrationMethod</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a6a20dd72b648fc59ae96318eb035c807</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ImageDataType</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a1ab37eede52625f9221fbb79718e4f9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>InterpolationMode</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a63e1e9bae6e2b2f880144c9f79298688</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>LineSearchStrategy</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>adc597c45dc4cd5cb52b4df315e5febfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LS_None</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>adc597c45dc4cd5cb52b4df315e5febfba3153f6d20ffabaa60a7497fd294a1173</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LS_Adaptive</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>adc597c45dc4cd5cb52b4df315e5febfba08006e745f8241a31232e2133ccdbe87</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LS_Brent</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>adc597c45dc4cd5cb52b4df315e5febfbaa2f284b0390883fac185d5b5c521454b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LS_LinMin</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>adc597c45dc4cd5cb52b4df315e5febfba20b3b0b0490830090a9aa46759d54da6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MFFDMode</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abf0e33abb6d74b96a650b4097484b1c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MFFD_Default</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abf0e33abb6d74b96a650b4097484b1c3affdb53d021957d9098561eed568c882c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MFFD_None</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abf0e33abb6d74b96a650b4097484b1c3a605657e56612de6532d9922cb2f28f52</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MFFD_Sum</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abf0e33abb6d74b96a650b4097484b1c3a04ace853cd7676e8a7a7b378ab42fd7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MFFD_Fluid</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abf0e33abb6d74b96a650b4097484b1c3a427cf25687e9ee561df5f8948be51efc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MFFD_LogSum</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abf0e33abb6d74b96a650b4097484b1c3a71fe3b8a34ac19345b56104dd1bb1d78</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>NiftiDataType</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a188687d2edf551735f5b55cd7aad05a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>NiftiIntent</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4fbc382de23730ab4287f71a78d219cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>NiftiUnits</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8c5e9d64f9b5557cd73de6393bc36780</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NIFTI_UNITS_UNKNOWN</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8c5e9d64f9b5557cd73de6393bc36780a22482900cf184014c11e96d38a294bd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NIFTI_UNITS_METER</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8c5e9d64f9b5557cd73de6393bc36780aec196df60a7273559737ceb9a33a5a6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NIFTI_UNITS_MM</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8c5e9d64f9b5557cd73de6393bc36780a16353a367d048caa6e4c5782464e3d8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NIFTI_UNITS_MICRON</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8c5e9d64f9b5557cd73de6393bc36780ab4c7463fa2e9b691138ee9ab31bae66a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NIFTI_UNITS_SEC</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8c5e9d64f9b5557cd73de6393bc36780a6e484f125f9bde8c62bdf0a19cb89946</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NIFTI_UNITS_MSEC</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8c5e9d64f9b5557cd73de6393bc36780a451e983711253505119fc222e94950f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NIFTI_UNITS_USEC</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8c5e9d64f9b5557cd73de6393bc36780a8abd74730c7dc3b74ab23fc6139892c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NIFTI_UNITS_HZ</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8c5e9d64f9b5557cd73de6393bc36780a76edb4f885813de857fbbb2918bcf167</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NIFTI_UNITS_PPM</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8c5e9d64f9b5557cd73de6393bc36780a68fb24f3948d1fa9c7e7fc156bc1ae1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NIFTI_UNITS_RADS</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8c5e9d64f9b5557cd73de6393bc36780a36dcfb375893a6bd4f292de5444bbd02</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>NiftiXForm</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a879095e0a9b483f59b131e0763a4fb6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NIFTI_XFORM_UNKNOWN</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a879095e0a9b483f59b131e0763a4fb6baa3a38011b9223aa0949da95b4f5f7992</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NIFTI_XFORM_SCANNER_ANAT</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a879095e0a9b483f59b131e0763a4fb6baf552ade5e042f9526b2fa4ae3afb830e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NIFTI_XFORM_ALIGNED_ANAT</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a879095e0a9b483f59b131e0763a4fb6ba3271060de712f87a856706081858f776</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NIFTI_XFORM_TALAIRACH</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a879095e0a9b483f59b131e0763a4fb6ba92573af157ffc92793dd01e93ccae18b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NIFTI_XFORM_MNI_152</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a879095e0a9b483f59b131e0763a4fb6ba308e4d5320a4ebb36fd465e6b97d1364</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>OptimizationMethod</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad7cfacc210f05c4919d86f26070cbe55</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>OM_EulerMethod</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad7cfacc210f05c4919d86f26070cbe55a7d9179cea99b1edf59bd33f33b7aded1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>OM_EulerMethodWithDamping</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad7cfacc210f05c4919d86f26070cbe55a6b9daa1060b3c0fd204d22f9a4fe258f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>OM_EulerMethodWithMomentum</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad7cfacc210f05c4919d86f26070cbe55a2272e71291e0df29e7df2ea3f662c9d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>PointSetDistanceMeasure</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a11a85e3e94bf7593e22953b6e280dc6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SimilarityMeasure</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8a3fdd3fa82e85389d822fffd7294d5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SIM_Unknown</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8a3fdd3fa82e85389d822fffd7294d5baac0a8609ca085ee88c5dabef367011b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SIM_JE</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8a3fdd3fa82e85389d822fffd7294d5ba24f96dc61ba1a69f5e235e1c9e14996b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SIM_CC</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8a3fdd3fa82e85389d822fffd7294d5badcc266d58fc5c857cb91c0a76276f298</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SIM_MI</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8a3fdd3fa82e85389d822fffd7294d5babf17be98e3a496074e4365d38619b65e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SIM_NMI</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8a3fdd3fa82e85389d822fffd7294d5ba0426fc5835f1dfb44e2976c868c7ae17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SIM_SSD</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8a3fdd3fa82e85389d822fffd7294d5bafa5d1dd790e51cdafe421a2d6590b46f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SIM_CR_XY</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8a3fdd3fa82e85389d822fffd7294d5baa2e200ad52e2b99c70a8c4522d83762b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SIM_CR_YX</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8a3fdd3fa82e85389d822fffd7294d5ba51551cf7b7dc4f19be8b3e6bfe0cbc3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SIM_LC</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8a3fdd3fa82e85389d822fffd7294d5babca4aa77a3bc527449a792312035b695</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SIM_K</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8a3fdd3fa82e85389d822fffd7294d5ba3939356ceea7aa2e5254b92f85158e87</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SIM_ML</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8a3fdd3fa82e85389d822fffd7294d5ba63ac9469bb68f898694e69437996eb16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SIM_NGF_COS</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8a3fdd3fa82e85389d822fffd7294d5bacea25a05a11e585376a14851b64137e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SIM_LNCC</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8a3fdd3fa82e85389d822fffd7294d5ba841246096d8c3b78b5977edaaa470a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SIM_CoVar</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8a3fdd3fa82e85389d822fffd7294d5ba3f967b65e2df0aafdc2d9fd3248e2745</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SIM_PSNR</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8a3fdd3fa82e85389d822fffd7294d5ba5aa808bb129603fb243c5a0b70748d29</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Status</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aa10389572afbd3b5c5a04cbe3ca4e28a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TransformationModel</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abefe155b619f5a5d01f683184eff1da8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TM_Unknown</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abefe155b619f5a5d01f683184eff1da8a919accd88ff004c782b743f65ea72a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TM_Rigid</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abefe155b619f5a5d01f683184eff1da8aa6cc168cc81966d81f55cc0aea7f8039</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TM_Similarity</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abefe155b619f5a5d01f683184eff1da8a1b34251171d95b2da11c3e82c59c29f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TM_Affine</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abefe155b619f5a5d01f683184eff1da8a4448b6b6999fc9e32dff3fd794ab9ee6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TM_LinearFFD</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abefe155b619f5a5d01f683184eff1da8a388c37aaf665cebae32d4348e5079db3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TM_BSplineFFD</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abefe155b619f5a5d01f683184eff1da8a1302b3ad20d4870b385aa2b8db462a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TM_BSplineStatFFD</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abefe155b619f5a5d01f683184eff1da8acb33b430e4ea17f1d5fc583394055ef4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TM_BSplineSVFFD</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abefe155b619f5a5d01f683184eff1da8af5cffd8f751490509add120600b825d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TM_BSplineTDFFD</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abefe155b619f5a5d01f683184eff1da8af5f018710349f739c75bd15bfe398526</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TM_Last</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abefe155b619f5a5d01f683184eff1da8ad1e4066b1a5fea804eeadf738438d551</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TransformationType</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad3d9459232796db3239cf948a14fc5be</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddPoints</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a057583995035808ded19ec1a0081d822</anchor>
      <arglist>(PointSet &amp;oset, vtkPointSet *iset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AffineParametersToMatrix</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a61a7c43a6dc4fc039e74acf946a42cde</anchor>
      <arglist>(double tx, double ty, double tz, double rx, double ry, double rz, double sx, double sy, double sz, double sxy, double sxz, double syz, Matrix &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>AffineParametersToMatrix</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a527c3ea068cd0f8d36022be1e4126b99</anchor>
      <arglist>(double tx, double ty, double tz, double rx, double ry, double rz, double sx, double sy, double sz, double sxy, double sxz, double syz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AffineParametersToMatrix</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ab4910fe3b0dd5b1f1ce2f9716506c531</anchor>
      <arglist>(double tx, double ty, double tz, double rx, double ry, double rz, double sx, double sy, double sz, Matrix &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>AffineParametersToMatrix</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ac894c51556e796fc8757316fd5a1f8fd</anchor>
      <arglist>(double tx, double ty, double tz, double rx, double ry, double rz, double sx, double sy, double sz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Allocate</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a444fe36930fce1e7aa3d5209491fde5d</anchor>
      <arglist>(Type *&amp;matrix, int n)</arglist>
    </member>
    <member kind="function">
      <type>Type *</type>
      <name>Allocate</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a5db0f794e8ab2e55cf064f7411f20074</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Allocate</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a81c44ce2c47c1168186dbcafa80eee65</anchor>
      <arglist>(Type **&amp;matrix, int x, int y, Type *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>Type **</type>
      <name>Allocate</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a377fa73ace0d066a1b076ced8827f228</anchor>
      <arglist>(int x, int y, Type *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Allocate</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a0575ba2c2f6a0932e614394f286d635b</anchor>
      <arglist>(Type ***&amp;matrix, int x, int y, int z, Type *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>Type ***</type>
      <name>Allocate</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4daf5c027cdc634edcec4332ff0bea4d</anchor>
      <arglist>(int x, int y, int z, Type *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Allocate</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ac568d6df993ba196ba12e7ec2f018b9a</anchor>
      <arglist>(Type ****&amp;matrix, int x, int y, int z, int t, Type *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>Type ****</type>
      <name>Allocate</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a76b7ca9c802e19386daaf1d2b6c997e5</anchor>
      <arglist>(int x, int y, int z, int t, Type *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>ApproximateAffineMatrix</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a69f18abb0d0bcd06823a0f8365436011</anchor>
      <arglist>(const PointSet &amp;target, const PointSet &amp;source, const Vector &amp;weight)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>ApproximateAffineMatrix</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aa9ae33eb2698e35b66d5f3004d550a6a</anchor>
      <arglist>(const PointSet &amp;target, const PointSet &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Area</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8c9f66ec887f1c95967543c1b1a235cc</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPolyData &gt;, bool per_cell=false)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Area</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8d418f6685b6f38dc768d804e5628883</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPointSet &gt;)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>AverageEdgeLength</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a3becf52bfe74dc5d01624c7202523e35</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPoints &gt;, const EdgeTable &amp;)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>AverageEdgeLength</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aba24ad92b5036a22886eedf209b46e14</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPointSet &gt;)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>AverageInterval</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a3889bb394a84e5b6e34b0818617204eb</anchor>
      <arglist>(const OrderedSet&lt; double &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>BaseName</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a5dce5535e53bf9720ab2d2730b8dd5af</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>BaseName</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a552a887fbf70e5940cacea90a3c34eda</anchor>
      <arglist>(const string &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>BiInvariantMean</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a866e6872555e3c1c30aeb642405e0b78</anchor>
      <arglist>(int n, const Matrix *matrices, const double *weights=NULL, int niter=20, double tol=1e-12, const Matrix *mu0=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CAllocate</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ab16f1bfb30ccabca27c542ccfeba33e4</anchor>
      <arglist>(Type *&amp;matrix, int n, const Type &amp;init=Type())</arglist>
    </member>
    <member kind="function">
      <type>Type *</type>
      <name>CAllocate</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a58e1ff45b44a91b54285a066932431cf</anchor>
      <arglist>(int n, const Type *init=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CAllocate</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a0887d06cceadbd5d1e94973a1d5cac0b</anchor>
      <arglist>(Type **&amp;matrix, int x, int y, const Type &amp;init=Type())</arglist>
    </member>
    <member kind="function">
      <type>Type **</type>
      <name>CAllocate</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aa9bfdbfeb63c6272bc1e3536da648433</anchor>
      <arglist>(int x, int y, const Type *init=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CAllocate</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a38bc3c787775bba49bf06f2d809a73c4</anchor>
      <arglist>(Type ***&amp;matrix, int x, int y, int z, const Type &amp;init=Type())</arglist>
    </member>
    <member kind="function">
      <type>Type ***</type>
      <name>CAllocate</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a0bfd18d44bcaaa0a8ec1868d618c4779</anchor>
      <arglist>(int x, int y, int z, const Type *init=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CAllocate</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a44a8fc468e3fbb246367b250215eded0</anchor>
      <arglist>(Type ****&amp;matrix, int x, int y, int z, int t, const Type &amp;init=Type())</arglist>
    </member>
    <member kind="function">
      <type>Type ****</type>
      <name>CAllocate</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a900b8acb81136e854a6f2e36e5b57621</anchor>
      <arglist>(int x, int y, int z, int t, const Type *init=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Center</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ab23a03fda3c0c64d1315fb78a57f39b5</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPointSet &gt; pointset)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double</type>
      <name>clamp</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a5af098996a18c9e51328150e40e82c06</anchor>
      <arglist>(double f, double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ComputeArea</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a26ccf79c114481db1614c3164e2e6574</anchor>
      <arglist>(vtkCell *cell)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ComputeBSplineIndicesAndWeights</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a006b45b978358e208be519297e55f6b8</anchor>
      <arglist>(double x, double y, int spline_degree, int xIndex[6], int yIndex[6], TReal xWeight[6], TReal yWeight[6])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ComputeBSplineIndicesAndWeights</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ab503817405f1a3f53fc6a2aabe8af1c4</anchor>
      <arglist>(double x, double y, double z, int spline_degree, int xIndex[6], int yIndex[6], int zIndex[6], TReal xWeight[6], TReal yWeight[6], TReal zWeight[6])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ComputeBSplineIndicesAndWeights</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a0aab03f25c55ac386be7ed0dae5e39f9</anchor>
      <arglist>(double x, double y, double z, double t, int spline_degree, int xIndex[6], int yIndex[6], int zIndex[6], int tIndex[6], TReal xWeight[6], TReal yWeight[6], TReal zWeight[6], TReal tWeight[6])</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ComputeTangents</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>af1b99475278aee1d9af1ee098b4a08b1</anchor>
      <arglist>(const double n[3], double e1[3], double e2[3])</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ComputeTangents</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a23f6b1ad2ab81f1eae033433a1bb02ac</anchor>
      <arglist>(const double n[3], double e1[3], double e2[3], double e3[3], double e4[3])</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ComputeVolume</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a944f4d489be4f4704fdbf889d0d3a0ee</anchor>
      <arglist>(vtkCell *cell)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Contains</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>af4ebcca0911aecd89d7e073660aba9bf</anchor>
      <arglist>(const ParameterList &amp;params, string name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ConvertToCubicBSplineCoefficients</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad3d488d89f9e5f5cdedc2a9e906a76f6</anchor>
      <arglist>(GenericImage&lt; TData &gt; &amp;image, int l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ConvertToCubicBSplineCoefficients</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a41138bb88a5642feed9c5418bfdc6822</anchor>
      <arglist>(GenericImage&lt; TData &gt; &amp;image)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ConvertToSplineCoefficients</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a3d07d0d49f8905f5df86c9646e0a1869</anchor>
      <arglist>(int degree, GenericImage&lt; TData &gt; &amp;image, int k, int l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ConvertToSplineCoefficients</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4b721dbee2da950dadf38e5e361c69ee</anchor>
      <arglist>(int degree, GenericImage&lt; TData &gt; &amp;image, int l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ConvertToSplineCoefficients</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a25b83f336cbefd9e9c193cb4edb5fec3</anchor>
      <arglist>(int degree, GenericImage&lt; TData &gt; &amp;image)</arglist>
    </member>
    <member kind="function">
      <type>vtkSmartPointer&lt; vtkPolyData &gt;</type>
      <name>ConvexHull</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aeef1f9aab3adf744fb2c96d9647825d3</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPointSet &gt; pointset, int levels=3)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>coplanar_tri_tri</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8e789071ebe9b5373c9ceadaf532aa39</anchor>
      <arglist>(const double N[3], const double V0[3], const double V1[3], const double V2[3], const double U0[3], const double U1[3], const double U2[3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CROSS</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a3df29222c7fd2fc687dcc3c7689d0863</anchor>
      <arglist>(double *dest, const double *v1, const double *v2)</arglist>
    </member>
    <member kind="function">
      <type>const Version</type>
      <name>current_version</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a5e7ed177956eb71b312ab9655b740315</anchor>
      <arglist>(MIRTK_VERSION_MAJOR, MIRTK_VERSION_MINOR, MIRTK_VERSION_PATCH)</arglist>
    </member>
    <member kind="function">
      <type>vtkSmartPointer&lt; vtkPolyData &gt;</type>
      <name>DataSetSurface</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a1221e53ad67436a37250655d248ac377</anchor>
      <arglist>(vtkSmartPointer&lt; vtkDataSet &gt; dataset, bool passPtIds=false, bool passCellIds=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deallocate</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a340f01b80944efd3c7bf1560dc6bce53</anchor>
      <arglist>(Type *&amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deallocate</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad384fd8eba5b1aff5daab55295a50c52</anchor>
      <arglist>(Type **&amp;matrix, void *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deallocate</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ace7b6ac0810c3e458e8d1f1829dbaf44</anchor>
      <arglist>(Type ***&amp;matrix, void *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Deallocate</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ae348749d45886c0e67e12ae0aa66e287</anchor>
      <arglist>(Type ****&amp;matrix, void *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>DeepCopyArrayUsingCaseInsensitiveName</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a56a09ad1bee1b34ede4de9c466656cc3</anchor>
      <arglist>(vtkDataSetAttributes *dst, vtkDataSetAttributes *src, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>DefaultExtension</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad029b83544de9ea1731e47618be74f2d</anchor>
      <arglist>(vtkDataSet *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Delete</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ab8ae4f7ebf28fc02b4c9c679f5f1046b</anchor>
      <arglist>(Type *&amp;p)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>Directory</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>afde828b6bae62d7d96fa64a0c9384f85</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>Directory</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a10ddd69b44f9ebd42138fa9098c66539</anchor>
      <arglist>(const string &amp;)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>DOT</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad5e8e2356be5dab91d9f54f6e2c2558b</anchor>
      <arglist>(const double *v1, const double *v2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EdgeLengthNormalDistribution</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>af6f345794b1c1e193413256ae73910c0</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPoints &gt; points, const EdgeTable &amp;edgeTable, double &amp;mean, double &amp;sigma)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EdgeLengthNormalDistribution</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a816298eb5136922ce007a31304fbae3b</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPointSet &gt; pointset, double &amp;mean, double &amp;sigma)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>EdgeLengthToTriangleArea</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a226ea2b74f7a24252020086cdb004052</anchor>
      <arglist>(double l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Exp</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ac80869fbeb8e2266abdf0ff1e0c9a17f</anchor>
      <arglist>(GenericImage&lt; VoxelType &gt; *v)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>Extension</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a54eb41b68dd9051dd04382caaf7a3b23</anchor>
      <arglist>(const char *, ExtensionMode=EXT_Default)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>Extension</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aa634658817d960d03765334f0fef9899</anchor>
      <arglist>(const string &amp;, ExtensionMode=EXT_Default)</arglist>
    </member>
    <member kind="function">
      <type>ExtrapolationMode</type>
      <name>ExtrapolationWithoutPeriodicTime</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aad3002f9c5475f40284f0399b8425dc3</anchor>
      <arglist>(ExtrapolationMode m)</arglist>
    </member>
    <member kind="function">
      <type>ExtrapolationMode</type>
      <name>ExtrapolationWithPeriodicTime</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aab27ddf6f9357132e656071153a7c5a8</anchor>
      <arglist>(ExtrapolationMode m)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double</type>
      <name>fdec</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a0affe2ea3027921dfb48716a0ba85385</anchor>
      <arglist>(double f)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double</type>
      <name>fdec</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8ae314aa7c045d252d41367dc6285871</anchor>
      <arglist>(double f, double df)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>fequal</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a9aa05542de33467bfcb4b70b915f35c2</anchor>
      <arglist>(double a, double b, double tol=1e-12)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>FileName</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>acad6eb16a95cb36de69d3693c07530f1</anchor>
      <arglist>(const char *, ExtensionMode=EXT_Default)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>FileName</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a754123fcc35602fc3eb4d185d0f5a782</anchor>
      <arglist>(const string &amp;, ExtensionMode=EXT_Default)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double</type>
      <name>finc</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a602f66e1da642f1133ea048f58f8d65d</anchor>
      <arglist>(double f)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double</type>
      <name>finc</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a5a5acd44484f22247dd531917ea97a39</anchor>
      <arglist>(double f, double df)</arglist>
    </member>
    <member kind="function">
      <type>ParameterConstIterator</type>
      <name>Find</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a88929117c1d2059cb24912aeedb6180c</anchor>
      <arglist>(const ParameterList &amp;params, string name)</arglist>
    </member>
    <member kind="function">
      <type>ParameterIterator</type>
      <name>Find</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8378f78686f59e0ec447839ab1c061e0</anchor>
      <arglist>(ParameterList &amp;params, string name)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>FrechetMean</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a935e9621a096aca5f3218851bb4d1f39</anchor>
      <arglist>(const Matrix *matrices, const double *weights, int n, int niter=20, double tol=1e-12, const Matrix *mu0=NULL)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>FrechetMean</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aa586deb3e2dc7882e301c6d2e1bb14f0</anchor>
      <arglist>(const Matrix *matrices, int n, int niter=20, double tol=1e-12, const Matrix *mu0=NULL)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FromString</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>af102159dd00c4cb19fcbee422a489317</anchor>
      <arglist>(const char *str, FFDIM &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FromString</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aa70463d0b4c54c1b022da9290a3cf5ab</anchor>
      <arglist>(const char *str, vtkDataSetAttributes::AttributeTypes &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FromString</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>afc6a5cbee19b29433109c4fa2206253a</anchor>
      <arglist>(const char *str, NiftiIntent &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FromString</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aa0def16073f0cd7d327a162d5d58902d</anchor>
      <arglist>(const char *str, T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FromString</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a261feb95431d7c42f78e0abe7e2196b2</anchor>
      <arglist>(const char *, ImageDataType &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FromString</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ac71973ebbfdc89b88066390481a127e2</anchor>
      <arglist>(const string &amp;s, T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FromString</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ae6f68f2687b58f1b3512dde80a3b26a7</anchor>
      <arglist>(const char *str, bool &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FromString</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a50b3edfa62de23d7885fe956838a74c5</anchor>
      <arglist>(const char *str, ConnectivityType &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FromString</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a1f71d548a567b069f18a699ee30d7772</anchor>
      <arglist>(const char *str, ConnectedComponentsOrdering &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FromString</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a94592e0b64baf47d46245862a6ec4109</anchor>
      <arglist>(const char *, NiftiUnits &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FromString</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8ae60142c8e21261ea7a5815d9534f50</anchor>
      <arglist>(const char *str, float &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FromString</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abb54455bd80ba87112f2f687b7103d3e</anchor>
      <arglist>(const char *str, double &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FromString</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8fdce1dd5b7e2b3bc83f16c076b7d911</anchor>
      <arglist>(const char *str, enum ImplicitSurfaceForce::DistanceMeasureType &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FromString</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a9c5f4eee79e149dce86ba7e1428365ad</anchor>
      <arglist>(const char *str, EnergyMeasure &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>Get</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aef1a8531ca4d4ea90f491dd76173eecd</anchor>
      <arglist>(const ParameterList &amp;params, string name)</arglist>
    </member>
    <member kind="function">
      <type>vtkDataArray *</type>
      <name>GetArrayByCaseInsensitiveName</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a203239f619f484ac6089de4332b724a0</anchor>
      <arglist>(vtkDataSetAttributes *data, const char *name, int *loc=NULL)</arglist>
    </member>
    <member kind="function">
      <type>ByteOrder</type>
      <name>GetByteOrder</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aec020b56f4f93279e56465995307d82c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>GetDate</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad540b2ff8a92672844919e5d0e03dd20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>GetDateTime</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a0a12e3cd69ddee952cd22868ce0736ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMaxEdgeLength</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aa96a24c6ac21614248fccb34fe6f523d</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPoints &gt; points, const EdgeTable &amp;edgeTable, double &amp;min, double &amp;max)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMaxEdgeLength</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ac8afc25c68c16bbdecf3db0b93f66e35</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPointSet &gt; pointset, double &amp;min, double &amp;max)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>GetTime</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aa065e14698799a8c4d2feccdcd2065c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>GetUser</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a67088fa867fe1f2592a77d3727b79839</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetVolume</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aa887b4b6d1d54ba28e0502db63176e52</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPolyData &gt;)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API int</type>
      <name>iceil</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>adc98949c8f20db3375234f40254ffb61</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>iequal</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ac7e25215938e6a4927486e760bdc856a</anchor>
      <arglist>(char const *a, char const *b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>iequal</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abb98a7cf4dd8722b76ce002d30077a9e</anchor>
      <arglist>(const string &amp;a, char const *b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>iequal</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>acbed7cee8effb47d1f09c1fd504bee93</anchor>
      <arglist>(const char *a, const string &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>iequal</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>add58e1c2a836f33955b80bf6c06918db</anchor>
      <arglist>(const string &amp;a, const string &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API int</type>
      <name>ifloor</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a7134a61ee2e262f157ec53f38652867c</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function">
      <type>vtkSmartPointer&lt; vtkImageStencilData &gt;</type>
      <name>ImageStencil</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a857e04d270e0899b3c417785a42e145c</anchor>
      <arglist>(vtkSmartPointer&lt; vtkImageData &gt; image, vtkSmartPointer&lt; vtkPointSet &gt; pointset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ImageStencilToMask</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a444dae7aa6545c28cc3d36d993e41f63</anchor>
      <arglist>(vtkSmartPointer&lt; vtkImageStencilData &gt; stencil, vtkSmartPointer&lt; vtkImageData &gt; image)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitializeDeformableLibrary</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a40b87479224005c06a98d432da6a5256</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitializeIOLibrary</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a2b30b8b61d194780b2da7749f8372dfe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitializeNumericsLibrary</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ae1b75165ab2a96a24fda838a7ce79d28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitializeRegistrationLibrary</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a861e6d0d0ee567716d130cd3b841c31d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitializeTransformationLibrary</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abff7cfcf541c1610aa0ee9c17b268dec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ParameterList &amp;</type>
      <name>Insert</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a0497f61235ef3e8891d939f3f4077a59</anchor>
      <arglist>(ParameterList &amp;params, string name, T value)</arglist>
    </member>
    <member kind="function">
      <type>ParameterList &amp;</type>
      <name>Insert</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a0326ea338b571ad83619529ca8fb6a11</anchor>
      <arglist>(ParameterList &amp;params, string name, const char *value)</arglist>
    </member>
    <member kind="function">
      <type>ParameterList &amp;</type>
      <name>Insert</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a2e7228e43b39868f3b7f034debed5ee2</anchor>
      <arglist>(ParameterList &amp;params, string name, string value)</arglist>
    </member>
    <member kind="function">
      <type>ParameterList &amp;</type>
      <name>Insert</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a7abd6b19db81763d91e80812559b8e40</anchor>
      <arglist>(ParameterList &amp;params, const ParameterList &amp;other, const char *prefix=NULL)</arglist>
    </member>
    <member kind="function">
      <type>InterpolationMode</type>
      <name>InterpolationWithoutPadding</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a928fb9b6524235aa218d049ea902d03f</anchor>
      <arglist>(InterpolationMode m)</arglist>
    </member>
    <member kind="function">
      <type>InterpolationMode</type>
      <name>InterpolationWithPadding</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a172f734b34bdeaf8fcf8400501f41739</anchor>
      <arglist>(InterpolationMode m)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API int</type>
      <name>iround</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ac6a1c5e34a7257f9dafbfb9522c17196</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsDiffeo</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>af3ed9a369f20c9e47cf30497f277b156</anchor>
      <arglist>(TransformationModel model)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsDiffeo</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a6c0675b2f69426e1e9b8c9bda752c0c5</anchor>
      <arglist>(const Array&lt; TransformationModel &gt; &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>IsInf</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a1299870a7500158959c18adff438e65a</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsLinear</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a969a597b7a1778acd3fbdb7a98cc161a</anchor>
      <arglist>(TransformationModel model)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsLinear</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a2f526694bcef909e76fc6286f61a1ca7</anchor>
      <arglist>(const Array&lt; TransformationModel &gt; &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsLinearFFD</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a3c4aaa2e927f035a7f2c558fa1064b55</anchor>
      <arglist>(TransformationModel model)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsLinearFFD</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a3f2cc10d1f6decb5cb59dc4e73172d5a</anchor>
      <arglist>(const Array&lt; TransformationModel &gt; &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>IsNaN</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a477e030d5bf8e31d87b9c32954c5ecbd</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsNonLinear</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a9407a19558a5b3edfccb8980085ee1ef</anchor>
      <arglist>(const Array&lt; TransformationModel &gt; &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsParallelOption</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a83127aa16ba67b3a33194ca7e2d43946</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsProfilingOption</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aa66aebc91a558e5e1a2aee2db859934a</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSpatioTemporal</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a39cac29b4fb36848a9241f950ddf5247</anchor>
      <arglist>(TransformationModel model)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSpatioTemporal</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a7cf8173e84eab1b34ba8f85023d7890f</anchor>
      <arglist>(const Array&lt; TransformationModel &gt; &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsStandardOption</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a258483b75343d1abc125dccf9d9ea6cc</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSurfaceMesh</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a37b415c502dcb96a41fc2f1ebd606e97</anchor>
      <arglist>(vtkDataSet *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsTerminalOption</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a468fcd55e9348f0afb93285dad21f2ce</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsTetrahedralMesh</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a562a77628d7278aa8242b4fe8f899b0c</anchor>
      <arglist>(vtkDataSet *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsTransformation</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad627eb27a81f80c82c6aacf49bc3df54</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsTriangularMesh</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a1192d4b988a3dfb9125b83bd9df02957</anchor>
      <arglist>(vtkDataSet *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Log</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>afde7af03b0c48677a614eb8b0754fb89</anchor>
      <arglist>(GenericImage&lt; VoxelType &gt; *d)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>LogEuclideanMean</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abf853d479fd73c6c3c715dd55fc9240e</anchor>
      <arglist>(int n, const Matrix *matrices, const double *weights=NULL)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double1</type>
      <name>make_double1</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a23249c963df23e594db3f7eb20fd2d00</anchor>
      <arglist>(float1 f)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double2</type>
      <name>make_double2</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>acfc7a291f3dbca431511f8785344c72b</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double2</type>
      <name>make_double2</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aa8d68df361f99a7e978de47ed6936f9f</anchor>
      <arglist>(float2 f)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double2</type>
      <name>make_double2</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a14e036b6ae589b84d8ebe55ddedc385f</anchor>
      <arglist>(int2 i)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double2</type>
      <name>make_double2</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a0388247c4fbfa4097811b4dc7aa9e43a</anchor>
      <arglist>(uint2 i)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3</type>
      <name>make_double3</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ab84ac556246bf7bde353691fe94fe681</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3</type>
      <name>make_double3</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a07326d5e3fb2576252df7d9d0904de02</anchor>
      <arglist>(int3 i)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3</type>
      <name>make_double3</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>afb6238387b493c081cf2dbfd3b81c19f</anchor>
      <arglist>(uint3 i)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3</type>
      <name>make_double3</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a72150af447857b935cdb1a8146075c43</anchor>
      <arglist>(float3 f)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double4</type>
      <name>make_double4</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a720ab0491a80d53f7b65cdeadc7814cd</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double4</type>
      <name>make_double4</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a5e87d32a378b22495987cb55124e1d29</anchor>
      <arglist>(int4 i)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double4</type>
      <name>make_double4</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a0ce01ecbb5e8a453789f906e00774314</anchor>
      <arglist>(float4 f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MatrixToAffineParameters</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a0c39b4a3d7dcb0498c1ec9db5ee8133d</anchor>
      <arglist>(const Matrix &amp;m, double &amp;tx, double &amp;ty, double &amp;tz, double &amp;rx, double &amp;ry, double &amp;rz, double &amp;sx, double &amp;sy, double &amp;sz, double &amp;sxy, double &amp;sxz, double &amp;syz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MatrixToEulerAngles</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>afd28a39e6002e114736165169b92aa08</anchor>
      <arglist>(const Matrix &amp;m, double &amp;rx, double &amp;ry, double &amp;rz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MatrixToRigidParameters</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ab040cc830a9deeb34a49250bf5658c9d</anchor>
      <arglist>(const Matrix &amp;m, double &amp;tx, double &amp;ty, double &amp;tz, double &amp;rx, double &amp;ry, double &amp;rz)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>MaxEdgeLength</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ab56c59595ac365979b439daec1a6a58f</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPoints &gt; points, const EdgeTable &amp;edgeTable)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>MaxEdgeLength</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a380e9de83b15802f91e82a50c1cfed1a</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPointSet &gt; pointset)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>MedianEdgeLength</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a7143946a7dd62f04dc3a665cdf5ee63e</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPoints &gt;, const EdgeTable &amp;)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>MedianEdgeLength</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aae5b152ed6b6a97f5a8be93adf3f93da</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPointSet &gt;)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>MinEdgeLength</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a2e49d9a17950178b90496c486e976e69</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPoints &gt; points, const EdgeTable &amp;edgeTable)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>MinEdgeLength</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a628471f966b1a6f11677beed3630c604</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPointSet &gt; pointset)</arglist>
    </member>
    <member kind="function">
      <type>BaseType *</type>
      <name>New</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ae4811d863d871e4e90ea63aaea76ebd6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>vtkSmartPointer&lt; vtkDataArray &gt;</type>
      <name>NewVTKDataArray</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a42dcfe20ec8048af437b2acfb6779346</anchor>
      <arglist>(int vtkType)</arglist>
    </member>
    <member kind="function">
      <type>vtkSmartPointer&lt; vtkImageData &gt;</type>
      <name>NewVtkMask</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abb7887ee5e3a80ea25bc5ea7b1a12b63</anchor>
      <arglist>(int nx, int ny, int nz)</arglist>
    </member>
    <member kind="function">
      <type>TransformationJacobian</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ae5720b8032c25a39e9cbbd27ffb0e7ce</anchor>
      <arglist>(TransformationJacobian &amp;a, double s)</arglist>
    </member>
    <member kind="function">
      <type>TransformationJacobian</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>af6d4cdbfd8b486671323e109ee0ef8bf</anchor>
      <arglist>(double s, TransformationJacobian &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>TransformationJacobian</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>acdbe0b251c7225d41ff880953f6cdf87</anchor>
      <arglist>(Matrix &amp;a, TransformationJacobian &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API uint3</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad9a51ee71d79cd30cd4aabffb444d405</anchor>
      <arglist>(uint3 idx, dim3 dim)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API uint3</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>af4da357c15addbcbfae91f8bcfdf65ba</anchor>
      <arglist>(dim3 dim, uint3 idx)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float1</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a5586b0b9799336709f28b4a84620a3aa</anchor>
      <arglist>(float1 v, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float2x2</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a91ec02f88a7e467cb7dd561cc2aa1a77</anchor>
      <arglist>(float2x2 m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float2x2</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a89187ce7f29a31ea041c34d825e23739</anchor>
      <arglist>(float s, float2x2 m)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float2</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>adc51af767b15ea3fe662ec8df465912a</anchor>
      <arglist>(float2x2 m, float2 p)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float2</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ac9659033e0d02514385177a1427e70a8</anchor>
      <arglist>(float2 p, float2x2 m)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float3x3</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a5d24db84af091e9e370975ec7f9f6453</anchor>
      <arglist>(float3x3 m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float3x3</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a2aeecda4751920df05e468e9ffe3419a</anchor>
      <arglist>(float s, float3x3 m)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float3</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a582709c32f2d7143d94e7a772596563b</anchor>
      <arglist>(float3x3 m, float3 p)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float3</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>add27665fdade1d7cd674180ae8c72978</anchor>
      <arglist>(float3 p, float3x3 m)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float3x4</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8c6908241d957fa61b37f4ac8b1bf83d</anchor>
      <arglist>(float3x4 m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float3x4</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a82bca1c43e1d7d7dbb579698ead1955f</anchor>
      <arglist>(float s, float3x4 m)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float2</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a5b9cd578c553c18dde4253a8bf7db1fe</anchor>
      <arglist>(float3x4 m, float2 p)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float2</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a440bdaa5506dc1fb4ae4811c54a97871</anchor>
      <arglist>(float3x4 m, int2 p)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float2</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a966d19038fc21c202b3e5c07e53438a0</anchor>
      <arglist>(float3x4 m, uint2 p)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float3</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a338727c8819022e2eb8af8638f93bbb4</anchor>
      <arglist>(float3x4 m, float3 p)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float3</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ae690177f445c575099e60c8592a2f786</anchor>
      <arglist>(float3x4 m, int3 p)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float3</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a89d19b2a78103fc4288e72f431e443b9</anchor>
      <arglist>(float3x4 m, uint3 p)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float4x4</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aa91cda2f0c74f7ede810dc1e348069bb</anchor>
      <arglist>(float4x4 m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float4x4</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>adc3ba0dd2f53c43dec3d08db3d98890c</anchor>
      <arglist>(float s, float4x4 m)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float2x2</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a11a4aed4b62def66f67545b062ffe08d</anchor>
      <arglist>(float2x2 m, float2x2 n)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float3x3</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a2ec4060ef51c88103aba278c92652408</anchor>
      <arglist>(float3x3 m, float3x3 n)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double1</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a2dac224a89e9d28ca5d1f3a894db4315</anchor>
      <arglist>(double1 v, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double1</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a5c36443254f44db994001ac69255f839</anchor>
      <arglist>(double s, double1 a)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double2</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4c3a6cd0fec6e9f81a2be0b1035a3769</anchor>
      <arglist>(double2 v, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double2</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>adc8ba7f6a5c5247a3ff218a7ebfd1cbe</anchor>
      <arglist>(double s, double2 a)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a92e0c5d31d687796f3de168bfa408171</anchor>
      <arglist>(double3 v, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a05fb2bbbdacc4244c7609e8ba03f3588</anchor>
      <arglist>(double s, double3 a)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double4</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a9d6c48ab9703018ddac71e481ed6ef3d</anchor>
      <arglist>(double4 v, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double4</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abe92405f6bfbfbc1a51256c49c0d2c5b</anchor>
      <arglist>(double s, double4 a)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double1</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a069949d1d8f2fc87573b726ed2f8f27d</anchor>
      <arglist>(double1 a, double1 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double2</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a56ae95337f69c9b2b2921b8ca6b1e078</anchor>
      <arglist>(double2 a, double2 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a699519795f6149c060cfad150b06942e</anchor>
      <arglist>(double3 a, double3 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double4</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a589827e8c7c81fa5c55c2c2abb10ba5b</anchor>
      <arglist>(double4 a, double4 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double2x2</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4c5bcd70af93491b19425d7dc7041361</anchor>
      <arglist>(double2x2 m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double2x2</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a6a8c994f67a27d55b3b83588b4affbbe</anchor>
      <arglist>(double s, double2x2 m)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double2</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aa40b083e9dc996256f9a23e5666077a6</anchor>
      <arglist>(double2x2 m, double2 p)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double2</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>af67c0ef64f03af87966aca3d74776692</anchor>
      <arglist>(double2 p, double2x2 m)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3x3</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ab786ea1d3546b04c9947646064ad768b</anchor>
      <arglist>(double3x3 m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3x3</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aaf701e9d95c3173094a7be1c4ce8c623</anchor>
      <arglist>(double s, double3x3 m)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>af6a78f985c79ecdeb448f041c12a5835</anchor>
      <arglist>(double3x3 m, double3 p)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4adfd0d4ce9cca58dd1a136b19a45bd9</anchor>
      <arglist>(double3 p, double3x3 m)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3x4</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a04808cc5e9d507cabcfaab212c949830</anchor>
      <arglist>(double3x4 m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3x4</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a53acf66968a6d336ad052533925834b6</anchor>
      <arglist>(double s, double3x4 m)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double4x4</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ac72ab04d1495c681da32ffe0d1eba20b</anchor>
      <arglist>(double4x4 m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double4x4</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a37029870ce165f264614f2a1d82ccc86</anchor>
      <arglist>(double s, double4x4 m)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double2</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad31f20aac9bc416fa5ca5e80c3ee61f5</anchor>
      <arglist>(double3x4 m, double2 p)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double2</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a53bd875edd2162330f4d7f56eb353683</anchor>
      <arglist>(double3x4 m, int2 p)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double2</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a5605a242f3d9ee1cb6760317074e60be</anchor>
      <arglist>(double3x4 m, uint2 p)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a6fcfbd072ead53062960082225580e15</anchor>
      <arglist>(double3x4 m, double3 p)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a04f8c68904cf8460c8d0b3fe3342a7af</anchor>
      <arglist>(double3x4 m, int3 p)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aa68c57a8631cb3950f78fddb2f7ad352</anchor>
      <arglist>(double3x4 m, uint3 p)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double2x2</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ac0b296d274544e12c4fb0f5a898766a9</anchor>
      <arglist>(double2x2 m, double2x2 n)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3x3</type>
      <name>operator*</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aede4450b345751e931db5e3b38474543</anchor>
      <arglist>(double3x3 m, double3x3 n)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator*=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abfa470d919472ad5e9a6bba9f157d5dc</anchor>
      <arglist>(float2x2 &amp;m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator*=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a1bbda64507091c82eb6542d4c2c5c823</anchor>
      <arglist>(float3x3 &amp;m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator*=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abd49ce208c4e4baa5c8746ccbb577841</anchor>
      <arglist>(float3x4 &amp;m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator*=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a0146634b96ce51e3537662d15cf9a059</anchor>
      <arglist>(float4x4 &amp;m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator*=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a063ee5af8b6600886d20e8f7b0da49fa</anchor>
      <arglist>(float2x2 &amp;m, float2x2 n)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator*=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a9b7a37b503f270e981d4978504b64c99</anchor>
      <arglist>(float3x3 &amp;m, float3x3 n)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator*=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ab7ae973964e2a59e558c3bc87fe46b6b</anchor>
      <arglist>(double1 &amp;a, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator*=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>af997f916b684bbd111514f5405df4110</anchor>
      <arglist>(double2 &amp;a, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator*=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4ed1a88a2767bbb854e11d76e34c3410</anchor>
      <arglist>(double3 &amp;a, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator*=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ab5b6179615d410bbd7f15873e889d7bd</anchor>
      <arglist>(double4 &amp;a, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator*=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a1e361399c0a241419e6bfeed405b9abb</anchor>
      <arglist>(double1 &amp;a, double1 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator*=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ada5d873bf0636094cf347777bd186dcc</anchor>
      <arglist>(double2 &amp;a, double2 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator*=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a3315cbfed784065f058a3354dca95221</anchor>
      <arglist>(double3 &amp;a, double3 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator*=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ae39c129e04038c77a10f1af11cba597b</anchor>
      <arglist>(double4 &amp;a, double4 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator*=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ab0dd9ee73b51c87d6fddefb55036e9a8</anchor>
      <arglist>(double2x2 &amp;m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator*=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a1f3c218d9651bc11cc35dff4445b3136</anchor>
      <arglist>(double3x3 &amp;m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator*=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a50fc67228572257eb216109ca220ff54</anchor>
      <arglist>(double3x4 &amp;m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator*=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a33a647e97692de91620cd3443daa648b</anchor>
      <arglist>(double4x4 &amp;m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator*=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aa89edcfbbf593fa87eb871a8140acb1b</anchor>
      <arglist>(double2x2 &amp;m, double2x2 n)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator*=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a016b3424fbab4f82e70726f05f14475f</anchor>
      <arglist>(double3x3 &amp;m, double3x3 n)</arglist>
    </member>
    <member kind="function">
      <type>TransformationJacobian</type>
      <name>operator+</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad59358c6058a76ef82693d6070fb7f85</anchor>
      <arglist>(TransformationJacobian &amp;a, TransformationJacobian &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float1</type>
      <name>operator+</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aa84cb99cc7780f6d7c97b8bc68a5dac3</anchor>
      <arglist>(float1 a, float1 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float2x2</type>
      <name>operator+</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a9125533cc3982ce8ba81eaf299b559e0</anchor>
      <arglist>(float2x2 m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float3x3</type>
      <name>operator+</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a2c950457cff737e323d454c1d92f5a81</anchor>
      <arglist>(float3x3 m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float3x4</type>
      <name>operator+</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aa3471b73ca7e3c31a7f790896496c9f6</anchor>
      <arglist>(float3x4 m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float4x4</type>
      <name>operator+</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ac2a883c66ff11447a5431251b0d9ee82</anchor>
      <arglist>(float4x4 m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float2x2</type>
      <name>operator+</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ac14d35d145c3aeb87c195811bc6e5a61</anchor>
      <arglist>(float2x2 a, float2x2 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float3x3</type>
      <name>operator+</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad974de4de06eb54bdebf117f111f0211</anchor>
      <arglist>(float3x3 a, float3x3 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float3x4</type>
      <name>operator+</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>acbd20c2804ab5a2eeee178bf3e87e52a</anchor>
      <arglist>(float3x4 a, float3x4 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float4x4</type>
      <name>operator+</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a3ea1bfd4c9361b89dc26b630d965d070</anchor>
      <arglist>(float4x4 a, float4x4 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double1</type>
      <name>operator+</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a1e4999cfe9db0bd877fd4be6bf762764</anchor>
      <arglist>(double1 a, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double1</type>
      <name>operator+</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a3cecb11ab568de6888181f028f06033d</anchor>
      <arglist>(double s, double1 a)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double2</type>
      <name>operator+</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a9417655b6761e02c61b10f930e644464</anchor>
      <arglist>(double2 a, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double2</type>
      <name>operator+</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ac66977f04eac123e6649d405b8276aad</anchor>
      <arglist>(double s, double2 a)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3</type>
      <name>operator+</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ae70aa461928723e516cb3ae8f5869a25</anchor>
      <arglist>(double3 a, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3</type>
      <name>operator+</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aa3af360ede4ca49a4d2ac649c1f70f49</anchor>
      <arglist>(double s, double3 a)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double4</type>
      <name>operator+</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8235c829da4bb96f60353bc410c8b303</anchor>
      <arglist>(double4 a, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double4</type>
      <name>operator+</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ab8c5b28b25869452800c49a301002edf</anchor>
      <arglist>(double s, double4 a)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double2x2</type>
      <name>operator+</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8cde1621ad409204530e04e6757866a5</anchor>
      <arglist>(double2x2 m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3x3</type>
      <name>operator+</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>af7ff3a29580bb94fd2297f2b33dd7364</anchor>
      <arglist>(double3x3 m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3x4</type>
      <name>operator+</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a10e5737e519fe322da23d766b0cfe986</anchor>
      <arglist>(double3x4 m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double4x4</type>
      <name>operator+</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad927f1acc21c68973b68ad1b2ba581e5</anchor>
      <arglist>(double4x4 m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double1</type>
      <name>operator+</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a273cf5ef578dcf814714e1d08173a537</anchor>
      <arglist>(double1 a, double1 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double2</type>
      <name>operator+</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a69440c2d219640d990de96b19adb8f24</anchor>
      <arglist>(double2 a, double2 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3</type>
      <name>operator+</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a2b08f4f7b8d12d1d94b0d0fb0f4a1f64</anchor>
      <arglist>(double3 a, double3 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double4</type>
      <name>operator+</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a0ec1272813a9a72931202b2f89a8ae01</anchor>
      <arglist>(double4 a, double4 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double2x2</type>
      <name>operator+</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a123b327311e6d34a11c5e978f60271ee</anchor>
      <arglist>(double2x2 a, double2x2 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3x3</type>
      <name>operator+</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ac4a29b1e45a30a1a22fd301702780c21</anchor>
      <arglist>(double3x3 a, double3x3 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3x4</type>
      <name>operator+</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abf46a78ba364f4591db95263fc54a4ae</anchor>
      <arglist>(double3x4 a, double3x4 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double4x4</type>
      <name>operator+</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a1812ff7e2d1fe59f10e2555b99d95be4</anchor>
      <arglist>(double4x4 a, double4x4 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator+=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>acfd6b63a5a767ee178d22a951ee407c4</anchor>
      <arglist>(float1 &amp;a, float1 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator+=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a53a07e601ba73a5083966e39ab0c4861</anchor>
      <arglist>(float2x2 &amp;m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator+=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a2985ff497d77ef2930260d7fbb23342c</anchor>
      <arglist>(float3x3 &amp;m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator+=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a65468bc9169ee9119dcf27999fad4cff</anchor>
      <arglist>(float3x4 &amp;m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator+=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a1d102b7e02011316eff699c9e359cd82</anchor>
      <arglist>(float4x4 &amp;m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator+=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad7380675f3b97ec92810f2f68d910a5c</anchor>
      <arglist>(float2x2 &amp;a, float2x2 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator+=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ac976a5e3e2c5f3c5000a48e1900a54f8</anchor>
      <arglist>(float3x3 &amp;a, float3x3 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator+=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ab0f02c12275244784289a989010a182e</anchor>
      <arglist>(float3x4 &amp;a, float3x4 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator+=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a7c17f7a67bd9cf9c34664a7daeb464f2</anchor>
      <arglist>(float4x4 &amp;a, float4x4 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator+=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a0d993fc08537674ea43bc412bca0425a</anchor>
      <arglist>(double1 &amp;a, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator+=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad20f96011e2a50700a40bd50d062c130</anchor>
      <arglist>(double2 &amp;a, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator+=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a427787f861155526f1b9dc2646b9c032</anchor>
      <arglist>(double3 &amp;a, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator+=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a6703c3e6226ecaa9cf8f7f782d9e4910</anchor>
      <arglist>(double4 &amp;a, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator+=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a948909a18453709014296f5d93045ebc</anchor>
      <arglist>(double2x2 &amp;m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator+=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a1262192fcc61b71d144511696909e038</anchor>
      <arglist>(double3x3 &amp;m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator+=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a464be621d912058ced3e28514495bf81</anchor>
      <arglist>(double3x4 &amp;m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator+=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a26586592a9b76a61b6220af0e42ce8f5</anchor>
      <arglist>(double4x4 &amp;m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator+=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a45aa4684544799db408ea362a71ca091</anchor>
      <arglist>(double1 &amp;a, double1 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator+=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a14657dac936a129c2e062f886a5afda7</anchor>
      <arglist>(double2 &amp;a, double2 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator+=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a84f5ab6ea963b3b697e45b83783b4896</anchor>
      <arglist>(double3 &amp;a, double3 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator+=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ae594f458a2b6b6bbf8719bfbb80c5831</anchor>
      <arglist>(double4 &amp;a, double4 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator+=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a2a8cda3ae383613857283df0824276fe</anchor>
      <arglist>(double2x2 &amp;a, double2x2 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator+=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aa5a80f2f729f7003647b9e572ba72b3b</anchor>
      <arglist>(double3x3 &amp;a, double3x3 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator+=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a20716c6699a28e9eafc56fcd236ed6b3</anchor>
      <arglist>(double3x4 &amp;a, double3x4 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator+=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8891afdf74ee182e0df4ac63fe3cb8c2</anchor>
      <arglist>(double4x4 &amp;a, double4x4 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float1</type>
      <name>operator-</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a031e5190b53d5adbb6e1949833bf8716</anchor>
      <arglist>(float1 a, float1 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float2x2</type>
      <name>operator-</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a853a56ac09f44bb6a49645bbbcbd835b</anchor>
      <arglist>(float2x2 m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float3x3</type>
      <name>operator-</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8e029ad44f4947410690e43933ff50ce</anchor>
      <arglist>(float3x3 m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float3x4</type>
      <name>operator-</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a6f86de7aee2e72ceb42f20ee2128eaf0</anchor>
      <arglist>(float3x4 m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float4x4</type>
      <name>operator-</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a968c073268207ce9baa6d268f94d628f</anchor>
      <arglist>(float4x4 m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float2x2</type>
      <name>operator-</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aec026fd9e0a2303856608b05b89d4a13</anchor>
      <arglist>(float2x2 a, float2x2 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float3x3</type>
      <name>operator-</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a5fe140f67599998133d0d838961fdade</anchor>
      <arglist>(float3x3 a, float3x3 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float3x4</type>
      <name>operator-</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a1b951020531aa8dcbd5f0d2e53ae43ca</anchor>
      <arglist>(float3x4 a, float3x4 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float4x4</type>
      <name>operator-</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8bc9d80f8cb33351fd67c51c5067b572</anchor>
      <arglist>(float4x4 a, float4x4 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double1</type>
      <name>operator-</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>afcfed6435f53249896a6a3bfc52ef2d3</anchor>
      <arglist>(double1 a, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double1</type>
      <name>operator-</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aa5479b7826c3f67fe921144ab0d5f7bf</anchor>
      <arglist>(double s, double1 a)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double2</type>
      <name>operator-</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a228ebdc05ff0a6253195072b56b274d4</anchor>
      <arglist>(double2 a, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double2</type>
      <name>operator-</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8a4d750a6251681a4a4769298a148e2b</anchor>
      <arglist>(double s, double2 a)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3</type>
      <name>operator-</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>af22b794fded42481f0d91ac4c2b8c3d4</anchor>
      <arglist>(double3 a, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3</type>
      <name>operator-</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aec83e945ba5a45a4824bab5791bec0d2</anchor>
      <arglist>(double s, double3 a)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double4</type>
      <name>operator-</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a15e35bad9086b99752f11e540095e697</anchor>
      <arglist>(double4 a, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double4</type>
      <name>operator-</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a522ff0dc1c23ce08185485e1cda8bd65</anchor>
      <arglist>(double s, double4 a)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double2x2</type>
      <name>operator-</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a3ad4298cb5df4509365b937198c39856</anchor>
      <arglist>(double2x2 m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3x3</type>
      <name>operator-</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4c33c6f0036c475d66c8adbdd2372106</anchor>
      <arglist>(double3x3 m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3x4</type>
      <name>operator-</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a90369f7f487d0347ff7989d2bb397a09</anchor>
      <arglist>(double3x4 m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double4x4</type>
      <name>operator-</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ab4fe5a0f19ae1065741969cab4d5b582</anchor>
      <arglist>(double4x4 m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double1</type>
      <name>operator-</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a664e2f52b3c4c1d8e36c6445e1f0a431</anchor>
      <arglist>(double1 a, double1 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double2</type>
      <name>operator-</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aab8a1625470a143d143255b0c35ed0bc</anchor>
      <arglist>(double2 a, double2 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3</type>
      <name>operator-</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a6cc2a2d9948a488a9dabec7994388cc7</anchor>
      <arglist>(double3 a, double3 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double4</type>
      <name>operator-</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a3371f788291ff183cc0c4613e1eb3476</anchor>
      <arglist>(double4 a, double4 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double2x2</type>
      <name>operator-</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a6dccd3fb1973c3f37704afe389d21b8c</anchor>
      <arglist>(double2x2 a, double2x2 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3x3</type>
      <name>operator-</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aa3abb20835e999616ce591c0ca066304</anchor>
      <arglist>(double3x3 a, double3x3 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3x4</type>
      <name>operator-</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a0e15d6609576b139091fb7688a14453b</anchor>
      <arglist>(double3x4 a, double3x4 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double4x4</type>
      <name>operator-</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a38b03a0d3cff27ee3e9825c217acff8c</anchor>
      <arglist>(double4x4 a, double4x4 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator-=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a7354273b05c47f57a5e6cbf4aa0e2633</anchor>
      <arglist>(float1 &amp;a, float1 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator-=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8dc39dd6905d9d288d5063fc90b257e5</anchor>
      <arglist>(float2x2 &amp;m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator-=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ae8142998b6da63f31d23f1a8c233b5c4</anchor>
      <arglist>(float3x3 &amp;m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator-=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a69c11cda8da05bd768b7ae289af3ba6b</anchor>
      <arglist>(float3x4 &amp;m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator-=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>acca4feb722ecff182448b2f37d845613</anchor>
      <arglist>(float4x4 &amp;m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator-=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a54652f105b1c8f3a6ce7cc3237b54e7e</anchor>
      <arglist>(float2x2 &amp;a, float2x2 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator-=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a9ead9469c8cd4cf7a5a7f9034d69cbbc</anchor>
      <arglist>(float3x3 &amp;a, float3x3 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator-=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>af6c03baca6a2dd11e6725c27a9c820a4</anchor>
      <arglist>(float3x4 &amp;a, float3x4 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator-=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aa849c3a64bc996c9bdfaa7a1dda73c39</anchor>
      <arglist>(float4x4 &amp;a, float4x4 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator-=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a126ea0f70b92e63ba06ce1ded7f9f587</anchor>
      <arglist>(double1 &amp;a, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator-=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a5ce1ce1abca99264b852ec9388f00dd7</anchor>
      <arglist>(double2 &amp;a, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator-=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a60e08723c2e447050c7feb294105a7fa</anchor>
      <arglist>(double3 &amp;a, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator-=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a17b09301d83728817d5b6750a27b3f53</anchor>
      <arglist>(double4 &amp;a, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator-=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ab3bcc5fec56d1667f155cd8d01c0d43e</anchor>
      <arglist>(double2x2 &amp;m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator-=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a131c5bd73be5205f91b771cea74c4ef1</anchor>
      <arglist>(double3x3 &amp;m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator-=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ac3129b0c29f83a91f30b781b425412c2</anchor>
      <arglist>(double3x4 &amp;m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator-=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ac89d2d304ce5a5fb948b39105bc4e884</anchor>
      <arglist>(double4x4 &amp;m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator-=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a1cf0df89a5980c9e6af1029d4b055dc1</anchor>
      <arglist>(double1 &amp;a, double1 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator-=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a5e77952c1d4d8b8d2f080d8899ed0485</anchor>
      <arglist>(double2 &amp;a, double2 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator-=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ae98a43023c76af5464e193a9cb9e316a</anchor>
      <arglist>(double3 &amp;a, double3 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator-=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a6eaac4324860141761b4462c1c8ce6c1</anchor>
      <arglist>(double4 &amp;a, double4 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator-=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad1cfab0b16b7d56768f5065e9c73ebe4</anchor>
      <arglist>(double2x2 &amp;a, double2x2 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator-=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e54d0c1ac0d6ce64438471c1ab091b9</anchor>
      <arglist>(double3x3 &amp;a, double3x3 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator-=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a7395d1318c435dc509c46f7b1876b2ae</anchor>
      <arglist>(double3x4 &amp;a, double3x4 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator-=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a06571be6399e95464fc570a87beed884</anchor>
      <arglist>(double4x4 &amp;a, double4x4 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float2x2</type>
      <name>operator/</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a572947dee4b451ad79b2a756fec25493</anchor>
      <arglist>(float2x2 m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float3x3</type>
      <name>operator/</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>afd378a544bccae60eddc288de2a6a005</anchor>
      <arglist>(float3x3 m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float3x4</type>
      <name>operator/</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a434868ea7a5d8a96bdf599b95adfbc80</anchor>
      <arglist>(float3x4 m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float4x4</type>
      <name>operator/</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>acaba091aca32174476abbb2d2e72ecb0</anchor>
      <arglist>(float4x4 m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double1</type>
      <name>operator/</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a12df71e6f67f94d648d25c30e5a2699a</anchor>
      <arglist>(double1 v, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double2</type>
      <name>operator/</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ac6ca1b3c4f53d7370cf0a57e02227868</anchor>
      <arglist>(double2 v, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3</type>
      <name>operator/</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a494309dea8ebf0a32741c4b013d78797</anchor>
      <arglist>(double3 v, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double4</type>
      <name>operator/</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aee50b0725516c36f7c68acc6a38b0f4d</anchor>
      <arglist>(double4 v, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double2x2</type>
      <name>operator/</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aebbab2e67e29fefd3ad2187ddfb7c91d</anchor>
      <arglist>(double2x2 m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3x3</type>
      <name>operator/</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ac10591c8a4153b1c07690999124b28fd</anchor>
      <arglist>(double3x3 m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3x4</type>
      <name>operator/</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ae0a4bb4864ef46caf59c108a8ad2d66b</anchor>
      <arglist>(double3x4 m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double4x4</type>
      <name>operator/</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ac71ca0a6b5469ab0e7e3d1800a7959af</anchor>
      <arglist>(double4x4 m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double1</type>
      <name>operator/</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ab5f70fd8d4020ea251eea53d950163d3</anchor>
      <arglist>(double1 a, double1 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double2</type>
      <name>operator/</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a82ffde76e1fb8178830abbbda9ca8b4d</anchor>
      <arglist>(double2 a, double2 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3</type>
      <name>operator/</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a50f6955e652b521f2cebe389d3928605</anchor>
      <arglist>(double3 a, double3 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double4</type>
      <name>operator/</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a495096d5ee4779aea396dafa21527627</anchor>
      <arglist>(double4 a, double4 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator/=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a2f25249e9c110bad9ae641bf209869c9</anchor>
      <arglist>(float2x2 &amp;m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator/=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ade01dfb237de6bbe4c4fcfb4a7bbf66a</anchor>
      <arglist>(float3x3 &amp;m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator/=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ac7f977f59e1e7c8cd3443869764bca5a</anchor>
      <arglist>(float3x4 &amp;m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator/=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aaf25b45d16bbc5c6bd98d3c72081166e</anchor>
      <arglist>(float4x4 &amp;m, float s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator/=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a672308dae7c40839657f2bad691fa827</anchor>
      <arglist>(double1 &amp;a, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator/=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a5a2ce34e8904a292ff666521cdc611d5</anchor>
      <arglist>(double2 &amp;a, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator/=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad3501722e8554a5c6659d5c0bf6800b0</anchor>
      <arglist>(double3 &amp;a, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator/=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>addb0032734deb7aaccef4b96a663ca90</anchor>
      <arglist>(double4 &amp;a, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator/=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ac61d58872907f791c099e2ea58bf11fe</anchor>
      <arglist>(double2x2 &amp;m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator/=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a653b6ec9a892eeffbde26a18c42709ee</anchor>
      <arglist>(double3x3 &amp;m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator/=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a40666be4f2e174236809b4435dd793ab</anchor>
      <arglist>(double3x4 &amp;m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator/=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a5bc6bab86bc7a3206d2aa35e770aa559</anchor>
      <arglist>(double4x4 &amp;m, double s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator/=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4acae4c1317986fb907eef074d5aea8d</anchor>
      <arglist>(double1 &amp;a, double1 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator/=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a116d33f65c83e2ffcef40da33f8afbca</anchor>
      <arglist>(double2 &amp;a, double2 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator/=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a48d00a69240f05f8cf96ad3824132ebc</anchor>
      <arglist>(double3 &amp;a, double3 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API void</type>
      <name>operator/=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad8f68ffd869281ee228d44c30ce3d0f9</anchor>
      <arglist>(double4 &amp;a, double4 b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a47fee83b6d3cbd8de5f0ac4988304175</anchor>
      <arglist>(const float1 &amp;a, const float1 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ae696f26e661e90948159befd3d7e1b2b</anchor>
      <arglist>(const float2 &amp;a, const float2 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad2b3e6d3abae6665c8963adb5964c580</anchor>
      <arglist>(const float3 &amp;a, const float3 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a847bce079c61b834bace560d6658d19b</anchor>
      <arglist>(const float4 &amp;a, const float4 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a812945fd0a7a1d2a6afd7ebbd18c18ea</anchor>
      <arglist>(const double1 &amp;a, const double1 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a5df92bd3d91267d052d19f15db99cf91</anchor>
      <arglist>(const double2 &amp;a, const double2 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a5236e092e773cfa267d7a64cd97c0599</anchor>
      <arglist>(const double3 &amp;a, const double3 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>abd3400f8576c5fc2b161a2d820fb143a</anchor>
      <arglist>(const double4 &amp;a, const double4 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4f8207a2a409cfe53d86457093c93127</anchor>
      <arglist>(uint3 p, uint3 dim)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a0487ac14ad05bc7ce5cd804b62889818</anchor>
      <arglist>(ostream &amp;os, const Version &amp;version)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a06fffd5410c3393089d10bc6fae415af</anchor>
      <arglist>(ostream &amp;, const Point &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Cofstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a0f410fe5359eaf1536d1abccd30adeaf</anchor>
      <arglist>(Cofstream &amp;, const PointSet &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a5d97d8f47035c17ab3c1632267a74982</anchor>
      <arglist>(ostream &amp;, const PointSet &amp;)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>operator==</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a962a07ea52047c30967aa4c82c3b6d69</anchor>
      <arglist>(const float1 &amp;a, const float1 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>operator==</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a63f495e8aaada4d131e8d12eff995197</anchor>
      <arglist>(const float2 &amp;a, const float2 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>operator==</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a023912c6888eb9f19dcd0b38e2a49f96</anchor>
      <arglist>(const float3 &amp;a, const float3 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>operator==</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad76924acae8f814858841fd7bcf70d0a</anchor>
      <arglist>(const float4 &amp;a, const float4 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>operator==</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a0b729d84df2fe9e5e3c14fda56abb689</anchor>
      <arglist>(const float3x3 &amp;a, const float3x3 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>operator==</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a47459965f628487cc9c67f3f8f7a005a</anchor>
      <arglist>(const float3x4 &amp;a, const float3x4 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>operator==</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a916ee2e16821f70420f413b7751ff170</anchor>
      <arglist>(const float4x4 &amp;a, const float4x4 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>operator==</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4969b7f675a0999fd82a0a9c75d884e0</anchor>
      <arglist>(const double1 &amp;a, const double1 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>operator==</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a71fc754155e94d85c7c3bdca6939b160</anchor>
      <arglist>(const double2 &amp;a, const double2 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>operator==</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a550051ceb9682838f0d5f5fb422d2552</anchor>
      <arglist>(const double3 &amp;a, const double3 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>operator==</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a6adfe2ccfcab8f891222194cb937ec99</anchor>
      <arglist>(const double4 &amp;a, const double4 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>operator==</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>af63c7200f3b648de722ecb194078815c</anchor>
      <arglist>(const double3x3 &amp;a, const double3x3 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>operator==</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a910e2b84b891f963a756a674b6c3f8c7</anchor>
      <arglist>(const double3x4 &amp;a, const double3x4 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>operator==</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aadb1b64174734de00b402dcefda19e61</anchor>
      <arglist>(const double4x4 &amp;a, const double4x4 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>operator==</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8d18b4fb80c6b2988beef363a29e63c0</anchor>
      <arglist>(uint3 p, unsigned int s)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a75f09416fece2f8999a99003575b8306</anchor>
      <arglist>(uint3 p, uint3 dim)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a8043e4ba7490435bc46fc13f47809af3</anchor>
      <arglist>(uint3 p, uint3 dim)</arglist>
    </member>
    <member kind="function">
      <type>istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ae1ef7db01952900c47c099bf158438fa</anchor>
      <arglist>(istream &amp;is, Version &amp;version)</arglist>
    </member>
    <member kind="function">
      <type>istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a65474ca2e38fc9e7bac3bd39c821b4e3</anchor>
      <arglist>(istream &amp;, Point &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Cifstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aa7bcc203a5c964229f6703c193928898</anchor>
      <arglist>(Cifstream &amp;, PointSet &amp;)</arglist>
    </member>
    <member kind="function">
      <type>istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>af51505d0c6dfeccec9c44951f9002c0e</anchor>
      <arglist>(istream &amp;, PointSet &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ImageAttributes</type>
      <name>OrthogonalFieldOfView</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4e4d011dc08555557bf0535fec68aac7</anchor>
      <arglist>(const ImageAttributes &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>OrthoNormalize3x3</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a89dc9c312aee179a2d3cb9cab1b0bde6</anchor>
      <arglist>(Matrix &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ImageAttributes</type>
      <name>OverallFieldOfView</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad63b2d03abcabeddfc4c8ab012014f21</anchor>
      <arglist>(const Array&lt; ImageAttributes &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PAllocate</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ae76d4774007602e1c1bb0d83fca8c43b</anchor>
      <arglist>(Type **&amp;matrix, int n)</arglist>
    </member>
    <member kind="function">
      <type>Type **</type>
      <name>PAllocate</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a21a9d9f2bfde87510d0ccbfa001fe3fc</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parallel_for</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a5ffa80fbf46f62998a59bd831f7382c0</anchor>
      <arglist>(const Range &amp;range, const Body &amp;body)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parallel_reduce</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a53834c5ddaa25856ea0d4a178081b805</anchor>
      <arglist>(const Range &amp;range, Body &amp;body)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>ParameterUnits</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a30bc600402e900361291177d7ce8d468</anchor>
      <arglist>(const string &amp;str, string *name=nullptr, const char *dflt=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ParseParallelOption</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a76edbbaa2c6fa7f7b0716a446a2572e0</anchor>
      <arglist>(int &amp;, int &amp;, char *[])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ParseProfilingOption</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a7875d134721c650543a5bfc4c0ff0676</anchor>
      <arglist>(int &amp;, int &amp;, char *[])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ParseStandardOption</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a21ba414a9fc465c5bd7ec2bd36dbd6f7</anchor>
      <arglist>(int &amp;, int &amp;, char *[])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ParseTerminalOption</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ab5b711ad1b9a83ec9501bc78f51d83e1</anchor>
      <arglist>(int &amp;, int &amp;, char *[])</arglist>
    </member>
    <member kind="function">
      <type>ImageAttributes</type>
      <name>PointSetDomain</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a37af8004808794a459f309f860610dca</anchor>
      <arglist>(vtkPointSet *data, double dx=-1, double dy=-1, double dz=-1)</arglist>
    </member>
    <member kind="function">
      <type>ImageAttributes</type>
      <name>PointSetDomain</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a10aa76747878010b6605e4ddd869d47d</anchor>
      <arglist>(vtkPointSet *data, const Vector3D&lt; double &gt; &amp;ds)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>PolyDataAttributeType</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad14868e8fc00ab49efc7b1207aa2ac2a</anchor>
      <arglist>(const char *type)</arglist>
    </member>
    <member kind="function">
      <type>ImageAttributes</type>
      <name>PolyDataDomain</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aef3529cb8c9a09fd2a03bcbf170f8963</anchor>
      <arglist>(vtkPolyData *data, double dx=-1, double dy=-1, double dz=-1)</arglist>
    </member>
    <member kind="function">
      <type>ImageAttributes</type>
      <name>PolyDataDomain</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad81776acd700b3a6f53ce57419a13fb5</anchor>
      <arglist>(vtkPolyData *data, const Vector3D&lt; double &gt; &amp;ds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintElapsedTime</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a196596aa3c6898153ee8901559f6919b</anchor>
      <arglist>(const char *, double, TimeUnit=TIME_IN_SECONDS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintParallelOptions</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a0a6c06dea6739a7f344afb2beff9a13c</anchor>
      <arglist>(ostream &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintParameter</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ae9ee90828d3912b0763a1fe81a81fff1</anchor>
      <arglist>(std::ostream &amp;os, const char *name, const TValue &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintParameter</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a1068774ab0bdce4973657b2310badcbd</anchor>
      <arglist>(std::ostream &amp;os, const std::string &amp;name, const TValue &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintProfilingOptions</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a1aff63964a6c029f0c81aa0d207f0974</anchor>
      <arglist>(ostream &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintRevision</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4f7eab7e4f493279935933575d24193f</anchor>
      <arglist>(ostream &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintTerminalOptions</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a2663db2e4b4b8fc1c428c67dc054cfd2</anchor>
      <arglist>(ostream &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintVersion</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a6d787adaa5310c536b1e8c9fab78f2fd</anchor>
      <arglist>(ostream &amp;, const char *=NULL)</arglist>
    </member>
    <member kind="function">
      <type>vtkSmartPointer&lt; vtkPolyData &gt;</type>
      <name>ReadDFS</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a34529e300bb715aea91708f8395cd86f</anchor>
      <arglist>(const char *fname)</arglist>
    </member>
    <member kind="function">
      <type>MIRTK_Common_DEPRECATED float</type>
      <name>ReadFloat</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a2146911048c3f3a3a4557c207aaf7c1c</anchor>
      <arglist>(std::ifstream &amp;)</arglist>
    </member>
    <member kind="function">
      <type>MIRTK_Common_DEPRECATED int</type>
      <name>ReadInt</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a920b7101f39575c3ff2847653a5e8a02</anchor>
      <arglist>(std::ifstream &amp;)</arglist>
    </member>
    <member kind="function">
      <type>vtkSmartPointer&lt; vtkPolyData &gt;</type>
      <name>ReadOFF</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aebd7c2b6e983a7b917a10a155cb7e6d1</anchor>
      <arglist>(const char *fname)</arglist>
    </member>
    <member kind="function">
      <type>vtkSmartPointer&lt; vtkPointSet &gt;</type>
      <name>ReadPointSet</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a715b2d7a2a889e50a84f8278c1eba790</anchor>
      <arglist>(const char *fname, int *ftype=nullptr, bool exit_on_failure=true)</arglist>
    </member>
    <member kind="function">
      <type>vtkSmartPointer&lt; vtkPolyData &gt;</type>
      <name>ReadPolyData</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ab155733c76eca2c88e824551748e5473</anchor>
      <arglist>(const char *fname, int *ftype=nullptr, bool exit_on_failure=true)</arglist>
    </member>
    <member kind="function">
      <type>MIRTK_Common_DEPRECATED char *</type>
      <name>ReadString</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a2759a684a1a61bf3b01fcfa9f9246f4a</anchor>
      <arglist>(std::ifstream &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ParameterList &amp;</type>
      <name>Remove</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a6af6d95d362f929571bdce367328a202</anchor>
      <arglist>(ParameterList &amp;params, string name)</arglist>
    </member>
    <member kind="function">
      <type>Type **</type>
      <name>Reshape</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ac0d7493995fa0f75404ff0d3b1d42b3c</anchor>
      <arglist>(Type **matrix, int x, int y)</arglist>
    </member>
    <member kind="function">
      <type>Type ***</type>
      <name>Reshape</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aa2531dc6fe0dcb21f9b2018d778839d5</anchor>
      <arglist>(Type ***matrix, int x, int y, int z)</arglist>
    </member>
    <member kind="function">
      <type>Type ****</type>
      <name>Reshape</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad26a55368d0754b77ddad8787e0d605d</anchor>
      <arglist>(Type ****matrix, int x, int y, int z, int t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RigidParametersToMatrix</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ab9a06b144c3a4ff5a49f7f316795ac2f</anchor>
      <arglist>(double tx, double ty, double tz, double cosrx, double cosry, double cosrz, double sinrx, double sinry, double sinrz, Matrix &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RigidParametersToMatrix</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a434f6bafc3c5148758499b34eac4ddc3</anchor>
      <arglist>(double tx, double ty, double tz, double rx, double ry, double rz, Matrix &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>RigidParametersToMatrix</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ae393ccdbd536654eb1fc7eb4b4e4aa7f</anchor>
      <arglist>(double tx, double ty, double tz, double rx, double ry, double rz)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RobustAverageEdgeLength</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a487c38856a974b9a1e983a299dd5a76a</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPoints &gt;, const EdgeTable &amp;)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RobustAverageEdgeLength</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a309f77901b9625dc8bab5d308a47f1f8</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPointSet &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Scale</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a1248afdc2b9f73ce63743e260b468ca3</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPointSet &gt; pointset, double)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API int</type>
      <name>sgn</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a977b136b77025de104c9be43a892f11c</anchor>
      <arglist>(T val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SplinePoles</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a1b7736592749c8006bcf8c3559ea16c1</anchor>
      <arglist>(int degree, TReal pole[2], int &amp;npoles)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; string &gt;</type>
      <name>Split</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a83d949a3354f53e63bff0c9d6a34f788</anchor>
      <arglist>(string s, const char *d, int n=0, bool e=false)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>StandardUnits</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a1c1bbe8a71f363d9e0ebcbf7730f02a0</anchor>
      <arglist>(const string &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SUB</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ac908e65e239200b52eb5da68a481ccb3</anchor>
      <arglist>(double *dest, const double *v1, const double *v2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap16</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a18f98fc38b69c5b9ed9104b5ef0962c6</anchor>
      <arglist>(char *, char *, long)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap32</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a84e633cac25a39c260171da9e0917529</anchor>
      <arglist>(char *, char *, long)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap64</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aa0fb63ae45d231c65f33517cad3ca431</anchor>
      <arglist>(char *, char *, long)</arglist>
    </member>
    <member kind="function">
      <type>vtkSmartPointer&lt; vtkPointSet &gt;</type>
      <name>Tetrahedralize</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aa4f16d48790ab6bd74760e10525750e3</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPointSet &gt;)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_HOST_API float *</type>
      <name>to_float</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a60cb4735856211dcd1e037fafdf87c8d</anchor>
      <arglist>(const VoxelType *in, unsigned int N)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>ToLower</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a87f61f1c7635c3dffa9cad4dac044afd</anchor>
      <arglist>(const string &amp;)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>ToPrettyString</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aaab090025c53cb32edaea2029f8c2578</anchor>
      <arglist>(const EnergyMeasure &amp;value, int w=0, char c= &apos; &apos;, bool left=true)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>ToString</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a93c6d528094b7074c374be054e70453a</anchor>
      <arglist>(const FFDIM &amp;m, int w, char c, bool left)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>ToString</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a50246560c94808274cccf88b021f54af</anchor>
      <arglist>(const vtkDataSetAttributes::AttributeTypes &amp;type, int w, char c, bool left)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>ToString</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>af0477d5a19826730faf22175f0433936</anchor>
      <arglist>(const NiftiIntent &amp;value, int w, char c, bool left)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>ToString</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a45ffbd60bf9a07915617e698a4f58f18</anchor>
      <arglist>(const ImageDataType &amp;, int, char, bool)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>ToString</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aba768bbdd245a56077af92a44f4001df</anchor>
      <arglist>(const ConnectivityType &amp;value, int w, char c, bool left)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>ToString</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4dca134e706fd4ab94b486a50ff8028b</anchor>
      <arglist>(const EnergyMeasure &amp;value, int w, char c, bool left)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>ToString</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a4d97cad298f92459f261c0c7274008ee</anchor>
      <arglist>(const ConnectedComponentsOrdering &amp;value, int w, char c, bool left)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>ToString</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ab1a7850f4d43cea50c7a32261490ca42</anchor>
      <arglist>(const T &amp;value, int w=0, char c= &apos; &apos;, bool left=false)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>ToString</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a2247f1a33b381e651ec3baae85135332</anchor>
      <arglist>(const enum ImplicitSurfaceForce::DistanceMeasureType &amp;value, int w, char c, bool left)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>ToString</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ade5fbff8a0e40d4606e8a775701158e2</anchor>
      <arglist>(const bool &amp;value, int w, char c, bool left)</arglist>
    </member>
    <member kind="function">
      <type>TransformationType</type>
      <name>ToTransformationType</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a92d819781ad357edc21d0d7f748be07f</anchor>
      <arglist>(TransformationModel model, const ImageAttributes &amp;domain)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>ToUpper</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a54c4f2f7893b13d502402ac882de24bf</anchor>
      <arglist>(const string &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Transform</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aec89e82828071c6a7688eae046c26f38</anchor>
      <arglist>(const Matrix &amp;m, double x, double y, double z, double &amp;mx, double &amp;my, double &amp;mz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Transform</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a1d1a1e2531a290acd91959eedbd67019</anchor>
      <arglist>(const Matrix &amp;m, double &amp;x, double &amp;y, double &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>Transform</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>adb35a8a351e4d3ce95ab394e385fd2f7</anchor>
      <arglist>(const Matrix &amp;m, const Point &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float2x2</type>
      <name>transpose</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a14455b6da338affbababf8230fa1d4b1</anchor>
      <arglist>(float2x2 m)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API float3x3</type>
      <name>transpose</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a707a8774f1cba6dbd7ec37c22d9d44c9</anchor>
      <arglist>(float3x3 m)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double2x2</type>
      <name>transpose</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>afd9ebb9f5b36cb61706ded4470db2f3c</anchor>
      <arglist>(double2x2 m)</arglist>
    </member>
    <member kind="function">
      <type>MIRTKCU_API double3x3</type>
      <name>transpose</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a6cb34ecce58567bacc7ef545491d7946</anchor>
      <arglist>(double3x3 m)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tri_tri_intersect3D</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>acbf21ac57989475377a62a9db46094bb</anchor>
      <arglist>(const double *C1, const double *C2, const double *C3, const double *P1, const double *P2, const double *D1, const double *D2, const double *D3, const double *Q1, const double *Q2)</arglist>
    </member>
    <member kind="function">
      <type>vtkSmartPointer&lt; vtkPolyData &gt;</type>
      <name>Triangulate</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad626caa9a36f667ce1d5f483cbe0dc85</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPolyData &gt;)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>Trim</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a88318c28477468e8cab905fd5a1bac28</anchor>
      <arglist>(const string &amp;str, const string &amp;what=&quot; \t\r\n&quot;)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>TrimAll</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ab49f2e1b4eb1b307a729892c9b6da18e</anchor>
      <arglist>(const string &amp;str, const string &amp;what=&quot; \t\r\n&quot;)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>umfpack_status_message</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a285456e1bfe2f727c80d6911a245d4f2</anchor>
      <arglist>(int status)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>ValueUnits</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a23b9cd90368114825ae1185816fd4f3a</anchor>
      <arglist>(const string &amp;str, string *value=nullptr, const char *dflt=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>vtkSmartPointer&lt; vtkPointSet &gt;</type>
      <name>WorldToImage</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a666593bc5949656392f643cc771564a5</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPointSet &gt; pointset, const BaseImage *image)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteDFS</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a39ba202b1b1ce50f71f19d3ade362f9d</anchor>
      <arglist>(const char *fname, vtkPolyData *polydata)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteOFF</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a3d82e37006c85569ae49d189fa3555ef</anchor>
      <arglist>(const char *fname, vtkPolyData *polydata)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WritePointSet</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ac4c8adeb632ee97390d96e3b7124520d</anchor>
      <arglist>(const char *fname, vtkPointSet *pointset, bool compress=true, bool ascii=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WritePolyData</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a92551a7102c28f7838c80593f9f870ea</anchor>
      <arglist>(const char *fname, vtkPolyData *polydata, bool compress=true, bool ascii=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteTetGenNode</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a98456534dae116faf8a1503f7721ef4a</anchor>
      <arglist>(const char *fname, vtkPointSet *pointset)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteTetGenPoly</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ac5f6658a9d17e086f31fb28d7d0125f6</anchor>
      <arglist>(const char *fname, vtkPolyData *polydata, const PointSet *holes=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteTetGenSMesh</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ab2bf11a6c1b810c56ceec13e78d4b272</anchor>
      <arglist>(const char *fname, vtkPolyData *polydata, const PointSet *holes=nullptr)</arglist>
    </member>
    <member kind="variable">
      <type>MIRTK_Common_EXPORT int</type>
      <name>debug</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a1771fe552e4a895a4d85a42c97441721</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MIRTK_Common_EXPORT int</type>
      <name>debug_gpu</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a17842c5f8741ad3a2ffdbdcea572e554</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MIRTK_Common_EXPORT int</type>
      <name>debug_time</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ada549b8fe6a788dfc8ad983246de9717</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MIRTK_Common_EXPORT TimeUnit</type>
      <name>debug_time_unit</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aae901e83985f63654ce7b0c90e3d5074</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MIRTK_Common_EXPORT const double</type>
      <name>deg_per_rad</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a0829a4d38308a6383a71dae277b5c5e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MIRTK_Common_EXPORT const char</type>
      <name>PATHSEP</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>af68b83d106ed73ac3022db9c8c9835da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MIRTK_Common_EXPORT const double</type>
      <name>pi</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>aa4b3ed6d6ebf9d722ae8cbee5e979fc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MIRTK_Common_EXPORT const double</type>
      <name>pi_half</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a94a9fed98a0ec41983b63504e18e8355</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MIRTK_Common_EXPORT const double</type>
      <name>rad_per_deg</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>af3ef3c4b524daba6546cd2ea099e9e90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MIRTK_Common_EXPORT bool</type>
      <name>stdout_color</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a5a5219e54621b7738dce7b6a49c83277</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MIRTK_Common_EXPORT int</type>
      <name>tbb_debug</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a1ef7f100d2ad3be2b601ded8fa411da3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MIRTK_Common_EXPORT const double</type>
      <name>two_pi</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a2a91896395a4854c16cc4709a1aaf53e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MIRTK_Common_EXPORT bool</type>
      <name>use_gpu</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a881a670c75ba926f2c24bc5c8ccda087</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MIRTK_Common_EXPORT int</type>
      <name>verbose</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a9d9ce87e30803a287566da1ef2d7fced</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MIRTK_Common_EXPORT Version</type>
      <name>version</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>ad7a64a7d807a64b27549aa3080412ee8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MIRTK_Common_EXPORT const char *</type>
      <name>xreset</name>
      <anchorfile>namespacemirtk.html</anchorfile>
      <anchor>a1e5f80bec25ca41262db48d5c1207c15</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::AdaptiveLineSearch</name>
    <filename>classmirtk_1_1AdaptiveLineSearch.html</filename>
    <base>mirtk::InexactLineSearch</base>
    <member kind="function">
      <type></type>
      <name>AdaptiveLineSearch</name>
      <anchorfile>classmirtk_1_1AdaptiveLineSearch.html</anchorfile>
      <anchor>a05f28f6f96b6110977b3e814e531a9c2</anchor>
      <arglist>(ObjectiveFunction *=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AdaptiveLineSearch</name>
      <anchorfile>classmirtk_1_1AdaptiveLineSearch.html</anchorfile>
      <anchor>ae18f327b55712c2c05287825070a6f51</anchor>
      <arglist>(const AdaptiveLineSearch &amp;)</arglist>
    </member>
    <member kind="function">
      <type>AdaptiveLineSearch &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1AdaptiveLineSearch.html</anchorfile>
      <anchor>a28b241ac4d2a8356e3f7a8f35704ff2d</anchor>
      <arglist>(const AdaptiveLineSearch &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1AdaptiveLineSearch.html</anchorfile>
      <anchor>aac4484381a9f593609af22cead74c522</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1AdaptiveLineSearch.html</anchorfile>
      <anchor>a8828b261b8e81dbbb64bc5c2af54c9be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1AdaptiveLineSearch.html</anchorfile>
      <anchor>aa4240816bac12ec60e6f6c06a09897f8</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AdaptiveLineSearch</name>
      <anchorfile>classmirtk_1_1AdaptiveLineSearch.html</anchorfile>
      <anchor>ad6959e8ed64f30a956cacb8b286bfb0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Function</name>
      <anchorfile>classmirtk_1_1InexactLineSearch.html</anchorfile>
      <anchor>a23f6d4c5e880b9e4c0c7da96a0e93fee</anchor>
      <arglist>(ObjectiveFunction *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InexactLineSearch</name>
      <anchorfile>classmirtk_1_1InexactLineSearch.html</anchorfile>
      <anchor>a9846d769074bbb1fef0cdf64d34352e7</anchor>
      <arglist>(ObjectiveFunction *=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InexactLineSearch</name>
      <anchorfile>classmirtk_1_1InexactLineSearch.html</anchorfile>
      <anchor>a9ee09cd015f81ff131059bdc1c2b8795</anchor>
      <arglist>(const InexactLineSearch &amp;)</arglist>
    </member>
    <member kind="function">
      <type>InexactLineSearch &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1InexactLineSearch.html</anchorfile>
      <anchor>a14eec09a82f86b73a9b8d50a2e9a1b4f</anchor>
      <arglist>(const InexactLineSearch &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InexactLineSearch</name>
      <anchorfile>classmirtk_1_1InexactLineSearch.html</anchorfile>
      <anchor>a98a5b0862a1f441ec57dc95aa80bc4f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual LineSearchStrategy</type>
      <name>Strategy</name>
      <anchorfile>classmirtk_1_1LineSearch.html</anchorfile>
      <anchor>a05fb053ca48f4db7e0be1326a2fb2afd</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LineSearch</name>
      <anchorfile>classmirtk_1_1LineSearch.html</anchorfile>
      <anchor>ab77e94268dff5ed68b7f48406b690ccf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddStoppingCriterion</name>
      <anchorfile>classmirtk_1_1LocalOptimizer.html</anchorfile>
      <anchor>a908f26980c4e028506412a1c28e176b3</anchor>
      <arglist>(StoppingCriterion *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearStoppingCriteria</name>
      <anchorfile>classmirtk_1_1LocalOptimizer.html</anchorfile>
      <anchor>adbd720abb5ed37ace4e05b9dca26f116</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1LocalOptimizer.html</anchorfile>
      <anchor>ae9dc13c1490a3db0c0837656f97c63ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfStoppingCriteria</name>
      <anchorfile>classmirtk_1_1LocalOptimizer.html</anchorfile>
      <anchor>a32572bda7d02521bf7bab17b666fc14f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual enum OptimizationMethod</type>
      <name>OptimizationMethod</name>
      <anchorfile>classmirtk_1_1LocalOptimizer.html</anchorfile>
      <anchor>ac0bcc332f645d1a39b863d99f899d6f5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RemoveStoppingCriterion</name>
      <anchorfile>classmirtk_1_1LocalOptimizer.html</anchorfile>
      <anchor>a051276f5ae615cba66f6ace5901198f3</anchor>
      <arglist>(StoppingCriterion *)</arglist>
    </member>
    <member kind="function">
      <type>class StoppingCriterion *</type>
      <name>StoppingCriterion</name>
      <anchorfile>classmirtk_1_1LocalOptimizer.html</anchorfile>
      <anchor>a910136c279755691f9b4467df0585e7e</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const class StoppingCriterion *</type>
      <name>StoppingCriterion</name>
      <anchorfile>classmirtk_1_1LocalOptimizer.html</anchorfile>
      <anchor>a5aab22006e077782db832d53c1201e04</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LocalOptimizer</name>
      <anchorfile>classmirtk_1_1LocalOptimizer.html</anchorfile>
      <anchor>acf564e53e97d1ecb755344e07665e868</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddObserver</name>
      <anchorfile>classmirtk_1_1Observable.html</anchorfile>
      <anchor>a0d984efaa333fb33b6ee9b2453c917ab</anchor>
      <arglist>(Observer &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Broadcast</name>
      <anchorfile>classmirtk_1_1Observable.html</anchorfile>
      <anchor>aa22bce883eb810cfeecb32d547b19a65</anchor>
      <arglist>(Event, const void *=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearObservers</name>
      <anchorfile>classmirtk_1_1Observable.html</anchorfile>
      <anchor>a7d7de1b38cc50633ec3deadd413cbae3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DeleteObserver</name>
      <anchorfile>classmirtk_1_1Observable.html</anchorfile>
      <anchor>a9a5c87c242aabb2b57edc79c6d5f60d9</anchor>
      <arglist>(Observer &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NotifyObservers</name>
      <anchorfile>classmirtk_1_1Observable.html</anchorfile>
      <anchor>a15582958f18e00d11ecaf6804fa3d21d</anchor>
      <arglist>(Event, const void *=NULL)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfObservers</name>
      <anchorfile>classmirtk_1_1Observable.html</anchorfile>
      <anchor>a20dea4f9200b7f957960215cb62477c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Observable</name>
      <anchorfile>classmirtk_1_1Observable.html</anchorfile>
      <anchor>a362a0bbd622ce66727c1de8ecd6288a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>NameOfClass</name>
      <anchorfile>classmirtk_1_1Object.html</anchorfile>
      <anchor>adbbe169b1436bff81554e85baafa1129</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1Object.html</anchorfile>
      <anchor>a0d9e2c339196faf470bdcfcf581cc5ee</anchor>
      <arglist>(const ParameterList &amp;param)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Object</name>
      <anchorfile>classmirtk_1_1Object.html</anchorfile>
      <anchor>a9348f3aed24c7c5d638afe18b8e34f9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>ObjectFactory&lt; enum OptimizationMethod, LocalOptimizer &gt;</type>
      <name>FactoryType</name>
      <anchorfile>classmirtk_1_1LocalOptimizer.html</anchorfile>
      <anchor>a47620809c82d9a52db99e32284460f38</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LineSearch *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1LineSearch.html</anchorfile>
      <anchor>a4a7369adc1917857453fd1262f877f4d</anchor>
      <arglist>(LineSearchStrategy &amp;, ObjectiveFunction *=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FactoryType &amp;</type>
      <name>Factory</name>
      <anchorfile>classmirtk_1_1LocalOptimizer.html</anchorfile>
      <anchor>a353821a1ee1d6e0e36a664fc09ce8987</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LocalOptimizer *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1LocalOptimizer.html</anchorfile>
      <anchor>ae331aa930b97370e8ae6bc28f4ee0d1c</anchor>
      <arglist>(enum OptimizationMethod, ObjectiveFunction *=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>NameOfType</name>
      <anchorfile>classmirtk_1_1Object.html</anchorfile>
      <anchor>a20eeb8a70c27b5edc8f5981864db3ebb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>Advance</name>
      <anchorfile>classmirtk_1_1InexactLineSearch.html</anchorfile>
      <anchor>ad758aca9c9fe0452874485c14b5e02e0</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Retreat</name>
      <anchorfile>classmirtk_1_1InexactLineSearch.html</anchorfile>
      <anchor>a0c73a9852da55518faec13a122ddc534</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>Value</name>
      <anchorfile>classmirtk_1_1InexactLineSearch.html</anchorfile>
      <anchor>ad18e32a90fe9deb648b6a1a20a938061</anchor>
      <arglist>(double, double *=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LineSearch</name>
      <anchorfile>classmirtk_1_1LineSearch.html</anchorfile>
      <anchor>ad7ba787b074c1b68971bfc0636ff690e</anchor>
      <arglist>(ObjectiveFunction *=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LineSearch</name>
      <anchorfile>classmirtk_1_1LineSearch.html</anchorfile>
      <anchor>a646c37bd1f2e32a18bfd91066acd8798</anchor>
      <arglist>(const LineSearch &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>LineSearch &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1LineSearch.html</anchorfile>
      <anchor>a34864fad49b51175d9c3798e735c1640</anchor>
      <arglist>(const LineSearch &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>Converged</name>
      <anchorfile>classmirtk_1_1LocalOptimizer.html</anchorfile>
      <anchor>a3495448dca64fdad94a6344e8b45fcd0</anchor>
      <arglist>(int iter, double prev, double value, const double *delta)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>IsImprovement</name>
      <anchorfile>classmirtk_1_1LocalOptimizer.html</anchorfile>
      <anchor>aa71fad44554841a5d7c2427300dba827</anchor>
      <arglist>(double prev, double value) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LocalOptimizer</name>
      <anchorfile>classmirtk_1_1LocalOptimizer.html</anchorfile>
      <anchor>a577275816ed43fdbe329824c910af18c</anchor>
      <arglist>(ObjectiveFunction *=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LocalOptimizer</name>
      <anchorfile>classmirtk_1_1LocalOptimizer.html</anchorfile>
      <anchor>a45a4f286638aae59f721a89d9ae54ddb</anchor>
      <arglist>(const LocalOptimizer &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>LocalOptimizer &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1LocalOptimizer.html</anchorfile>
      <anchor>ad57c5ac3ef2612843dbab453ab988e37</anchor>
      <arglist>(const LocalOptimizer &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Observable</name>
      <anchorfile>classmirtk_1_1Observable.html</anchorfile>
      <anchor>a162d76b2c08fbe70dbe623be5e21fb8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Observable</name>
      <anchorfile>classmirtk_1_1Observable.html</anchorfile>
      <anchor>a858ea3278b5635d07053172fbe74d965</anchor>
      <arglist>(const Observable &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Observable &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1Observable.html</anchorfile>
      <anchor>ae3413459ace0fa61465fa1293a84b687</anchor>
      <arglist>(const Observable &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>_CurrentDoFValues</name>
      <anchorfile>classmirtk_1_1InexactLineSearch.html</anchorfile>
      <anchor>a1b9a0e599096ed8fbdbab9b4aefd8832</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>_ScaledDirection</name>
      <anchorfile>classmirtk_1_1InexactLineSearch.html</anchorfile>
      <anchor>aad2119085e3eb4130b351649279dfe69</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::AddBSplineSVFFD</name>
    <filename>classmirtk_1_1AddBSplineSVFFD.html</filename>
    <base>mirtk::VoxelFunction</base>
    <member kind="variable" protection="protected">
      <type>const BSplineFreeFormTransformationSV *</type>
      <name>_Input</name>
      <anchorfile>classmirtk_1_1AddBSplineSVFFD.html</anchorfile>
      <anchor>a7c901f9a41507cf5d215bf6170514ba6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseImage *</type>
      <name>_Output</name>
      <anchorfile>classmirtk_1_1AddBSplineSVFFD.html</anchorfile>
      <anchor>a3eb127d78ac4afbb9d760f0d9b6d6949</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>join</name>
      <anchorfile>structmirtk_1_1VoxelFunction.html</anchorfile>
      <anchor>a977c267da6e57dcb2b271a74bed93278</anchor>
      <arglist>(VoxelFunction &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>split</name>
      <anchorfile>structmirtk_1_1VoxelFunction.html</anchorfile>
      <anchor>aa402d9eb666311f0d531be085606ecfe</anchor>
      <arglist>(VoxelFunction &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VoxelFunction</name>
      <anchorfile>structmirtk_1_1VoxelFunction.html</anchorfile>
      <anchor>a8505c7898ac7c99fd53ded108a072468</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>IsReduction</name>
      <anchorfile>structmirtk_1_1VoxelFunction.html</anchorfile>
      <anchor>a60101f3167d08c225e097ddc3aa823b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>const ImageAttributes *</type>
      <name>_Domain</name>
      <anchorfile>structmirtk_1_1VoxelFunction.html</anchorfile>
      <anchor>a7fda94a64076f4de071a22a2d1f8adfb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::AddBSplineSVFFD3D</name>
    <filename>classmirtk_1_1AddBSplineSVFFD3D.html</filename>
    <base>mirtk::VoxelFunction</base>
  </compound>
  <compound kind="class">
    <name>mirtk::AddDOFsOfBSplineSVFFD</name>
    <filename>classmirtk_1_1AddDOFsOfBSplineSVFFD.html</filename>
    <base>mirtk::VoxelFunction</base>
    <member kind="variable" protection="protected">
      <type>const BSplineFreeFormTransformationSV *</type>
      <name>_Input</name>
      <anchorfile>classmirtk_1_1AddDOFsOfBSplineSVFFD.html</anchorfile>
      <anchor>a18a107004d70ccc2f5edbf6fd5a889d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseImage *</type>
      <name>_Output</name>
      <anchorfile>classmirtk_1_1AddDOFsOfBSplineSVFFD.html</anchorfile>
      <anchor>aa1727a013ad0c6c278609ca00f022f6d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::AffineTransformation</name>
    <filename>classmirtk_1_1AffineTransformation.html</filename>
    <base>mirtk::SimilarityTransformation</base>
    <member kind="function">
      <type></type>
      <name>AffineTransformation</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>adf72969d8d5ef68df7764697e67249a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AffineTransformation</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>abbb2e2e429e87f56e54305abab1b1dc5</anchor>
      <arglist>(const RigidTransformation &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AffineTransformation</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>aa9e56ac5c16959837743e2ad437e8849</anchor>
      <arglist>(const SimilarityTransformation &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AffineTransformation</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>a10c61db146ae893e264a0702b1ab0e54</anchor>
      <arglist>(const AffineTransformation &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllowRotations</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>aca3ab7f8c26521b82435e87b3cbcde64</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AllowRotations</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>ac0a366357042751b9f73c1f532cf75f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllowScaling</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>a2affac6f28bd729f0c29a61d57b7cf67</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AllowScaling</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>ae42f1b3b8f8eecf740ac97ab54729937</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllowShearing</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>a38b6a96e6a656ccc85d79a57825458c9</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AllowShearing</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>a03b112163fbb80578250839fa333ca49</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllowTranslations</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>a1f8843d3580c10e2ff43297810b9628e</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AllowTranslations</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>a24491bd2472698cac5ed53067ef49e94</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateDOFs</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>a8fb704d6eba7fb08835b34f9bdcb7a45</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, const double *, int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>CanRead</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>aab7bb01c21c16bbb6e1a976cbeb523a5</anchor>
      <arglist>(TransformationType) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>aeb6e733e30d6d9110e7afc4428b68164</anchor>
      <arglist>(const Transformation *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DeriveJacobianWrtDOF</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>acfdbc63b296912dc9e9736fc15bfb33f</anchor>
      <arglist>(Matrix &amp;, int, double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetScale</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>ad8c9e53534dfdbaa150bb806f1b0208c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetScaleX</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>a95fc2064c02822dc4e69962a1faa095d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetScaleY</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>a9272eb100174e41e0dcb053fbcbdfd03</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetScaleZ</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>a5a9b4f7fe02050dfd65aa9e3dddec5b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetShearXY</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>a2e6b459b4b537df0f41b2c766d22616b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetShearXZ</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>af5588dbb29bac95fd4a722a1b58b6bbe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetShearYZ</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>a27b9edb14afdbaa7a52c96c576511ee9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDOFs</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>af8256d7159088bc912bc873598fe3101</anchor>
      <arglist>(double[3], int, double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>a6a71eb05d255e6a66b02da3154ff7900</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>abc1783d47bda36a2f2176bb1964ecd4a</anchor>
      <arglist>(Indent=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutScale</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>a51fa6e3551ba678a4b2ffe6ce30e74ff</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutScaleX</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>a33c6176f3552a5c0d7f63ecdec68a7ab</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutScaleY</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>a1092b2d1c449a771747fe3b7f196f471</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutScaleZ</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>a3a221c008bf4d17e24ed129434a8d55a</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutShearXY</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>a2802ffe56c834ebd54e77443fe55ace2</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutShearXZ</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>af8e8746b6ca3078992be1eb19d3ad6fd</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutShearYZ</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>a160b024303c5e878ca81e988734b411e</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>a9b38a9f1a6953d7dfa1889844db7ea36</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>UpdateDOFs</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>a06c2b49f59b41c01d5e78fbe390c4645</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>UpdateMatrix</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>a7b9165f5d2d47d44d27414d057b0ae84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cofstream &amp;</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>a581a358b8a6636e779a0ee68e329dde3</anchor>
      <arglist>(Cofstream &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AffineTransformation</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>a75e33a0f7e43bff01361f0ec08625b11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimilarityTransformation</name>
      <anchorfile>classmirtk_1_1SimilarityTransformation.html</anchorfile>
      <anchor>a85108eb1f836b495c9bf6097266ba173</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimilarityTransformation</name>
      <anchorfile>classmirtk_1_1SimilarityTransformation.html</anchorfile>
      <anchor>a8799bfc54e3637cdf18c45488b951c82</anchor>
      <arglist>(const RigidTransformation &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimilarityTransformation</name>
      <anchorfile>classmirtk_1_1SimilarityTransformation.html</anchorfile>
      <anchor>ac6d91e86a358958fc37638af3beec212</anchor>
      <arglist>(const SimilarityTransformation &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SimilarityTransformation</name>
      <anchorfile>classmirtk_1_1SimilarityTransformation.html</anchorfile>
      <anchor>a51365c44de74d5c6f57df93c193610e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetRotationX</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>a546e119264bb3588208616f32a8eb6f0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetRotationY</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>a138be7b7df328d9fe65c22f6c4eba6f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetRotationZ</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>a0603a7b0a928d5a4b3f60d0bc58e1c12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetTranslationX</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>a1f404564a63db8aafd99626716ea87c5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetTranslationY</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>a1b30f6aab7b22968ecb9cebaa3a28f9b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetTranslationZ</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>a580e1b9c91f2bfe9339656510044d25d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutRotationX</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>a762749204acf043218b64bfddc7c4ebb</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutRotationY</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>a6093723ad60a5a17d7be91a6f26ce2fe</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutRotationZ</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>ad58415bf89e5e664ddf5cc7688a2a63d</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutTranslationX</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>af2d2d06521ae217522cbc787333ab35b</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutTranslationY</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>a333943fc226b3791aa954f82dfecbb87</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutTranslationZ</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>a14afb19a7a3626381dd0a80fab1c7ded</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RigidTransformation</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>a912344127f05611681bd23842cddb0c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RigidTransformation</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>a9e64c77500a635f74bdecd40432117d0</anchor>
      <arglist>(const RigidTransformation &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Rotate</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>a28d3f9a37f5151ca608d4579d3af284b</anchor>
      <arglist>(double &amp;x, double &amp;y, double &amp;z) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetParameters</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>abdad1d00782cfcb31d7d99eb50c5d78f</anchor>
      <arglist>(double *params)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Translate</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>a87a90353f619f6ba43cc2ef7bfddf058</anchor>
      <arglist>(double &amp;x, double &amp;y, double &amp;z) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RigidTransformation</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>aa1cf45d18126a77225ec51a14519a2e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Add</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>a03aa2b859c6517d4f70b1a157b55e545</anchor>
      <arglist>(const DOFValue *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Approximate</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>a54bce08f57b0392a6420e010e622e31a</anchor>
      <arglist>(const ImageAttributes &amp;, double *, double *, double *, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Approximate</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>a84e20489065aa33f451cc9367a463b7a</anchor>
      <arglist>(const double *, const double *, const double *, double *, double *, double *, int, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Approximate</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>aea5936d8ba67293af55f2ab398305a66</anchor>
      <arglist>(const double *, const double *, const double *, const double *, double *, double *, double *, int, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Approximate</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>a68653aab8be7cc32097081aa81ebc8f0</anchor>
      <arglist>(const Matrix &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApproximateAsNew</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>a86daf8e502327b7b1d99cdc67f0c70dc</anchor>
      <arglist>(const Matrix &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const Matrix &amp;</type>
      <name>GetInverseMatrix</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>ad8c415d43bd788aba62278b48f2a0385</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Matrix &amp;</type>
      <name>GetMatrix</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>a8d1af2a819be27a11aed9a2f121a9706</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GlobalInverse</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>a30ca55f5e95a97f6b9798e6bbef21aed</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GlobalJacobian</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>a00403f52292430bbf352524babf20ed1</anchor>
      <arglist>(Matrix &amp;, double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GlobalTransform</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>a3e443021a85e817fd55b8cef74288ad1</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=-1) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HomogeneousTransformation</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>a6316de7210398cd3cd27ef2003b4299f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HomogeneousTransformation</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>a278e2372896ca5700854410140cd926f</anchor>
      <arglist>(const Matrix &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HomogeneousTransformation</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>aa919805d221f5475b448eae9752d5300</anchor>
      <arglist>(const HomogeneousTransformation &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Inverse</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>a06d9f885cf13af81468428052902d7c1</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=-1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Invert</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>a3dad4fa26e93c36526c81e45fe2821ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsIdentity</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>aeda6a7dd178c5c6b3e28a7d2a20a865c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Jacobian</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>a218c37225386fd2b1e3a4272d7a783d4</anchor>
      <arglist>(Matrix &amp;, double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>LocalInverse</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>aeb50cf68bb4b8ac1a604a3906c0affe5</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalJacobian</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>a1bec7bf82886fe3e9520163f26abda1d</anchor>
      <arglist>(Matrix &amp;, double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalTransform</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>a68221e3b0ffea2e4eaa2c9f0dfba3030</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>a94403d334729e8e87575f503cb508617</anchor>
      <arglist>(int, DOFValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>ad34847f39a5bffa420104abfae7065fd</anchor>
      <arglist>(const DOFValue *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutMatrix</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>a9a42bc9a3d8d9149cc19b4e298831b61</anchor>
      <arglist>(const Matrix &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Reset</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>a045302b9e0b13aae1df378c772936fab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Transform</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>acc579f27a96d08fc140814838a215723</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>aaad98ebc4ac58205285875a3d37f6c57</anchor>
      <arglist>(const DOFValue *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UpdateParameter</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>ae6c92905eb1eb88e2b3810ec91b6067c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HomogeneousTransformation</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>a79f05e42463b63cb7d90b1e49b8571d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Approximate</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a32cfe2fe3cab5e66c6f7af80c5a3a248</anchor>
      <arglist>(const ImageAttributes &amp;, const Transformation *, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Approximate</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>ae3bf095b0501a1bfb03a7013c0207086</anchor>
      <arglist>(GenericImage&lt; double &gt; &amp;, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApproximateAsNew</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a748d094f8143bf042b39922fc26ac353</anchor>
      <arglist>(const ImageAttributes &amp;, const Transformation *, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApproximateAsNew</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a5d4d13c3544401a3a743b25b134f7324</anchor>
      <arglist>(GenericImage&lt; double &gt; &amp;, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApproximateAsNew</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a524495923be0d72ab139c0bd6b742c06</anchor>
      <arglist>(const ImageAttributes &amp;, double *, double *, double *, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApproximateAsNew</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>ae0d96dc689de34814cd2ca3072099232</anchor>
      <arglist>(const double *, const double *, const double *, double *, double *, double *, int, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApproximateAsNew</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a5d2ace4ec97286e76ec0b310d8486ae5</anchor>
      <arglist>(const double *, const double *, const double *, const double *, double *, double *, double *, int, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateDOFsGradient</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>ac01b06213d01ecfce5767d3ece6f9425</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, const double *, int, double *, double=1.0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateGradient</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a0dfd9962ec5de11bc476fa5142e20e04</anchor>
      <arglist>(const ImageAttributes &amp;, const double *, const double *, const double *, double *, double=1.0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateGradient</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a13d0daa3a9e622fc39f54f2373898c09</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, int, double *, double=1.0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateGradient</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a12398cf873fde3a70bc83f9cdd374f40</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, const double *, int, double *, double=1.0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>CanModifyDisplacement</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>aa1e50135dbe479048d39bff7c6e28f7b</anchor>
      <arglist>(int=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Displacement</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>ae48e6d2d64bdbd607f35e592cef6bcfb</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Displacement</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>afb7013ef9ddf0faf073998bb7b0c34d9</anchor>
      <arglist>(const ImageAttributes &amp;, double *, double *, double *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Displacement</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a714e54b263b3aa7ab8d44ac338dc2b69</anchor>
      <arglist>(GenericImage&lt; double &gt; &amp;, double=-1, const WorldCoordsImage *=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Displacement</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a99d412487c151afe38e1d761b2adb8f4</anchor>
      <arglist>(GenericImage&lt; float &gt; &amp;, double=-1, const WorldCoordsImage *=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Displacement</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a381ae11569dfb549c98950adb8f0f420</anchor>
      <arglist>(GenericImage&lt; double &gt; &amp;, double, double, const WorldCoordsImage *=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Displacement</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>aef927342b03ab460c11faa1c53643e17</anchor>
      <arglist>(GenericImage&lt; float &gt; &amp;, double, double, const WorldCoordsImage *=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DisplacementAfterDOFChange</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a2a1aee23b62d7409ac01435a56d70949</anchor>
      <arglist>(int dof, double dv, GenericImage&lt; double &gt; &amp;dx, double t, double t0=-1, const WorldCoordsImage *i2w=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>DOFBoundingBox</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a032ec80d011fb315861183696115e6fe</anchor>
      <arglist>(const Image *, int, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, double=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>DOFGradientNorm</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a87b6020596458d96aa98fc41f480d470</anchor>
      <arglist>(const double *) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>EvaluateRMSError</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>abe2ac552adec91115996686896e76b82</anchor>
      <arglist>(const ImageAttributes &amp;, const Transformation *) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>EvaluateRMSError</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a1514bf7e3554d0e3bfd3bfade67ffb78</anchor>
      <arglist>(const ImageAttributes &amp;, double *, double *) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>EvaluateRMSError</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a5e6e506fc681e804adde12b637af9deb</anchor>
      <arglist>(const ImageAttributes &amp;, double *, double *, double *) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>EvaluateRMSError</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a4c50bc3d65021e67ddd1b83ab5225982</anchor>
      <arglist>(const double *, const double *, const double *, double, double *, double *, double *, int no) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>EvaluateRMSError</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a5eba658ffde0a1015df1776fe590fa6d</anchor>
      <arglist>(const double *, const double *, const double *, const double *, double *, double *, double *, int no) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a43dcee2c4dc2c3fb1da823702d46a64a</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a26b86bbb9222688faf5c2f3fe17019d6</anchor>
      <arglist>(DOFValue *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DOFStatus</type>
      <name>GetStatus</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>ab7923e5f5c7510c1763715a0f2bce140</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GlobalDisplacement</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a1a447d414ef0a3b892eb6740a63e29fe</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GlobalHessian</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>ad40f63d6845e1c38ae7650d61b89c237</anchor>
      <arglist>(Matrix[3], double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GlobalInverseDisplacement</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a20e1ebd40fff53bf7e5f5352975de3bd</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GlobalJacobian</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a4ffa5706914d99e515fcce4408bb9778</anchor>
      <arglist>(double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasSameDOFsAs</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a3c841a7441c4e15777ce61326b29fbf7</anchor>
      <arglist>(const Transformation *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Hessian</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>ab66e3d07c3a37e4d08d5331fd389b38f</anchor>
      <arglist>(Matrix[3], double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Inverse</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a60640c4c39e5706d79a9561eb0de7f56</anchor>
      <arglist>(Point &amp;, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>Inverse</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>aa2fd1ca94cf3e3f6e275bbabe2205c06</anchor>
      <arglist>(PointSet &amp;, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>InverseDisplacement</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a893e8b2c5aaf0945b3d520093f5ce170</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InverseDisplacement</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a3898a924e075a32a46be0b0d1afbdf95</anchor>
      <arglist>(const ImageAttributes &amp;, double *, double *, double *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InverseDisplacement</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a9362b6c38108a0969e59ff9018cb4ed2</anchor>
      <arglist>(GenericImage&lt; double &gt; &amp;, double=-1, const WorldCoordsImage *=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InverseDisplacement</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a8da0e2be4db84f0e08628f0ca6327218</anchor>
      <arglist>(GenericImage&lt; float &gt; &amp;, double=-1, const WorldCoordsImage *=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InverseDisplacement</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a08840232d68eca864105307afad03b6f</anchor>
      <arglist>(GenericImage&lt; double &gt; &amp;, double, double, const WorldCoordsImage *=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InverseDisplacement</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>ae6b359689340e4122f423778c41e2843</anchor>
      <arglist>(GenericImage&lt; float &gt; &amp;, double, double, const WorldCoordsImage *=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Jacobian</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>ad65a5eece021ddfd8b9c22a6278aab29</anchor>
      <arglist>(double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalDisplacement</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>adbc11cbc63089c13102c786bddedc17d</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalHessian</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a59f15a485efc6067b190cb8ae1acb691</anchor>
      <arglist>(Matrix[3], double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>LocalInverseDisplacement</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a1047093ac1cc8f31c9980789884d4853</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>LocalJacobian</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a609ad44d6e7721bdbc2d5514739d917c</anchor>
      <arglist>(double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfActiveDOFs</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a659de355e35c5405d77d77ab25c17d75</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumberOfDOFs</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a557c7df1c33b6d4c8c9e2cc1d2d74a38</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfPassiveDOFs</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a34f98e25d914caee8ed1cc9d64b63c49</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a20b86a54667463d9808eb9bcbcb6f46a</anchor>
      <arglist>(const GenericImage&lt; double &gt; *, double *, const WorldCoordsImage *, const WorldCoordsImage *, double=-1, double=1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a241b174bb97f402c21cb116780e88105</anchor>
      <arglist>(const GenericImage&lt; double &gt; *, double *, const WorldCoordsImage *, double=-1, double=1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a8ab3421a01aa191aace01418712e5ccb</anchor>
      <arglist>(const GenericImage&lt; double &gt; *, double *, double=-1, double=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a6aac93b3f72c06d52f28bf8ae8d880b1</anchor>
      <arglist>(const GenericImage&lt; double &gt; **, int, double *, const WorldCoordsImage *, const WorldCoordsImage *, const double *=NULL, double=1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a18610102494768cbb8796811e4e4a81c</anchor>
      <arglist>(const GenericImage&lt; double &gt; **, int, double *, const WorldCoordsImage *, const double *=NULL, double=1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a7277ace02ecd1ae68af135c22599f2c2</anchor>
      <arglist>(const GenericImage&lt; double &gt; **, int, double *, const double *=NULL, double=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a6c9e19b2e24c733199c8bac63a0a5777</anchor>
      <arglist>(const PointSet &amp;, const Vector3D&lt; double &gt; *, double *, double=0, double=-1, double=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutStatus</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a99c708201069b3251ffd33802caf76ec</anchor>
      <arglist>(int, DOFStatus)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a40ccadce7c5147fa91878906f400995b</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cifstream &amp;</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a9524b76a9134adefe3c12060fc142e30</anchor>
      <arglist>(Cifstream &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>RequiresCachingOfDisplacements</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a450312f453d1dd811a65ff8d6d13d05a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Transform</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a4e00480788084f4083094106ef213593</anchor>
      <arglist>(Point &amp;, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Transform</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>ac85beb212c3f8c75ccf7fa59b1b118a7</anchor>
      <arglist>(PointSet &amp;, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Transform</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a91d38eca28e4c87f549c0b33f8c76c88</anchor>
      <arglist>(int, double *, double *, double *, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Transform</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a7c8def1ae06e2f7793576d95bcfd2b21</anchor>
      <arglist>(int, double *, double *, double *, const double *, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Transform</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a182bd5bfe6b8a1ab8d1b4164357ab99b</anchor>
      <arglist>(WorldCoordsImage &amp;, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TransformationType</type>
      <name>TypeOfClass</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>ac44dd505215620a11a54688bb574c3ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Verify</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>ab848dc8eb022ca017f6f00be72130ca2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a6f5354c850999ebe7d04baf1696b6608</anchor>
      <arglist>(const char *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Transformation</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>adfb228cbf80e3a1d304f9557b0dcdfb9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix</type>
      <name>DOFs2Matrix</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>a61078e233611bbd291ab08cc81d0ee7f</anchor>
      <arglist>(const double *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Matrix2DOFs</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>a3a78dbe06aaeb3e6f5f4d3a6b71b178d</anchor>
      <arglist>(const Matrix &amp;, double *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix</type>
      <name>DOFs2Matrix</name>
      <anchorfile>classmirtk_1_1SimilarityTransformation.html</anchorfile>
      <anchor>aaca637a664388fef8263008be640bcad</anchor>
      <arglist>(const double *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix</type>
      <name>DOFs2Matrix</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>a46d4fa924af2abbb947c8631d55fc804</anchor>
      <arglist>(const double *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Matrix2DOFs</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>a9c0970dbf55e285ef516969e5947a06b</anchor>
      <arglist>(const Matrix &amp;, double *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>CheckHeader</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a49631f722a8d47c418345877a6e620d7</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Transformation *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a4a9d61fbe47d8e3dca141d0242c8382f</anchor>
      <arglist>(TransformationType)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Transformation *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a57d775ff90b6249aa889c114bd38a6bb</anchor>
      <arglist>(const Transformation *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Transformation *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a66557e038b8144187bb5d2462ec8b10e</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TransformationType</type>
      <name>TypeOfClass</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>acee77ec67fd400d43256f5b4d983dfd5</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AffineTransformation</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>a5ee2ac3f174024e775058c7f87897c10</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AffineTransformation</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>ab066a3b841f8e6988e562f96a365cfa4</anchor>
      <arglist>(const RigidTransformation &amp;, int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AffineTransformation</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>a64bc8db9ded2a1532bf9986695a72c48</anchor>
      <arglist>(const SimilarityTransformation &amp;, int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AffineTransformation</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>aae848122cdfdd4a0dc6944345585a1b8</anchor>
      <arglist>(const AffineTransformation &amp;, int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Cifstream &amp;</type>
      <name>ReadDOFs</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>acce2766283d447951ee1f2f57615d95a</anchor>
      <arglist>(Cifstream &amp;, TransformationType)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UpdateShearingTangent</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>a13fa48c2790b90dce01587e5ef6fe826</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SimilarityTransformation</name>
      <anchorfile>classmirtk_1_1SimilarityTransformation.html</anchorfile>
      <anchor>ab890b67d501d1910c3c8fcd61d4780ea</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SimilarityTransformation</name>
      <anchorfile>classmirtk_1_1SimilarityTransformation.html</anchorfile>
      <anchor>a24356af7920f0eff1b1f4dfe6dc5c0b9</anchor>
      <arglist>(const RigidTransformation &amp;, int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SimilarityTransformation</name>
      <anchorfile>classmirtk_1_1SimilarityTransformation.html</anchorfile>
      <anchor>af10ae3191ecd52e77a3042771c542042</anchor>
      <arglist>(const SimilarityTransformation &amp;, int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RigidTransformation</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>ae2d1507004778829609b47b9f8e92032</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RigidTransformation</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>a819adc99ee7db09bc0741c206bbca57e</anchor>
      <arglist>(const RigidTransformation &amp;, int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UpdateRotationSineCosine</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>af787e626d769a682cf962dcbc713594e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>HomogeneousTransformation</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>a8a012c6afa909368bc41acdccb61ab46</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>HomogeneousTransformation</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>ac72b4148e68d95d08cd701a95405459b</anchor>
      <arglist>(const HomogeneousTransformation &amp;, int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>a2cb240da893aa658c23f566ebb76e158</anchor>
      <arglist>(AttributeSelector)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>InitializeDOFs</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a00af8451da830e36710cd71cb6975dc5</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>InitializeDOFs</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>ad26c830d5756d231b14bf571a102f02d</anchor>
      <arglist>(const Transformation &amp;, int=-1)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Transformation</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a85bc36d2807590eb6e8d6df4364ef6ec</anchor>
      <arglist>(int=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Transformation</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>aefb8fe32cce5a688f6705343f5fdc17c</anchor>
      <arglist>(const Transformation &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Transformation</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a1aa19eb9eeabdfb85c01d49085b1fc29</anchor>
      <arglist>(const Transformation &amp;, int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Cofstream &amp;</type>
      <name>WriteDOFs</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a0669e008f5802d801a838a4b610cc02a</anchor>
      <arglist>(Cofstream &amp;) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_tansxy</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>abcd20ab78f2dc6a971470342abf51178</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_tansxz</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>a92c057aad1c014fe4c6c6d0c73a3c867</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_tansyz</name>
      <anchorfile>classmirtk_1_1AffineTransformation.html</anchorfile>
      <anchor>ad757a58a3fd1697f4a468eaa083ec02a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_cosrx</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>a44fe5cb09edf099378eb1cf68c6e4005</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_cosry</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>aad6563225c1be3d361722e7656170260</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_cosrz</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>ad0fe7363ac53a2be4daaf5fcfed8423e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_sinrx</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>ad71639c04dea0bb64f8206dad2d98d6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_sinry</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>a003b9241b5073dbcfdd977a56f5878c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_sinrz</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>aae87b041ff243b2bc5503c99c7420636</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix</type>
      <name>_inverse</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>aeedbf6d8af420ea7fb305c41035623ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix</type>
      <name>_matrix</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>aba39ce328c4cf25237f8152cb8c5a6c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_NumberOfDOFs</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>afe0ee825bc04171aae7d76d9a6bc295a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DOFValue *</type>
      <name>_Param</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a354dc0ce8d9f5ccbf11b349fedd46d63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DOFStatus *</type>
      <name>_Status</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a9d752d0c5c2c7cc5362f426dcd3ad750</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Status</type>
      <name>DOFStatus</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a47b34697b2111553e06c1dc8193b5e3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>DOFValue</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>ac013ee44550e1fb59f12976f33b295c7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::AsConformalAsPossibleVolumeParameterizer</name>
    <filename>classmirtk_1_1AsConformalAsPossibleVolumeParameterizer.html</filename>
    <base>mirtk::LinearTetrahedralVolumeParameterizer</base>
    <member kind="function">
      <type></type>
      <name>AsConformalAsPossibleVolumeParameterizer</name>
      <anchorfile>classmirtk_1_1AsConformalAsPossibleVolumeParameterizer.html</anchorfile>
      <anchor>a69f1692b0b160591c3927b6bcd87dce2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AsConformalAsPossibleVolumeParameterizer</name>
      <anchorfile>classmirtk_1_1AsConformalAsPossibleVolumeParameterizer.html</anchorfile>
      <anchor>ab104394bec4a8ccf83216f13995ddd00</anchor>
      <arglist>(const AsConformalAsPossibleVolumeParameterizer &amp;)</arglist>
    </member>
    <member kind="function">
      <type>AsConformalAsPossibleVolumeParameterizer &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1AsConformalAsPossibleVolumeParameterizer.html</anchorfile>
      <anchor>af066899f8d2e2ec95365751def3040a8</anchor>
      <arglist>(const AsConformalAsPossibleVolumeParameterizer &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AsConformalAsPossibleVolumeParameterizer</name>
      <anchorfile>classmirtk_1_1AsConformalAsPossibleVolumeParameterizer.html</anchorfile>
      <anchor>aa99fb65ca402a43c2cd18fc6153e9f1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LinearTetrahedralVolumeParameterizer</name>
      <anchorfile>classmirtk_1_1LinearTetrahedralVolumeParameterizer.html</anchorfile>
      <anchor>ac3076fdcb4389aef3c398620cb2e9ce6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsBoundaryPoint</name>
      <anchorfile>classmirtk_1_1TetrahedralVolumeParameterizer.html</anchorfile>
      <anchor>a445e92b3455144fde7827e5e9209b555</anchor>
      <arglist>(vtkIdType) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TetrahedralVolumeParameterizer</name>
      <anchorfile>classmirtk_1_1TetrahedralVolumeParameterizer.html</anchorfile>
      <anchor>ae313835b075f3e534f3ec31fb41265ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VolumetricMap *</type>
      <name>GetOutputMap</name>
      <anchorfile>classmirtk_1_1VolumeParameterizer.html</anchorfile>
      <anchor>ac788e3288bd38741c45c2075a51f3fb2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>OutputDimension</name>
      <anchorfile>classmirtk_1_1VolumeParameterizer.html</anchorfile>
      <anchor>a9b87b0da047cdb697db254246ce165f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1VolumeParameterizer.html</anchorfile>
      <anchor>a5db29886b1358517cb0f6c88582eafb2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VolumeParameterizer</name>
      <anchorfile>classmirtk_1_1VolumeParameterizer.html</anchorfile>
      <anchor>a2e333ac7d321fb920abb397be2ba3b09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1Object.html</anchorfile>
      <anchor>a88474a01ed92c75b06067fb61cf27ba6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1Object.html</anchorfile>
      <anchor>aa48953dfd40ac738789c4269db0c6887</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Finalize</name>
      <anchorfile>classmirtk_1_1AsConformalAsPossibleVolumeParameterizer.html</anchorfile>
      <anchor>aeaaeace7c655e12e121bfa8b7589f597</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Matrix3x3</type>
      <name>GetWeight</name>
      <anchorfile>classmirtk_1_1AsConformalAsPossibleVolumeParameterizer.html</anchorfile>
      <anchor>abe7032c07309713618de24cf54de1251</anchor>
      <arglist>(vtkIdType cellId, const double v0[3], const double v1[3], const double v2[3], const double v3[3], double volume) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1AsConformalAsPossibleVolumeParameterizer.html</anchorfile>
      <anchor>a30603c3e01331d799b57d63b24d6a525</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LinearTetrahedralVolumeParameterizer</name>
      <anchorfile>classmirtk_1_1LinearTetrahedralVolumeParameterizer.html</anchorfile>
      <anchor>a9b53a1e1b2ddac88814344d142af02ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LinearTetrahedralVolumeParameterizer</name>
      <anchorfile>classmirtk_1_1LinearTetrahedralVolumeParameterizer.html</anchorfile>
      <anchor>afac876ac3cf87d106bc248e7321db91e</anchor>
      <arglist>(const LinearTetrahedralVolumeParameterizer &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>LinearTetrahedralVolumeParameterizer &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1LinearTetrahedralVolumeParameterizer.html</anchorfile>
      <anchor>ac1e75cf1c728f27cebc7b2f0e89c5724</anchor>
      <arglist>(const LinearTetrahedralVolumeParameterizer &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Parameterize</name>
      <anchorfile>classmirtk_1_1LinearTetrahedralVolumeParameterizer.html</anchorfile>
      <anchor>a85ca4c9ace75e1b0c15bb006e95c28d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Solve</name>
      <anchorfile>classmirtk_1_1LinearTetrahedralVolumeParameterizer.html</anchorfile>
      <anchor>a2d7a9401e3de689fabeff9b25566696e</anchor>
      <arglist>(const LinearTetrahedralVolumeParameterizer *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CopyAttributes</name>
      <anchorfile>classmirtk_1_1TetrahedralVolumeParameterizer.html</anchorfile>
      <anchor>ad23791685271d096dc9d38995988b861</anchor>
      <arglist>(const TetrahedralVolumeParameterizer &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1TetrahedralVolumeParameterizer.html</anchorfile>
      <anchor>a3130e10fea016ba8792534950e1c4ac5</anchor>
      <arglist>(vtkSmartPointer&lt; vtkDataArray &gt;, InputMask)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1TetrahedralVolumeParameterizer.html</anchorfile>
      <anchor>a29695d6dca995ac7fac3231f4d376ec4</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPointSet &gt;, Volume)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1TetrahedralVolumeParameterizer.html</anchorfile>
      <anchor>a335fc00f3b43febd05aada6072993fcb</anchor>
      <arglist>(vtkSmartPointer&lt; vtkDataArray &gt;, Coords)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1TetrahedralVolumeParameterizer.html</anchorfile>
      <anchor>a22226b6678e5cdcb7b42ac76c09ba329</anchor>
      <arglist>(vtkSmartPointer&lt; vtkDataArray &gt;, BoundaryMask)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1TetrahedralVolumeParameterizer.html</anchorfile>
      <anchor>a52a8bfedd1c4adbe3f053979264fd127</anchor>
      <arglist>(int, NumberOfPoints)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1TetrahedralVolumeParameterizer.html</anchorfile>
      <anchor>a5cce255b18235fdf19fa0354d462a423</anchor>
      <arglist>(int, NumberOfBoundaryPoints)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1TetrahedralVolumeParameterizer.html</anchorfile>
      <anchor>a434f728e0b90f832a75e44bcb0621c45</anchor>
      <arglist>(int, NumberOfInteriorPoints)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TetrahedralVolumeParameterizer &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1TetrahedralVolumeParameterizer.html</anchorfile>
      <anchor>a18b9811a40f08b047f3aa00cb41a1e65</anchor>
      <arglist>(const TetrahedralVolumeParameterizer &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TetrahedralVolumeParameterizer</name>
      <anchorfile>classmirtk_1_1TetrahedralVolumeParameterizer.html</anchorfile>
      <anchor>af73f44d6174a7a67ea063f49f47cfef7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TetrahedralVolumeParameterizer</name>
      <anchorfile>classmirtk_1_1TetrahedralVolumeParameterizer.html</anchorfile>
      <anchor>ac38f6fd3a8f77bd99395327dfccf8a28</anchor>
      <arglist>(const TetrahedralVolumeParameterizer &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>InitializeBoundary</name>
      <anchorfile>classmirtk_1_1VolumeParameterizer.html</anchorfile>
      <anchor>a638df867a7f348a1f7eea193f55ba205</anchor>
      <arglist>(vtkPointSet *, vtkDataArray *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>VolumeParameterizer &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1VolumeParameterizer.html</anchorfile>
      <anchor>a99ceb381528632479c332f8421e4fb06</anchor>
      <arglist>(const VolumeParameterizer &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>VolumeParameterizer</name>
      <anchorfile>classmirtk_1_1VolumeParameterizer.html</anchorfile>
      <anchor>a50ef27eff979ae9795fc137925043203</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>VolumeParameterizer</name>
      <anchorfile>classmirtk_1_1VolumeParameterizer.html</anchorfile>
      <anchor>a09e40596764ae1925eebb2a3ac28e40e</anchor>
      <arglist>(const VolumeParameterizer &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::BalloonForce</name>
    <filename>classmirtk_1_1BalloonForce.html</filename>
    <base>mirtk::SurfaceForce</base>
    <member kind="function">
      <type></type>
      <name>BalloonForce</name>
      <anchorfile>classmirtk_1_1BalloonForce.html</anchorfile>
      <anchor>a02fbdf434031a2fb24e632397c7c13a4</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BalloonForce</name>
      <anchorfile>classmirtk_1_1BalloonForce.html</anchorfile>
      <anchor>a9c2e9d9a92f92d3a71ca019b105d6fa9</anchor>
      <arglist>(const BalloonForce &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1BalloonForce.html</anchorfile>
      <anchor>a477776ec7d1832cefa02f66ce32b1dcc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BalloonForce &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1BalloonForce.html</anchorfile>
      <anchor>a5f3af5b0b48057d0e2db9b18c9346d58</anchor>
      <arglist>(const BalloonForce &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1BalloonForce.html</anchorfile>
      <anchor>a26f798ec22c2b4ef243bcbf7448c76e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1BalloonForce.html</anchorfile>
      <anchor>a90503cda8bfc41801ecafc6818ed8d05</anchor>
      <arglist>(bool=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BalloonForce</name>
      <anchorfile>classmirtk_1_1BalloonForce.html</anchorfile>
      <anchor>aa52c5c931ba032d3b2e88ccc7cdc44cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>IntersectWithRay</name>
      <anchorfile>classmirtk_1_1SurfaceForce.html</anchorfile>
      <anchor>a1dd144c861ed5e8c8a6b82b8f8365e01</anchor>
      <arglist>(const double p[3], const double e[3], double l=.0) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SelfDistance</name>
      <anchorfile>classmirtk_1_1SurfaceForce.html</anchorfile>
      <anchor>ad429ecd5304977ff28055a61712013a6</anchor>
      <arglist>(const double p[3], const double n[3], double maxd=.0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SurfaceForce</name>
      <anchorfile>classmirtk_1_1SurfaceForce.html</anchorfile>
      <anchor>ac15c933a865a100b5409d0bf19d4bb4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ExternalForce</name>
      <anchorfile>classmirtk_1_1ExternalForce.html</anchorfile>
      <anchor>a77830e58c1d01c5b6ae6b0cf027075b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Reinitialize</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>a0cca412de0d255935a6789bc6270b33b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteDataSets</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>a6776f7b0db78ff46da85e64c23eb2c8a</anchor>
      <arglist>(const char *, const char *, bool=true) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteGradient</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>aee056beb42521bad3fa2d3de5bd5fdff</anchor>
      <arglist>(const char *, const char *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PointSetForce</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>ab833c28125296573c79e21c11b9f4a3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual enum EnergyMeasure</type>
      <name>EnergyMeasure</name>
      <anchorfile>classmirtk_1_1EnergyTerm.html</anchorfile>
      <anchor>ab3093d120424204366076e2a993cc9e4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Gradient</name>
      <anchorfile>classmirtk_1_1EnergyTerm.html</anchorfile>
      <anchor>a54842eabf915c31982b870e8660432f3</anchor>
      <arglist>(double *gradient, double step)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GradientStep</name>
      <anchorfile>classmirtk_1_1EnergyTerm.html</anchorfile>
      <anchor>a896a39cf0ff5c68e6705939bfe93686f</anchor>
      <arglist>(const double *gradient, double &amp;min, double &amp;max) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>InitialValue</name>
      <anchorfile>classmirtk_1_1EnergyTerm.html</anchorfile>
      <anchor>a19673113b3f7a505af0459afe350f841</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NormalizedGradient</name>
      <anchorfile>classmirtk_1_1EnergyTerm.html</anchorfile>
      <anchor>aac16404457ba1c111a7a25e8144184fa</anchor>
      <arglist>(double *gradient, double step)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>Prefix</name>
      <anchorfile>classmirtk_1_1EnergyTerm.html</anchorfile>
      <anchor>aebf2c9c1e3284697bbfd676347a8ae66</anchor>
      <arglist>(const char *=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1EnergyTerm.html</anchorfile>
      <anchor>a7725ae2bfafaa2bdd8e8ed7e51f5f161</anchor>
      <arglist>(Indent=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>RawValue</name>
      <anchorfile>classmirtk_1_1EnergyTerm.html</anchorfile>
      <anchor>a0791585619bac92d8a75af42e9edbb47</anchor>
      <arglist>(double) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RawValue</name>
      <anchorfile>classmirtk_1_1EnergyTerm.html</anchorfile>
      <anchor>ab840c6cb680c6cfef10b12974e58015c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ResetInitialValue</name>
      <anchorfile>classmirtk_1_1EnergyTerm.html</anchorfile>
      <anchor>acdf86fcabce6c588b0115cf669ef716e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ResetValue</name>
      <anchorfile>classmirtk_1_1EnergyTerm.html</anchorfile>
      <anchor>affed4921cbda8d2ae89b63d7d682e8a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Upgrade</name>
      <anchorfile>classmirtk_1_1EnergyTerm.html</anchorfile>
      <anchor>a4391e595ad8899576f82cc84cd8bbd88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Value</name>
      <anchorfile>classmirtk_1_1EnergyTerm.html</anchorfile>
      <anchor>a9069b3fc5970a7f2c933f5e7f9c3c346</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EnergyTerm</name>
      <anchorfile>classmirtk_1_1EnergyTerm.html</anchorfile>
      <anchor>a787fd96f10a0be7a37cc339513c596e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>DefaultName</name>
      <anchorfile>classmirtk_1_1Configurable.html</anchorfile>
      <anchor>a55a3ae8f3d79d8acfe49d557c12eb5dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1Configurable.html</anchorfile>
      <anchor>a0616e625a68cbf4043a941e299c1a8c3</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Configurable</name>
      <anchorfile>classmirtk_1_1Configurable.html</anchorfile>
      <anchor>ae63446ae9dff3297887cc03440af3e67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ComputeLocalIntensityAttributes</name>
      <anchorfile>classmirtk_1_1BalloonForce.html</anchorfile>
      <anchor>a6819a8e332e21152c33681a028fc0c82</anchor>
      <arglist>(bool, bool)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CopyAttributes</name>
      <anchorfile>classmirtk_1_1BalloonForce.html</anchorfile>
      <anchor>a325d2dadb5aac4752fb78fb318fc0ad6</anchor>
      <arglist>(const BalloonForce &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateGradient</name>
      <anchorfile>classmirtk_1_1BalloonForce.html</anchorfile>
      <anchor>abae0129732f1a3456afb80c6164cb63c</anchor>
      <arglist>(double *, double, double)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetWithoutPrefix</name>
      <anchorfile>classmirtk_1_1BalloonForce.html</anchorfile>
      <anchor>a435fd50d60def09adb78cea9863afe19</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CopyAttributes</name>
      <anchorfile>classmirtk_1_1SurfaceForce.html</anchorfile>
      <anchor>a7a47bbc132a7b22c591822c6362a6589</anchor>
      <arglist>(const SurfaceForce &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SurfaceForce &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1SurfaceForce.html</anchorfile>
      <anchor>a9fb9fc7c5d8119a73fa7fc6727578660</anchor>
      <arglist>(const SurfaceForce &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SurfaceForce</name>
      <anchorfile>classmirtk_1_1SurfaceForce.html</anchorfile>
      <anchor>aaec4c3a70b0879f6a3204a3ad92b91e8</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SurfaceForce</name>
      <anchorfile>classmirtk_1_1SurfaceForce.html</anchorfile>
      <anchor>a6110328b80348f3b7fdf9b31ed38a523</anchor>
      <arglist>(const SurfaceForce &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CopyAttributes</name>
      <anchorfile>classmirtk_1_1ExternalForce.html</anchorfile>
      <anchor>a40803382ea9c096b12036d96d9f77b66</anchor>
      <arglist>(const ExternalForce &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1ExternalForce.html</anchorfile>
      <anchor>a81065a398f3590ca09cba0536eb5aed6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ExternalForce</name>
      <anchorfile>classmirtk_1_1ExternalForce.html</anchorfile>
      <anchor>ab07f5efa3199bffb8b1aea0487a5ad08</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ExternalForce</name>
      <anchorfile>classmirtk_1_1ExternalForce.html</anchorfile>
      <anchor>a6ff688d14628a42f88afe850c768cc6a</anchor>
      <arglist>(const ExternalForce &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ExternalForce &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1ExternalForce.html</anchorfile>
      <anchor>a3b90d0803f4171cbc3eff151918e77c0</anchor>
      <arglist>(const ExternalForce &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>AddPointData</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>a25a97602afab97c25859b2b0041d4ff6</anchor>
      <arglist>(const char *name, vtkSmartPointer&lt; vtkDataArray &gt; &amp;data, bool global=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>vtkDataArray *</type>
      <name>AddPointData</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>ad529ea5ecf7b36c518156def7b28414b</anchor>
      <arglist>(const char *name, int c=1, int type=VTK_FLOAT, bool global=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>AllocateCount</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>aa0f8d3ee1153f25106e4af28deefb168</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>AllocateGradient</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>a65a226af2475c56dd0c6f09cded9a147</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CopyAttributes</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>a8ee57a5417264e7afdbccdac6795335b</anchor>
      <arglist>(const PointSetForce &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>vtkSmartPointer&lt; vtkPoints &gt;</type>
      <name>GetInitialPoints</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>ac7371ef498934d0fb84503fbc2fa687d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>vtkDataArray *</type>
      <name>GetPointData</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>a410c6ab8188e14c7ad68db276cf62881</anchor>
      <arglist>(const char *name, bool optional=false) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Init</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>add8fd138c517624f3894636ead441310</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAggregateMacro</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>af47a029c6707ba061c43c0bfa0685a56</anchor>
      <arglist>(int, Count)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>a717c41fa688de69b2e4ac6014d94b007</anchor>
      <arglist>(int, GradientSize)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>a494f390793c4445e2565d9c24a065c96</anchor>
      <arglist>(int, CountSize)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>a97d22b9970c344108af5c36b6c97fb3f</anchor>
      <arglist>(bool, InitialUpdate)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkComponentMacro</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>a1912cb7187565792c9b8262789add658</anchor>
      <arglist>(GradientType, Gradient)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAggregateMacro</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>a3897865e8dc8e566e9e4fa9b35b50526</anchor>
      <arglist>(RegisteredPointSet, PointSet)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>afa181a5552414427c2f2e8e83bc1acf1</anchor>
      <arglist>(int, GradientAveraging)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>a9a87680bc5ea629d2c24eafd4558f494</anchor>
      <arglist>(bool, AverageSignedGradients)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>a3febd7aa8b1f1574864920ecea8d9ec9</anchor>
      <arglist>(bool, AverageGradientMagnitude)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>ad2ebdf2e2c930d6d69434ecc80b7c603</anchor>
      <arglist>(bool, SurfaceForce)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>a56a1ae0672a1fb760f74c0b6ca529d3b</anchor>
      <arglist>(int, NumberOfPoints)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PointSetForce &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>a32e9b5cb932370b727a18d8318a33c3e</anchor>
      <arglist>(const PointSetForce &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PointSetForce</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>afb8c7ceba76d61b4160eb1d89c44132e</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PointSetForce</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>a72bd3e04d6cd5c7333700e68db1843f6</anchor>
      <arglist>(const PointSetForce &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>RemovePointData</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>a8cad4c924bc9db9987e44808ed15021c</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EnergyTerm</name>
      <anchorfile>classmirtk_1_1EnergyTerm.html</anchorfile>
      <anchor>a3745f4c531b1beb6eb3d5266c4d9a0fb</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EnergyTerm</name>
      <anchorfile>classmirtk_1_1EnergyTerm.html</anchorfile>
      <anchor>a3d5351b729debb4a1b0166001889ad03</anchor>
      <arglist>(const EnergyTerm &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>EnergyTerm &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1EnergyTerm.html</anchorfile>
      <anchor>a03adfc001bdb7c5d1042fc7f21ffd681</anchor>
      <arglist>(const EnergyTerm &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetWithPrefix</name>
      <anchorfile>classmirtk_1_1EnergyTerm.html</anchorfile>
      <anchor>a0230505ed36e5ac317c77a201b73404c</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Configurable</name>
      <anchorfile>classmirtk_1_1Configurable.html</anchorfile>
      <anchor>a841e2cdaf74ad0fad8d97bd4eb66f762</anchor>
      <arglist>(const char *=&quot;&quot;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Configurable</name>
      <anchorfile>classmirtk_1_1Configurable.html</anchorfile>
      <anchor>a2ea340e84ad8312a370b1861c7bad565</anchor>
      <arglist>(const Configurable &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>string</type>
      <name>DefaultPrefix</name>
      <anchorfile>classmirtk_1_1Configurable.html</anchorfile>
      <anchor>a796289175e548200a207a547cc50534b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>HasName</name>
      <anchorfile>classmirtk_1_1Configurable.html</anchorfile>
      <anchor>aec7ee4c057153ef82b4667bd6890330e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>HasPrefix</name>
      <anchorfile>classmirtk_1_1Configurable.html</anchorfile>
      <anchor>a208ca251dcff21dbd3a1f0a254b1755d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>InsertWithPrefix</name>
      <anchorfile>classmirtk_1_1Configurable.html</anchorfile>
      <anchor>a65e2431820d5b6e864ccf2e09fffd409</anchor>
      <arglist>(ParameterList &amp;, string, T) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>InsertWithPrefix</name>
      <anchorfile>classmirtk_1_1Configurable.html</anchorfile>
      <anchor>a9e1299b4ee68d4912f86b97e24f94ecc</anchor>
      <arglist>(ParameterList &amp;, const ParameterList &amp;) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Configurable &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1Configurable.html</anchorfile>
      <anchor>a8c385aba1deea3cfd156e1f66f8b6a82</anchor>
      <arglist>(const Configurable &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>string</type>
      <name>ParameterNameWithoutPrefix</name>
      <anchorfile>classmirtk_1_1Configurable.html</anchorfile>
      <anchor>a5f257c65d531c54ce72be522adfb6b62</anchor>
      <arglist>(const char *) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>string</type>
      <name>ParameterNameWithPrefix</name>
      <anchorfile>classmirtk_1_1Configurable.html</anchorfile>
      <anchor>a3ba1f3b75fab34e3f6e590c99d586289</anchor>
      <arglist>(const string &amp;) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>string</type>
      <name>ParameterNameWithPrefix</name>
      <anchorfile>classmirtk_1_1Configurable.html</anchorfile>
      <anchor>a0a1cf101e12c80c7dc311c8a124041a1</anchor>
      <arglist>(const char *) const </arglist>
    </member>
    <member kind="typedef">
      <type>GenericImage&lt; VoxelType &gt;</type>
      <name>ImageType</name>
      <anchorfile>classmirtk_1_1ExternalForce.html</anchorfile>
      <anchor>a2741cc830c82c41f98addcc59e812d91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RegisteredImage::VoxelType</type>
      <name>VoxelType</name>
      <anchorfile>classmirtk_1_1ExternalForce.html</anchorfile>
      <anchor>a74bb67775225e610dbdeb54c963cb947</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector3D&lt; double &gt;</type>
      <name>GradientType</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>a15295643915ce2d8c6aafb72afde4a6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ObjectFactory&lt; enum EnergyMeasure, EnergyTerm &gt;</type>
      <name>FactoryType</name>
      <anchorfile>classmirtk_1_1EnergyTerm.html</anchorfile>
      <anchor>ae120c047c6c92f96fc2add3635dfe2b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ExternalForce *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1ExternalForce.html</anchorfile>
      <anchor>a8d90f6be31b9be5cc3b7a6e40f0b5bb4</anchor>
      <arglist>(ExternalForceTerm, const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FactoryType &amp;</type>
      <name>Factory</name>
      <anchorfile>classmirtk_1_1EnergyTerm.html</anchorfile>
      <anchor>a07173605475f6ff062a3ecb740913e8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static EnergyTerm *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1EnergyTerm.html</anchorfile>
      <anchor>a1868b2ab4e00779a094d0af2533adf08</anchor>
      <arglist>(EnergyMeasure, const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static EnergyTerm *</type>
      <name>TryNew</name>
      <anchorfile>classmirtk_1_1EnergyTerm.html</anchorfile>
      <anchor>aeea502c39d76cd6cb01011450d8c7078</anchor>
      <arglist>(EnergyMeasure, const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::BaseImage</name>
    <filename>classmirtk_1_1BaseImage.html</filename>
    <base>mirtk::Object</base>
    <member kind="enumeration">
      <type></type>
      <name>OrientationCode</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a299eb7f11bb568c28d3435d12e65ecf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>L2R</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a299eb7f11bb568c28d3435d12e65ecf2a4ce1c630fb3a7192cff6eeaed1090b96</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>R2L</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a299eb7f11bb568c28d3435d12e65ecf2a495c4ba98714aeaf4d91ea3c5366958c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>P2A</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a299eb7f11bb568c28d3435d12e65ecf2a9314a50d2db7ba318b944fa7584fddfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>A2P</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a299eb7f11bb568c28d3435d12e65ecf2a498790278794d01ec12f31be8e3d629e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>I2S</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a299eb7f11bb568c28d3435d12e65ecf2a81024901d63ea23eea923d2e5533c0a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>S2I</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a299eb7f11bb568c28d3435d12e65ecf2aa7905c0e7d1a8e48c10841a607bba0e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>VoxelType</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a8f8932e7c68d9565f01e417805c339f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const ImageAttributes &amp;</type>
      <name>Attributes</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a61dc54863eb9f6473e56ff2f93dd56c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a2bebf3babc00a4f386f543a0fbdda437</anchor>
      <arglist>(int &amp;, int &amp;, int &amp;, int &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a05023534a5d02c64e09b4f0bcd7668f0</anchor>
      <arglist>(int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>aec2b3a959f3f4864f50a12630e1630f9</anchor>
      <arglist>(int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>CenterOfForeground</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ac6db90e2007acf5bec3940e3ecadb30c</anchor>
      <arglist>(Point &amp;center) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>CenterOfForeground</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a26895118ac9470ca8ca4c6a853333406</anchor>
      <arglist>(Point &amp;center, double padding) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Clear</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>af90311a919e1d7b264995e0d44243f3b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearBackgroundValue</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ac1815323e508d8bf4577b555c47a5b93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearMask</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>acdf3e4bcd6dc95ad93908f716a43145a</anchor>
      <arglist>(bool=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BaseImage *</type>
      <name>Copy</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a808f0054408f990add1bbe74851bf470</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>FlipXT</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ad7be99fe7eb9237d5279ce70274b2bbb</anchor>
      <arglist>(bool)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>FlipXY</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a759ffa72dedd1c1eb145004e8ab78efa</anchor>
      <arglist>(bool)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>FlipXZ</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a2e01dd3e3b786ac4fb2eb53b8ad14692</anchor>
      <arglist>(bool)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>FlipYT</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a89559858298b4fb40adb092c38e42470</anchor>
      <arglist>(bool)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>FlipYZ</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a6b68c9d112c0e254f52a0e9f3b611469</anchor>
      <arglist>(bool)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>FlipZT</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a01eaa44c3388869f66a28b2a8232b387</anchor>
      <arglist>(bool)=0</arglist>
    </member>
    <member kind="function">
      <type>ImageAttributes</type>
      <name>ForegroundDomain</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ae439a2e21213b7125a581b22b9c566fd</anchor>
      <arglist>(int i1, int j1, int k1, int i2, int j2, int k2, double sigma, bool orthogonal=true) const </arglist>
    </member>
    <member kind="function">
      <type>ImageAttributes</type>
      <name>ForegroundDomain</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ae745ed6c472850b74494b4327f5dbca7</anchor>
      <arglist>(double sigma=.0, bool orthogonal=true) const </arglist>
    </member>
    <member kind="function">
      <type>ImageAttributes</type>
      <name>ForegroundDomain</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ab881bb6662be8e30b2f0fae8db3b5a71</anchor>
      <arglist>(double padding, double sigma=.0, bool orthogonal=true) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>acbb0966cbe82f83c1cbc77863009097a</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a97f83a8b5cdbf350996829544d7fbc1f</anchor>
      <arglist>(int, int, int=0, int=0) const </arglist>
    </member>
    <member kind="function">
      <type>const Matrix &amp;</type>
      <name>GetAffineMatrix</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a4743b13dcec6267f3d70984163f494f9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetAsDouble</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a98b2040f87528a8af704dedde69e7eab</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>GetAsDouble</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>afddd911788cc9e3eaa9295568df41c24</anchor>
      <arglist>(int, int, int=0, int=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ada39d01f8f78181a355975a8950d3eab</anchor>
      <arglist>(Vector &amp;, int) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a60b277b6637af712f26fc3bdba9180fc</anchor>
      <arglist>(Vector &amp;, int, int, int=0, int=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ac923f1d2a782d4f5b8a6364c62ca8db5</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ad65067a3262d77e44b998685efefaff2</anchor>
      <arglist>(int, int, int=0, int=0) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetBackgroundValueAsDouble</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a00d59ce1afd74ef859c910a94abe5c7b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>af1c550daf93b34bde896e26704db4033</anchor>
      <arglist>(int=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ab1ee2d44e51e892975930dbb19fad35e</anchor>
      <arglist>(int=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a5c4d926bba7bc366b75dba822eb492b6</anchor>
      <arglist>(int, int, int=0, int=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a550fa5c2cdf85feb09e37db0392c4ee8</anchor>
      <arglist>(int, int, int=0, int=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>GetDataType</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ab3a709c8d51121058c8e3190ef34c37c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>GetDataTypeMax</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a374a20cce34c58325bf2569d4d7b7991</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>GetDataTypeMin</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a5cb7dadc19cc0cb7f4f842e950f9bd70</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>GetDataTypeSize</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a6e5b3e0fdec723a01f99c79b7116af7a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>aa07ec1adaa885bf5dde859de3a27f3c0</anchor>
      <arglist>(BaseImage *&amp;, int, int=-1) const =0</arglist>
    </member>
    <member kind="function">
      <type>const ImageAttributes &amp;</type>
      <name>GetImageAttributes</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a7da0eb21463332eab7752c2b49ccad8b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Matrix &amp;</type>
      <name>GetImageToWorldMatrix</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>aaf8777d44cccf181697c73f1a0c5c6fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BinaryImage *</type>
      <name>GetMask</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a168414cf3cea35cfb994ca4723569de1</anchor>
      <arglist>(bool=false)</arglist>
    </member>
    <member kind="function">
      <type>const BinaryImage *</type>
      <name>GetMask</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>af37d10f9f171a240ef4cc30a30987022</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetMinMaxAsDouble</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>aa43e8ecfd4a063f5a7eb5f4fea8e7900</anchor>
      <arglist>(double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMaxAsDouble</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a76e3c177efa733b95c12c14713526d7f</anchor>
      <arglist>(double *, double *) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetNumberOfVoxels</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a9b4a6c29f66530a9b6865026b5df182c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetOrientation</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a7b5e7396299bad358412455fc55951e1</anchor>
      <arglist>(double *, double *, double *=NULL) const </arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>GetOrigin</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>adc42e35c1f4f001f8ca72c18da2da185</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetOrigin</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>addb1cefc44e230abccb7f80112c95f69</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetOrigin</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ac742cf2c6781923506ee3dbe5e9227fa</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetPixelSize</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>af21d343a7ee43e2c9d6265bc3bee1b84</anchor>
      <arglist>(double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetPixelSize</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a8aee7d010ccf96cade0029030b9968b0</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetPixelSize</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ad6c2ef9325f9e3a78a30b5423717f46d</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetPixelSize</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a57b01047db1ab3fc3449ad9361df4720</anchor>
      <arglist>(double *, double *, double *) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetPixelSize</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a43e7f6f5fcd3b09d330689aec6fad7b2</anchor>
      <arglist>(double *, double *, double *, double *) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>abd6b6001aa3b4145f21769a93f6bab3a</anchor>
      <arglist>(BaseImage *&amp;, int, int) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a646b7233f3a7b22ede0c7b6ad7d27d26</anchor>
      <arglist>(BaseImage *&amp;, int, int, int, int, int, int) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a1d2324fb269ee405930ad48ce9929720</anchor>
      <arglist>(BaseImage *&amp;, int, int, int, int, int, int, int, int) const =0</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetScalarPointer</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a03c65ad40d940c685fdaf7c12ed7284f</anchor>
      <arglist>(int=0, int=0, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>GetScalarPointer</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a6a126be44f77bb0ff0351fa3742725ee</anchor>
      <arglist>(int=0, int=0, int=0, int=0) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetScalarType</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a4e1d078d168f7465a21a69ef713e2001</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetScalarTypeMax</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ab02c06acec1bdcd9c5314d7bb3b0f896</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetScalarTypeMin</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a0ad8d45f6de62f0bff89ab24280e0386</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetScalarTypeSize</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a7197e81a27618404d964d036ec781d35</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetT</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>aa26962ad6323790e2999ea9855ccd9d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetTOrigin</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a0795a5065b3969f9d6c71f1a27340681</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetTSize</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a5e0eb412b809670d927987a1fd7e6552</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Matrix &amp;</type>
      <name>GetWorldToImageMatrix</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a235dd36e9253b75c50a972457889c8d1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetX</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>aa3700d90d18fb52f97fcf620d269a9a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetXSize</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a5c57ac419768cfd3caf479bd8e8e19cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetY</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a51019a17da7aef02cda9995a07dc9f1c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetYSize</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a62e3e48a3941daa1d27cda19f86dc6da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetZ</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a5175cad991b5f715a7fb0046791ba517</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetZSize</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a74b455cf8d20cc56f809915879caa0d1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasBackground</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a6f829cde7d12c83c7864458bc4aa991f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasBackgroundValue</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>aba1f01f819213f4686ef69a4ef66b203</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasMask</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ad5be33e6e92d56bddb83f2e1770ba8f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasSpatialAttributesOf</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ae8e36d60aa1491b6b65b6a34c12b6476</anchor>
      <arglist>(const BaseImage *) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ImageToTime</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>aa2670193eb4f18fbb621e44d3ef2e9a4</anchor>
      <arglist>(double) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ImageToWorld</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a0607bb268b926699b34e4d0f55aea5e9</anchor>
      <arglist>(double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ImageToWorld</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a9686deb281526dfb739bf15052451a9a</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ImageToWorld</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ad3a28d7a2fc3c86dd86999cf0d16a174</anchor>
      <arglist>(Point &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ImageToWorld</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a8829382580c0b32f1081061085c77353</anchor>
      <arglist>(WorldCoordsImage &amp;i2w, bool _3D=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ImageToWorld</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a62650f02e2413696c0d4d3f99cdf300b</anchor>
      <arglist>(double *i2w, bool _3D=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ImageToWorld</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a839ccfe0c48b0b6274456b8d9eae3688</anchor>
      <arglist>(PointSet &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IndexToVoxel</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a0df4a59149661463c0f67d67a6014b5a</anchor>
      <arglist>(int, int &amp;, int &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IndexToVoxel</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a04643daf63fdb7f32400096a4ffe4dae</anchor>
      <arglist>(int, int &amp;, int &amp;, int &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IndexToVoxel</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a58fe744788a5f4dd674b79311b66318e</anchor>
      <arglist>(int, int &amp;, int &amp;, int &amp;, int &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IndexToWorld</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a1076f308db22783b113b57593ddf92a5</anchor>
      <arglist>(int, double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IndexToWorld</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ae7ddd0570eae2a0fa9ab512cf3a46cfd</anchor>
      <arglist>(int, double &amp;, double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IndexToWorld</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a99a0ab09f46fcf570edf0ef859f0d7d1</anchor>
      <arglist>(int, Point &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>IndexToWorld</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a1cd65ec66c71ae56ff5b324978c5afc6</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a03952130956de937833ddf0d55af325f</anchor>
      <arglist>(const ImageAttributes &amp;, int=-1)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitializeMask</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a842964888dc1670d0312bd4191d81831</anchor>
      <arglist>(int t=-1, bool=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsBackground</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ab9d09600ac157f9471ac32262f27f44e</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsBackground</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a31a26a44977134f574687f92a5a73d27</anchor>
      <arglist>(int, int, int=0, int=0) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsBoundary</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a828d91b887cec46a9a4dd2e30bc79dde</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsBoundary</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a2ed8430ab3fa18921803d10d78923ac9</anchor>
      <arglist>(int, int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsBoundary</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a7ea8b5d5df7b117bf513ac00b5f9afff</anchor>
      <arglist>(int, int, int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsBoundary</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a9582d6544b4c3d06aaf353666d43b209</anchor>
      <arglist>(int, int, int, int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsBoundingBoxInsideForeground</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a800760cd276c128ed889515329869aab</anchor>
      <arglist>(int, int, int, int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsBoundingBoxInsideForeground</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a3363e5d4f766240dc7a07bd990ea3194</anchor>
      <arglist>(int, int, int, int, int, int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsBoundingBoxInsideForeground</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a7a47ed1d0eb035f13d678b484e030adc</anchor>
      <arglist>(int, int, int, int, int, int, int, int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsEmpty</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a16ea68463d303c0c513e7106355b9b08</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsForeground</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a0eeb332408f7720a42ff1529dab22ae7</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsForeground</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>accd0b79abe36c3f50f690dc6cf488627</anchor>
      <arglist>(int, int, int=0, int=0) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInFOV</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a14d08a8c379abc5635facacbd6584996</anchor>
      <arglist>(double, double, double)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInside</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a77b86a767016cf700f8ca250b7bbf5db</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInside</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ab1f7ec6d57ef1167d4d3ea806a6f40dd</anchor>
      <arglist>(int, int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInside</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>aab6873de2ffa64c16499db927d82c4b0</anchor>
      <arglist>(int, int, int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInside</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ad291ca71e4b6f2cb96a5bd305cb76ee5</anchor>
      <arglist>(int, int, int, int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInsideForeground</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>aead3dbf1379eeb088a086ca47e0c819d</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInsideForeground</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a21535ca7888090fe0364c7463f65407b</anchor>
      <arglist>(int, int, int=0, int=0) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsOutside</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a95a6a9bdb4a062c88e6cc6b93fea91e8</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsOutside</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a856287954114c3c3d995bdf776161d94</anchor>
      <arglist>(int, int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsOutside</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a68338f47eb7d7519af10a42015770b04</anchor>
      <arglist>(int, int, int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsOutside</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ab1e07ce9387174707409c21d3e5fb108</anchor>
      <arglist>(int, int, int, int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsOutsideForeground</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a83a863c5e5eb934b063f22395c1f54da</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsOutsideForeground</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a8b56b3441a92c4f55e5e1c50ba711a81</anchor>
      <arglist>(int, int, int=0, int=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>N</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>aecf320f140a2a1f93f21743a7cbd7323</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfSpatialVoxels</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a346aab260dafa0fc0e571c4db5066367</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfVoxels</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a5680d5e42797622b4a46a3b0179a80c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BaseImage &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>aed7920cfd3fff8a4476f3a9a97779ca2</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Orientation</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a2ba9ef73da1df18d04c3d433a69dec37</anchor>
      <arglist>(OrientationCode &amp;, OrientationCode &amp;, OrientationCode &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>OwnsMask</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a63eeb5e2f0f8a174618ca7d4316fc30c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>aadbb77286e7f06e0d6f758136fc97af5</anchor>
      <arglist>(Indent=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutAffineMatrix</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>aa5695519064b1b7af9978842bc381201</anchor>
      <arglist>(const Matrix &amp;, bool=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a98d8a358ec9e70dd690b79c089d034c3</anchor>
      <arglist>(int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a576ef17291b9dc704cf49a8d62240be7</anchor>
      <arglist>(int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a4ffe0122ecf44122693744fe6c2a7c1a</anchor>
      <arglist>(int, int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a26ae18b69b60773a2c125453e96d5494</anchor>
      <arglist>(int, int, int, int, double)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>aa264a8fd87fd4c3b01c5fc5b6f10cb36</anchor>
      <arglist>(int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a3bbbd7bb1aa1a4f4f943e3a116c149e8</anchor>
      <arglist>(int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a6b44b014c48c40241e73ce138e4a256b</anchor>
      <arglist>(int, int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a4f3744b488925ab02d38dfa4004437da</anchor>
      <arglist>(int, int, int, int, const Vector &amp;)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutBackgroundValueAsDouble</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a990a555bf1dc98f03c42c59021f8acdf</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutBackgroundValueAsDouble</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a37086e0f30a6fbf82a6c67a7b3a4dac6</anchor>
      <arglist>(double, bool)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutMask</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a2516bbaf9ffb22de8aeaa0ce07f1cb24</anchor>
      <arglist>(BinaryImage *, bool=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutMinMaxAsDouble</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>aadea008fe4b5855cbb8e11964adae90d</anchor>
      <arglist>(double, double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutOrientation</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a46fef2e3dd67b0bddb09c9f105e72a16</anchor>
      <arglist>(double *, double *, double *=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutOrigin</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a2be38318c2b2bee2fcc7af0ba3628f1a</anchor>
      <arglist>(const Point &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutOrigin</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ad637f600e15cff125c92410aebe7300a</anchor>
      <arglist>(double, double, double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutOrigin</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>aabb9736eb80324dc75023463c989b1a2</anchor>
      <arglist>(double, double, double, double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutPixelSize</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>aef6e4773d88c1bd8afa7613d2d0d7485</anchor>
      <arglist>(double, double, double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutPixelSize</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a5daebb12f37ffb33da1f33717ed78937</anchor>
      <arglist>(double, double, double, double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutTOrigin</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>afea5e55d3c4074c56508d3b9e421d170</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutTSize</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a04870d18ea85b849d1c52b12e690c7e3</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a345b98024f77eb36748c32374bb7c611</anchor>
      <arglist>(const char *)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>ReflectX</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ab1b9085556fbf8a0dcb53a2a0eae647c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>ReflectY</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>aaff0ab2c4e7538aae78ddf1c9e9e08c3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>ReflectZ</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a15db0e23a94b46b11895c880a6b1b373</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ResetAffineMatrix</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a063f0d6d0fc2cc72ed66650beb2ba166</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>T</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a5b640533f725e1eecff4f7bafda65d84</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>TimeToImage</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a418a871259e8cb403b469f68016e8d83</anchor>
      <arglist>(double) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>TSize</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a61cd7e389f50e05fdaee15f609ca0084</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>VoxelToIndex</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ab5aabcd155209944acdf5d7adf519a6b</anchor>
      <arglist>(int, int, int=0, int=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WorldToImage</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>aa0a0d416a4cb8830c749d3a63ef85acf</anchor>
      <arglist>(double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WorldToImage</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a5ab84f98ff0d6acc9f710da4b0b04395</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WorldToImage</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>aa05190683b7a204c9fa97c44c9abbac5</anchor>
      <arglist>(Point &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a0c020b83d1d79dcf41e263772066f8f6</anchor>
      <arglist>(const char *) const =0</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>X</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a8f88437bd8e2fdf5b6d16be29a21b678</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>XSize</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a99bf9f64a0e36fe6ec5a865550242ca5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Y</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a893615eba607a63912a2c6acc964ac8b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>YSize</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>aaa660511b91e4c817ebd982957885a6c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Z</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a3e7d77540ca479291f112ff33e7db112</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ZSize</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a6013548b6f0c7071fb9c2b3a159155d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseImage</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>af9f682fcaedff130619dc19fe23841b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BaseImage *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a8ae6cf5c1f7d7a2f67cca6f683de112b</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BaseImage *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a4e35e0dcb49a6bd7c0a86c4c6dba7b91</anchor>
      <arglist>(const BaseImage *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BaseImage *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a6d33dc34232e70494f095d092d2c99ba</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BaseImage</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a6925e9971f0fcf46dc23117a2e84260d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BaseImage</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>abf37dfc29d4bd0e4a2275d25c976c0cd</anchor>
      <arglist>(const ImageAttributes &amp;, int=1)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BaseImage</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ab2bbf39cebb8e0fd40adeda795eae792</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>PutAttributes</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a9ca2253ae62f0e8f352a2f4ebf074274</anchor>
      <arglist>(const ImageAttributes &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UpdateMatrix</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a08acb78bf880d1ee224ec4d98e887400</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ImageAttributes</type>
      <name>_attr</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a1a8472cb38b25034b402c8600e771de3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_bg</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a31e07fb101b3ec0f8498319e06e4622d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_bgSet</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a465a7837f9a0885c897e7301a2372500</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BinaryImage *</type>
      <name>_mask</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>aece01cdec43abd7f1b2399d22ee8a121</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_maskOwner</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>ac1dc7c8307d2fca7023a4d156477aa60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix</type>
      <name>_matI2W</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a1f629427ffbf716ccc752c7cf5c07a2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix</type>
      <name>_matW2I</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a03f712860add3ddd2e73587eba60968c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_NumberOfVoxels</name>
      <anchorfile>classmirtk_1_1BaseImage.html</anchorfile>
      <anchor>a39e6eb3cfafe04b908415efd2fbf27cf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::BiharmonicMap</name>
    <filename>classmirtk_1_1BiharmonicMap.html</filename>
    <base>mirtk::HarmonicMap</base>
    <member kind="function">
      <type></type>
      <name>BiharmonicMap</name>
      <anchorfile>classmirtk_1_1BiharmonicMap.html</anchorfile>
      <anchor>a967ad026a06614061ac0e87d800d4d86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BiharmonicMap</name>
      <anchorfile>classmirtk_1_1BiharmonicMap.html</anchorfile>
      <anchor>a5b499ea3993a115047df10a510115ad8</anchor>
      <arglist>(const BiharmonicMap &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1BiharmonicMap.html</anchorfile>
      <anchor>a4c4549ab10631347d9f57ec46f8c0190</anchor>
      <arglist>(double *v, double x, double y, double z=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1BiharmonicMap.html</anchorfile>
      <anchor>aa1e997750ad76ec44e05220a7286cb86</anchor>
      <arglist>(double x, double y, double z=0, int l=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1BiharmonicMap.html</anchorfile>
      <anchor>a7d2b49062c9480d77afba31a06e18993</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VolumetricMap *</type>
      <name>NewCopy</name>
      <anchorfile>classmirtk_1_1BiharmonicMap.html</anchorfile>
      <anchor>a4c5fd0b43a7423b2db7dfcc2d67aee74</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BiharmonicMap &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1BiharmonicMap.html</anchorfile>
      <anchor>a62ee61a2cb3160f75cac3ceab0f7facc</anchor>
      <arglist>(const BiharmonicMap &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BiharmonicMap</name>
      <anchorfile>classmirtk_1_1BiharmonicMap.html</anchorfile>
      <anchor>adc52cbeee1814913f7c9d44f17514aa8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HarmonicMap</name>
      <anchorfile>classmirtk_1_1HarmonicMap.html</anchorfile>
      <anchor>aa20778d5b69808cfcc745258f9e34bd8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HarmonicMap</name>
      <anchorfile>classmirtk_1_1HarmonicMap.html</anchorfile>
      <anchor>a3a7e26e05229435af9cd0444decfdf2c</anchor>
      <arglist>(const HarmonicMap &amp;)</arglist>
    </member>
    <member kind="function">
      <type>HarmonicMap &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1HarmonicMap.html</anchorfile>
      <anchor>a781f29002f8a57ed0fe7b87ae8821a85</anchor>
      <arglist>(const HarmonicMap &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HarmonicMap</name>
      <anchorfile>classmirtk_1_1HarmonicMap.html</anchorfile>
      <anchor>a59b4ba52123f2194f4e9e8c6c0c1bcf9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AddSourcePoint</name>
      <anchorfile>classmirtk_1_1FundamentalMap.html</anchorfile>
      <anchor>a915830716d6ae7956102d5b8bdeb4da7</anchor>
      <arglist>(double p[3], double tol=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1FundamentalMap.html</anchorfile>
      <anchor>a7f8a3247ee7090dd54be6b75693a0431</anchor>
      <arglist>(double &amp;x1, double &amp;y1, double &amp;z1, double &amp;x2, double &amp;y2, double &amp;z2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumberOfComponents</name>
      <anchorfile>classmirtk_1_1FundamentalMap.html</anchorfile>
      <anchor>ab522b3c50a217ffebacba7f724198c60</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfSourcePoints</name>
      <anchorfile>classmirtk_1_1FundamentalMap.html</anchorfile>
      <anchor>a14242b61302d863020e65f3d8aaa268f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FundamentalMap</name>
      <anchorfile>classmirtk_1_1FundamentalMap.html</anchorfile>
      <anchor>af3085bd6ed5d2ad05f1995b3936f840e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ImageAttributes</type>
      <name>Attributes</name>
      <anchorfile>classmirtk_1_1VolumetricMap.html</anchorfile>
      <anchor>a3f334fe068deef067c2cc44c0f5b7e37</anchor>
      <arglist>(int nx, int ny=0, int nz=0) const </arglist>
    </member>
    <member kind="function">
      <type>ImageAttributes</type>
      <name>Attributes</name>
      <anchorfile>classmirtk_1_1VolumetricMap.html</anchorfile>
      <anchor>a44e3e2841a7e478e5f134803a7ed938b</anchor>
      <arglist>(double dx=.0, double dy=.0, double dz=.0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1VolumetricMap.html</anchorfile>
      <anchor>ae810719b34524c278a668864cecc843e</anchor>
      <arglist>(double bounds[6]) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1VolumetricMap.html</anchorfile>
      <anchor>ace2af65afea60206a008ca21dbacae1b</anchor>
      <arglist>(Point &amp;p1, Point &amp;p2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1VolumetricMap.html</anchorfile>
      <anchor>aad29e2f0947130ffd9c024b31df65611</anchor>
      <arglist>(double *v, const double p[3]) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1VolumetricMap.html</anchorfile>
      <anchor>ad53ffe2a3615eafbcd21881863b2be4f</anchor>
      <arglist>(double *v, const Point &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1VolumetricMap.html</anchorfile>
      <anchor>a99651b76353913fc1fc72b0f3e7731e0</anchor>
      <arglist>(const double p[3], int l=0) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1VolumetricMap.html</anchorfile>
      <anchor>af20320b0b31feb7fc221cd147805af06</anchor>
      <arglist>(const Point &amp;, int l=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1VolumetricMap.html</anchorfile>
      <anchor>a411afafbd84850660f0190f7f4f7f3f8</anchor>
      <arglist>(GenericImage&lt; float &gt; &amp;f, int l=0, vtkSmartPointer&lt; vtkPointSet &gt;=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1VolumetricMap.html</anchorfile>
      <anchor>add7757a7965f19140e6806df4c4deed5</anchor>
      <arglist>(GenericImage&lt; double &gt; &amp;f, int l=0, vtkSmartPointer&lt; vtkPointSet &gt;=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1VolumetricMap.html</anchorfile>
      <anchor>abe7bbff54cc618c2731b19e988f60181</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1VolumetricMap.html</anchorfile>
      <anchor>a0b898ae11f34e719ef50bf168c92c48e</anchor>
      <arglist>(const char *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VolumetricMap</name>
      <anchorfile>classmirtk_1_1VolumetricMap.html</anchorfile>
      <anchor>a5531ff96a90e4f0d8e557b3a2fe34bed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>B</name>
      <anchorfile>classmirtk_1_1BiharmonicMap.html</anchorfile>
      <anchor>aa9b209f99b0b6242d8a21210e7af7f0b</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>H</name>
      <anchorfile>classmirtk_1_1HarmonicMap.html</anchorfile>
      <anchor>a1c3b90ac13135637a77133e202022230</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VolumetricMap *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1VolumetricMap.html</anchorfile>
      <anchor>a8b98f683458eba293e60f47700009d99</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FundamentalMap</name>
      <anchorfile>classmirtk_1_1FundamentalMap.html</anchorfile>
      <anchor>a31257f7a4ab3e1be5d42885eec286054</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FundamentalMap</name>
      <anchorfile>classmirtk_1_1FundamentalMap.html</anchorfile>
      <anchor>add50290f79fa5db3c83e87565c411b1d</anchor>
      <arglist>(const FundamentalMap &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>FundamentalMap &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1FundamentalMap.html</anchorfile>
      <anchor>ac63307a3e5b512a5b1bd6bf4e3ee6bdc</anchor>
      <arglist>(const FundamentalMap &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>ReadMap</name>
      <anchorfile>classmirtk_1_1FundamentalMap.html</anchorfile>
      <anchor>a1e4ca98e1c87715c29d5608a0666d85e</anchor>
      <arglist>(Cifstream &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteMap</name>
      <anchorfile>classmirtk_1_1FundamentalMap.html</anchorfile>
      <anchor>a7c9cb9b45a25196df67e915fe9e34019</anchor>
      <arglist>(Cofstream &amp;) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>VolumetricMap &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1VolumetricMap.html</anchorfile>
      <anchor>a6da152d967732a2abaa1fc6c586fa7fd</anchor>
      <arglist>(const VolumetricMap &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>VolumetricMap</name>
      <anchorfile>classmirtk_1_1VolumetricMap.html</anchorfile>
      <anchor>a0b9595e86ef2b77bcd2c35e0b15abaf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>VolumetricMap</name>
      <anchorfile>classmirtk_1_1VolumetricMap.html</anchorfile>
      <anchor>a2833ee5fcbe7884790097ab39f989e98</anchor>
      <arglist>(const VolumetricMap &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static const double</type>
      <name>Pi</name>
      <anchorfile>classmirtk_1_1FundamentalMap.html</anchorfile>
      <anchor>ae69835029c426ed14956ba3c99282af6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::BinaryForEachVoxelBody</name>
    <filename>structmirtk_1_1BinaryForEachVoxelBody.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type></type>
      <name>BinaryForEachVoxelBody</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelBody.html</anchorfile>
      <anchor>a7624ca652aec555d63ebfaf37d4cc74d</anchor>
      <arglist>(GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BinaryForEachVoxelBody</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelBody.html</anchorfile>
      <anchor>a0ec25d65b8598955f1a138f0cb7a110d</anchor>
      <arglist>(const BinaryForEachVoxelBody &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BinaryForEachVoxelBody</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelBody.html</anchorfile>
      <anchor>a3d7394d390edda1289c9ac8169c8acda</anchor>
      <arglist>(BinaryForEachVoxelBody &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelBody.html</anchorfile>
      <anchor>aa68290c8ad81b60133b4b98f31dc9f1e</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelBody.html</anchorfile>
      <anchor>ad7a370573511679b6964665f695a6252</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelBody.html</anchorfile>
      <anchor>a9e257def84ca07b0c9d97e074a65faac</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelBody.html</anchorfile>
      <anchor>add1a601a9b7c5ab873bb6872a935793d</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ForEachVoxelBody</name>
      <anchorfile>structmirtk_1_1ForEachVoxelBody.html</anchorfile>
      <anchor>a396dab7d3f18c371fdee37e5b0cb49df</anchor>
      <arglist>(const VoxelFunc &amp;vf, const ImageAttributes &amp;attr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ForEachVoxelBody</name>
      <anchorfile>structmirtk_1_1ForEachVoxelBody.html</anchorfile>
      <anchor>a8e6cb2b0673b88bc23c88b123dc6206d</anchor>
      <arglist>(const ForEachVoxelBody &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ForEachVoxelBody</name>
      <anchorfile>structmirtk_1_1ForEachVoxelBody.html</anchorfile>
      <anchor>a3c2a7d58847baafbf3dbaf390815a1a8</anchor>
      <arglist>(ForEachVoxelBody &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>join</name>
      <anchorfile>structmirtk_1_1ForEachVoxelBody.html</anchorfile>
      <anchor>a19dede9ccea61ae0ec65053fb9782405</anchor>
      <arglist>(ForEachVoxelBody &amp;rhs)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_l</name>
      <anchorfile>structmirtk_1_1ForEachVoxelBody.html</anchorfile>
      <anchor>ab4dc888a0f6499f4cff874ed91179358</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VoxelFunc</type>
      <name>_VoxelFunc</name>
      <anchorfile>structmirtk_1_1ForEachVoxelBody.html</anchorfile>
      <anchor>a954dc78e28ff3b0d36c33e12621bb100</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::BinaryForEachVoxelBody_1Const</name>
    <filename>structmirtk_1_1BinaryForEachVoxelBody__1Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type></type>
      <name>BinaryForEachVoxelBody_1Const</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a7d30659c0b9a3f914ad6eed3a1fca6f3</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BinaryForEachVoxelBody_1Const</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a890e1a41da3bb431bfef056c2cf075ad</anchor>
      <arglist>(const BinaryForEachVoxelBody_1Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BinaryForEachVoxelBody_1Const</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a04e4151ca6d1924da4460c61516f5531</anchor>
      <arglist>(BinaryForEachVoxelBody_1Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a4763e5b0305df15dcaedef7d8486216c</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a66c6be34a42350f24fab742863b6b6bf</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a38193bf7232ef50c604f9791bdcbaf80</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>ae855c3d01a63d1274f637f80a036e67f</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::BinaryForEachVoxelBody_Const</name>
    <filename>structmirtk_1_1BinaryForEachVoxelBody__Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type></type>
      <name>BinaryForEachVoxelBody_Const</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a901f1b8da5a466d38e50a3e63d455692</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BinaryForEachVoxelBody_Const</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a9c03a486680941e8c8709694bbb76416</anchor>
      <arglist>(const BinaryForEachVoxelBody_Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BinaryForEachVoxelBody_Const</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a7171c367bb73f49a4ff1130fdd5a0c29</anchor>
      <arglist>(BinaryForEachVoxelBody_Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a5ecdcab5d7109ecde97052cde31863ca</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a709aa770d097f35b6fc6adcdb1096b5a</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>abd43431577725b57456a394bb8285a0d</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>add53b7d8b162e00a26da817753f2737e</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::BinaryForEachVoxelIfBody</name>
    <filename>structmirtk_1_1BinaryForEachVoxelIfBody.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type></type>
      <name>BinaryForEachVoxelIfBody</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a67edc2b48c7b18d6c6d191a98142fe57</anchor>
      <arglist>(GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BinaryForEachVoxelIfBody</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelIfBody.html</anchorfile>
      <anchor>abb0a61efe33775805866d6637ec76403</anchor>
      <arglist>(const BinaryForEachVoxelIfBody &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BinaryForEachVoxelIfBody</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelIfBody.html</anchorfile>
      <anchor>ab3ef0598a3bd4d481aa31e45106a76c7</anchor>
      <arglist>(BinaryForEachVoxelIfBody &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelIfBody.html</anchorfile>
      <anchor>acd412534b147a2ff66b8ecb61788c439</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a899a2e2a896a232fb86f7ee97c359eca</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a717549e63fa00764e62907421f75a304</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a1b06e2360bb33765c02880800c2b3e6f</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ForEachVoxelIfBody</name>
      <anchorfile>structmirtk_1_1ForEachVoxelIfBody.html</anchorfile>
      <anchor>aee1fd5c1cf7d143e0fb7352d0e57023f</anchor>
      <arglist>(const VoxelFunc &amp;vf, const OutsideFunc &amp;of, const ImageAttributes &amp;attr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ForEachVoxelIfBody</name>
      <anchorfile>structmirtk_1_1ForEachVoxelIfBody.html</anchorfile>
      <anchor>ae70d37b342e5f5866fe8484384cc5e4d</anchor>
      <arglist>(const ForEachVoxelIfBody &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ForEachVoxelIfBody</name>
      <anchorfile>structmirtk_1_1ForEachVoxelIfBody.html</anchorfile>
      <anchor>a12d432936bcc8da769b984f5a1abd1ed</anchor>
      <arglist>(ForEachVoxelIfBody &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>join</name>
      <anchorfile>structmirtk_1_1ForEachVoxelIfBody.html</anchorfile>
      <anchor>ae9b847d5694435b2d2ee27105eb78969</anchor>
      <arglist>(ForEachVoxelIfBody &amp;rhs)</arglist>
    </member>
    <member kind="variable">
      <type>OutsideFunc</type>
      <name>_OutsideFunc</name>
      <anchorfile>structmirtk_1_1ForEachVoxelIfBody.html</anchorfile>
      <anchor>a1731393f5a91eef56fd537a2f3f1d342</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::BinaryForEachVoxelIfBody_1Const</name>
    <filename>structmirtk_1_1BinaryForEachVoxelIfBody__1Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type></type>
      <name>BinaryForEachVoxelIfBody_1Const</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>aff3087b77ba45c5618b9f60709d88228</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BinaryForEachVoxelIfBody_1Const</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a9ecbcd1c1304afe712d51eefcfb0bb41</anchor>
      <arglist>(const BinaryForEachVoxelIfBody_1Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BinaryForEachVoxelIfBody_1Const</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a6711051d6db1f1ff8640b2539a9a1982</anchor>
      <arglist>(BinaryForEachVoxelIfBody_1Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a31c911327ba685dbc270de17d8317b07</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a78bd816686777acef45c17cdfc31c807</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a3293fe728aa6d4ca101fe82272d1b642</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a04429b84ef394eea6bf898d00bd2ba86</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::BinaryForEachVoxelIfBody_Const</name>
    <filename>structmirtk_1_1BinaryForEachVoxelIfBody__Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type></type>
      <name>BinaryForEachVoxelIfBody_Const</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>acba4f6c4e75602ff6d696d5edc891411</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BinaryForEachVoxelIfBody_Const</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a1341df395a35280095d519c5ea46b710</anchor>
      <arglist>(const BinaryForEachVoxelIfBody_Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BinaryForEachVoxelIfBody_Const</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>ae6225d8841a5e48acdd682f70d8050a1</anchor>
      <arglist>(BinaryForEachVoxelIfBody_Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a14a47cd6ba6512a692ef7aa022b9e005</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>ad69cc3d22f8bb6ceefc3f0c17c3097cc</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>ab5a444cb570b5776c7e644dc25f77204</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1BinaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>adf5413a7f7d2ff8198716f9e169e9872</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::blocked_range</name>
    <filename>classmirtk_1_1blocked__range.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="class">
    <name>mirtk::blocked_range2d</name>
    <filename>classmirtk_1_1blocked__range2d.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="class">
    <name>mirtk::blocked_range3d</name>
    <filename>classmirtk_1_1blocked__range3d.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="class">
    <name>mirtk::BrentLineSearch</name>
    <filename>classmirtk_1_1BrentLineSearch.html</filename>
    <base>mirtk::InexactLineSearch</base>
    <member kind="function">
      <type></type>
      <name>BrentLineSearch</name>
      <anchorfile>classmirtk_1_1BrentLineSearch.html</anchorfile>
      <anchor>aeed4265a72b238ec98e97b8b123edd26</anchor>
      <arglist>(ObjectiveFunction *=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BrentLineSearch</name>
      <anchorfile>classmirtk_1_1BrentLineSearch.html</anchorfile>
      <anchor>a2d1ff47705d95fa689f153a78ea2eddc</anchor>
      <arglist>(const BrentLineSearch &amp;)</arglist>
    </member>
    <member kind="function">
      <type>BrentLineSearch &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1BrentLineSearch.html</anchorfile>
      <anchor>a439866fc5bca9cf8e8bc30bc29882084</anchor>
      <arglist>(const BrentLineSearch &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1BrentLineSearch.html</anchorfile>
      <anchor>aec5f715a15dd869e3568610b95b5e4d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1BrentLineSearch.html</anchorfile>
      <anchor>a35e7264080ae237f4b9390dc953c799f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1BrentLineSearch.html</anchorfile>
      <anchor>a90a6e02582d6439581bf9e8e20642477</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BrentLineSearch</name>
      <anchorfile>classmirtk_1_1BrentLineSearch.html</anchorfile>
      <anchor>a4e2e4c74ba04628525231d4f255862f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>BracketExtremum</name>
      <anchorfile>classmirtk_1_1BrentLineSearch.html</anchorfile>
      <anchor>a5396f1c791c20022daf2fdcfe527faa7</anchor>
      <arglist>(double &amp;a, double &amp;b, double &amp;c, double *delta=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::BSpline</name>
    <filename>classmirtk_1_1BSpline.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>TReal</type>
      <name>RealType</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a84fef1f7a5fe8356afb87d1a77775ce7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>B</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>ae2dea619e8f3eb23cc748bb6dd3752b7</anchor>
      <arglist>(TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>B</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>ac4fd0d27e2657033d3007eb909c5381c</anchor>
      <arglist>(int, TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>B0</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a0864d1758051ecdde58f271d21350a53</anchor>
      <arglist>(TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>B0_I</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a3a53f3c23acc870fd04c9334ff85dfcd</anchor>
      <arglist>(TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>B0_II</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>ab6fe3398fdc8795b4f7b083e3b7e3f52</anchor>
      <arglist>(TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>B0_III</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a16ad33ec9e6fa21d44570432a6e008f5</anchor>
      <arglist>(TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>B0_nI</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a26d3e0d9f702a699fd2120908cd4ad74</anchor>
      <arglist>(int, TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>B1</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a42d24a30ebd5273d405842330963d3dd</anchor>
      <arglist>(TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>B1_I</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a7ebcb4f22c02974e7dbb670f7f7fcdda</anchor>
      <arglist>(TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>B1_II</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a1ceca6dbdf0185b097040e11088b3a33</anchor>
      <arglist>(TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>B1_III</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>ae272844ee98c0a8b731a4df28fa6d06a</anchor>
      <arglist>(TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>B1_nI</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a579bfdda057adc8db6a5953c714ffdf9</anchor>
      <arglist>(int, TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>B2</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>ae481403d8c50a4cec4c66ecfc68d6bfb</anchor>
      <arglist>(TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>B2_I</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a9bbe2feef8aad81caa8b43bcbc1f984a</anchor>
      <arglist>(TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>B2_II</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a19b44bf970af526a9909790bfcca2faa</anchor>
      <arglist>(TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>B2_III</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>ad07a64bb2ba58400baac39416d9fe1ce</anchor>
      <arglist>(TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>B2_nI</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a28c2f4d99c8f6714e7a266f688898800</anchor>
      <arglist>(int, TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>B3</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a14d4ab484b3163fc9ea53892cd616f75</anchor>
      <arglist>(TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>B3_I</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>af706b35de2b7ba3d3f65dca1b966e059</anchor>
      <arglist>(TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>B3_II</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a5251ebdc9d13e7492be574de538ea9c6</anchor>
      <arglist>(TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>B3_III</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a48506d884e17fc603501df8f2e87944f</anchor>
      <arglist>(TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>B3_nI</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a15c6dead4ad1b2e172bbc8c6eff812c8</anchor>
      <arglist>(int, TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>B_I</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>ad957e5c2d8e6924b8f982517d4f6839e</anchor>
      <arglist>(TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>B_I</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a7df94283ae8ebb0571b083d4aff0ec69</anchor>
      <arglist>(int, TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>B_II</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a15e82a98bed9bc3ff0f4371681575d39</anchor>
      <arglist>(TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>B_II</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a0e569ef6d6a1dda8c1611d27d73edd32</anchor>
      <arglist>(int, TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>B_III</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a9b711e561ee2fd4d9c4977f5fe56da76</anchor>
      <arglist>(TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>B_III</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a2c0761fc3c3b868746e88c9bb915bc0d</anchor>
      <arglist>(int, TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>B_nI</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a431414691120fee63f14598cea6595cf</anchor>
      <arglist>(int, TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>B_nI</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a9e72c4f03f78fda7eca867585d77ef8c</anchor>
      <arglist>(int, int, TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>aa58bd3930988f3ec22d9edef6d73875b</anchor>
      <arglist>(bool=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>VariableToIndex</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a902a961cc366d49a292a9e7bcf940447</anchor>
      <arglist>(TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API TReal</type>
      <name>Weight</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>ac484f9c009b7c0f27a28932c1062e236</anchor>
      <arglist>(TReal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API void</type>
      <name>Weights</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a10f306cf883f26a5759d102bf212c114</anchor>
      <arglist>(TReal, TReal[4])</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const TReal</type>
      <name>LatticeWeights</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a10ff06e755239647942284b5034a1220</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const TReal</type>
      <name>LatticeWeights_I</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>ac39fe7af7b15cfde1ec0f7c3244237a2</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const TReal</type>
      <name>LatticeWeights_II</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a484b76d8299d73d10eb7977d1ae42cff</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MIRTK_Numerics_EXPORT TReal</type>
      <name>LookupTable</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a59ea1ee3c0d75c2e3f7ac2d30e640ac9</anchor>
      <arglist>[LookupTableSize][4]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MIRTK_Numerics_EXPORT TReal</type>
      <name>LookupTable_I</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>aba7935f5ec05669085d5e43264d1b42e</anchor>
      <arglist>[LookupTableSize][4]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MIRTK_Numerics_EXPORT TReal</type>
      <name>LookupTable_II</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a8e5602077821a7f93f38444e420adcfc</anchor>
      <arglist>[LookupTableSize][4]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>LookupTableSize</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a8276e610d143eaf34374e1cdc5a3e392</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MIRTK_Numerics_EXPORT TReal</type>
      <name>WeightLookupTable</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>aa71f2fe1dffabcce72961f8e1a0b1d64</anchor>
      <arglist>[LookupTableSize]</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static MIRTK_Numerics_EXPORT bool</type>
      <name>_initialized</name>
      <anchorfile>classmirtk_1_1BSpline.html</anchorfile>
      <anchor>a4304e4e7134c7de6e77cc2358d106a6b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::BSplineFreeFormTransformation3D</name>
    <filename>classmirtk_1_1BSplineFreeFormTransformation3D.html</filename>
    <base>mirtk::FreeFormTransformation3D</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>ad3a6feacc3047ce5fd7badc6cf3e1776</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, const double *, int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateDOFsGradient</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a25bd16d9015d430570e698029b22da3d</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, const double *, int, double *, double=1.0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>BendingEnergy</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a0e3135441e51ae475611c26de1e5c783</anchor>
      <arglist>(double, double, double, double=0, double=-1, bool=true) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>BendingEnergy</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a2baa6216737764c27b04c1fcac2a14ac</anchor>
      <arglist>(bool=false, bool=true) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>BendingEnergy</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>ad42a200d671aa2c2adaa11cf94373040</anchor>
      <arglist>(const ImageAttributes &amp;, double=-1, bool=true) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BendingEnergyGradient</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>ad15a7d2710ff7a0c7e63bc00e98734dd</anchor>
      <arglist>(double *, double=1, bool=false, bool=true) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>ade8e91ed9b68cc78a34ef87212d1ce33</anchor>
      <arglist>(int, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double=1) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSplineFreeFormTransformation3D</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>ac74b3153d374b417e8b959ba671266ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSplineFreeFormTransformation3D</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>af20faaa826bda3434c98b96e1738d62b</anchor>
      <arglist>(double, double, double, double, double, double, double, double, double, double *, double *, double *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSplineFreeFormTransformation3D</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>aca5d487e5a5a6a0eec61cd80d1c4ee26</anchor>
      <arglist>(const ImageAttributes &amp;, double=-1, double=-1, double=-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSplineFreeFormTransformation3D</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a5975c624b1738892bf6bc6c296e5f0b3</anchor>
      <arglist>(const BaseImage &amp;, double, double, double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSplineFreeFormTransformation3D</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a779ad3c44ac2a009fca4082a19f3b660</anchor>
      <arglist>(const GenericImage&lt; double &gt; &amp;, bool=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSplineFreeFormTransformation3D</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a108f9cf84ec4e802590eaec0fbf3561c</anchor>
      <arglist>(const BSplineFreeFormTransformation3D &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>CanModifyDisplacement</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>aa726494b0ce614a1d7433d38e3814fc7</anchor>
      <arglist>(int=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>CanRead</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>ac0eec27756d31b1aeb8af2421ed65137</anchor>
      <arglist>(TransformationType) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DeriveJacobianWrtDOF</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a4dc62622a9557967e24e5967ca166368</anchor>
      <arglist>(Matrix &amp;, int, double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DisplacementAfterDOFChange</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a2b06944ac058e4ce7bce15cc4a4412ce</anchor>
      <arglist>(int dof, double dv, GenericImage&lt; double &gt; &amp;dx, double t, double t0=-1, const WorldCoordsImage *i2w=NULL) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>aad0ccfd2f647ffbdfcf6643e1d4435a1</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, int, int) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>ad4e06b905437f050f11fc80cf0a7bd55</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, int, int, int) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>aea533d559ffaa38b29601760c0e5a23c</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateDerivativeOfJacobianWrtDOF</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a3718042148bab81e0b13da0cf07b5aa4</anchor>
      <arglist>(Matrix &amp;, int, double, double) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateDerivativeOfJacobianWrtDOF</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a0a11ed6407844bc908f4ec1cc609e737</anchor>
      <arglist>(Matrix &amp;, int, double, double, double) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateHessian</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a1a0ebb47fe962c34fb51297a273379b2</anchor>
      <arglist>(Matrix[3], int, int) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateHessian</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>af41571b11ff881579faf3b84dceb4938</anchor>
      <arglist>(Matrix[3], double, double) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateHessian</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>aadb8c0a874270b998cbd7dd54694db41</anchor>
      <arglist>(Matrix[3], int, int, int) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateHessian</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a64061dbb37519a4e0b9fac27a659feb1</anchor>
      <arglist>(Matrix[3], double, double, double) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateInside</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a6755ed9cad3b713c15c94fb112f4c05d</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateJacobian</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>ad7160b8f69f37b7d915f4b358b9a3798</anchor>
      <arglist>(Matrix &amp;, int, int) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateJacobian</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a0622f6ba23ac948a51b3135f51f4a46b</anchor>
      <arglist>(Matrix &amp;, int, int, int) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateJacobian</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>aa3e71eba7706ae165429de212f18ade5</anchor>
      <arglist>(Matrix &amp;, double, double) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateJacobian</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>adb6d098e28be3285ba99f79aba6d46fe</anchor>
      <arglist>(Matrix &amp;, double, double, double) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateJacobianDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a1a085edf6776ec7e594b5c6d7439ce61</anchor>
      <arglist>(double[3], int, int, double, double) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateJacobianDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>ac7d93777305b0603115293f3fd4ed39e</anchor>
      <arglist>(double[3], int, int, int, double, double, double) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateJacobianDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a6215a03ad3df2961252464c1fe7532b3</anchor>
      <arglist>(double[3], int, int, int, int, double, double, double, double) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateJacobianWorld</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>acd6d55ee8a6b9f0cc6170280b2c6e965</anchor>
      <arglist>(Matrix &amp;, double, double) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateJacobianWorld</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>af2c3d2f560da8a82a406c1f5b0b402a7</anchor>
      <arglist>(Matrix &amp;, double, double, double) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateLaplacian</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a721d6c1eac8dd4b41da40b70f16e4c54</anchor>
      <arglist>(double[3], int, int, int) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateLaplacian</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>ab533d3f15a3fe6b64ac33399f15e893c</anchor>
      <arglist>(double[3], double, double, double) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateLaplacian</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>ad4f98af8c2154f4a37d4545f57a5e094</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FFDJacobianWorld</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a004ba4ba280d9326668afe9479eaa8bb</anchor>
      <arglist>(Matrix &amp;, double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetTAfterSubdivision</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>aeb35d9f3d87bd8ad388e83c272b1ea04</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetTSpacingAfterSubdivision</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>ab8963c614dce18619ef7abbeb657756c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetXAfterSubdivision</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>ab66554d12f200e1571dd5020deeb6fd1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetXSpacingAfterSubdivision</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a2bd18d481a30b0f4c36c3608596e620f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetYAfterSubdivision</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>aa9a7d1f7d7bcd06633a7d95b518654f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetYSpacingAfterSubdivision</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a327d4c78be25996526df6efa9580cdfa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetZAfterSubdivision</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>ae9c0541d3de9eae6589092eca8d46c67</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetZSpacingAfterSubdivision</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a96da440965619efcf8f24a952298f7fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Interpolate</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a39e5f4d52e31fa68fe90bd8fba2887c6</anchor>
      <arglist>(const double *, const double *, const double *=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDetDerivative</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a580f9a3bd07b0dba856713380fd0407e</anchor>
      <arglist>(Matrix *, int, int, int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>af63f059eded7ca18ae1d265a8ed84a1d</anchor>
      <arglist>(double[3], int, int, int, double, double, double) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>KernelSize</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a31198ddc60d114276e55fe944bd5a288</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalHessian</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a81c22110b972fdc851fb968ee88fc758</anchor>
      <arglist>(Matrix[3], double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalJacobian</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a2e97a66f1a05b4782ccafdc4257338f4</anchor>
      <arglist>(Matrix &amp;, double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalTransform</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a1a2b519f11b3f352dbc1d3a7bd6ede45</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>aa32bdea5debcceaab400976139ac9e6a</anchor>
      <arglist>(Indent=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Subdivide</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>a4b5500e20bb8e73462b8fb9972f4995e</anchor>
      <arglist>(bool=true, bool=true, bool=true, bool=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BSplineFreeFormTransformation3D</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>af7f2c03667bad48ad702f1ea44361fca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BoundingBoxCP</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation3D.html</anchorfile>
      <anchor>a1f6a4762c874b5cd43d9f3c0e46be4ae</anchor>
      <arglist>(int cp, Point &amp;, Point &amp;, double=1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BoundingBoxImage</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation3D.html</anchorfile>
      <anchor>af2cd0fd5b7d227b9bd8f981aed271218</anchor>
      <arglist>(const BaseImage *, int, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, double=1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetStatusCP</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation3D.html</anchorfile>
      <anchor>a9612ef88603e387b7d0e7fa62a16ba86</anchor>
      <arglist>(int, int, int, DOFStatus &amp;, DOFStatus &amp;, DOFStatus &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation3D.html</anchorfile>
      <anchor>a9eb365d88f58c3e4f3c358fa718c55c9</anchor>
      <arglist>(const ImageAttributes &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDOFs</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation3D.html</anchorfile>
      <anchor>ab949fbe7d63603cc6fd58db39d9f901c</anchor>
      <arglist>(Matrix &amp;, int, int, int, double, double, double) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDOFs</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation3D.html</anchorfile>
      <anchor>afb8936dfc63ab75ba519877de31190d0</anchor>
      <arglist>(Matrix &amp;, int, double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDOFs</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation3D.html</anchorfile>
      <anchor>a716702dfcd24083527675c520e19e654</anchor>
      <arglist>(double[3], int, double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MultiBoundingBoxImage</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation3D.html</anchorfile>
      <anchor>a9f06dce331f84d4d7c77fe841a32e90e</anchor>
      <arglist>(const BaseImage *, int, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, double=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation3D.html</anchorfile>
      <anchor>aedd309a9691709436f088c20ca0c40cd</anchor>
      <arglist>(const GenericImage&lt; double &gt; *, double *, const WorldCoordsImage *, const WorldCoordsImage *, double=-1, double=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation3D.html</anchorfile>
      <anchor>ac2b11815efe777c010669d668ec07e24</anchor>
      <arglist>(const PointSet &amp;, const Vector3D&lt; double &gt; *, double *, double=0, double=-1, double=1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutStatusCP</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation3D.html</anchorfile>
      <anchor>af15615f5ea38c07bf9d7a10e2ad8b2a3</anchor>
      <arglist>(int, int, int, DOFStatus, DOFStatus, DOFStatus)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FreeFormTransformation3D</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation3D.html</anchorfile>
      <anchor>a0f87756ddce649288086270307a32450</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ActualNumberOfDOFs</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a11154f3d110d360fdb3ac4a1855dc7c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Approximate</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>aaf145d16392c1f0c2ea0c7d7b77d3817</anchor>
      <arglist>(const Transformation *, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Approximate</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a8c0aabd8dadb59b974d39866f9a18cdd</anchor>
      <arglist>(const ImageAttributes &amp;, double *, double *, double *, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Approximate</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>ae44d3af7bfa09df4026c6fd61acf5cff</anchor>
      <arglist>(const double *, const double *, const double *, double *, double *, double *, int, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Approximate</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a316ce428192e6fce1ca1877eeeb0cf3c</anchor>
      <arglist>(const double *, const double *, const double *, const double *, double *, double *, double *, int, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApproximateAsNew</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a33a73c0ba2518990dc1015b3a0b7bff0</anchor>
      <arglist>(const Transformation *, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApproximateAsNew</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>aa83c61bdb818e2e87dd306fc33ee2786</anchor>
      <arglist>(const ImageAttributes &amp;, double *, double *, double *, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ImageAttributes</type>
      <name>ApproximationDomain</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a4e91e16f3779b78fafcfa4fc2ce86a3e</anchor>
      <arglist>(const ImageAttributes &amp;, const Transformation *)</arglist>
    </member>
    <member kind="function">
      <type>const ImageAttributes &amp;</type>
      <name>Attributes</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>ade7d68b110e560e0b9dd72ed12e662e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>accb854b1002c72f8801e71a46b0eb7cd</anchor>
      <arglist>(double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>aa01173b1f38d2c01f9cb931e76a3c544</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a9941f7439e5b840db62e46ce16626c3f</anchor>
      <arglist>(Point &amp;, Point &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>ae9cc113e298ecc2da5b6b684cdb60a14</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>ad6a1a1d1c9dbf5988286866b85249ed4</anchor>
      <arglist>(Point &amp;, double &amp;, Point &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>ac52c9005bf09890851dd33f6dd1f5556</anchor>
      <arglist>(int, double &amp;, double &amp;, double=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a34714a1641b3e5dc5544d8e68286a563</anchor>
      <arglist>(int, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double=1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>aa403b91c544cd6be9e4978409c25bd89</anchor>
      <arglist>(int, Point &amp;, Point &amp;, double=1) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a15924ac576a0facfd90d0b8af62348d6</anchor>
      <arglist>(const Image *, int, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, double=1) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a7dd5c7185e95cc694fe0141768d08cb1</anchor>
      <arglist>(const Image *, int, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, double=1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ControlPointLocation</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>aeb1d2d184bb699eec59a650a7e245d07</anchor>
      <arglist>(int, double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ControlPointLocation</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>ab3938add4a6984a2a1a8ab8d9095c002</anchor>
      <arglist>(int, double &amp;, double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>ControlPointLocation</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a2419c4685abfdbc573e405514556b77d</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a82df694b72ac2aa8fed01c9e519d7448</anchor>
      <arglist>(const Transformation *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CropPadPassiveCPs</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>af8a6f85b7eee04f8eb861ed12b3a9882</anchor>
      <arglist>(int=0, bool=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>CropPadPassiveCPs</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a414ae8b070d823ba95d6da3cdd538301</anchor>
      <arglist>(int, int, int=0, int=0, bool=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DOFBoundingBox</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>ad953e13afe579cd961bf005096d5c14c</anchor>
      <arglist>(const Image *, int, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, double=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>DOFGradientNorm</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>ae173022f78dbe7d80a67b37a047b3d4d</anchor>
      <arglist>(const double *) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>DOFToDimension</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>acd193514da513c4ec3a74096763768f2</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>DOFToIndex</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>aa59aad01913b005d3d9ab2df4bfa3955</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>EvaluateRMSError</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a95c1392e4cc07db9accd8f419e9dfba9</anchor>
      <arglist>(const Transformation *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ExtrapolationMode</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a4d9ef4cb43070a94af2705e6fd8a4fb1</anchor>
      <arglist>(enum ExtrapolationMode)</arglist>
    </member>
    <member kind="function">
      <type>const CPExtrapolator *</type>
      <name>Extrapolator</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>acea56c25db67ebe99ce9c435d0b29b83</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a45c88964a050384753da7a94b85c3355</anchor>
      <arglist>(int, Vector &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>ad1d9135af9d8c4bf6d2cb64e7a12046b</anchor>
      <arglist>(int, int, int, double &amp;, double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a88295c6be6726ad4e5ed6bf43949f1c3</anchor>
      <arglist>(int, int, int, int, double &amp;, double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetOrientation</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>ad2e92d077cdb02803a1582531f0a9d3b</anchor>
      <arglist>(double *, double *, double *) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetSpacing</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a9346f2dfa8d54f76509235f4ecc995ca</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetSpacing</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a8de74c1c93c81bfd2b4145c0874f0390</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetStatus</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a37818d42f8fd20baf97b8d3fd995cd29</anchor>
      <arglist>(int, CPStatus &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetStatus</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a63aaf33a92f26c2bc6f8d3336868e20f</anchor>
      <arglist>(int, int, int, DOFStatus &amp;, DOFStatus &amp;, DOFStatus &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetStatus</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a76b38d989d063d793918aaf35ae401b7</anchor>
      <arglist>(int, int, int, int, DOFStatus &amp;, DOFStatus &amp;, DOFStatus &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetT</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a1980bd364b2e795902c9f2f2898399c5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetTSpacing</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a46e5c22317dc3d088d5e010ff9b41e98</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetX</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>afb15a04c1e52a3baa1c9412e4a2e8387</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetXSpacing</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a4ab67ac749f69f2b44a2bb9ef89f4803</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetY</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>afa260f5631d0a821c0e3db245ea03db1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetYSpacing</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>ab108adfa63164b5f0004b29f980bb4cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetZ</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>add87eb7f148f29cc172f5299166cfc25</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetZSpacing</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a66f0445f91c000ce55396596fea96a8c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GlobalHessian</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a6de82f45349e193e0b9d7adc895f508b</anchor>
      <arglist>(Matrix[3], double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GlobalInverse</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a157918ad707870d3fb35303df0ef245d</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GlobalJacobian</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a42ede0214d55942d96e307cf38190c98</anchor>
      <arglist>(Matrix &amp;, double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GlobalTransform</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a011ab0b89b9364752a17061d44049613</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Hessian</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a212e612e1daf6179ac63846cd2caa08b</anchor>
      <arglist>(Matrix[3], double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>HessianToWorld</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>ae6a8e7740a4b31d7b03d23961718b36f</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>HessianToWorld</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>aa98a5d1e487ae5f64dc777c53eb65564</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>HessianToWorld</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a175f273385f9d73c8833afe8845991c6</anchor>
      <arglist>(Matrix &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>HessianToWorld</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a2e1cb3b3836d3f9b37d8e159a110831a</anchor>
      <arglist>(Matrix[3]) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IndexToDOFs</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a375c0fa59da42e046641ded5e10859fd</anchor>
      <arglist>(int, int &amp;, int &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IndexToDOFs</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>acdd761df6e82567c0201fd63401fe95f</anchor>
      <arglist>(int, int &amp;, int &amp;, int &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IndexToLattice</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a42bca3ebf9c42382465b6997c50401d1</anchor>
      <arglist>(int, int &amp;, int &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IndexToLattice</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a7ee6b233efcd940e20a4203f84bbface</anchor>
      <arglist>(int, int &amp;, int &amp;, int &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IndexToLattice</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a08a67238441e525d9e6f3595e020b8fc</anchor>
      <arglist>(int, int &amp;, int &amp;, int &amp;, int &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IndexToWorld</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a99b7f541e4deae93fcc51d849321eab6</anchor>
      <arglist>(int, double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IndexToWorld</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a24afe8463b6569b37cf5322b4cd5e4e9</anchor>
      <arglist>(int, double &amp;, double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IndexToWorld</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a9cf7a3a298687da02951791939d2c4c4</anchor>
      <arglist>(int, Point &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>IndexToWorld</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a7d40c50d992164af3e77b4a86447308e</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a1d87f38d1e2719c60fb56983ba073064</anchor>
      <arglist>(const ImageAttributes &amp;, double, double, double=-1.0, double=-1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a04717f7d9f64b891aa7b65a75db2c8e9</anchor>
      <arglist>(const CPImage &amp;, bool=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>ad4b73f84f2c11c0b4ee8d5feaa3fa313</anchor>
      <arglist>(const GenericImage&lt; double &gt; &amp;, bool=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Inverse</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>aa403abdcf6b87b0fc7251c371d67c0d1</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsActive</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a3022cc85a3b6de213f11b092deb97eac</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsActive</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a0b01229be21a43eb0da9892d4c02d038</anchor>
      <arglist>(int, int, int=0, int=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Jacobian</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>aaeff4413785087fdc12f9471719216b4</anchor>
      <arglist>(Matrix &amp;, double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDOFs</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a3ff224b761ca23ebb2e1ad4e3b0ff31b</anchor>
      <arglist>(TransformationJacobian &amp;, double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>JacobianToWorld</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a4a979849fd26b5e34cd6b650b1d3ecfe</anchor>
      <arglist>(double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>JacobianToWorld</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a4f65b78127c07d955fef20a79b82983d</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>JacobianToWorld</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a87bc1a13ce179fdbacd82a72a69582ce</anchor>
      <arglist>(Matrix &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>KernelRadius</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>afa501aae358f3353c0f9d3f35c292998</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>LatticeToIndex</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a05d6757d51bcd183e474270322a91e20</anchor>
      <arglist>(int, int, int=0, int=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>LatticeToTime</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a36a379b5d52443888503ddd902052846</anchor>
      <arglist>(double) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LatticeToWorld</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a87a895499aad0b90ccf3788b7ff6897d</anchor>
      <arglist>(double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LatticeToWorld</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a452a26a14ad41eebd57053be9e47a85e</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LatticeToWorld</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a909b705f92f7b87048a840a2ccfcfda1</anchor>
      <arglist>(Point &amp;) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a360d76cef0c8beaf5900ef9e7dbc9704</anchor>
      <arglist>(double, SpeedupFactor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a1a7953385fbb82687d883960f98ce0bc</anchor>
      <arglist>(enum ExtrapolationMode, ExtrapolationMode)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfActiveCPs</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a08db880cd78984d3d1e87f9229151e7d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfCPs</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a708ef5e22112a7942a8083ecaec92bcd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfPassiveCPs</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a1ab3c7230293d3da6ca30f353c34f0c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a8b2ae05a6ac7a368ac843bd1d21ff259</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>aab48ac34a1cb8c356a515daa890c4f16</anchor>
      <arglist>(int, const Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a8c7d209810df9661f2610b1c5282412d</anchor>
      <arglist>(int, int, int, double, double, double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>add3f079ca08fe5a0d40316a92c80516f</anchor>
      <arglist>(int, int, int, int, double, double, double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutBoundingBox</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a9793a8ae05fb0d73da1ddbaa42cbd867</anchor>
      <arglist>(double, double, double, double, double, double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutBoundingBox</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>af7fbf7a2e369a5fd635abaa30202013c</anchor>
      <arglist>(const Point &amp;, const Point &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutBoundingBox</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>add00f59481e7fb1ac6dda20b9c16d794</anchor>
      <arglist>(double, double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutBoundingBox</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a8e4910cf7fbb1a3852204e414bcf8aa6</anchor>
      <arglist>(double, double, double, double, double, double, double, double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutOrientation</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a89a4a2d7158ec7c2c5ab3594f04c803f</anchor>
      <arglist>(double *, double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutStatus</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>ab29b5324a3e76327ca64609e40dcac31</anchor>
      <arglist>(int, const CPStatus &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutStatus</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>aa42a3445c666bf0be02dc62705ccc645</anchor>
      <arglist>(int, int, int, DOFStatus, DOFStatus, DOFStatus)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutStatus</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a7de75fdba2d33ddfd728124f8f4deda7</anchor>
      <arglist>(int, int, int, int, DOFStatus, DOFStatus, DOFStatus)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>afaac696371f4feaea5a35485a9362757</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Subdivide2D</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a37f21fce85ffcce1807be91135185fe5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Subdivide3D</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a4bae05a5cc4d9ca00c39b9d3b2885fcb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Subdivide4D</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a794713882469e7d0e222180a7bb8ab86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>T</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a232c301eb670a3a9ac3343f2fb2c904a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>TimeToLattice</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a29be6e627c1b11d99ef93c347d643758</anchor>
      <arglist>(double) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Transform</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a9a922c31d7bce6e44a6c9d8bc35ceeed</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WorldToLattice</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a76b76ac76447e0d10d7bf343a64d4594</anchor>
      <arglist>(double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WorldToLattice</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a87972ad09bde12f5f6739acaf1bb0890</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WorldToLattice</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>accf39311d4c7ae31876ef7042566f4e3</anchor>
      <arglist>(Point &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>X</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a6cfe63a2c548f47446675d93151fce68</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Y</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>ac3ca43adacdebf01e8af0568287c4c78</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Z</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>ab54590666293f0f158cf711bdffed1b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FreeFormTransformation</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a0f63d6b915ff3968c7ba7451f204d5c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Add</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>aa9f3e90863799cc88cd31d15edc9a5d3</anchor>
      <arglist>(const DOFValue *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsIdentity</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>ac83feae6ad4d675edb172e82d43de56d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>LocalInverse</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a3952a23d285bc0f35b10d5746a8b2e6f</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a365a3782121517d3b74e5723350c0a7d</anchor>
      <arglist>(int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a6dc0248ee400b68501a9c1f8a8acd9e5</anchor>
      <arglist>(const DOFValue *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Reset</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>ae24d2407237da26b9c01b342e61924b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a0ee4ab8f5ac2c023f3abf5b5fef2657a</anchor>
      <arglist>(const DOFValue *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cofstream &amp;</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a81b25ea8d4c4f6a942f9c5ae68838b39</anchor>
      <arglist>(Cofstream &amp;) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Interpolator</type>
      <name>_FFD</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>acf14e0df5d88d14d49dfc1cbc81b55ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Interpolator2D</type>
      <name>_FFD2D</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation3D.html</anchorfile>
      <anchor>af9bff713dd0e8026d9e5631211ea6584</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ImageAttributes &amp;</type>
      <name>_attr</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>ac40fabd86872ea2ed955119a354c4dfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CPInterpolator *</type>
      <name>_CPFunc</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a6354d1f8635c5c2551d33f29fb62cacc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CPImage</type>
      <name>_CPImage</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>aa67cf30f0bd3203fd7f7977797208555</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CPStatus ****</type>
      <name>_CPStatus</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a164620e3770196f59b80ea0fb0f0741d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CPExtrapolator *</type>
      <name>_CPValue</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a8d0b6b3aa12cedb33d9e60fc6d8a03b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const double &amp;</type>
      <name>_dt</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a7f50bc9e54cd8dd082ca94c029d243eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const double &amp;</type>
      <name>_dx</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a3ac5aec789964b10b8df57fec2973ba1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const double &amp;</type>
      <name>_dy</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>ab562b71cd738f1bfe92adfe08aa4d4a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const double &amp;</type>
      <name>_dz</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>aa5047e38586858e53a610253214b3231</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Matrix &amp;</type>
      <name>_matL2W</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a18b8e9659a648fda53e71c15f842985a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Matrix &amp;</type>
      <name>_matW2L</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a6939972dc44410379a15782d84bb9b75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int &amp;</type>
      <name>_t</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>aef232fb378327284fa7aadb4e2f60fcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int &amp;</type>
      <name>_x</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>af25d16a2c066fb166795d898e8fecf10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int &amp;</type>
      <name>_y</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a791e6bdd8f8a7ce228b97deebf665682</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int &amp;</type>
      <name>_z</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a4edf78524f3a1dac17724f662e857164</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericExtrapolateImageFunction&lt; CPImage &gt;</type>
      <name>CPExtrapolator</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>aa684f413f164fec9e6b1271d9f2c7989</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericImage&lt; CPValue &gt;</type>
      <name>CPImage</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a5d15e53b076b659dbebbc07dbcdd5d44</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericInterpolateImageFunction&lt; CPImage &gt;</type>
      <name>CPInterpolator</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a089ae4a3d6374a3c787f243d4d1e58e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector3D&lt; DOFStatus &gt;</type>
      <name>CPStatus</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>aaedfff681c2723f66f94344ceec63386</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector3D&lt; DOFValue &gt;</type>
      <name>CPValue</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a24c31691765db40b51a3fe4401f2ce68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CPValue</type>
      <name>Vector</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a072195fd1812b128dec1204696214460</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ImageAttributes</type>
      <name>DefaultAttributes</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation3D.html</anchorfile>
      <anchor>a2450c7f690ad2e8cfdd9eeaed199eeb3</anchor>
      <arglist>(double, double, double, double, double, double, double, double, double, const double *, const double *, const double *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>Bending3D</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a2fd9bd9bb793cd9ae0f37f003b7327d4</anchor>
      <arglist>(const Matrix[3])</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ImageAttributes</type>
      <name>DefaultAttributes</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a1e502651f942599c3e05ade618c631d6</anchor>
      <arglist>(const ImageAttributes &amp;attr, double dx=-1.0, double dy=-1.0, double dz=-1.0, double dt=-1.0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ImageAttributes</type>
      <name>DefaultAttributes</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>aa7e454aa2ab800b01a89eef42a296015</anchor>
      <arglist>(double, double, double, double, double, double, double, double, double, double, double, double, const double *, const double *, const double *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FreeFormTransformation3D</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation3D.html</anchorfile>
      <anchor>aa2e92cfb3bb8225fddebcddf891fa1c0</anchor>
      <arglist>(CPInterpolator &amp;, CPInterpolator *=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FreeFormTransformation3D</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation3D.html</anchorfile>
      <anchor>aa8b13b4414090ad6302454c53af3c032</anchor>
      <arglist>(const FreeFormTransformation3D &amp;, CPInterpolator &amp;, CPInterpolator *=NULL)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Cifstream &amp;</type>
      <name>ReadDOFs</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation3D.html</anchorfile>
      <anchor>ab9cc8449cbb861eb65f548d94947146b</anchor>
      <arglist>(Cifstream &amp;, TransformationType)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Cofstream &amp;</type>
      <name>WriteDOFs</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation3D.html</anchorfile>
      <anchor>af185218c0fcdc7ba363b4ec2e9590296</anchor>
      <arglist>(Cofstream &amp;) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FreeFormTransformation</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a60f6ce771f644026f00683c521736a3d</anchor>
      <arglist>(CPInterpolator &amp;, CPInterpolator *=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FreeFormTransformation</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a40bfd8c4fa223eb49ba77fb0ae245aac</anchor>
      <arglist>(const FreeFormTransformation &amp;, CPInterpolator &amp;, CPInterpolator *=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>InitializeCPs</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a86b4626cad8e860ba514fae3edc7f3ec</anchor>
      <arglist>(const ImageAttributes &amp;, bool=true)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>InitializeCPs</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>ada727bbaacddcd265906080e39c1a250</anchor>
      <arglist>(const FreeFormTransformation &amp;, bool=true)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>InitializeInterpolator</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>ac4bf227346e5caaf55bdf63ff4d64ca1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>InitializeStatus</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a91604cb8e29f768ec4d9c15006d98975</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Cofstream &amp;</type>
      <name>WriteCPs</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>abdeb0683e3b22c853a57c4f97890315d</anchor>
      <arglist>(Cofstream &amp;) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::BSplineFreeFormTransformation4D</name>
    <filename>classmirtk_1_1BSplineFreeFormTransformation4D.html</filename>
    <base>mirtk::FreeFormTransformation4D</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a3faf1a8ef72c5150c7345460ee0a559d</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, const double *, int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateDOFsGradient</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>afcb1d8bfe01d4647b931bd4d5203a965</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, const double *, int, double *, double=1.0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>BendingEnergy</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a0bc2a54520dd543ccbf9f67cab1c00b1</anchor>
      <arglist>(double, double, double, double=0, double=-1, bool=true) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>BendingEnergy</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>aeb1cac48639ef75cb2bd26b1fe64c0ce</anchor>
      <arglist>(bool=false, bool=true) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>BendingEnergy</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a4d775e054bcd80b9c6c4377ac5902eea</anchor>
      <arglist>(const ImageAttributes &amp;, double=-1, bool=true) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BendingEnergyGradient</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a30cc9984745c249046646c591bd047a4</anchor>
      <arglist>(double *, double=1.0, bool=false, bool=true) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a479719ac1df1849dceec7bf35e8a3373</anchor>
      <arglist>(int, double &amp;, double &amp;, double=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a869efe6b017df1a14441a996bcb193e9</anchor>
      <arglist>(int, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a24e190b640a769a7a9f3c0cbe95908a4</anchor>
      <arglist>(int, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double=1) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSplineFreeFormTransformation4D</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>acb9d5e58ef8adfdf8215645066a987e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSplineFreeFormTransformation4D</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a0fb145264ece8a2fe87f7d46fd2f3627</anchor>
      <arglist>(double, double, double, double, double, double, double, double, double, double, double, double, double *, double *, double *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSplineFreeFormTransformation4D</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a4a052c7c4248f8f2d84ee917b77757c8</anchor>
      <arglist>(const ImageAttributes &amp;, double=-1, double=-1, double=-1, double=-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSplineFreeFormTransformation4D</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a7d3a4873baaed0daa911a6a7cfd8a4d5</anchor>
      <arglist>(const BaseImage &amp;, double, double, double, double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSplineFreeFormTransformation4D</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a6636122e5399465b7fe308b1fd5babb3</anchor>
      <arglist>(const BSplineFreeFormTransformation4D &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>CanRead</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>ac5ad2c2c7b363b56137a6934043d1c12</anchor>
      <arglist>(TransformationType) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>adc0441b5491f735897081701687e722d</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateHessian</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a3bbf37294bf666da1e8cebb2f8b4639d</anchor>
      <arglist>(Matrix[3], int, int, int, int) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateHessian</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a280ce819faf004c171cdee3b94069814</anchor>
      <arglist>(Matrix[3], double, double, double, double) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateHessianWorld</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a9b90893638926dd6a56bb8da946b6023</anchor>
      <arglist>(Matrix[3], double, double, double, double) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateInside</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a4334d6b4d48f8b7ff6a78101510db03f</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateJacobian</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a6f64d02e2c0be97cf12c8d129d2c7756</anchor>
      <arglist>(Matrix &amp;, int, int, int, int) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateJacobian</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>adc29e31acd32a4ee084f8c672684396b</anchor>
      <arglist>(Matrix &amp;, double, double, double, double) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateJacobianDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a4314efe4f9ae0801b2c67c2c433d2b85</anchor>
      <arglist>(double[3], int, int, int, int, double, double, double, double) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateJacobianDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a811c06b4ec937300ff8dd2c358d6747d</anchor>
      <arglist>(TransformationJacobian &amp;jac, double, double, double, double) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateJacobianWorld</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a8b997dcce4c17f3f1ea1a5544f9622ea</anchor>
      <arglist>(Matrix &amp;, double, double, double, double) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateLaplacian</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a581a31462aa647b5e238f08c2380428f</anchor>
      <arglist>(double[3], int, int, int, int) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateLaplacian</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>ad2ee50a671a12adba8b504c3a6121973</anchor>
      <arglist>(double[3], int, int, int, double) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateLaplacian</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a08bc05df2393abc8bc91fe0216f9c9dd</anchor>
      <arglist>(double[3], double, double, double, double) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateLaplacian</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a79984ba9a6bf84550be2432306fdde6b</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetTAfterSubdivision</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>af25ac1472c3a18fc9bb8d98ea7862f05</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetTSpacingAfterSubdivision</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>ab547ab67e72e63a519544eecba6d58ee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetXAfterSubdivision</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a4244a482bca0c8e77d961cd351c6078d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetXSpacingAfterSubdivision</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>acd82509cdacc9e7d4dcb1673115e98b1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetYAfterSubdivision</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a633166530c046f365cc764a352aa6549</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetYSpacingAfterSubdivision</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>ae3ce52c1083ca7005fccfefe6662f9d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetZAfterSubdivision</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>ac76cfaf73de6100de79c42949b298fbf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetZSpacingAfterSubdivision</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a98881a376ab07e1e136d5d90edb2a367</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Interpolate</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>aa3ce1acacdb82ba84ca50efef901bf2f</anchor>
      <arglist>(const double *, const double *, const double *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a8b082f7b1f92542cd1b291cd9a75e290</anchor>
      <arglist>(Matrix &amp;, int, int, int, int, double, double, double, double, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a012774703df840a3d660b4daa8812d7b</anchor>
      <arglist>(double[3], int, int, int, int, double, double, double, double, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a340ab884bde90ef20407c370a90f00b9</anchor>
      <arglist>(TransformationJacobian &amp;, double, double, double, double, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>KernelSize</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a4215fdad7d7b7f77a44e333532829b38</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalHessian</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>aeb71155d8686bfd7c8c9f0bf79c907bf</anchor>
      <arglist>(Matrix[3], double, double, double, double, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalJacobian</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a839b26370c85ca64fb1d6d5719b4621d</anchor>
      <arglist>(Matrix &amp;, double, double, double, double, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalTransform</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a2025b8093b045886714ba5ed46b8f500</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a3ebc87e1db311ab3dc753e7a8db917e2</anchor>
      <arglist>(const GenericImage&lt; double &gt; *, double *, const WorldCoordsImage *, const WorldCoordsImage *, double=-1, double=1.0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a54bf112e0bf8cc2d1c9b28d6aedd5bf9</anchor>
      <arglist>(Indent=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Subdivide</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>af74c7285e79b0e18f0783fca60b7eb92</anchor>
      <arglist>(bool=true, bool=true, bool=true, bool=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BSplineFreeFormTransformation4D</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>a63736098ad2ccb66df794c6e50e3d17c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BoundingBoxCP</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation4D.html</anchorfile>
      <anchor>a4ef6a4c047c847af5ab495e259d52569</anchor>
      <arglist>(int, Point &amp;, Point &amp;, double=1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BoundingBoxImage</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation4D.html</anchorfile>
      <anchor>a0aa41b0dca36d65f1016ab64d45f7360</anchor>
      <arglist>(const GreyImage *, int, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, double=1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetStatusCP</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation4D.html</anchorfile>
      <anchor>a647fcf29e06fc3fc9e724a91c693613f</anchor>
      <arglist>(int, int, int, int, DOFStatus &amp;, DOFStatus &amp;, DOFStatus &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation4D.html</anchorfile>
      <anchor>a72b9dea6f2c37a34e53fc8d0b7c73523</anchor>
      <arglist>(const ImageAttributes &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDOFs</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation4D.html</anchorfile>
      <anchor>a240af8fbed74e3325e11f3b17379c879</anchor>
      <arglist>(Matrix &amp;, int, double, double, double, double, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDOFs</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation4D.html</anchorfile>
      <anchor>a9a06d7f973169bb86f446b8a55f6538a</anchor>
      <arglist>(double[3], int, double, double, double, double, double=-1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutStatusCP</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation4D.html</anchorfile>
      <anchor>a72bfc524814e17bf93f37d077c9520c2</anchor>
      <arglist>(int, int, int, int, DOFStatus, DOFStatus, DOFStatus)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FreeFormTransformation4D</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation4D.html</anchorfile>
      <anchor>abbdf6b8d110f52c72f17eb1d76092a0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FFDJacobianWorld</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a9399479ccf8ecc728ba6bc879b70834c</anchor>
      <arglist>(Matrix &amp;, double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a2eb526a03454f44c1ccea4d40ffe77de</anchor>
      <arglist>(const PointSet &amp;, const Vector3D&lt; double &gt; *, double *, double=0, double=-1, double=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DeriveJacobianWrtDOF</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a317c24a5906c2628a00089ea631a1512</anchor>
      <arglist>(Matrix &amp;, int, double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Interpolator</type>
      <name>_FFD</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformation4D.html</anchorfile>
      <anchor>ad51a050244c2b07eadb9ec0b7c4ea165</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FreeFormTransformation4D</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation4D.html</anchorfile>
      <anchor>a493fe19a72915fdb64e2ffd612d5f59d</anchor>
      <arglist>(CPInterpolator &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FreeFormTransformation4D</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation4D.html</anchorfile>
      <anchor>a3adc5487d59dbd63943ddc21010cd782</anchor>
      <arglist>(const FreeFormTransformation4D &amp;, CPInterpolator &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Cifstream &amp;</type>
      <name>ReadDOFs</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation4D.html</anchorfile>
      <anchor>a6b33c5528078fb7f505ceec3961505e7</anchor>
      <arglist>(Cifstream &amp;, TransformationType)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Cofstream &amp;</type>
      <name>WriteDOFs</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation4D.html</anchorfile>
      <anchor>a7904a25f47abdee2868649757cdff316</anchor>
      <arglist>(Cofstream &amp;) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::BSplineFreeFormTransformationStatistical</name>
    <filename>classmirtk_1_1BSplineFreeFormTransformationStatistical.html</filename>
    <base>mirtk::BSplineFreeFormTransformation3D</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Add</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationStatistical.html</anchorfile>
      <anchor>a1efd2d3e7e7dc5de54035af158cb9e7e</anchor>
      <arglist>(const DOFValue *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationStatistical.html</anchorfile>
      <anchor>aadc11a9ae3fdf47dbc80de08bbc4606f</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, const double *, int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateDOFsGradient</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationStatistical.html</anchorfile>
      <anchor>ae898d80bcf9223bf4eabf883e63944a0</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, const double *, int, double *, double=1.0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BendingEnergyGradient</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationStatistical.html</anchorfile>
      <anchor>a7a7a9ba1212d00326c85169ac0b4494a</anchor>
      <arglist>(double *, double=1, bool=false, bool=true) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSplineFreeFormTransformationStatistical</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationStatistical.html</anchorfile>
      <anchor>af28f66dcd29ddf4173a62459316c23be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSplineFreeFormTransformationStatistical</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationStatistical.html</anchorfile>
      <anchor>a906445936fc546e7caf96f273115d47d</anchor>
      <arglist>(const ImageAttributes &amp;, CPStatus ****, const Matrix &amp;, const Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSplineFreeFormTransformationStatistical</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationStatistical.html</anchorfile>
      <anchor>a82d505053032fd18c5e4646b8ee20372</anchor>
      <arglist>(const BSplineFreeFormTransformationStatistical &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>CropPadPassiveCPs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationStatistical.html</anchorfile>
      <anchor>a4bc29be9cf80086383520d81712f1b8e</anchor>
      <arglist>(int, int, int=0, int=0, bool=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>DOFGradientNorm</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationStatistical.html</anchorfile>
      <anchor>a6927cf29e53b2bcba1f29cafd40074fd</anchor>
      <arglist>(const double *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationStatistical.html</anchorfile>
      <anchor>a3107545efa00c619aa70ebcf7dd47b3d</anchor>
      <arglist>(const ImageAttributes &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Interpolate</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationStatistical.html</anchorfile>
      <anchor>a10aa219596b5234822e9eaead773a5ed</anchor>
      <arglist>(const double *, const double *, const double *=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationStatistical.html</anchorfile>
      <anchor>a52f2518b7c96cfc4fbd099cf854d52fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationStatistical.html</anchorfile>
      <anchor>a34a7505f775c56dd540294e035ae64de</anchor>
      <arglist>(const GenericImage&lt; double &gt; *, double *, const WorldCoordsImage *, const WorldCoordsImage *, double=1, double=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationStatistical.html</anchorfile>
      <anchor>a8c0be88278640bda711d63fb956863c2</anchor>
      <arglist>(Indent=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationStatistical.html</anchorfile>
      <anchor>afefeac92c77277ba5b55ca3c4b0dd68b</anchor>
      <arglist>(int, DOFValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationStatistical.html</anchorfile>
      <anchor>aefa0629df0318f6714fce8752e43a97d</anchor>
      <arglist>(const DOFValue *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReadSDM</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationStatistical.html</anchorfile>
      <anchor>a9039551c9f2f6de1d71a17eb6e981677</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationStatistical.html</anchorfile>
      <anchor>aa03caab32acaa179ac6cf234fb56e9fe</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UpdateCPs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationStatistical.html</anchorfile>
      <anchor>a27af8228f05507df440fcc668b5baf54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UpdateDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationStatistical.html</anchorfile>
      <anchor>a4a7a2e9df9660bc55dccff72d356a7a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Verify</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationStatistical.html</anchorfile>
      <anchor>a8940ddb54de4b1a650b775043d937039</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cofstream &amp;</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationStatistical.html</anchorfile>
      <anchor>a97b5ce45efdcf6b194bc6b463014ef10</anchor>
      <arglist>(Cofstream &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteSDM</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationStatistical.html</anchorfile>
      <anchor>ae268f842e9284c3c8a0a934f00f3cf8e</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BSplineFreeFormTransformationStatistical</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationStatistical.html</anchorfile>
      <anchor>a75140cde9e640aa76a366b5fe5c316d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Cifstream &amp;</type>
      <name>ReadDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationStatistical.html</anchorfile>
      <anchor>a9712e363091c7eaf6d30f45e823553a0</anchor>
      <arglist>(Cifstream &amp;, TransformationType)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::BSplineFreeFormTransformationSV</name>
    <filename>classmirtk_1_1BSplineFreeFormTransformationSV.html</filename>
    <base>mirtk::BSplineFreeFormTransformation3D</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApproximateAsNew</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a19838674bef58a45d0371c83a7cb120e</anchor>
      <arglist>(const ImageAttributes &amp;, const Transformation *, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApproximateAsNew</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>ae785aba4ef824b3054c2350c5c529d4f</anchor>
      <arglist>(GenericImage&lt; double &gt; &amp;, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApproximateAsNew</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>ac5998b3e067bf49cca6c9a031c54d2fc</anchor>
      <arglist>(GenericImage&lt; double &gt; &amp;, bool, int=3, int=8)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>ab9a6fde4123e448d5d09676299e96ac2</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, const double *, int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateDOFsGradient</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>aecb05695e50b57fe7b38865b2be1d372</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, const double *, int, double *, double=1.0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ImageAttributes</type>
      <name>ApproximationDomain</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a92d95349c236fb5945049d952c410fdf</anchor>
      <arglist>(const ImageAttributes &amp;, const Transformation *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSplineFreeFormTransformationSV</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>aaa373256279abc0af0efac4793d5e737</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSplineFreeFormTransformationSV</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a344bf0e2aa41a94c7eab74ada4711fda</anchor>
      <arglist>(const ImageAttributes &amp;, double=-1, double=-1, double=-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSplineFreeFormTransformationSV</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>ae10f3d771d663f96c7f4668049baf354</anchor>
      <arglist>(const BaseImage &amp;, double, double, double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSplineFreeFormTransformationSV</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a6e41a7b3b1fb0bd9406c301440a8dd04</anchor>
      <arglist>(const GenericImage&lt; double &gt; &amp;, bool=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSplineFreeFormTransformationSV</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>aeed3323081905bf53c1dc9f99e1411d6</anchor>
      <arglist>(const BSplineFreeFormTransformationSV &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>CanRead</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a14902bbbb8e5981e64b2fd2a889e2bc4</anchor>
      <arglist>(TransformationType) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Changed</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a31ae53e788e98ce6cc569593b6a1d80e</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>CombineWith</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>ada2452a378cd095f816590b108c43872</anchor>
      <arglist>(const Transformation *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Displacement</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a50ae997f1cab2e21e637a5c6a6fc92ca</anchor>
      <arglist>(GenericImage&lt; double &gt; &amp;, double, double=-1, const WorldCoordsImage *=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Displacement</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a9ea4cb41325690a379349fa229b333a9</anchor>
      <arglist>(GenericImage&lt; float &gt; &amp;, double, double=-1, const WorldCoordsImage *=NULL) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>aa81b5f82ea462e36aac074369de09ea5</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateJacobianDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a5e2caba4e7540c06af279537c6f50b7d</anchor>
      <arglist>(TransformationJacobian &amp;, double, double) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateJacobianDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a8ee6ff20897ff4e679f5a6343b30ad1f</anchor>
      <arglist>(TransformationJacobian &amp;, double, double, double) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateJacobianDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a78a16db3dee642e1f1335249905ae277</anchor>
      <arglist>(TransformationJacobian &amp;, double, double, double, double) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateJacobianWorld</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>aee56e08544e717175e68820475a3d5b7</anchor>
      <arglist>(Matrix &amp;, double, double, double, double) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a3c40f3e8e92395fbb5b92dec48f31bc2</anchor>
      <arglist>(const ImageAttributes &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a3239617582a71f1133406614571d63c7</anchor>
      <arglist>(const ImageAttributes &amp;, double, double, double, const Transformation *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IntegrateVelocities</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a0a0f6dd0a4e873af353f03db7a758bee</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double T=1.0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Interpolate</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a8383149e0414b92895f6dc367653c3d3</anchor>
      <arglist>(const double *, const double *, const double *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InverseDisplacement</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>aecb91d94ffc5f497c649de758ac18d02</anchor>
      <arglist>(GenericImage&lt; double &gt; &amp;, double, double=-1, const WorldCoordsImage *=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InverseDisplacement</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a66db74bae061e01120afa7ce9cb02440</anchor>
      <arglist>(GenericImage&lt; float &gt; &amp;, double, double=-1, const WorldCoordsImage *=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Invert</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>afffe94f3fdf2c8cf0339f69048d6e14f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a6627fff3c630466d03e457a6efbd9675</anchor>
      <arglist>(Matrix &amp;, int, double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>aebd2f80b52d8b933ba5f7e4ea283bf03</anchor>
      <arglist>(double[3], int, double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a51d2e21310a737bfdd212c9ea2c71883</anchor>
      <arglist>(TransformationJacobian &amp;, double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalHessian</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a666775aec4ff5aa62b85d85374c98056</anchor>
      <arglist>(Matrix[3], double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>LocalInverse</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a023305f9733e1eebd24dbc7fab46ee8a</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalJacobian</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a7f621c907c0c0efbd0b508045e090478</anchor>
      <arglist>(Matrix &amp;, double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalTransform</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a44dccf9356ed6c3662a3bfe5a62412e9</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a735ad1de45029250079a69820a9084dc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a937d1c4049d413936a6451608761e23c</anchor>
      <arglist>(const GenericImage&lt; double &gt; *, double *, const WorldCoordsImage *, const WorldCoordsImage *, double=-1, double=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a14a379d2e8cecf769a7a2a889e244ac9</anchor>
      <arglist>(const PointSet &amp;, const Vector3D&lt; double &gt; *, double *, double=0, double=-1, double=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>abeb47f076eac19f14ee3e9afc5496cd7</anchor>
      <arglist>(Indent=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>RequiresCachingOfDisplacements</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a6ae5aeb6b8355ad9b002bfa956110cb7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ScalingAndSquaring</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a5fa1ac00901535287c0278b053e100ef</anchor>
      <arglist>(GenericImage&lt; VoxelType &gt; *d, double T=1.0, const WorldCoordsImage *wc=NULL) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ScalingAndSquaring</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>aa48b3c1667e5a66c63dcdbe67883f073</anchor>
      <arglist>(const ImageAttributes &amp;attr, GenericImage&lt; VoxelType &gt; *d, GenericImage&lt; VoxelType &gt; *dx, GenericImage&lt; VoxelType &gt; *dj=NULL, GenericImage&lt; VoxelType &gt; *lj=NULL, GenericImage&lt; VoxelType &gt; *dv=NULL, double T=1.0, const WorldCoordsImage *wc=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a4fd8096c1ba034641e95eb11a3342778</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Subdivide</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>abcb071336370e1ea9ba787c42eb0270c</anchor>
      <arglist>(bool=true, bool=true, bool=true, bool=true)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>UpperIntegrationLimit</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>aef585ce59b5e52ad6ed8feb39f9969db</anchor>
      <arglist>(double t, double t0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BSplineFreeFormTransformationSV</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a95670631a1aa4601d04bab569dc1b953</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>EvaluateBCHFormula</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a84154e19456e56bb4e660d18130c7acd</anchor>
      <arglist>(int, CPImage &amp;, double, const CPImage &amp;, const CPImage &amp;, bool=false) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>EvaluateBCHFormula</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a52f931683397d665785a476fcc932893</anchor>
      <arglist>(int, CPImage &amp;, const CPImage &amp;, const CPImage &amp;, bool=false) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>InitializeExtrapolator</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a18d69756567d2fa85c5f042a9dfed608</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>NumberOfStepsForIntervalLength</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a26212071ee91ea211dd0841daef6896a</anchor>
      <arglist>(double) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>NumberOfStepsForIntervalLength</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a9c916b889e79197728d51ac69fb928b7</anchor>
      <arglist>(double, int) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a0ceae3cbc764172d8f299a93e1a22cdb</anchor>
      <arglist>(const GenericImage&lt; double &gt; *, double *, const WorldCoordsImage *, const WorldCoordsImage *, double, double, double) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Cifstream &amp;</type>
      <name>ReadDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a3357c39558d89e08a33d2fffc8b2144d</anchor>
      <arglist>(Cifstream &amp;, TransformationType)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>StepLengthForIntervalLength</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>aeff85f74a6a822f7aa2a1f447788accb</anchor>
      <arglist>(double) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Cofstream &amp;</type>
      <name>WriteDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a2cd69021cf3a4b3859a8d140b0d989da</anchor>
      <arglist>(Cofstream &amp;) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::BSplineFreeFormTransformationTD</name>
    <filename>classmirtk_1_1BSplineFreeFormTransformationTD.html</filename>
    <base>mirtk::BSplineFreeFormTransformation4D</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApproximateAsNew</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationTD.html</anchorfile>
      <anchor>a9f6f8a6688a1563e90bf63fddf63c293</anchor>
      <arglist>(GenericImage&lt; double &gt; **, const double *, const double *, int, bool=false, int=3, int=8)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationTD.html</anchorfile>
      <anchor>a3ea3154dd1042361c83d616e36d4106d</anchor>
      <arglist>(const GenericImage&lt; double &gt; *const *, const double *, const double *, int, bool=false, int=3, int=8)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationTD.html</anchorfile>
      <anchor>a74031dc4fec84397b9f99051ee4f3a89</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, const double *, int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateDOFsGradient</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationTD.html</anchorfile>
      <anchor>a9920e233613e34545fd543093773b350</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, const double *, int, double *, double=1.0) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSplineFreeFormTransformationTD</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationTD.html</anchorfile>
      <anchor>a1d0ac69e058751472718a812a1a94deb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSplineFreeFormTransformationTD</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationTD.html</anchorfile>
      <anchor>a2675948932258b04451e9b06207d64c9</anchor>
      <arglist>(const ImageAttributes &amp;, double=-1, double=-1, double=-1, double=-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSplineFreeFormTransformationTD</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationTD.html</anchorfile>
      <anchor>a0e103d34da94d8d70810cc41a7381bf9</anchor>
      <arglist>(const BaseImage &amp;, double, double, double, double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSplineFreeFormTransformationTD</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationTD.html</anchorfile>
      <anchor>ac9fe497e9f5017f7ed9de9dc1589432f</anchor>
      <arglist>(const BSplineFreeFormTransformationTD &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>CanRead</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationTD.html</anchorfile>
      <anchor>a2452c4035863405ca030f11eeac02745</anchor>
      <arglist>(TransformationType) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Interpolate</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationTD.html</anchorfile>
      <anchor>a58a5e8ebcba576edc9e34e443755cf3d</anchor>
      <arglist>(const double *, const double *, const double *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Invert</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationTD.html</anchorfile>
      <anchor>a2d33ea7864e7e74a55178525f0c04b40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationTD.html</anchorfile>
      <anchor>ae168cdec2ab202e6eb9ef9e4a5e278d5</anchor>
      <arglist>(Matrix &amp;, int, int, int, int, double, double, double, double, double) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationTD.html</anchorfile>
      <anchor>a33dab309922d4b8efb3cb4caa04c8301</anchor>
      <arglist>(double[3], int, int, int, int, double, double, double, double, double) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationTD.html</anchorfile>
      <anchor>a25d3253f365f543d85c39a276ae2f0d1</anchor>
      <arglist>(TransformationJacobian &amp;, double, double, double, double, double) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalHessian</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationTD.html</anchorfile>
      <anchor>a7a61af0162519c107375fc35b1057ec5</anchor>
      <arglist>(Matrix[3], double, double, double, double, double) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>LocalInverse</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationTD.html</anchorfile>
      <anchor>a2c7b5f125be9df07c530e226eee74316</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double, double) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalJacobian</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationTD.html</anchorfile>
      <anchor>aa1b851a60b38227c7e3d3c4ac6c151b3</anchor>
      <arglist>(Matrix &amp;, double, double, double, double, double) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalTransform</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationTD.html</anchorfile>
      <anchor>acc513914e831c7c5a0b4fe08cee033a0</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double, double) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationTD.html</anchorfile>
      <anchor>aec0cf5d556298ae76eda2de6aa723ed3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationTD.html</anchorfile>
      <anchor>a5eced4ca7a033e7700f91cda0846feb2</anchor>
      <arglist>(const GenericImage&lt; double &gt; *, double *, const WorldCoordsImage *, const WorldCoordsImage *, double=1, double=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationTD.html</anchorfile>
      <anchor>aa18846d1c03abcc72888ff82300b3de6</anchor>
      <arglist>(const PointSet &amp;, const Vector3D&lt; double &gt; *, double *, double=0, double=-1, double=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationTD.html</anchorfile>
      <anchor>a2f691f6a731d4d55635d364adde7f7ec</anchor>
      <arglist>(Indent=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationTD.html</anchorfile>
      <anchor>a53e78cde324c8f1dcc683e29e5c3cb08</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>TransformAndJacobian</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationTD.html</anchorfile>
      <anchor>af3b30a5611672eed55d9a4d3b0787019</anchor>
      <arglist>(Matrix &amp;, double &amp;, double &amp;, double &amp;, double, double) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>TransformAndJacobianDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationTD.html</anchorfile>
      <anchor>a2be65433fb326cd345c2ee55cfadbc65</anchor>
      <arglist>(Matrix &amp;, int, int, int, int, double &amp;, double &amp;, double &amp;, double, double) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>TransformAndJacobianDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationTD.html</anchorfile>
      <anchor>a6e8b1fef9c5adf81533da5ce0dd280f0</anchor>
      <arglist>(Matrix &amp;, int, double &amp;, double &amp;, double &amp;, double, double) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>TransformAndJacobianDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationTD.html</anchorfile>
      <anchor>af35cc845023324f0862a0115378b078d</anchor>
      <arglist>(TransformationJacobian &amp;, double &amp;, double &amp;, double &amp;, double, double) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BSplineFreeFormTransformationTD</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationTD.html</anchorfile>
      <anchor>a8daaf69bf14f75d0d39fe6ae569f3e0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Cifstream &amp;</type>
      <name>ReadDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationTD.html</anchorfile>
      <anchor>ac1d5a2fdc863289575036bb4ebac04a5</anchor>
      <arglist>(Cifstream &amp;, TransformationType)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Cofstream &amp;</type>
      <name>WriteDOFs</name>
      <anchorfile>classmirtk_1_1BSplineFreeFormTransformationTD.html</anchorfile>
      <anchor>aa2e48f6b2a179aceaea0c49680fbd38a</anchor>
      <arglist>(Cofstream &amp;) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::BSplineInterpolateImageFunction</name>
    <filename>classmirtk_1_1BSplineInterpolateImageFunction.html</filename>
    <base>GenericBSplineInterpolateImageFunction&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>BSplineInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1BSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ae48585bb353fa345c065c963dbcaa5f7</anchor>
      <arglist>(int degree=3)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingInterval</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a434935d577e9561f25a3106ca14cbe05</anchor>
      <arglist>(double, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericBSplineInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a027cd69df9e218516bc1c88b8058a0dc</anchor>
      <arglist>(int=3)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a52fcb4115bca18652ba3b2732c0a8d29</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>aa04c8f32c6d250d4fece1856470285be</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a12aa437dce4b5f259af99bbadfb71438</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a07a1763bc7944bd57198e1145ad1d547</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ac34c68b3c1c2c3596202bc0a52284b26</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a6032425d6e38a8f2904f34ef69416a08</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ad4faee3a2650176aed36b9b29be5db30</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a35cc09577d7d2871a0a926caa5028ec8</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a43a69f4af532a2e6b037ae34d19d2cb7</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a0bdc097b2c92b8db75a087d9f15d58b6</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a303332bcb417847e584766e0cf4302ab</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ab8f24bc2df06704691d125b63e7815a8</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>aad6c76ee6dc02839466ed6f3516acbc1</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a24c6a1292233ae948d53792667f59e4f</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ad78e98e2967b64fcdc94c8d96b5fa72e</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a20d4df23d9b74e4e4d493e46bc9c8f8f</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>abe711099323fd9b5f5ed099e431fabe9</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a3fa423f692ea5c11278e868f1ad05885</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a22bc2214e706a93093426044b3d81e3c</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a7f3be75e40197def9b12d0dc65ca5ba6</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a61f23af8a52ff5051c69674ce84b8f53</anchor>
      <arglist>(bool=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a6be9e40933ca779c9fc0e495927cd9e7</anchor>
      <arglist>(CoefficientImage, Coefficient)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkComponentMacro</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>aa191793c31a4ea2963e4549800e9905c</anchor>
      <arglist>(CoefficientExtrapolator, InfiniteCoefficient)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a8e0f85d10a9679455ec81ced6797edc5</anchor>
      <arglist>(int, SplineDegree)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericBSplineInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a38148750922f91af64841f2f21143fd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>EvaluateInside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>adc813beaa64778b9b5117bab4a68c242</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateInside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a9abfbae35cb015877f16c99b0aeb2276</anchor>
      <arglist>(double *, double, double, double=0, int=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateInside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a8cff8f4d7a0e630045f6db9413b68f79</anchor>
      <arglist>(Vector &amp;, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>EvaluateOutside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>aa4064ad99a03735de2d6c4a9e2f8455e</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateOutside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>addcfd890bee90b573f6319bcc270c883</anchor>
      <arglist>(double *, double, double, double=0, int=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateOutside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a721a14eb3927f96cb3887422d2633dd6</anchor>
      <arglist>(Vector &amp;, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>EvaluateWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a8a592822346f101c7b953938af210f0d</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>adb50060437023b3e01e8b86da90e739a</anchor>
      <arglist>(double *, double, double, double=0, int=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a826b09ee41395dc39852fd5e52c3e9bd</anchor>
      <arglist>(Vector &amp;, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>EvaluateWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a6277075b6dd22e0b3f06224bf11cb2ae</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a929d79584f9a6e2e0564e4fd4a6c726a</anchor>
      <arglist>(double *, double, double, double=0, int=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a03875a96eaeb2925946dba7cb5f37ae0</anchor>
      <arglist>(Vector &amp;, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Extrapolator</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a0c25e76e00c32396aaf8eb67660c03be</anchor>
      <arglist>(ExtrapolateImageFunction *, bool=false)</arglist>
    </member>
    <member kind="function">
      <type>ExtrapolatorType *</type>
      <name>Extrapolator</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a2f0c9ce790e16ae4547f5b246dbfddb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ExtrapolatorType *</type>
      <name>Extrapolator</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a5fc620f5650dd6eaffe502fe464ebe13</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a4a42298381e2f7e8688f5f43f111d5d4</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>aa84119ecf4e7644239196d5b12ab8d51</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Input</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>ac5586fec12bd46c7de04d2dbf8fbdfcd</anchor>
      <arglist>(const BaseImage *)</arglist>
    </member>
    <member kind="function">
      <type>const ImageType *</type>
      <name>Input</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>ac5e50cabb8aa5598305813d6fceb3849</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ExtrapolateImageFunction *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a62658af272b80089502a28bd6e526e30</anchor>
      <arglist>(enum ExtrapolationMode, const BaseImage *=NULL)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a6729b633ced57b38da8d121296bf719f</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a02c31f2212c25738e79e939fe5e8c33b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a3a9d55a7d18590b1b79abb07957c26a9</anchor>
      <arglist>(double, double, int &amp;, int &amp;, int &amp;, int &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a36ea39d3883e96c308bf3a23d01dbf1c</anchor>
      <arglist>(double, double, double, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a91ef78e1b777a2ca4cf6a39270418ceb</anchor>
      <arglist>(double, double, double, double, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a2be9f2aded708eb9afb4eff80c326d12</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>afb9c9c42952daa3c38f596415d5f8b67</anchor>
      <arglist>(double, double, double=0, double=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>ad48999b06102ec3fe8468036c086b1ae</anchor>
      <arglist>(double *, double, double, double=0, int=1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>abe7329e21f7cf6221ed1710bbe6b26a8</anchor>
      <arglist>(Vector &amp;, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a1e97f5d00b349b11896c41e2ff23cd57</anchor>
      <arglist>(TOutputImage &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>EvaluateWithPadding</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a453ed1edfcb3a01b4e52448993fef96c</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateWithPadding</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>ad3ca010bd1984c3a17d116e09cb45f6b</anchor>
      <arglist>(double *, double, double, double=0, int=1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateWithPadding</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>aeec158e8f6d203f0af01ae454090bcfa</anchor>
      <arglist>(Vector &amp;, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>enum ExtrapolationMode</type>
      <name>ExtrapolationMode</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a3e5dc1768868e69dbddec2e48e2e0e05</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ExtrapolateImageFunction *</type>
      <name>Extrapolator</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a97d9cb333d8a6d6ed1609d1805a5b9fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ExtrapolateImageFunction *</type>
      <name>Extrapolator</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a58f8755a3106c69acee6a753c5e00b45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ImageToWorld</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a0b04bc83374b1c41dcc970879e7d5622</anchor>
      <arglist>(double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ImageToWorld</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>ac879471d7b321412daf6d93e4f2097a5</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ImageToWorld</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a121c6acb6f566c60c54c3798c4821f41</anchor>
      <arglist>(Point &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a77ba1c07776afd5bda521c6753797173</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Input</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>aa149d65ef0925e52ff829078822984fc</anchor>
      <arglist>(const BaseImage *)</arglist>
    </member>
    <member kind="function">
      <type>const BaseImage *</type>
      <name>Input</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>aa5ba16dfb582b2ee7c325dd77733e53a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Inside</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a85d6348e745edae088e609a04399d710</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Inside</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>ac836c48ca219f3080094a8c22e8256f1</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Inside</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a84f7a1e66a1856827d7d0fb9b047c748</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual enum InterpolationMode</type>
      <name>InterpolationMode</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a1aa9e055dc143202294e6110723e2e1f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsForeground</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a867345199b2675dce1967c2db83d5760</anchor>
      <arglist>(double, double) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsForeground</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a10f7b178821ff502638633af19f2db6d</anchor>
      <arglist>(double, double, double) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsForeground</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a85098284b83abc88355b00f976837251</anchor>
      <arglist>(double, double, double, double) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInside</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a4fe2ad62b135c049924cbd73f618963d</anchor>
      <arglist>(double, double) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInside</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>ada0253aa2e884e7a576b7fb1b6a113b6</anchor>
      <arglist>(double, double, double) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInside</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>aa01a010bd86e58ae259864b2b6e0488f</anchor>
      <arglist>(double, double, double, double) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsOutside</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>af2a47166520157658f0ea7a5287a04ed</anchor>
      <arglist>(double, double) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsOutside</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a4654222ee0e8498888d9ed7f02a3a90c</anchor>
      <arglist>(double, double, double) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsOutside</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>afe737a33517068a93f81dd1ba4bfcc74</anchor>
      <arglist>(double, double, double, double) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WorldToImage</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a5d54eaa4e21ee8cc37ecea961f52c896</anchor>
      <arglist>(double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WorldToImage</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a501fe7cce57e00dd73234387eb61220d</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WorldToImage</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a442df46b2f23492a773428f375bc384e</anchor>
      <arglist>(Point &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a8f073b18f956078a629327395aa7bac6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ImageFunction</name>
      <anchorfile>classmirtk_1_1ImageFunction.html</anchorfile>
      <anchor>aff3a5615e39d6a1eb3592e91531f212a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GenericInterpolateImageFunction *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>abb771f285163718d91fff67f2c53b4cb</anchor>
      <arglist>(enum InterpolationMode, const BaseImage *=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GenericInterpolateImageFunction *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a230de238ee3f30caee7361365c75a7e5</anchor>
      <arglist>(enum InterpolationMode, enum ExtrapolationMode, const BaseImage *=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static InterpolateImageFunction *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a2e34aae911715bef301c03a36ce4002c</anchor>
      <arglist>(enum InterpolationMode, const BaseImage *=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static InterpolateImageFunction *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a2787da6e67257c5b278a7729b2384ec0</anchor>
      <arglist>(enum InterpolationMode, enum ExtrapolationMode, const BaseImage *=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GenericInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a9330db1c2ec340317ac12ea3b64de193</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>InterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>acf20ad872b4f361b080b1850004f2b4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ImageFunction</name>
      <anchorfile>classmirtk_1_1ImageFunction.html</anchorfile>
      <anchor>a25d24c8fb590f44caf6b03809bc2e94e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ImageFunction</name>
      <anchorfile>classmirtk_1_1ImageFunction.html</anchorfile>
      <anchor>a676920804a069de8b0007b3c562c5aea</anchor>
      <arglist>(const ImageFunction &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ExtrapolateImageFunction *</type>
      <name>_InfiniteInput</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a70dcb03259231c2acb274015ebca5fdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_InfiniteInputOwner</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>acfd2c1bf2f50b8925f982ebd84ec180b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_x1</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a546fb8dfa3a8627de421f323aee5b379</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::BSplineInterpolateImageFunction2D</name>
    <filename>classmirtk_1_1BSplineInterpolateImageFunction2D.html</filename>
    <base>GenericBSplineInterpolateImageFunction2D&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>BSplineInterpolateImageFunction2D</name>
      <anchorfile>classmirtk_1_1BSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>aa8d609fb4c87389bd9d91d0b906f480b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericBSplineInterpolateImageFunction2D</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a3c10fd95a531ae5c415195b87054d0c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>ac117a365526bf0891a93406854b02394</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a4b69dc95f5acfba3d44ec92683afc492</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a7ebc868c4923d8cff6d503f5ed33f4ca</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a4b28ba4cdd7bff89b720d4b85e63e9af</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>ae023a50f772e8e1867d4ee1481d78b1c</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a2d90bdee2895503b0a2a7907e1a54a7b</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a908225ed3c7c0a8c5b9639b73406a3b2</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a672a2ab3fb1d1e457becfacf5c7b601f</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::BSplineInterpolateImageFunction3D</name>
    <filename>classmirtk_1_1BSplineInterpolateImageFunction3D.html</filename>
    <base>GenericBSplineInterpolateImageFunction3D&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>BSplineInterpolateImageFunction3D</name>
      <anchorfile>classmirtk_1_1BSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a2cc9483fdbd58d75c1b1bf0804792fb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericBSplineInterpolateImageFunction3D</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a597e2aae4bdcee45b1c13e94e1e0ea73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a50ae176ed28f78d42df632bc1caf8a08</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a9505ef3ce24eca80aebd31c42b18b3c2</anchor>
      <arglist>(const TOtherImage *, double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>ae33354ffcc4395a1a638e3398f8a5d20</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a18cbbe62a9220d66a53c3b05ae61f229</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a2c571f1a15a317a18b1d374847c23e9b</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a77208554f5370a7d4ae66f04e3eb6215</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>ad572048947adee3506ce69c9f4426b08</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>aa867e81eab24aa159f48be9a15a741fb</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::BSplineInterpolateImageFunction4D</name>
    <filename>classmirtk_1_1BSplineInterpolateImageFunction4D.html</filename>
    <base>GenericBSplineInterpolateImageFunction4D&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>BSplineInterpolateImageFunction4D</name>
      <anchorfile>classmirtk_1_1BSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a5fffdb218d4d90d6080df2572bf826c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericBSplineInterpolateImageFunction4D</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>ac7ccf46f0433e75c1a191875683f2507</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a54cb4e4d4d6987412e258a1fbb9e6ef1</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a33f98221d174225a30865ede9ff39e7b</anchor>
      <arglist>(const TOtherImage *, double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a5161250240036e78bc63a0bbb7881624</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>ab4e7f99fbc8b2a6e1b77f16885440db8</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a208851fc03afb4cddf68cddf31b1a621</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a30e0dd5404d258adf1693027c7a14f44</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>add04499f14ea5d0360a6cb90937c008b</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>abc725e08fb6da677c0b0822a63c0313e</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::CharbonnierErrorFunction</name>
    <filename>classmirtk_1_1CharbonnierErrorFunction.html</filename>
    <base>mirtk::RadialErrorFunction</base>
    <member kind="function">
      <type></type>
      <name>CharbonnierErrorFunction</name>
      <anchorfile>classmirtk_1_1CharbonnierErrorFunction.html</anchorfile>
      <anchor>a3643b28625b4cee05e2fcfb8345a8209</anchor>
      <arglist>(double threshold=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CharbonnierErrorFunction</name>
      <anchorfile>classmirtk_1_1CharbonnierErrorFunction.html</anchorfile>
      <anchor>a99097d5722de10d5bbeb9d191262342a</anchor>
      <arglist>(const CharbonnierErrorFunction &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Derivative</name>
      <anchorfile>classmirtk_1_1CharbonnierErrorFunction.html</anchorfile>
      <anchor>a5e06e3bf87cab2b3c864159d59b4f4b8</anchor>
      <arglist>(double d) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RadialErrorFunction *</type>
      <name>NewInstance</name>
      <anchorfile>classmirtk_1_1CharbonnierErrorFunction.html</anchorfile>
      <anchor>ac0b409f939938866b5864f163422a44b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1CharbonnierErrorFunction.html</anchorfile>
      <anchor>a451364a6c0346c270bed4e1d5cdd60bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1CharbonnierErrorFunction.html</anchorfile>
      <anchor>a536559013001908592e0c870d0ecbe7d</anchor>
      <arglist>(const char *name, const char *value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TypeId</type>
      <name>Type</name>
      <anchorfile>classmirtk_1_1CharbonnierErrorFunction.html</anchorfile>
      <anchor>a9142518ebb1f8d21ad79816a517f440b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Value</name>
      <anchorfile>classmirtk_1_1CharbonnierErrorFunction.html</anchorfile>
      <anchor>a8fc1c3afb46b7e8c449a6d33bfd6e1fe</anchor>
      <arglist>(double d) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual</type>
      <name>~RadialErrorFunction</name>
      <anchorfile>classmirtk_1_1RadialErrorFunction.html</anchorfile>
      <anchor>aa68e7cc575e15a554fc1c32f94130487</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TypeId</name>
      <anchorfile>classmirtk_1_1RadialErrorFunction.html</anchorfile>
      <anchor>aaedf1ab900d502f62829a058a1430cf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Unknown</name>
      <anchorfile>classmirtk_1_1RadialErrorFunction.html</anchorfile>
      <anchor>aaedf1ab900d502f62829a058a1430cf5aeba9a8fa930e6e3e597c9ee74d56299d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Distance</name>
      <anchorfile>classmirtk_1_1RadialErrorFunction.html</anchorfile>
      <anchor>aaedf1ab900d502f62829a058a1430cf5a26957a35aafd400883fd31062dceab5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Squared</name>
      <anchorfile>classmirtk_1_1RadialErrorFunction.html</anchorfile>
      <anchor>aaedf1ab900d502f62829a058a1430cf5a8742850f0c175551e369b2387294e9b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Gaussian</name>
      <anchorfile>classmirtk_1_1RadialErrorFunction.html</anchorfile>
      <anchor>aaedf1ab900d502f62829a058a1430cf5ae24678dc9d5dc43aa6c7559426cc61b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Charbonnier</name>
      <anchorfile>classmirtk_1_1RadialErrorFunction.html</anchorfile>
      <anchor>aaedf1ab900d502f62829a058a1430cf5a5ba1a80144bc1c38cdd61734157b36ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PeronaMalik</name>
      <anchorfile>classmirtk_1_1RadialErrorFunction.html</anchorfile>
      <anchor>aaedf1ab900d502f62829a058a1430cf5a8eff0cbc3f741528576f7b6553a4ddab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RadialErrorFunction *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1RadialErrorFunction.html</anchorfile>
      <anchor>a12f4aa06c9a826cc6f8571581377af6f</anchor>
      <arglist>(TypeId)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RadialErrorFunction *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1RadialErrorFunction.html</anchorfile>
      <anchor>ac14450e173b6430ba85589a0b2c0193f</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RadialErrorFunction</name>
      <anchorfile>classmirtk_1_1RadialErrorFunction.html</anchorfile>
      <anchor>aa1de9b25182557e99866054a790eadb8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::Cifstream</name>
    <filename>classmirtk_1_1Cifstream.html</filename>
    <base>mirtk::Object</base>
    <member kind="function">
      <type></type>
      <name>Cifstream</name>
      <anchorfile>classmirtk_1_1Cifstream.html</anchorfile>
      <anchor>a184a1399759194b714337c30474b46eb</anchor>
      <arglist>(const char *=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Close</name>
      <anchorfile>classmirtk_1_1Cifstream.html</anchorfile>
      <anchor>a5a9c1a5dd735d24078dae059b2a0bd22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MIRTK_Common_DEPRECATED int</type>
      <name>IsSwapped</name>
      <anchorfile>classmirtk_1_1Cifstream.html</anchorfile>
      <anchor>a7e0aa1bbdcccaa27a3850cd5705d5089</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MIRTK_Common_DEPRECATED void</type>
      <name>IsSwapped</name>
      <anchorfile>classmirtk_1_1Cifstream.html</anchorfile>
      <anchor>a24fee7857cf2f81f49e9d6f041645085</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Open</name>
      <anchorfile>classmirtk_1_1Cifstream.html</anchorfile>
      <anchor>af40c2bd4d8f15d33db747d12e285cce7</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1Cifstream.html</anchorfile>
      <anchor>a2ea43fedc9cb9fae6507745df718e256</anchor>
      <arglist>(char *, long, long)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ReadAsChar</name>
      <anchorfile>classmirtk_1_1Cifstream.html</anchorfile>
      <anchor>a0a42e3a502c741a14a5d3449d937de8e</anchor>
      <arglist>(char *, long, long=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ReadAsDouble</name>
      <anchorfile>classmirtk_1_1Cifstream.html</anchorfile>
      <anchor>a169365a9ead026d2d50d18f743458aa8</anchor>
      <arglist>(double *, long, long=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ReadAsFloat</name>
      <anchorfile>classmirtk_1_1Cifstream.html</anchorfile>
      <anchor>ac46c12974106ef9b28d7ccefe5dd7623</anchor>
      <arglist>(float *, long, long offset=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ReadAsInt</name>
      <anchorfile>classmirtk_1_1Cifstream.html</anchorfile>
      <anchor>a8d11dc163c58e5192419537d31e654be</anchor>
      <arglist>(int *, long, long=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ReadAsShort</name>
      <anchorfile>classmirtk_1_1Cifstream.html</anchorfile>
      <anchor>a72b06860648214e1c1fbb1d30c93a031</anchor>
      <arglist>(short *, long, long=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ReadAsString</name>
      <anchorfile>classmirtk_1_1Cifstream.html</anchorfile>
      <anchor>af67520e28c297590277533655e4b6df7</anchor>
      <arglist>(char *, long, long=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ReadAsUChar</name>
      <anchorfile>classmirtk_1_1Cifstream.html</anchorfile>
      <anchor>a8074e1647a8fcb35855ae09c1b292c74</anchor>
      <arglist>(unsigned char *, long, long=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ReadAsUInt</name>
      <anchorfile>classmirtk_1_1Cifstream.html</anchorfile>
      <anchor>a8a765eea8b64b19687a017165f3fb3aa</anchor>
      <arglist>(unsigned int *, long, long=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ReadAsUShort</name>
      <anchorfile>classmirtk_1_1Cifstream.html</anchorfile>
      <anchor>acfdeca3ea2fcb701339df3ee5a664951</anchor>
      <arglist>(unsigned short *, long, long=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Seek</name>
      <anchorfile>classmirtk_1_1Cifstream.html</anchorfile>
      <anchor>aa057d5864ace89a2311830325460fa1d</anchor>
      <arglist>(long)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>Tell</name>
      <anchorfile>classmirtk_1_1Cifstream.html</anchorfile>
      <anchor>a624fb76e67fd7bebb014c1decab42121</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Cifstream</name>
      <anchorfile>classmirtk_1_1Cifstream.html</anchorfile>
      <anchor>a01c8fa5d914cbfcb04969f1ab31a9182</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::CityBlockDistanceTransform</name>
    <filename>classmirtk_1_1CityBlockDistanceTransform.html</filename>
    <templarg></templarg>
    <base>mirtk::ImageToImage</base>
    <member kind="function">
      <type></type>
      <name>CityBlockDistanceTransform</name>
      <anchorfile>classmirtk_1_1CityBlockDistanceTransform.html</anchorfile>
      <anchor>af2e2353f5ce6261fa158f5dcfffaf446</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1CityBlockDistanceTransform.html</anchorfile>
      <anchor>a5e46fa1e80c35596dbe83068a31e42a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CityBlockDistanceTransform</name>
      <anchorfile>classmirtk_1_1CityBlockDistanceTransform.html</anchorfile>
      <anchor>ae2dfe0b9ca7e8037cd3882e6f45240f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageToImage</name>
      <anchorfile>classmirtk_1_1ImageToImage.html</anchorfile>
      <anchor>ad8178f5ebe06619d7e05ca99c08da819</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>RequiresBuffering</name>
      <anchorfile>classmirtk_1_1ImageToImage.html</anchorfile>
      <anchor>acc2ae5e1522d69f9ef1c01fa4f97f650</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1ImageToImage.html</anchorfile>
      <anchor>a330d2ead06bcbcbb6a8cead8b38722f4</anchor>
      <arglist>(int, int, int, int=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ImageToImage</name>
      <anchorfile>classmirtk_1_1ImageToImage.html</anchorfile>
      <anchor>a28551fb003575de82b6015a11fbf9b8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Finalize</name>
      <anchorfile>classmirtk_1_1CityBlockDistanceTransform.html</anchorfile>
      <anchor>afbf3102f51cd8be3680d0248b2e86d37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1CityBlockDistanceTransform.html</anchorfile>
      <anchor>a960618557f6f9cb4a0948a0ea54125ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize2D</name>
      <anchorfile>classmirtk_1_1CityBlockDistanceTransform.html</anchorfile>
      <anchor>a938039d9fc8cbc9427aad5d62b2bf35f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize3D</name>
      <anchorfile>classmirtk_1_1CityBlockDistanceTransform.html</anchorfile>
      <anchor>a092dc0faa7336705037795fc140ac674</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Run2D</name>
      <anchorfile>classmirtk_1_1CityBlockDistanceTransform.html</anchorfile>
      <anchor>a0097f1f59d4d3bd35fc50bdd45d9cf20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Run3D</name>
      <anchorfile>classmirtk_1_1CityBlockDistanceTransform.html</anchorfile>
      <anchor>a7a33d64c1a8756eace8c3296acde3dc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1ImageToImage.html</anchorfile>
      <anchor>af0128937402667f9572dfeee3d50d2d5</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAggregateMacro</name>
      <anchorfile>classmirtk_1_1ImageToImage.html</anchorfile>
      <anchor>a26c50174bc34f27bc33dc18feb64761a</anchor>
      <arglist>(ImageType, Buffer)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAggregateMacro</name>
      <anchorfile>classmirtk_1_1ImageToImage.html</anchorfile>
      <anchor>ad881dd9d4ebeb16a008cba3e7b24a20b</anchor>
      <arglist>(const ImageType, Input)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAggregateMacro</name>
      <anchorfile>classmirtk_1_1ImageToImage.html</anchorfile>
      <anchor>a1bf258919bc034578cd33e9247579bc4</anchor>
      <arglist>(ImageType, Output)</arglist>
    </member>
    <member kind="typedef">
      <type>GenericImage&lt; VoxelType &gt;</type>
      <name>ImageType</name>
      <anchorfile>classmirtk_1_1ImageToImage.html</anchorfile>
      <anchor>a00305d97368a382b1390575ba1b3b13c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TVoxel</type>
      <name>VoxelType</name>
      <anchorfile>classmirtk_1_1ImageToImage.html</anchorfile>
      <anchor>acf4bd8bb898039c1ec60e6199def2a5b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ClosestCell</name>
    <filename>classmirtk_1_1ClosestCell.html</filename>
    <base>mirtk::PointCorrespondence</base>
    <member kind="enumeration">
      <type></type>
      <name>LocatorType</name>
      <anchorfile>classmirtk_1_1ClosestCell.html</anchorfile>
      <anchor>a3dc5e0e4c095eb5f1f58a0ca0b9b8408</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Direction</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>afb7156341fb06e67b0f1e1698dc32308</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PointLocator::FeatureInfo</type>
      <name>FeatureInfo</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a61ba7b60a045465f467aff311bf7f405</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PointLocator::FeatureList</type>
      <name>FeatureList</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a0eaec4c367495549f8511732a988b5ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TypeId</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a395d3a470b911e2432a5ad75f0bd0474</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Unknown</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a395d3a470b911e2432a5ad75f0bd0474ade15c7f969acbdd4b4dda19d4d2bd274</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FiducialMatch</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a395d3a470b911e2432a5ad75f0bd0474a9567e3bfae427f887bb9a063350b49b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ClosestPoint</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a395d3a470b911e2432a5ad75f0bd0474a25e32b9e68e9197611a20740d8cebed5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ClosestPointLabel</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a395d3a470b911e2432a5ad75f0bd0474a5c8b4ef0cb3aca8af17728b503b2baf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ClosestCell</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a395d3a470b911e2432a5ad75f0bd0474ab37a6b65179543fc2e6bd307e4004d07</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SpectralMatch</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a395d3a470b911e2432a5ad75f0bd0474ac7d506bd6141cad69f75ad3151762303</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RobustClosestPoint</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a395d3a470b911e2432a5ad75f0bd0474aa0265f4046c4b43ea734712ee843de42</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RobustPointMatch</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a395d3a470b911e2432a5ad75f0bd0474a9fa78903ca2a55d8ed35a8f9f015e4f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClosestCell</name>
      <anchorfile>classmirtk_1_1ClosestCell.html</anchorfile>
      <anchor>ab79d31c8fedbbd0cefe8beca0374e55e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClosestCell</name>
      <anchorfile>classmirtk_1_1ClosestCell.html</anchorfile>
      <anchor>ac667140a77588337a340fdf186ba0bea</anchor>
      <arglist>(const ClosestCell &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>GetInputSourcePoint</name>
      <anchorfile>classmirtk_1_1ClosestCell.html</anchorfile>
      <anchor>a20daa9017a84a3b9e4caeb5a98c43909</anchor>
      <arglist>(int, Point &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>GetInputTargetPoint</name>
      <anchorfile>classmirtk_1_1ClosestCell.html</anchorfile>
      <anchor>a90d8e02bc79a5eb293081e7066834d8b</anchor>
      <arglist>(int, Point &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>GetSourcePoint</name>
      <anchorfile>classmirtk_1_1ClosestCell.html</anchorfile>
      <anchor>a4adf4ae2df2f50a0edd93b324952fd48</anchor>
      <arglist>(int, Point &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>GetTargetPoint</name>
      <anchorfile>classmirtk_1_1ClosestCell.html</anchorfile>
      <anchor>a8f88d1760e3907ffc0a5bcba0505a9c1</anchor>
      <arglist>(int, Point &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1ClosestCell.html</anchorfile>
      <anchor>ad70d78b4a687affcf74615520140cd99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PointCorrespondence *</type>
      <name>NewInstance</name>
      <anchorfile>classmirtk_1_1ClosestCell.html</anchorfile>
      <anchor>a151150ac5d9d6c0d41a53f33a98cdfd1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1ClosestCell.html</anchorfile>
      <anchor>a5ccf98d8ba71db147f332b986dfa3005</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1ClosestCell.html</anchorfile>
      <anchor>a84703663e8226432a64259ae5784f63a</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TypeId</type>
      <name>Type</name>
      <anchorfile>classmirtk_1_1ClosestCell.html</anchorfile>
      <anchor>aed783d9ac4c3c7a092660d3aee0180d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1ClosestCell.html</anchorfile>
      <anchor>a964cc37e5a91da6e9c09548d3d924666</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Upgrade</name>
      <anchorfile>classmirtk_1_1ClosestCell.html</anchorfile>
      <anchor>ae091111be47901dfc72e45b2eaca3255</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ClosestCell</name>
      <anchorfile>classmirtk_1_1ClosestCell.html</anchorfile>
      <anchor>a8eae1fe759fe76167602593f775239e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AddFeature</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>aee3e0d7f098408fdfac1bbf8a1433c96</anchor>
      <arglist>(const char *name, double weight=1.0, double slope=1.0, double intercept=.0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetIndex</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a97aa0644a48f5bdc83bc3f6cec40121c</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetInputPoint</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a986c57b5557cfca1104750cba53e5662</anchor>
      <arglist>(int, Point &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetPoint</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a5ea805aff3f3afc708df26cec0655f5d</anchor>
      <arglist>(int, Point &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetSourceIndex</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a40a3c76d92838e99806a42f9cfb1eb59</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetTargetIndex</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a2dd4faa35f5fffa25a4456c4e700a281</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Reinitialize</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>af6069f07863bfb2e93b136f002ba9742</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RemoveFeature</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a6aef292d37059a926b89cd92a1e2bf4e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteDataSets</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a38d59ecb99b91d0576ed93f34484263b</anchor>
      <arglist>(const char *, const char *, bool=true) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteSpectralPoints</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>aeb927faf5b65670aa8c7a89f65f90351</anchor>
      <arglist>(const char *, vtkPointSet *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PointCorrespondence</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>aebaeab48f3848d19ba720abb27a65961</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1ClosestCell.html</anchorfile>
      <anchor>a1e03e05255acb32857644e285747d3b1</anchor>
      <arglist>(PointSet, TargetPoints)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1ClosestCell.html</anchorfile>
      <anchor>afd14bdb1ff8e1659cb3c3f9d030ac06c</anchor>
      <arglist>(Array&lt; double &gt;, TargetDistance)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1ClosestCell.html</anchorfile>
      <anchor>a65df3403b7b47bd0feb8ed6d476f9044</anchor>
      <arglist>(PointSet, SourcePoints)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1ClosestCell.html</anchorfile>
      <anchor>a0e63c87e1f00f4c35abcc959e0359d50</anchor>
      <arglist>(Array&lt; double &gt;, SourceDistance)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1ClosestCell.html</anchorfile>
      <anchor>a13865416dbb47cb2a5f9c0715a21fae4</anchor>
      <arglist>(enum LocatorType, LocatorType)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1ClosestCell.html</anchorfile>
      <anchor>a34da1d5df96090de74ecd12059fd76d4</anchor>
      <arglist>(int, NumberOfCellsPerNode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1ClosestCell.html</anchorfile>
      <anchor>a8b8bd723a360ea2bb2ab6612b24d8cc3</anchor>
      <arglist>(double, Sigma)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1ClosestCell.html</anchorfile>
      <anchor>a17a63994d6ff8726422459e8c6d30682</anchor>
      <arglist>(double, MaxDistance)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CompleteFeatureInfo</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>ac6622ff396866aeadffcbf209a21cc8c</anchor>
      <arglist>(const RegisteredPointSet *, FeatureList &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Init</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a0b475028ac31b65dcd074865717727c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a4104620ac58ec77fde55951b087b15b0</anchor>
      <arglist>(int, M)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>af0b5bf7c9f0c45b492a6c3907c287fb6</anchor>
      <arglist>(int, N)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>ae6b9658a8a863a4b0fcf16d29c5450a4</anchor>
      <arglist>(Vector, TargetEigenvalues)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a132378476f199863e55decc692c8ff49</anchor>
      <arglist>(Vector, SourceEigenvalues)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAggregateMacro</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>aad6607033824500a330906af558949b6</anchor>
      <arglist>(const RegisteredPointSet, Target)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAggregateMacro</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a6629b8027ea0456dc3299ea87840dfc6</anchor>
      <arglist>(const Array&lt; int &gt;, TargetSample)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAggregateMacro</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a5f2bd348263c6ed89a274b1c2730be54</anchor>
      <arglist>(const RegisteredPointSet, Source)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAggregateMacro</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a3c04a03be3a5362bc7e4cc54a3682542</anchor>
      <arglist>(const Array&lt; int &gt;, SourceSample)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a6f797d132850a8597c9482ff05e2494d</anchor>
      <arglist>(FeatureList, TargetFeatures)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>acdd3d027dfbfcf7b0084a58c23969608</anchor>
      <arglist>(FeatureList, SourceFeatures)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a27c0edf8cefc3bba94f798098404a84e</anchor>
      <arglist>(int, DimensionOfSpectralPoints)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>ae501b172ca8b6eb64ae683a5a96db658</anchor>
      <arglist>(bool, DiffeomorphicSpectralDecomposition)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a6986815802c5c8b4b5c18fe4add4a255</anchor>
      <arglist>(bool, UpdateSpectralPoints)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a98486699f38a7def6c33b0619d2ce8c6</anchor>
      <arglist>(bool, FromTargetToSource)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>abc10692b127b3bb6222f5f08cffba3f6</anchor>
      <arglist>(bool, FromSourceToTarget)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>aaaf8d80550ccd436241ea382d83b2d96</anchor>
      <arglist>(Direction, DefaultDirection)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>ae4f8435f568587bad50f33720db78fff</anchor>
      <arglist>(int, NumberOfFeatures)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PointCorrespondence</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a63b5d58fbcca99be402419ff2bc5b284</anchor>
      <arglist>(const RegisteredPointSet *=NULL, const RegisteredPointSet *=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PointCorrespondence</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a53e1e862491af4bf44fcf42e0817aad4</anchor>
      <arglist>(const PointCorrespondence &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>Distance2BetweenPoints</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a62fa89608d1095e3d9d3e92f0608f33d</anchor>
      <arglist>(const double *a, const double *b, int d=3)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>GetNumberOfPoints</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a540864dfd643a3509a4e4711ed58df23</anchor>
      <arglist>(vtkPointSet *dataset, const Array&lt; int &gt; *sample=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>GetNumberOfPoints</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a8c06e10554be49bac0b36415f706b7a0</anchor>
      <arglist>(const RegisteredPointSet *dataset, const Array&lt; int &gt; *sample=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GetPoint</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>af519dedef6501e0256526b01b4131e72</anchor>
      <arglist>(Point &amp;point, vtkPointSet *dataset, const Array&lt; int &gt; *sample, int index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GetPoint</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a5429c1497f98db84db7559daa239f474</anchor>
      <arglist>(Point &amp;point, const RegisteredPointSet *dataset, const Array&lt; int &gt; *sample, int index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GetPoint</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>aebfcd39706aca9318d024bbca9641147</anchor>
      <arglist>(double *point, vtkPointSet *dataset, const Array&lt; int &gt; *sample, int index, const FeatureList *feature=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GetPoint</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a9e07c36b92c6925990b6818a1506208c</anchor>
      <arglist>(double *point, const RegisteredPointSet *dataset, const Array&lt; int &gt; *sample, int index, const FeatureList *feature=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>GetPointDataIndexByCaseInsensitiveName</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>acae7020459530ebc49c1c73eaefd435c</anchor>
      <arglist>(vtkPointData *, const string &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>GetPointDimension</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>aacb01952f480c79d2de8152820a17c24</anchor>
      <arglist>(vtkPointSet *dataset, const FeatureList *feature)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>GetPointDimension</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a0bab2652554ce6f41aaac501a4b4f7c6</anchor>
      <arglist>(const RegisteredPointSet *dataset, const FeatureList *feature)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>GetPointIndex</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>af986f52b78e87bb87acb2ff387956cb1</anchor>
      <arglist>(vtkPointSet *dataset, const Array&lt; int &gt; *sample, int index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>GetPointIndex</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a3ad30284407ab15eb7159b01be2d9cff</anchor>
      <arglist>(const RegisteredPointSet *dataset, const Array&lt; int &gt; *sample, int index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static vtkSmartPointer&lt; vtkPoints &gt;</type>
      <name>GetPoints</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>ab17653ad2ca5376b878c277accbaed26</anchor>
      <arglist>(vtkPointSet *dataset, const Array&lt; int &gt; *sample)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static vtkSmartPointer&lt; vtkPoints &gt;</type>
      <name>GetPoints</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>ab490cb025f92e4e7479aa8b968b241ea</anchor>
      <arglist>(const RegisteredPointSet *dataset, const Array&lt; int &gt; *sample)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static vtkSmartPointer&lt; vtkPointSet &gt;</type>
      <name>GetPointSet</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a5b0a3d05c3bf301eac41bf2e327e1396</anchor>
      <arglist>(vtkPointSet *dataset, const Array&lt; int &gt; *sample)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static vtkSmartPointer&lt; vtkPointSet &gt;</type>
      <name>GetPointSet</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a47f17c42c91a74d3427454d01924c058</anchor>
      <arglist>(const RegisteredPointSet *dataset, const Array&lt; int &gt; *sample)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PointCorrespondence *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a0c5400cc70383e493b1347d0cacf2015</anchor>
      <arglist>(TypeId)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PointCorrespondence *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a3571977cf26619973e0af2cfc9110cb0</anchor>
      <arglist>(const char *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ClosestPoint</name>
    <filename>classmirtk_1_1ClosestPoint.html</filename>
    <base>mirtk::PointCorrespondence</base>
    <member kind="function">
      <type></type>
      <name>ClosestPoint</name>
      <anchorfile>classmirtk_1_1ClosestPoint.html</anchorfile>
      <anchor>a33810ed9ef6aa122831592b3122bb3db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClosestPoint</name>
      <anchorfile>classmirtk_1_1ClosestPoint.html</anchorfile>
      <anchor>ab83a26a804b886601c4d65102f740797</anchor>
      <arglist>(const ClosestPoint &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>GetInputSourcePoint</name>
      <anchorfile>classmirtk_1_1ClosestPoint.html</anchorfile>
      <anchor>a516938f1e12737066f5f94c7e565d7d3</anchor>
      <arglist>(int, Point &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>GetInputTargetPoint</name>
      <anchorfile>classmirtk_1_1ClosestPoint.html</anchorfile>
      <anchor>a61855013ad2e9fcead95230807e843a1</anchor>
      <arglist>(int, Point &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetSourceIndex</name>
      <anchorfile>classmirtk_1_1ClosestPoint.html</anchorfile>
      <anchor>a1074d06c8b3637e545ac6344b0e3cdf5</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>GetSourcePoint</name>
      <anchorfile>classmirtk_1_1ClosestPoint.html</anchorfile>
      <anchor>abd52508bfcd40eac0abce6e8b69de8cd</anchor>
      <arglist>(int, Point &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetTargetIndex</name>
      <anchorfile>classmirtk_1_1ClosestPoint.html</anchorfile>
      <anchor>a7b295199399907d45d5c07e2ce963f53</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>GetTargetPoint</name>
      <anchorfile>classmirtk_1_1ClosestPoint.html</anchorfile>
      <anchor>a51a4310e6b17414e07915afef3f22045</anchor>
      <arglist>(int, Point &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1ClosestPoint.html</anchorfile>
      <anchor>a6a1a7cce121725b61d7ed71f1f9a415b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PointCorrespondence *</type>
      <name>NewInstance</name>
      <anchorfile>classmirtk_1_1ClosestPoint.html</anchorfile>
      <anchor>ab43cd62d3fa49c96a2564bc6a018a02a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1ClosestPoint.html</anchorfile>
      <anchor>a77940f84653eff992ba51f31400f244d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1ClosestPoint.html</anchorfile>
      <anchor>af062dba7a6f900c1a5dc6d12b087a71d</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TypeId</type>
      <name>Type</name>
      <anchorfile>classmirtk_1_1ClosestPoint.html</anchorfile>
      <anchor>aa0baa26f09de26bcc38edda6f5dfb914</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1ClosestPoint.html</anchorfile>
      <anchor>a1ef6505bb202acd46a4f48389e8a059f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Upgrade</name>
      <anchorfile>classmirtk_1_1ClosestPoint.html</anchorfile>
      <anchor>a1172c60b9e27b9b664144e8bc76a23a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ClosestPoint</name>
      <anchorfile>classmirtk_1_1ClosestPoint.html</anchorfile>
      <anchor>a85fecb1747ade37aa40d95a43d1a244a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1ClosestPoint.html</anchorfile>
      <anchor>ab6486d511871d69cb6c1e303edfa518d</anchor>
      <arglist>(double, MaxSquaredDistance)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1ClosestPoint.html</anchorfile>
      <anchor>a899c5030c52a3fffab4ac407309652db</anchor>
      <arglist>(Array&lt; int &gt;, TargetIndex)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1ClosestPoint.html</anchorfile>
      <anchor>a53c77159420b61e577b11615e667f1a6</anchor>
      <arglist>(Array&lt; double &gt;, TargetDistance)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1ClosestPoint.html</anchorfile>
      <anchor>a1a0ea4d289aabd7fa78b3680db01f4de</anchor>
      <arglist>(Array&lt; int &gt;, SourceIndex)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1ClosestPoint.html</anchorfile>
      <anchor>a934f086ce7d9561e4beac089b83114fd</anchor>
      <arglist>(Array&lt; double &gt;, SourceDistance)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1ClosestPoint.html</anchorfile>
      <anchor>af40d21c8817c6855bd484c6489cde7bc</anchor>
      <arglist>(double, Sigma)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1ClosestPoint.html</anchorfile>
      <anchor>aa2d34708e8936a59bdd2f570d72f5ab2</anchor>
      <arglist>(double, MaxDistance)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ClosestPointLabel</name>
    <filename>classmirtk_1_1ClosestPointLabel.html</filename>
    <base>mirtk::ClosestPoint</base>
    <member kind="function">
      <type></type>
      <name>ClosestPointLabel</name>
      <anchorfile>classmirtk_1_1ClosestPointLabel.html</anchorfile>
      <anchor>a682fc91f87eafc95f9744ac8509151ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClosestPointLabel</name>
      <anchorfile>classmirtk_1_1ClosestPointLabel.html</anchorfile>
      <anchor>a9ed8e21464ab9a9fc569475820831f66</anchor>
      <arglist>(const ClosestPointLabel &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1ClosestPointLabel.html</anchorfile>
      <anchor>aec10970bbf1350a31e12a25e07add32c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PointCorrespondence *</type>
      <name>NewInstance</name>
      <anchorfile>classmirtk_1_1ClosestPointLabel.html</anchorfile>
      <anchor>aef3401b6ec3931ab930b6e69f45acfbb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Reinitialize</name>
      <anchorfile>classmirtk_1_1ClosestPointLabel.html</anchorfile>
      <anchor>ab687c4f1b58a2c07685ae58706ba5111</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TypeId</type>
      <name>Type</name>
      <anchorfile>classmirtk_1_1ClosestPointLabel.html</anchorfile>
      <anchor>a64afa5b135500e13ab07af4175071c03</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1ClosestPointLabel.html</anchorfile>
      <anchor>ad47d19ce26e5641239abb8aaad4938eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ClosestPointLabel</name>
      <anchorfile>classmirtk_1_1ClosestPointLabel.html</anchorfile>
      <anchor>a8daa66a059d4ba718d0e529660e0a3b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Init</name>
      <anchorfile>classmirtk_1_1ClosestPointLabel.html</anchorfile>
      <anchor>ade9608371c5a61db5b766261f05cc1c3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::Cofstream</name>
    <filename>classmirtk_1_1Cofstream.html</filename>
    <base>mirtk::Object</base>
    <member kind="function">
      <type>void</type>
      <name>Close</name>
      <anchorfile>classmirtk_1_1Cofstream.html</anchorfile>
      <anchor>adfdf94e3a3404b5a91bc66bb922b1c32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cofstream</name>
      <anchorfile>classmirtk_1_1Cofstream.html</anchorfile>
      <anchor>af0be399c3e9c5ddb8b0c40a015662314</anchor>
      <arglist>(const char *=NULL)</arglist>
    </member>
    <member kind="function">
      <type>MIRTK_Common_DEPRECATED int</type>
      <name>IsCompressed</name>
      <anchorfile>classmirtk_1_1Cofstream.html</anchorfile>
      <anchor>af2b0236df65ee561f19d9eb56b73195f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MIRTK_Common_DEPRECATED void</type>
      <name>IsCompressed</name>
      <anchorfile>classmirtk_1_1Cofstream.html</anchorfile>
      <anchor>af15b2e6a3d6ff325c73cb7200d6ef0fb</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>MIRTK_Common_DEPRECATED int</type>
      <name>IsSwapped</name>
      <anchorfile>classmirtk_1_1Cofstream.html</anchorfile>
      <anchor>af84a164db37e50aa3714fb8a9693eee1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MIRTK_Common_DEPRECATED void</type>
      <name>IsSwapped</name>
      <anchorfile>classmirtk_1_1Cofstream.html</anchorfile>
      <anchor>ac4043b2f56cba1c8938eb647a66a6209</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Open</name>
      <anchorfile>classmirtk_1_1Cofstream.html</anchorfile>
      <anchor>accc7bd1235c590c013f52342e888c040</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1Cofstream.html</anchorfile>
      <anchor>ac3764ec99a7fd05fbdd9428c040c6233</anchor>
      <arglist>(const char *, long, long)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteAsChar</name>
      <anchorfile>classmirtk_1_1Cofstream.html</anchorfile>
      <anchor>ac1b04ec45bf2f1473297d79cf65c8782</anchor>
      <arglist>(char, long=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteAsChar</name>
      <anchorfile>classmirtk_1_1Cofstream.html</anchorfile>
      <anchor>ae7c48053ddae32a924b847900c1c205b</anchor>
      <arglist>(const char *, long, long=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteAsDouble</name>
      <anchorfile>classmirtk_1_1Cofstream.html</anchorfile>
      <anchor>a50efc5f7888a0735d57fea2da7346d30</anchor>
      <arglist>(double, long=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteAsDouble</name>
      <anchorfile>classmirtk_1_1Cofstream.html</anchorfile>
      <anchor>a811940d724d15d0cafc48b19f900fef1</anchor>
      <arglist>(const double *, long, long=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteAsFloat</name>
      <anchorfile>classmirtk_1_1Cofstream.html</anchorfile>
      <anchor>aca02bc248a6f3609e3e2822ae1e53fb1</anchor>
      <arglist>(float, long=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteAsFloat</name>
      <anchorfile>classmirtk_1_1Cofstream.html</anchorfile>
      <anchor>aa376fdf3f21d3a77700ee469b5081feb</anchor>
      <arglist>(const float *, long, long=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteAsInt</name>
      <anchorfile>classmirtk_1_1Cofstream.html</anchorfile>
      <anchor>a2e8e473415e0d1bf0f5745213116da85</anchor>
      <arglist>(int, long=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteAsInt</name>
      <anchorfile>classmirtk_1_1Cofstream.html</anchorfile>
      <anchor>ae2b03bd9fcf47edae1a0d62409d5d783</anchor>
      <arglist>(const int *, long, long=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteAsShort</name>
      <anchorfile>classmirtk_1_1Cofstream.html</anchorfile>
      <anchor>ab84a0fd5ed5f1e6a5a92358d33e96473</anchor>
      <arglist>(short, long=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteAsShort</name>
      <anchorfile>classmirtk_1_1Cofstream.html</anchorfile>
      <anchor>a8758b70e44b67849e41c3b7ddf2c16fc</anchor>
      <arglist>(const short *, long, long=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteAsString</name>
      <anchorfile>classmirtk_1_1Cofstream.html</anchorfile>
      <anchor>a6b8a7a60e67099be0649dd215ce23d44</anchor>
      <arglist>(const char *, long=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteAsUChar</name>
      <anchorfile>classmirtk_1_1Cofstream.html</anchorfile>
      <anchor>aa8db0ec1979eec8f5490e13691a8d67b</anchor>
      <arglist>(unsigned char, long=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteAsUChar</name>
      <anchorfile>classmirtk_1_1Cofstream.html</anchorfile>
      <anchor>a922242d24a9ca09e81fccdc4b2e2c23d</anchor>
      <arglist>(const unsigned char *, long, long=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteAsUInt</name>
      <anchorfile>classmirtk_1_1Cofstream.html</anchorfile>
      <anchor>a6f60bdb44f827129c29e9ee10f10e25e</anchor>
      <arglist>(unsigned int, long=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteAsUInt</name>
      <anchorfile>classmirtk_1_1Cofstream.html</anchorfile>
      <anchor>a7ca01b0d02fe239a0a3cb0bf66a301f6</anchor>
      <arglist>(const unsigned int *, long, long=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteAsUShort</name>
      <anchorfile>classmirtk_1_1Cofstream.html</anchorfile>
      <anchor>aa916529c9453d14af423942b43a03f32</anchor>
      <arglist>(unsigned short, long=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteAsUShort</name>
      <anchorfile>classmirtk_1_1Cofstream.html</anchorfile>
      <anchor>ae6668201933e063768672f5982ad65ed</anchor>
      <arglist>(const unsigned short *, long, long=-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Cofstream</name>
      <anchorfile>classmirtk_1_1Cofstream.html</anchorfile>
      <anchor>a05b92666b2daf36e02cbb3f9c977b085</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::Configurable</name>
    <filename>classmirtk_1_1Configurable.html</filename>
    <base>mirtk::Observable</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetWithoutPrefix</name>
      <anchorfile>classmirtk_1_1Configurable.html</anchorfile>
      <anchor>a401e8da8fc194c62069fa3fa5a9468ca</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetWithPrefix</name>
      <anchorfile>classmirtk_1_1Configurable.html</anchorfile>
      <anchor>a7ac448c975fe997e3a97b77e97c0e2f1</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ConjugateGradientDescent</name>
    <filename>classmirtk_1_1ConjugateGradientDescent.html</filename>
    <base>mirtk::GradientDescent</base>
    <member kind="function">
      <type></type>
      <name>ConjugateGradientDescent</name>
      <anchorfile>classmirtk_1_1ConjugateGradientDescent.html</anchorfile>
      <anchor>a2fd853cf8ffd859fa14b7bdd6a723ca7</anchor>
      <arglist>(ObjectiveFunction *=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConjugateGradientDescent</name>
      <anchorfile>classmirtk_1_1ConjugateGradientDescent.html</anchorfile>
      <anchor>aa6e1eabf7bd4105c3f7b29b951542bea</anchor>
      <arglist>(const ConjugateGradientDescent &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ConjugateGradientOff</name>
      <anchorfile>classmirtk_1_1ConjugateGradientDescent.html</anchorfile>
      <anchor>a7de93dfca2f39cffa833b0a4ab7c3b16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ConjugateGradientOn</name>
      <anchorfile>classmirtk_1_1ConjugateGradientDescent.html</anchorfile>
      <anchor>a391bc525591e8574786d801162f9112b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConjugateGradientDescent &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1ConjugateGradientDescent.html</anchorfile>
      <anchor>a35116616cd67d1aa81cd56894ee7fdfe</anchor>
      <arglist>(const ConjugateGradientDescent &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ResetConjugateGradient</name>
      <anchorfile>classmirtk_1_1ConjugateGradientDescent.html</anchorfile>
      <anchor>adbd694b6326425b97bcc45a3e73543e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConjugateGradientDescent</name>
      <anchorfile>classmirtk_1_1ConjugateGradientDescent.html</anchorfile>
      <anchor>a8ff40e1bbfa9055d6ac73b13bd84db23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Function</name>
      <anchorfile>classmirtk_1_1GradientDescent.html</anchorfile>
      <anchor>a243ae010a911ef983615f282534931e6</anchor>
      <arglist>(ObjectiveFunction *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GradientDescent</name>
      <anchorfile>classmirtk_1_1GradientDescent.html</anchorfile>
      <anchor>a90d668de3ffd52a3827d46fb9e438225</anchor>
      <arglist>(ObjectiveFunction *=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GradientDescent</name>
      <anchorfile>classmirtk_1_1GradientDescent.html</anchorfile>
      <anchor>a3a9fdac856a77a33c216e4dd39c65efc</anchor>
      <arglist>(const GradientDescent &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LineSearch</name>
      <anchorfile>classmirtk_1_1GradientDescent.html</anchorfile>
      <anchor>a441961b061385a488920349e23036ed5</anchor>
      <arglist>(class LineSearch *, bool=false)</arglist>
    </member>
    <member kind="function">
      <type>GradientDescent &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GradientDescent.html</anchorfile>
      <anchor>add07f2b69e2a6ef8bb0dcb4899aef0c3</anchor>
      <arglist>(const GradientDescent &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1GradientDescent.html</anchorfile>
      <anchor>a6aefb3d1f682fd40a771888bedf2a519</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1GradientDescent.html</anchorfile>
      <anchor>a3b7a484ea34ebf711572b0f7b1537176</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1GradientDescent.html</anchorfile>
      <anchor>a62e237df9498c4362ec8095a240200db</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GradientDescent</name>
      <anchorfile>classmirtk_1_1GradientDescent.html</anchorfile>
      <anchor>a994545f24bef599f90f399f2a1ae75d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ConjugateGradient</name>
      <anchorfile>classmirtk_1_1ConjugateGradientDescent.html</anchorfile>
      <anchor>a9f2ba615a7c459792f10bfd0cab6ccfc</anchor>
      <arglist>(double *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CopyAttributes</name>
      <anchorfile>classmirtk_1_1ConjugateGradientDescent.html</anchorfile>
      <anchor>a01e1e45c5229e4b6a9659c53717cc9e9</anchor>
      <arglist>(const ConjugateGradientDescent &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Finalize</name>
      <anchorfile>classmirtk_1_1ConjugateGradientDescent.html</anchorfile>
      <anchor>acb4010af8f336237130588dd45212dca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Gradient</name>
      <anchorfile>classmirtk_1_1ConjugateGradientDescent.html</anchorfile>
      <anchor>aedc89705bd2e00c8070d00a870d8051a</anchor>
      <arglist>(double *, double=.0, bool *=NULL)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1ConjugateGradientDescent.html</anchorfile>
      <anchor>af83ec2a4d76b599e56d6ebaf16bf97fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool *</type>
      <name>_AllowSignChange</name>
      <anchorfile>classmirtk_1_1GradientDescent.html</anchorfile>
      <anchor>a60cca4be89b862eae5d315c2cd6d1993</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>_Gradient</name>
      <anchorfile>classmirtk_1_1GradientDescent.html</anchorfile>
      <anchor>a15a9b4aad8ec76c5ea8a1174a3516674</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ConnectedComponents</name>
    <filename>classmirtk_1_1ConnectedComponents.html</filename>
    <templarg></templarg>
    <base>mirtk::ImageToImage</base>
    <member kind="function">
      <type></type>
      <name>ConnectedComponents</name>
      <anchorfile>classmirtk_1_1ConnectedComponents.html</anchorfile>
      <anchor>a59e8d4672c8e630a89bc43135c321670</anchor>
      <arglist>(ConnectedComponentsOrdering=CC_LargestFirst, ConnectivityType=CONNECTIVITY_26)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DeleteComponent</name>
      <anchorfile>classmirtk_1_1ConnectedComponents.html</anchorfile>
      <anchor>ac24fd97faeeb09f8f7221d627f018848</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1ConnectedComponents.html</anchorfile>
      <anchor>ab78411267a067ef7d2115814108561c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConnectedComponents</name>
      <anchorfile>classmirtk_1_1ConnectedComponents.html</anchorfile>
      <anchor>a3101640ca70bc61045a6a59c0336bb09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Finalize</name>
      <anchorfile>classmirtk_1_1ConnectedComponents.html</anchorfile>
      <anchor>aa407cde7b5f65abb6fe6c51d0331b007</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1ConnectedComponents.html</anchorfile>
      <anchor>a14a413ec81581958bf0ec3c8e8366449</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1ConnectedComponents.html</anchorfile>
      <anchor>a405d23c63a1ce9bd3be648c821ef678b</anchor>
      <arglist>(NeighborhoodOffsets, Offsets)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1ConnectedComponents.html</anchorfile>
      <anchor>a6055e93dd45dd4ef251bdfa9e57057b8</anchor>
      <arglist>(ConnectedComponentsOrdering, Ordering)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1ConnectedComponents.html</anchorfile>
      <anchor>a481f7e4f26a9674e67fc81b0e83b4f77</anchor>
      <arglist>(ConnectivityType, Connectivity)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1ConnectedComponents.html</anchorfile>
      <anchor>a0042f651873efbfeb661837064918fce</anchor>
      <arglist>(int, NumberOfComponents)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1ConnectedComponents.html</anchorfile>
      <anchor>a91ae0197102d30bab7198e274b4afb5a</anchor>
      <arglist>(Array&lt; int &gt;, ComponentSize)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ConstExtrapolateImageFunction</name>
    <filename>classmirtk_1_1ConstExtrapolateImageFunction.html</filename>
    <base>GenericConstExtrapolateImageFunction&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>ConstExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1ConstExtrapolateImageFunction.html</anchorfile>
      <anchor>aaf88542400b27d5a20ec932e435f08b8</anchor>
      <arglist>(double padding_value=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConstExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1ConstExtrapolateImageFunction.html</anchorfile>
      <anchor>abf4f1d282addcc8be5c2395986ba1861</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericConstExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericConstExtrapolateImageFunction.html</anchorfile>
      <anchor>a2b107f35edb57100b05caac28d4d228c</anchor>
      <arglist>(double padding_value=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericConstExtrapolateImageFunction.html</anchorfile>
      <anchor>a460c7abbcd3c92618da3466d4ce629f8</anchor>
      <arglist>(int i, int j, int k=0, int l=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericConstExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericConstExtrapolateImageFunction.html</anchorfile>
      <anchor>aa9b23f49ed8401d898f159a65af6f94f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericExtrapolateImageFunction.html</anchorfile>
      <anchor>a5d0e3962c2719e6b3e7b5ffe1e42a968</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetAsDouble</name>
      <anchorfile>classmirtk_1_1GenericExtrapolateImageFunction.html</anchorfile>
      <anchor>abb2d51aba810f0fc684f1ec88e47e4a7</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericExtrapolateImageFunction.html</anchorfile>
      <anchor>ab7bf576fc82b0ec8e2e84ed6af58fe03</anchor>
      <arglist>(Vector &amp;, int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericExtrapolateImageFunction.html</anchorfile>
      <anchor>a2beae9dfda53b731baa541438dabe0d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Input</name>
      <anchorfile>classmirtk_1_1GenericExtrapolateImageFunction.html</anchorfile>
      <anchor>acdc2a5f12172d70643623e8e089b257a</anchor>
      <arglist>(const BaseImage *)</arglist>
    </member>
    <member kind="function">
      <type>const ImageType *</type>
      <name>Input</name>
      <anchorfile>classmirtk_1_1GenericExtrapolateImageFunction.html</anchorfile>
      <anchor>a4078bead6673c52fd2a24ea1d20d047d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericExtrapolateImageFunction.html</anchorfile>
      <anchor>a05000319814a864fdb3358cdde4147f3</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericExtrapolateImageFunction.html</anchorfile>
      <anchor>aa183094ced67894dd2998821d72539a1</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericExtrapolateImageFunction.html</anchorfile>
      <anchor>ac8281ced5e36c555a789cdcb3173cd72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1ExtrapolateImageFunction.html</anchorfile>
      <anchor>a06b9ecea98123c7f9d49615ff2102276</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1ExtrapolateImageFunction.html</anchorfile>
      <anchor>a33595f1ddb6a811a86b764205645ae04</anchor>
      <arglist>(double, double, double=0, double=0)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual enum ExtrapolationMode</type>
      <name>ExtrapolationMode</name>
      <anchorfile>classmirtk_1_1ExtrapolateImageFunction.html</anchorfile>
      <anchor>a7c4f68c93ec4ae2c224c387316e0ab13</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetAsDouble</name>
      <anchorfile>classmirtk_1_1ExtrapolateImageFunction.html</anchorfile>
      <anchor>a4598a8d8ce2f6b8275910d093bdb0afb</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1ExtrapolateImageFunction.html</anchorfile>
      <anchor>ac54e7fb008b87d60020ed3b1c19d0eec</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1ExtrapolateImageFunction.html</anchorfile>
      <anchor>a17ca6b76c095619e4c14460e71045cd0</anchor>
      <arglist>(int, int, int=0, int=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1ExtrapolateImageFunction.html</anchorfile>
      <anchor>a5b272b67fad8deec7ff5487312d87906</anchor>
      <arglist>(Vector &amp;, int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsForeground</name>
      <anchorfile>classmirtk_1_1ExtrapolateImageFunction.html</anchorfile>
      <anchor>a821afffe6af6881f89ca4000bf9656d6</anchor>
      <arglist>(int, int, int=0, int=0) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>N</name>
      <anchorfile>classmirtk_1_1ExtrapolateImageFunction.html</anchorfile>
      <anchor>a51b1768178ec63ffcc2df43f0d9ee909</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>T</name>
      <anchorfile>classmirtk_1_1ExtrapolateImageFunction.html</anchorfile>
      <anchor>a8e7a6ffbeed7e38656586c4e2f940533</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>X</name>
      <anchorfile>classmirtk_1_1ExtrapolateImageFunction.html</anchorfile>
      <anchor>ae01f72508b3e49f8a9253dfd4c31dfa8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Y</name>
      <anchorfile>classmirtk_1_1ExtrapolateImageFunction.html</anchorfile>
      <anchor>afa94b295a6a311a713ba960b30344779</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Z</name>
      <anchorfile>classmirtk_1_1ExtrapolateImageFunction.html</anchorfile>
      <anchor>a69c2a1a53a1653af855161e7245c03be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1ExtrapolateImageFunction.html</anchorfile>
      <anchor>ae63c7e35bfbf9c31f4ed4f5eb0b5caf5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>BaseImage</type>
      <name>ImageType</name>
      <anchorfile>classmirtk_1_1GenericExtrapolateImageFunction.html</anchorfile>
      <anchor>a2123eaddddaf78310963cc153ddeee6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImageType::RealType</type>
      <name>RealType</name>
      <anchorfile>classmirtk_1_1GenericExtrapolateImageFunction.html</anchorfile>
      <anchor>a5eb86672130110e0511a3f800225c98d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImageType::VoxelType</type>
      <name>VoxelType</name>
      <anchorfile>classmirtk_1_1GenericExtrapolateImageFunction.html</anchorfile>
      <anchor>a8a4ca0e97b1cba01c2b9066000240580</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GenericExtrapolateImageFunction *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1GenericExtrapolateImageFunction.html</anchorfile>
      <anchor>a74b1dfd5f7128491a2e1f4f489aff634</anchor>
      <arglist>(enum ExtrapolationMode, const BaseImage *=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ExtrapolateImageFunction *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1ExtrapolateImageFunction.html</anchorfile>
      <anchor>af0edc79120582bb437a04232cfd32a99</anchor>
      <arglist>(ExtrapolationMode mode, const BaseImage *=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GenericExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericExtrapolateImageFunction.html</anchorfile>
      <anchor>a455b22910e2a627b2a82e0156ec7f8ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1ExtrapolateImageFunction.html</anchorfile>
      <anchor>a511a6dc83eb3dfc6cf939588220c2eba</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ConstExtrapolateImageFunctionWithPeriodicTime</name>
    <filename>classmirtk_1_1ConstExtrapolateImageFunctionWithPeriodicTime.html</filename>
    <base>GenericConstExtrapolateImageFunctionWithPeriodicTime&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>ConstExtrapolateImageFunctionWithPeriodicTime</name>
      <anchorfile>classmirtk_1_1ConstExtrapolateImageFunctionWithPeriodicTime.html</anchorfile>
      <anchor>ae32ff4f5d4a41d9222c818d30187a785</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConstExtrapolateImageFunctionWithPeriodicTime</name>
      <anchorfile>classmirtk_1_1ConstExtrapolateImageFunctionWithPeriodicTime.html</anchorfile>
      <anchor>ab67d0f8bb21abef536cece3c089f65af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericConstExtrapolateImageFunctionWithPeriodicTime</name>
      <anchorfile>classmirtk_1_1GenericConstExtrapolateImageFunctionWithPeriodicTime.html</anchorfile>
      <anchor>af9ae11778290f521dc38a940b7b2b83f</anchor>
      <arglist>(double padding_value=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericConstExtrapolateImageFunctionWithPeriodicTime.html</anchorfile>
      <anchor>a06114ba3eae86b4ac294009f52ab3c60</anchor>
      <arglist>(int i, int j, int k=0, int l=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericConstExtrapolateImageFunctionWithPeriodicTime</name>
      <anchorfile>classmirtk_1_1GenericConstExtrapolateImageFunctionWithPeriodicTime.html</anchorfile>
      <anchor>a9c5b710d311a24dbf1a24601fc23c1f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>BaseImage</type>
      <name>ImageType</name>
      <anchorfile>classmirtk_1_1GenericConstExtrapolateImageFunctionWithPeriodicTime.html</anchorfile>
      <anchor>a29ddad4777af2e763876f8ec6a69aad2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImageType::RealType</type>
      <name>RealType</name>
      <anchorfile>classmirtk_1_1GenericConstExtrapolateImageFunctionWithPeriodicTime.html</anchorfile>
      <anchor>a2d5116c841605e43d72b1b6282798804</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImageType::VoxelType</type>
      <name>VoxelType</name>
      <anchorfile>classmirtk_1_1GenericConstExtrapolateImageFunctionWithPeriodicTime.html</anchorfile>
      <anchor>a26af4f1cab967b1187956e40344aeb07</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ConstGenericImageIterator</name>
    <filename>classmirtk_1_1ConstGenericImageIterator.html</filename>
    <templarg></templarg>
    <base>mirtk::ConstImageIterator</base>
    <member kind="function">
      <type></type>
      <name>ConstGenericImageIterator</name>
      <anchorfile>classmirtk_1_1ConstGenericImageIterator.html</anchorfile>
      <anchor>ab3bcd8567dcb2730c820fad9790c8fea</anchor>
      <arglist>(const ImageAttributes &amp;, const VoxelType *=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstGenericImageIterator</name>
      <anchorfile>classmirtk_1_1ConstGenericImageIterator.html</anchorfile>
      <anchor>ab246f6e7b794f3983768d45ce66a5b0f</anchor>
      <arglist>(GenericImage&lt; VoxelType &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstGenericImageIterator</name>
      <anchorfile>classmirtk_1_1ConstGenericImageIterator.html</anchorfile>
      <anchor>ae79d925ac6060c4660ec5362920eec07</anchor>
      <arglist>(GenericImage&lt; VoxelType &gt; *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstGenericImageIterator</name>
      <anchorfile>classmirtk_1_1ConstGenericImageIterator.html</anchorfile>
      <anchor>a6d23f1d622c63f04549a60381d482299</anchor>
      <arglist>(const ConstImageIterator &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>Current</name>
      <anchorfile>classmirtk_1_1ConstGenericImageIterator.html</anchorfile>
      <anchor>ade71117d2bce01df3c967ace5c454b42</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>Current</name>
      <anchorfile>classmirtk_1_1ConstGenericImageIterator.html</anchorfile>
      <anchor>afe9032547093be8c6836052690bfbf2d</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>Next</name>
      <anchorfile>classmirtk_1_1ConstGenericImageIterator.html</anchorfile>
      <anchor>a94717845bc2b8df6ef7ea3fe8ddf32e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>Next</name>
      <anchorfile>classmirtk_1_1ConstGenericImageIterator.html</anchorfile>
      <anchor>a7b9c612798772faeee9104451783fdd5</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>ConstGenericImageIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1ConstGenericImageIterator.html</anchorfile>
      <anchor>a4d2c3ccd18ffbe390c1bb0afc045ed51</anchor>
      <arglist>(const ConstGenericImageIterator &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType &amp;</type>
      <name>Value</name>
      <anchorfile>classmirtk_1_1ConstGenericImageIterator.html</anchorfile>
      <anchor>a92c5b5d428dde1034845f78d88c19a29</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VoxelType &amp;</type>
      <name>Value</name>
      <anchorfile>classmirtk_1_1ConstGenericImageIterator.html</anchorfile>
      <anchor>ad13154fcafa4cae18b91ab6192a218f4</anchor>
      <arglist>(int t) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ValueAsDouble</name>
      <anchorfile>classmirtk_1_1ConstGenericImageIterator.html</anchorfile>
      <anchor>a4cdc1f9fd4402e2d3bff5c55564171ee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ValueAsDouble</name>
      <anchorfile>classmirtk_1_1ConstGenericImageIterator.html</anchorfile>
      <anchor>ae1c110014469b08813c9c4931492079a</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ConstGenericImageIterator</name>
      <anchorfile>classmirtk_1_1ConstGenericImageIterator.html</anchorfile>
      <anchor>a8f8ad4894e2d3f714257798d20f1b0f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ColumnStride</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>aeb153f7751fb70dd4238019d7a4bfec4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstImageIterator</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a3cf0d6e289fb37f9c19bc653918eb5cc</anchor>
      <arglist>(const ImageAttributes &amp;, int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstImageIterator</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a5a62e270fcf392bdfc69bb735507cfed</anchor>
      <arglist>(const ImageAttributes &amp;, const void *=NULL, int=MIRTK_VOXEL_UNKNOWN)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstImageIterator</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a546e0276b9c53f6ada3d3943e723ecfe</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstImageIterator</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a5bebd58f4bef4a99b4efbd37b4e2da83</anchor>
      <arglist>(const BaseImage *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstImageIterator</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>af3fecd53f000dce19864bd21ceb7a203</anchor>
      <arglist>(const ConstImageIterator &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>Current</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>af8ccee27ee2fc414172b0bd72341a7a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>Current</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a5623f9d69030b20b45feea11bdb8c47d</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>FrameStride</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>af37f2b1de4256189310747b1b692106b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GoToBegin</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>abe0305c3994f38e6dfa66503030abc3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GoToCenter</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a523d0dc0ed7aaa03d5c1d5e8cf267452</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GoToEnd</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a093d049b5e191d563564d01f3291e3d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GoToIndex</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a61b959aff6174231c5dfc6fe8eb01d7e</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GoToPos</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>aa654506275071d58f048d31ba4e1dbea</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GoToVoxel</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a7226de2320fa4afe65edc9d44aa3de21</anchor>
      <arglist>(int, int, int=-1, int=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GoToVoxel</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a88d48a0daa0a91004d5980b6d44aa375</anchor>
      <arglist>(const Vector4D&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Index</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a6481c7ca808b3f6835ff84842a502112</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>IndexToPos</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>ac075ea69195c92073ad500f2c38aac95</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IndexToVoxel</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a361cc77dec5b52b4603a655fa27104e6</anchor>
      <arglist>(int, int &amp;, int &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IndexToVoxel</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a78dfb4d9af839f6ef2eec40314de6427</anchor>
      <arglist>(int, int &amp;, int &amp;, int &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IndexToVoxel</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a49550ae83e49a4d5e403839225139202</anchor>
      <arglist>(int, int &amp;, int &amp;, int &amp;, int &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IndexToVoxel</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>aa83b61e49d6e62665025fbdb5b77d89c</anchor>
      <arglist>(int, Vector4D&lt; int &gt; &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsAtBegin</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a7a8ee1174b0a708285888058557ed979</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsAtEnd</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a6764b0a240e120f3e386bae7aa1996fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsImageSequence</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>ae7ad96a2a44e94ef363f6c84dacb5334</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsScalar</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>aef8882c7482a16671c1873395bce51e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsScalarImage</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a8f8ac0ddaf243e12b04ad49eb050e325</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSequence</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>ace3bae5fc2925392213b3cee15101170</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>LineStride</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>aa7691d19a1c14f7daac6e1f65e1cd73e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Move</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a54efaf98dbf5518e0bea0614a7b693bd</anchor>
      <arglist>(const VoxelType *&amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Move</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>aaa2c097353dd15088bcfe8342dd80992</anchor>
      <arglist>(VoxelType *&amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>Next</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>ac4dea3c2b018c7c215c86ee7ecb1cd34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>Next</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a863be62bc6cc4a05e193d9d482a7415f</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfChannels</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>aaaf288e18ce7b46724b5f7a2d56a4d8b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfComponents</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>adb49a1b4f64cf66ee2a21908e54d7405</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfFrames</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a47efdc5db7809609037b8b2c6dc191c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfImageChannels</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a99515bd49b3c983f77db5e90b2435c01</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfImageVoxels</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a28bab88a322b1dcce04d574c99c38484</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfSequenceFrames</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a52ff3f0bd6b7b0c869dcb87024b8ce39</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfVectorComponents</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a61ca8d7b1be93002d21d9c80c53f313a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfVoxels</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>aa6fe98f837b6d46471257be32f5c04ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a52d2d317309d948c7d1c17b34a8d7b31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator++</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a33fd4b874bcc40697d89962ce30c3e79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator--</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a1015f538929a1625cff9ab8545ac3bf2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstImageIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a2b6e6659840a72d6412f4de12c644019</anchor>
      <arglist>(const ConstImageIterator &amp;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Pos</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a8928c1fac8739e960851aae3e3564cb8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>PosToIndex</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a187111d736d764f058ca501f19b71e43</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PosToVoxel</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a30dd38c51a2f95abfcd1d57191ab4eec</anchor>
      <arglist>(int, int &amp;, int &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PosToVoxel</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a7ff824bceaf3a118fd4c7385e2671b92</anchor>
      <arglist>(int, int &amp;, int &amp;, int &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PosToVoxel</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>abc5ae5f916bd33cfae7e12c71ffba747</anchor>
      <arglist>(int, int &amp;, int &amp;, int &amp;, int &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PosToVoxel</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a4eee7d8ee2bf4b7f851b4a82b6f7be19</anchor>
      <arglist>(int, Vector4D&lt; int &gt; &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetChannel</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a5579a9d2d19c6387d1fc7e41db407ae7</anchor>
      <arglist>(int, int=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetChannel</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>af338c3f4dc06aaedb3a14e27e7183959</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetComponent</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a6832e4e2445cf31739fd6b0cb8f5ab88</anchor>
      <arglist>(int, int=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetComponent</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a8428f3496c96417b879102ddddd197af</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetData</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a37db09b29c985f54555720779287bb3f</anchor>
      <arglist>(const void *, int=MIRTK_VOXEL_UNKNOWN)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDataType</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a486ce4d9a783969d8423d408d8a8f268</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFrame</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a1c37949761d3d1d2e388805e1fcc6426</anchor>
      <arglist>(int, int=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFrame</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>af2a240e943477ebbdf7e6a4b8e3ed93e</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetNeighborhood</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a5b69e6d726eca9dd7ae13ab5a239ce5f</anchor>
      <arglist>(int, int, int, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetNeighborhood</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>abe1eacb8f33c7110caf052a79f5e0fca</anchor>
      <arglist>(int, int, int, int, int, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetNeighborhood</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a5d0e1f78d137cd2720774938095cf069</anchor>
      <arglist>(int, int, int, int, int, int, int, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRegion</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>aa3438951c0f3356fd7265f0f5f9b2d78</anchor>
      <arglist>(int, int, int, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRegion</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>aad2115ccd4acf1e60c80e3e8f57aa486</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRegion</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a20e3146a4e9f431c0f775a612d709c33</anchor>
      <arglist>(int, int, int, int, int, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRegion</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a4b2eceb05371cc3529b93178282bc982</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRegion</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a89d75ed2b34145bc3100ee6971281ee6</anchor>
      <arglist>(int, int, int, int, int, int, int, int)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SliceStride</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>ac4a58238bd7cb738e40a8a150cec3563</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VoxelType &amp;</type>
      <name>Value</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>aff78c3e6a1177ea8c9630eaba522b961</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VoxelType &amp;</type>
      <name>Value</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>aa734541945418f933daadb9770fd690b</anchor>
      <arglist>(int t) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Voxel</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a6d5c2cc59746e9764d5c1f00885b7167</anchor>
      <arglist>(int &amp;, int &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Voxel</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>aef408ff8c9951849300f39bd90a9dfdc</anchor>
      <arglist>(int &amp;, int &amp;, int &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Voxel</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>abbd09cd077d6923d0dea789369831053</anchor>
      <arglist>(int &amp;, int &amp;, int &amp;, int &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>VoxelToIndex</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a5d02133cfb16ee8b5745e0446350c20f</anchor>
      <arglist>(int, int, int=0, int=0) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>VoxelToIndex</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>ad29c151fb05dd3468e5caec32d1f4fc0</anchor>
      <arglist>(const Vector4D&lt; int &gt; &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>VoxelToPos</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>aca5e83a2b4429dd2dd57c311a5cc6543</anchor>
      <arglist>(int, int, int=0, int=0) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>VoxelToPos</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a514685b2b1160854d4a17d56fd0e3b68</anchor>
      <arglist>(const Vector4D&lt; int &gt; &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConstImageIterator</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>aeb25d904ca6cb46aafe533930e8c3c95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CalculateStride</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a0372e1fdc9bbd0744a743c8807c71590</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>ad1fc6515d16e71199cbc3216d06e796a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector4D&lt; int &gt;</type>
      <name>_Begin</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>abed93a31a60ae8ba21d1cac9090f410c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_ColumnStride</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a3d79b4cd59696273d653c60631bc3fd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>_Data</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a1752a0b73ae4b80e4527ba00583caf1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector4D&lt; int &gt;</type>
      <name>_DataSize</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a00fd0dcfde3b8edfa22501fbedb092ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector4D&lt; int &gt;</type>
      <name>_End</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a9b0704903ff61935f8c24ee4f0682839</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_FrameStride</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a0f46824c5e3ccdf897b9e901adf87b82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_Inc</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a4aaa745ac34764e0c81488524a02f497</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector4D&lt; int &gt;</type>
      <name>_Index</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a07cb64a55f5cf5ebdc72e862f2b1a8b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_IsImageSequence</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a393737f02a4356b4cf11c2b42d7ae016</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_LineStride</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a9505edea7b62431421a061245c2189d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>_Next</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>aac94a3b508eb6400e0da0eb3e9326a8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector4D&lt; int &gt;</type>
      <name>_Size</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a7fb26b7225458d1911f052b936fb5d7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_SliceStride</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>adf1d48de050639a2cfeb567ee8e86cb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_XYZ</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>ad4de76a783d3b6b510eac0dfb3fc2f26</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ConstImageIterator</name>
    <filename>classmirtk_1_1ConstImageIterator.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ValueAsDouble</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>a5afed1d731aa1eaf127831c195e737c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ValueAsDouble</name>
      <anchorfile>classmirtk_1_1ConstImageIterator.html</anchorfile>
      <anchor>ac5161bbeb3e251fe4abaa48c5432bf3b</anchor>
      <arglist>(int) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::CosineOfNormalizedGradientField</name>
    <filename>classmirtk_1_1CosineOfNormalizedGradientField.html</filename>
    <base>mirtk::NormalizedGradientFieldSimilarity</base>
    <member kind="function">
      <type></type>
      <name>CosineOfNormalizedGradientField</name>
      <anchorfile>classmirtk_1_1CosineOfNormalizedGradientField.html</anchorfile>
      <anchor>ad828500cd35ed7edcef2dc6858874c2a</anchor>
      <arglist>(const char *=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CosineOfNormalizedGradientField</name>
      <anchorfile>classmirtk_1_1CosineOfNormalizedGradientField.html</anchorfile>
      <anchor>a7211098359ccafc297aae1c322348fea</anchor>
      <arglist>(const CosineOfNormalizedGradientField &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CosineOfNormalizedGradientField &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1CosineOfNormalizedGradientField.html</anchorfile>
      <anchor>ad9a73cbac5ac57b8caaf870929640dac</anchor>
      <arglist>(const CosineOfNormalizedGradientField &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1CosineOfNormalizedGradientField.html</anchorfile>
      <anchor>ad17568e2981d2e674a26a46a9786b407</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>RawValue</name>
      <anchorfile>classmirtk_1_1CosineOfNormalizedGradientField.html</anchorfile>
      <anchor>a4b0c201a9fd1217e62b3d170dcf707c2</anchor>
      <arglist>(double) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteDataSets</name>
      <anchorfile>classmirtk_1_1CosineOfNormalizedGradientField.html</anchorfile>
      <anchor>a4fb151d6b3f7d3df3438aaa237dcf111</anchor>
      <arglist>(const char *, const char *, bool=true) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CosineOfNormalizedGradientField</name>
      <anchorfile>classmirtk_1_1CosineOfNormalizedGradientField.html</anchorfile>
      <anchor>aac3c041ac491c702a1045fc814d16f1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1NormalizedGradientFieldSimilarity.html</anchorfile>
      <anchor>a6ed7ae7c4f39062927c2b60256927d12</anchor>
      <arglist>(bool=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1GradientFieldSimilarity.html</anchorfile>
      <anchor>a614d70cca723fc4e7386eef11d7fffed</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyAttributes</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a6d167e81157a2a98e583894ead30f473</anchor>
      <arglist>(const ImageSimilarity &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Exclude</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a5debefb5796e477c5cf53218f0d31cf0</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Include</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a640f80ec45e3fab79de67d8aab271948</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>ae23fb6a77f5d80a72489cb704499b9ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsForeground</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a4d8b338aea72c90dbaf53d517b81b663</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsForeground</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a5bad935b7b0d862dd39ca06a54fdc9ef</anchor>
      <arglist>(int, int, int) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a250d7d3c73491fb2399b2a8088734c37</anchor>
      <arglist>(bool, InitialUpdate)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkComponentMacro</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a52a930d1a1f178623ae5fe15bc09e9e8</anchor>
      <arglist>(GradientImageType, GradientWrtTarget)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkComponentMacro</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a9ed1193e55e59887d287f3e73584aeb9</anchor>
      <arglist>(GradientImageType, GradientWrtSource)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkComponentMacro</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>adbb698a18df83e6bc94dbd3f6327464c</anchor>
      <arglist>(double, Gradient)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkLooseComponentMacro</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a59a402ae1caa75ec40c2f2aabfca211f</anchor>
      <arglist>(RegisteredImage, Target)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkLooseComponentMacro</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>af5b29cbee9e42d16b843f531f807d9c8</anchor>
      <arglist>(RegisteredImage, Source)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAggregateMacro</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>acd79ea1162815df26d79d01664a73b78</anchor>
      <arglist>(BinaryImage, Mask)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a8cbf9e27b65d76d8ba43b92e155c863f</anchor>
      <arglist>(ImageAttributes, Domain)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a922aa5a0598a7caa50cb1bcfbda41778</anchor>
      <arglist>(int, NumberOfVoxels)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a2f1b7c53f8d63146ce952e833c8349cd</anchor>
      <arglist>(bool, UseApproximateGradient)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a77ce05f40c5fa4332465fde1ae236218</anchor>
      <arglist>(double, VoxelWisePreconditioning)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a93ba237069bd4dd9873a28c878eb7250</anchor>
      <arglist>(double, NodeBasedPreconditioning)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a025b40370cce23d1400d22ffb88cac5e</anchor>
      <arglist>(bool, SkipTargetInitialization)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a5562bf5c1b4e2163e7792bebd764f347</anchor>
      <arglist>(bool, SkipSourceInitialization)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a9ba52e65fc1515e091acd05ef81ea79e</anchor>
      <arglist>(Indent=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ReleaseSource</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a7ee70d460ea4dfaeada50384b307474d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ReleaseTarget</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>ac3b1968c83d22d4b0299053348add494</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteGradient</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>ae56091c7b5276bd16e4b14fde1b03b44</anchor>
      <arglist>(const char *, const char *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ImageSimilarity</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a66ce7c9d231d4bae60c487aa499087ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DataFidelity</name>
      <anchorfile>classmirtk_1_1DataFidelity.html</anchorfile>
      <anchor>abb59db4882313369f8613249bb84440b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1CosineOfNormalizedGradientField.html</anchorfile>
      <anchor>a61bf1f71420a9458cdd9d761c3274170</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>NonParametricGradient</name>
      <anchorfile>classmirtk_1_1CosineOfNormalizedGradientField.html</anchorfile>
      <anchor>aea090cd45ec881d4577fbfd17646e79f</anchor>
      <arglist>(const RegisteredImage *, GradientImageType *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetWithoutPrefix</name>
      <anchorfile>classmirtk_1_1CosineOfNormalizedGradientField.html</anchorfile>
      <anchor>ad3b241b28194d6fc6879d62765f5fbab</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>NormalizedGradientFieldSimilarity</name>
      <anchorfile>classmirtk_1_1NormalizedGradientFieldSimilarity.html</anchorfile>
      <anchor>a042efafdd1b0897886683304fec9b1fa</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>NormalizedGradientFieldSimilarity</name>
      <anchorfile>classmirtk_1_1NormalizedGradientFieldSimilarity.html</anchorfile>
      <anchor>af0cd6fd3021d2205285b7c75c3d36796</anchor>
      <arglist>(const NormalizedGradientFieldSimilarity &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetWithPrefix</name>
      <anchorfile>classmirtk_1_1NormalizedGradientFieldSimilarity.html</anchorfile>
      <anchor>a25d962d3b6d832219aea25df76165a25</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~NormalizedGradientFieldSimilarity</name>
      <anchorfile>classmirtk_1_1NormalizedGradientFieldSimilarity.html</anchorfile>
      <anchor>affe8f1d011d0052c4edac508d40eab79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GradientFieldSimilarity</name>
      <anchorfile>classmirtk_1_1GradientFieldSimilarity.html</anchorfile>
      <anchor>a52ba874b4f4ef05b2bd7b22dfb1d0985</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GradientFieldSimilarity</name>
      <anchorfile>classmirtk_1_1GradientFieldSimilarity.html</anchorfile>
      <anchor>ae7a311858b47fe3d15a785c5dcea8c23</anchor>
      <arglist>(const GradientFieldSimilarity &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>InitializeInput</name>
      <anchorfile>classmirtk_1_1GradientFieldSimilarity.html</anchorfile>
      <anchor>a946390970241b6a713ce08867d375ed3</anchor>
      <arglist>(const ImageAttributes &amp;domain)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>MultiplyByImageHessian</name>
      <anchorfile>classmirtk_1_1GradientFieldSimilarity.html</anchorfile>
      <anchor>a16639e73227374b416f1e39488786765</anchor>
      <arglist>(const RegisteredImage *image, GradientImageType *gradient)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1GradientFieldSimilarity.html</anchorfile>
      <anchor>a6476dae87f30a6d18b4e9136eb1ce46e</anchor>
      <arglist>(const RegisteredImage *image, GradientImageType *np_gradient, double *gradient, double weight)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ReorientGradient</name>
      <anchorfile>classmirtk_1_1GradientFieldSimilarity.html</anchorfile>
      <anchor>a2b8fd2c8d0c750adcb6f720acff2048f</anchor>
      <arglist>(RegisteredImage *, bool=false)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~GradientFieldSimilarity</name>
      <anchorfile>classmirtk_1_1GradientFieldSimilarity.html</anchorfile>
      <anchor>ac5b57c6c69aa82961b33ed15be49cd4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ApproximateGradient</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>abd83e3f94a3ec81dfa1cd736daca9a39</anchor>
      <arglist>(RegisteredImage *image, FreeFormTransformation *ffd, double *gradient, double step, double weight)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ApproximateGradient</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a7ce946810f498fba81d9b8c27983b0dc</anchor>
      <arglist>(RegisteredImage *image, double *gradient, double step, double weight)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateGradient</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a72366f98ea7d1bcd74889a5c98339eb5</anchor>
      <arglist>(RegisteredImage *image, GradientImageType *&amp;np_gradient, double *gradient, double step, double weight)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateGradient</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>abe5715489ea71fb861ac5d1c50061b20</anchor>
      <arglist>(double *gradient, double step, double weight)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ImageSimilarity</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a3d02a354926433117faa57e55aef596a</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ImageSimilarity</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a2e6840020defcee929395c81653ee140</anchor>
      <arglist>(const ImageSimilarity &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>MultiplyByImageGradient</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a118ef6822ff1ca93fd873b3248f02b73</anchor>
      <arglist>(const RegisteredImage *image, GradientImageType *gradient)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>NormalizeGradient</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a58165418605ad1b36e0edb237ad6172e</anchor>
      <arglist>(GradientImageType *gradient)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>NormalizeGradient</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a259b829149afb33e95d63114e94c9849</anchor>
      <arglist>(const RegisteredImage *image, double *gradient)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ImageSimilarity &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a9d9cce57ab827c2fce42b27ea1a6ee9a</anchor>
      <arglist>(const ImageSimilarity &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DataFidelity</name>
      <anchorfile>classmirtk_1_1DataFidelity.html</anchorfile>
      <anchor>a8fbd614939ebe8131354ce759d833f2c</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DataFidelity</name>
      <anchorfile>classmirtk_1_1DataFidelity.html</anchorfile>
      <anchor>afb33f1a4515687066cc6aba77aa599c5</anchor>
      <arglist>(const DataFidelity &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DataFidelity &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1DataFidelity.html</anchorfile>
      <anchor>a28c77e2c59231b59cb00fe932e51e466</anchor>
      <arglist>(const DataFidelity &amp;)</arglist>
    </member>
    <member kind="typedef">
      <type>RegisteredImage::GradientImageType</type>
      <name>GradientImageType</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>afc8e31942ab78fc37a975593c1ab6fe3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GradientImageType::VoxelType</type>
      <name>GradientType</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a75058cef50a5d48150140854c9919152</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RegisteredImage::VoxelType</type>
      <name>VoxelType</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a34474195fec252b6d5dcb89ec04ee66b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ImageSimilarity *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a6d4c13a98d33f2cad6ca06afd2beb220</anchor>
      <arglist>(SimilarityMeasure, const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::CSplineInterpolateImageFunction</name>
    <filename>classmirtk_1_1CSplineInterpolateImageFunction.html</filename>
    <base>GenericCSplineInterpolateImageFunction&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>CSplineInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1CSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ad430ae7485d5927cb7d8813779cefe61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingInterval</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a03c6a9ee4598267560aced98c4c0d9bd</anchor>
      <arglist>(double, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericCSplineInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a44b128b0dbbd37856e074b0cbfad97de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ada7547e54e979ce20e39481a529e3293</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a6746e7b66ed54ac4b2a35f18eb184769</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a7b0a5d86d35ac60ac07fbbc41de7df6e</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>aec507d3c4fe31e6d892ae4ead3586c47</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a502918d03f6ce5b5e0be20ea2b69d649</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a5f8a231c2cd31ebba87a18f57de70cd0</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a680c495e8217a2f424257c0466a38213</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a4a336e4c7bd4405df9064e31ac384848</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a8dc9129625ea149d17f2e60d8e36dedf</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a3710999cb06777604353109942cddd0f</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a5691270b11178d9091ad112315e7eb7a</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a1448d2d80c2d6f8c25c39d5419a087a6</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>abcb3fe3c21a1519ead462c54319ca146</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a46161ee7b62730a7eb8af0b33e534a3e</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a9a1fa6f0b5cbaf6a73eaee4ade842bc7</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a09309a24d3a7b2b37cf3f32b0742acee</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>aaef933848d267d3f5306e5bbb38f7d03</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a9bc208ecabd48195958458f1579cd1cf</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a47fadd07d37e85f01b48086343daa5e8</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a5a136e3d1155bdfeaf23234f51513769</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>abd70ed31525e0bf6e391b3df990b2843</anchor>
      <arglist>(bool=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericCSplineInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ac2a7c1e0f8295bcb0cee419c8340bafe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static Real</type>
      <name>CSpline</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a006f01907e3dfeebe67193a478a3fede</anchor>
      <arglist>(Real)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::CSplineInterpolateImageFunction2D</name>
    <filename>classmirtk_1_1CSplineInterpolateImageFunction2D.html</filename>
    <base>GenericCSplineInterpolateImageFunction2D&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>CSplineInterpolateImageFunction2D</name>
      <anchorfile>classmirtk_1_1CSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a652690d3ac492fe06d869bef43dd0687</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericCSplineInterpolateImageFunction2D</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>af5cb443f94e555cff1ec7961ca7c32e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a6654bfe7bbf5a20c4020a59fcf834d1f</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>aa6b7116b0a9e24d0559dad1bb6124325</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>abf3ffa63f207e67316202647f7185061</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a01dc83c3dbb0091709cfaa4b1a84156d</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a59cf53de4f52c3672320e1b0d1b654ba</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>ae7c6a50f705f1f73510cb7c2c64c4626</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>aff007d5416c371321d25c2e2108395bf</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a1400d49d3bb350b53b3dfebf7506e985</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::CSplineInterpolateImageFunction3D</name>
    <filename>classmirtk_1_1CSplineInterpolateImageFunction3D.html</filename>
    <base>GenericCSplineInterpolateImageFunction3D&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>CSplineInterpolateImageFunction3D</name>
      <anchorfile>classmirtk_1_1CSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>ae1f01d8214a9cfa3b849634c5cbb6e35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericCSplineInterpolateImageFunction3D</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a0e0d6b684a1b9aa0084742365e17a4d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a7c0523ea8e96da6de068cd2a6b834e95</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a6d8634d7258ab68d9e26f67cc3bf5a09</anchor>
      <arglist>(const TOtherImage *, double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>ab8fbe0879a3ddce6a1c02df3d05b2ef3</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>aed90eff77de83d547c80a16dc53fa398</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>afdd19c6d059132504e6589e4def8fe7c</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>aa172af0f7d6323353c26948f1fdee66d</anchor>
      <arglist>(const TOtherImage *, double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a0eb1e55c05aed6ed105e75a388311ac0</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>abcad16363bac933c7b5c734f936f0d8f</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::CSplineInterpolateImageFunction4D</name>
    <filename>classmirtk_1_1CSplineInterpolateImageFunction4D.html</filename>
    <base>GenericCSplineInterpolateImageFunction4D&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>CSplineInterpolateImageFunction4D</name>
      <anchorfile>classmirtk_1_1CSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a404e96091147aca50b335b9ff34d876a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericCSplineInterpolateImageFunction4D</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>ae55ca01ef31b48bb87e6c4b7fbe71667</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a0e72509e44e4739bf2764ce6bcad71f5</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a06ba60d4d2c4db05ce978c670c8af338</anchor>
      <arglist>(const TOtherImage *, double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>ad8c142f6c2764d882ca4a731e402dd8d</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a317e2cf61b3aea901a155c00d5b49a95</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>aeb9f0c165048c517d28543f514156ed2</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a985567bcc688b6d1b22b423c2546ce28</anchor>
      <arglist>(const TOtherImage *, double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a5fd0f5bdda1c1b4204bbaf61ca027543</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a306511dfd00d0790e795474748cda37b</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::CubicBSplineInterpolateImageFunction</name>
    <filename>classmirtk_1_1CubicBSplineInterpolateImageFunction.html</filename>
    <base>GenericCubicBSplineInterpolateImageFunction&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>CubicBSplineInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1CubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a4697885972cc72f0a8fd89fde9ba08ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingInterval</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a00eb778876296e1657d79a63902e5a35</anchor>
      <arglist>(double, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericCubicBSplineInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>aa5dfa769b9797d37ecf742b6135b4303</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ac1a5582d78794eb03ca3bd6a515fa266</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a7370859e3b632a1f49655634c4857e86</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a2c4c55be3fd954d24b51817cf7ea6cca</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a131c91387c38a3330dc398b450135c68</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a49c487c8c85b936fed2769ba575f42d6</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ad817e14f49d19694320ab7ee91ac9fea</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>adfb9a0d10497ab4ded113ee9e54d0451</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a30ddb644dc960942290e5f85ac69adaf</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a7c546933e37e01e09b3e01c489917e84</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside2D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a95796e4344e16e1ccbe3d686abeaea98</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside3D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a5e946856d19d3bd9e74edf077d87c607</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside4D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a2130737fd3eae29c2a9274ca827b3560</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a2d12f473f61b7b5c804ce8b4756df429</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a6bef68311820f258ffd81c8c2e3165fd</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a61a369e3e921cb27c25814aa6fed0656</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ad04024247f399cf5b0211e6820f1bb0d</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a54a54c5d6d05b0f314ed7e00456d47fd</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a016adc442b2aeabbb296d8b656280af0</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a51273bd9dd44412d708180bec565e4dd</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a97a218912d66af662b875186d7c03251</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a46182e4cb0ada613117bb10721e0a944</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a7a250a6d7fec62486f76a9364a3485fd</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a38772a4e4086eec646e02c5e5170d336</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a4f0e0ae21848a6cb93859905d94dc832</anchor>
      <arglist>(bool=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkAggregateMacro</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a3690d3eb9fea99d29ec00890deada290</anchor>
      <arglist>(CoefficientExtrapolator, InfiniteCoefficient)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a12370c7f675cb512bca3d556ecb5beda</anchor>
      <arglist>(CoefficientImage, Coefficient)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericCubicBSplineInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>adb1542d7a6abeeab54ffc6d1ffa83c23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_s2</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a21f14400afe6a38c52a0149309ad1140</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::CubicBSplineInterpolateImageFunction2D</name>
    <filename>classmirtk_1_1CubicBSplineInterpolateImageFunction2D.html</filename>
    <base>GenericCubicBSplineInterpolateImageFunction2D&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>CubicBSplineInterpolateImageFunction2D</name>
      <anchorfile>classmirtk_1_1CubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a695dfe99344e1d8984de10fe5c0d4bd6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericCubicBSplineInterpolateImageFunction2D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a0042f815bbdda3e019607e7e0b3592db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>aca6255bc33a01c53cbeed3f9f7464a94</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a079793258242dd1051200a40160c2d16</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a9c1b4f90d38fbcaaa87d167838a0e22d</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a6ef12fe8c5b3dd29f051c87af64c0d95</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a7adba4fe592c482b25c9ba6266fd4747</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a610ce6c2a1c29d2c792028be3a8c3b7c</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>acfba8b9ab3066490fe144975ddd8f224</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a8bfd994717bcaf51e934808507b39f26</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::CubicBSplineInterpolateImageFunction3D</name>
    <filename>classmirtk_1_1CubicBSplineInterpolateImageFunction3D.html</filename>
    <base>GenericCubicBSplineInterpolateImageFunction3D&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>CubicBSplineInterpolateImageFunction3D</name>
      <anchorfile>classmirtk_1_1CubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a147fdaa27e86cc206da36fffbc79a5d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericCubicBSplineInterpolateImageFunction3D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a4ae143203c19782a52efedcda9df72a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a593c7d46653b5b028859288667c3f06f</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a3087bb95d7441b4c3e224f83168a7382</anchor>
      <arglist>(const TOtherImage *, double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a6c3b7d3debd578a8715fbe22328df5e9</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a2453be5df2a95f697d517ef068341a85</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a53674a44cf000b015d21bb53143987de</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>adc8a6c9d6d1988b70f31f8a5af67eb88</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>ae032071991f08cc7352ea43b123455a3</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a87b246a79da03aa0cce63c5ac22a8c5f</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::CubicBSplineInterpolateImageFunction4D</name>
    <filename>classmirtk_1_1CubicBSplineInterpolateImageFunction4D.html</filename>
    <base>GenericCubicBSplineInterpolateImageFunction4D&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>CubicBSplineInterpolateImageFunction4D</name>
      <anchorfile>classmirtk_1_1CubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>aa681b2e46ef4ae0114ae28fe9111fa55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericCubicBSplineInterpolateImageFunction4D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>aa0d51ce7627a015f0d42626fd0c0026f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a3ff1d684ecb2097215cecc51e254cc99</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a2f51ed8179b9a0f491706d93534874f0</anchor>
      <arglist>(const TOtherImage *, double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a4ecddfc827ed5a26dcfdec138069bfcf</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a4732033cf6d5c9d0c78b9f98b4a29298</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a628315b34437fafa8b5b3263825ec6a0</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a9c156f51aba9c67fcbe630358f7d11c6</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a4c9cb5f50fc4da3e5babe880d184ae87</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a6dd2fd0f2d30fc7806f4ed5a3fafa878</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::CurrentsDistance</name>
    <filename>classmirtk_1_1CurrentsDistance.html</filename>
    <base>mirtk::PointSetDistance</base>
    <member kind="function">
      <type></type>
      <name>CurrentsDistance</name>
      <anchorfile>classmirtk_1_1CurrentsDistance.html</anchorfile>
      <anchor>abd2a1c2b2479f9d17c8811d90b1a6350</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CurrentsDistance</name>
      <anchorfile>classmirtk_1_1CurrentsDistance.html</anchorfile>
      <anchor>af4321bde1b2db40cf2fe8ea86229b326</anchor>
      <arglist>(const CurrentsDistance &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1CurrentsDistance.html</anchorfile>
      <anchor>ab35b6627a3486cbc3e94fc39c780544a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CurrentsDistance &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1CurrentsDistance.html</anchorfile>
      <anchor>abef7e80e65b8a9932e6250f8be6914be</anchor>
      <arglist>(const CurrentsDistance &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1CurrentsDistance.html</anchorfile>
      <anchor>a78c18daa323a7f3b998191d07ef17297</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Reinitialize</name>
      <anchorfile>classmirtk_1_1CurrentsDistance.html</anchorfile>
      <anchor>a8c495658ee3b8d813a58b0cc65ec6079</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1CurrentsDistance.html</anchorfile>
      <anchor>ab2aede744596bcd9331cab3fa69403ff</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteDataSets</name>
      <anchorfile>classmirtk_1_1CurrentsDistance.html</anchorfile>
      <anchor>a6158ef78a5efbb3bbce1635ad0c2683b</anchor>
      <arglist>(const char *, const char *, bool=true) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CurrentsDistance</name>
      <anchorfile>classmirtk_1_1CurrentsDistance.html</anchorfile>
      <anchor>ae521fd92d7f9c4eb32359ed4b7524579</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteGradient</name>
      <anchorfile>classmirtk_1_1PointSetDistance.html</anchorfile>
      <anchor>a145f6b3e231e30e426110f179beb353f</anchor>
      <arglist>(const char *, const char *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PointSetDistance</name>
      <anchorfile>classmirtk_1_1PointSetDistance.html</anchorfile>
      <anchor>a5fb801520d1d4cc4165353d40a3be3a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1CurrentsDistance.html</anchorfile>
      <anchor>a73b001f73a8529049c095b2372ef76d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Init</name>
      <anchorfile>classmirtk_1_1CurrentsDistance.html</anchorfile>
      <anchor>aa05d93427bb8cb0972cef076ad0069f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>NonParametricGradient</name>
      <anchorfile>classmirtk_1_1CurrentsDistance.html</anchorfile>
      <anchor>a54a4955cfc047a48bce6f04d918f7ffa</anchor>
      <arglist>(const RegisteredPointSet *target, GradientType *gradient)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetWithoutPrefix</name>
      <anchorfile>classmirtk_1_1CurrentsDistance.html</anchorfile>
      <anchor>a41c62c1567af8802d6aefb37c655bc15</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetWithPrefix</name>
      <anchorfile>classmirtk_1_1CurrentsDistance.html</anchorfile>
      <anchor>aaffeb5722bcd85a4e4553131bf69cc4c</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>AllocateGradientWrtSource</name>
      <anchorfile>classmirtk_1_1PointSetDistance.html</anchorfile>
      <anchor>a7f487fed9d70a461fc01be7893bcf14e</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>AllocateGradientWrtTarget</name>
      <anchorfile>classmirtk_1_1PointSetDistance.html</anchorfile>
      <anchor>ab252d1176202371c8d82437dba6f6c40</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CopyAttributes</name>
      <anchorfile>classmirtk_1_1PointSetDistance.html</anchorfile>
      <anchor>afe8841175e1f7c41afb9c92d9d73c8a1</anchor>
      <arglist>(const PointSetDistance &amp;, int=-1, int=-1)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateGradient</name>
      <anchorfile>classmirtk_1_1PointSetDistance.html</anchorfile>
      <anchor>a7b611477556bb89cff4a763f129a4618</anchor>
      <arglist>(double *gradient, double step, double weight)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1PointSetDistance.html</anchorfile>
      <anchor>a16adb8cf314f03db63d4d4638239bfe6</anchor>
      <arglist>(int, int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointSetDistance.html</anchorfile>
      <anchor>a0f170b0f875a1f29f9ca3df951ef5366</anchor>
      <arglist>(bool, InitialUpdate)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkComponentMacro</name>
      <anchorfile>classmirtk_1_1PointSetDistance.html</anchorfile>
      <anchor>a7e25bd555dd8d3e4b11b283ea3b1a9ee</anchor>
      <arglist>(GradientType, GradientWrtTarget)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkComponentMacro</name>
      <anchorfile>classmirtk_1_1PointSetDistance.html</anchorfile>
      <anchor>ab325c3ecba47745a477eeed8711d8250</anchor>
      <arglist>(GradientType, GradientWrtSource)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAggregateMacro</name>
      <anchorfile>classmirtk_1_1PointSetDistance.html</anchorfile>
      <anchor>a4e6774e3e35641eba96771121bdbaed5</anchor>
      <arglist>(RegisteredPointSet, Target)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAggregateMacro</name>
      <anchorfile>classmirtk_1_1PointSetDistance.html</anchorfile>
      <anchor>a61fb2321d76b21cb32c27f758e7a610e</anchor>
      <arglist>(RegisteredPointSet, Source)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PointSetDistance &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1PointSetDistance.html</anchorfile>
      <anchor>aabb5c515e9541b305f6a0e0c81c8cfb3</anchor>
      <arglist>(const PointSetDistance &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1PointSetDistance.html</anchorfile>
      <anchor>a7f8a9107e566da6169a0bda67a95965b</anchor>
      <arglist>(const RegisteredPointSet *target, const GradientType *np_gradient, double *gradient, double weight)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PointSetDistance</name>
      <anchorfile>classmirtk_1_1PointSetDistance.html</anchorfile>
      <anchor>a36602968204556747cdc0543db8169a6</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PointSetDistance</name>
      <anchorfile>classmirtk_1_1PointSetDistance.html</anchorfile>
      <anchor>a9524cb10b0d96b9676af9d9f2ea9fbf7</anchor>
      <arglist>(const PointSetDistance &amp;, int=-1, int=-1)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Reinitialize</name>
      <anchorfile>classmirtk_1_1PointSetDistance.html</anchorfile>
      <anchor>aa08b59f87b5585427ab5b6a6acd55c36</anchor>
      <arglist>(int, int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteGradient</name>
      <anchorfile>classmirtk_1_1PointSetDistance.html</anchorfile>
      <anchor>ac1343bde0579064e931490c974999b1b</anchor>
      <arglist>(const char *, const RegisteredPointSet *, const GradientType *, const Array&lt; int &gt; *=NULL) const </arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static vtkSmartPointer&lt; vtkPolyData &gt;</type>
      <name>SurfaceToCurrent</name>
      <anchorfile>classmirtk_1_1CurrentsDistance.html</anchorfile>
      <anchor>a3f8ce9551833503cd07016d78db2487d</anchor>
      <arglist>(vtkPolyData *)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static vtkSmartPointer&lt; vtkPolyData &gt;</type>
      <name>ToCurrent</name>
      <anchorfile>classmirtk_1_1CurrentsDistance.html</anchorfile>
      <anchor>a9bfd98241e7f175c4c2af3fb4233b0a8</anchor>
      <arglist>(vtkPointSet *)</arglist>
    </member>
    <member kind="typedef">
      <type>Vector3D&lt; double &gt;</type>
      <name>GradientType</name>
      <anchorfile>classmirtk_1_1PointSetDistance.html</anchorfile>
      <anchor>a7cb71b5c3d106cb4c8398775708b38a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PointSetDistance *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1PointSetDistance.html</anchorfile>
      <anchor>a85564c49a0cbf63b1c0882369c616846</anchor>
      <arglist>(PointSetDistanceMeasure, const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::CurvatureConstraint</name>
    <filename>classmirtk_1_1CurvatureConstraint.html</filename>
    <base>mirtk::SurfaceConstraint</base>
    <class kind="struct">mirtk::CurvatureConstraint::NeighborInfo</class>
    <member kind="typedef">
      <type>List&lt; NeighborInfo &gt;</type>
      <name>NeighborList</name>
      <anchorfile>classmirtk_1_1CurvatureConstraint.html</anchorfile>
      <anchor>a325180d9212fc6049ce84ee7730c627d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CurvatureConstraint</name>
      <anchorfile>classmirtk_1_1CurvatureConstraint.html</anchorfile>
      <anchor>a5ec4dd6287fd6d7ee74d3139a230f26c</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CurvatureConstraint</name>
      <anchorfile>classmirtk_1_1CurvatureConstraint.html</anchorfile>
      <anchor>a84607444794c1397664e9f5576ffa6eb</anchor>
      <arglist>(const CurvatureConstraint &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1CurvatureConstraint.html</anchorfile>
      <anchor>a46e61a9aa7bc228a0b3c7b9146377450</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CurvatureConstraint &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1CurvatureConstraint.html</anchorfile>
      <anchor>abc922e95625741f1374e85d38ea65485</anchor>
      <arglist>(const CurvatureConstraint &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Reinitialize</name>
      <anchorfile>classmirtk_1_1CurvatureConstraint.html</anchorfile>
      <anchor>a60d83babd308dd00610b8825cb919f95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1CurvatureConstraint.html</anchorfile>
      <anchor>a96ecdd85e60b1f5b2ba0546d686cd18b</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CurvatureConstraint</name>
      <anchorfile>classmirtk_1_1CurvatureConstraint.html</anchorfile>
      <anchor>a168624a96bb5a8cee40c3c76a1b9c7ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SurfaceConstraint</name>
      <anchorfile>classmirtk_1_1SurfaceConstraint.html</anchorfile>
      <anchor>ae41b8e28b9c991ea494dfeee319df544</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InternalForce</name>
      <anchorfile>classmirtk_1_1InternalForce.html</anchorfile>
      <anchor>ab29efabbe8a6b3520ff7cb3dfc71d8e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1EnergyTerm.html</anchorfile>
      <anchor>ab13986c6f65e2a2bc8c779aae5d58fbb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CopyAttributes</name>
      <anchorfile>classmirtk_1_1CurvatureConstraint.html</anchorfile>
      <anchor>a20aff09e66d1d15d0492d975738ea7d2</anchor>
      <arglist>(const CurvatureConstraint &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1CurvatureConstraint.html</anchorfile>
      <anchor>a147ec8b0526ba8287945240eefa6d6ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateGradient</name>
      <anchorfile>classmirtk_1_1CurvatureConstraint.html</anchorfile>
      <anchor>a4bd1414f70a80295cbc3d12e317490cd</anchor>
      <arglist>(double *, double, double)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Init</name>
      <anchorfile>classmirtk_1_1CurvatureConstraint.html</anchorfile>
      <anchor>aefd10e39516d30775feeeadbe8c2f8fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1CurvatureConstraint.html</anchorfile>
      <anchor>acabe9f036e7eb2da737647ff7eb0cfb9</anchor>
      <arglist>(Array&lt; NeighborList &gt;, Neighbors)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1CurvatureConstraint.html</anchorfile>
      <anchor>ab282fe9d348c1099e3106400b80a6639</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPoints &gt;, Centroids)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1CurvatureConstraint.html</anchorfile>
      <anchor>a83e62bf30102310548ab745cac4f1429</anchor>
      <arglist>(double, Sigma)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SurfaceConstraint &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1SurfaceConstraint.html</anchorfile>
      <anchor>a9e3564522f7c2b032adb0653120e3238</anchor>
      <arglist>(const SurfaceConstraint &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SurfaceConstraint</name>
      <anchorfile>classmirtk_1_1SurfaceConstraint.html</anchorfile>
      <anchor>a79b55e29b1ae7883a7fd22c4f3016aaa</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SurfaceConstraint</name>
      <anchorfile>classmirtk_1_1SurfaceConstraint.html</anchorfile>
      <anchor>afb150505f28953c16f42c4d2c0a8bd08</anchor>
      <arglist>(const SurfaceConstraint &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>InternalForce</name>
      <anchorfile>classmirtk_1_1InternalForce.html</anchorfile>
      <anchor>a5b4a1fead85df8201884cc0a2098982c</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>InternalForce</name>
      <anchorfile>classmirtk_1_1InternalForce.html</anchorfile>
      <anchor>abbb903c673b61af4889f53d274134e31</anchor>
      <arglist>(const InternalForce &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>InternalForce &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1InternalForce.html</anchorfile>
      <anchor>af3b508a9942a8e33946bb57a68d85586</anchor>
      <arglist>(const InternalForce &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetWithoutPrefix</name>
      <anchorfile>classmirtk_1_1EnergyTerm.html</anchorfile>
      <anchor>a0272788457000ee90312fd16de13b3d5</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static InternalForce *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1InternalForce.html</anchorfile>
      <anchor>acd27dddbb4a709f4833d160af2e594d1</anchor>
      <arglist>(InternalForceTerm, const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::CurvatureConstraint::NeighborInfo</name>
    <filename>structmirtk_1_1CurvatureConstraint_1_1NeighborInfo.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>_PointId</name>
      <anchorfile>structmirtk_1_1CurvatureConstraint_1_1NeighborInfo.html</anchorfile>
      <anchor>ac9b274cf655b905226432046c9b082ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_Weight</name>
      <anchorfile>structmirtk_1_1CurvatureConstraint_1_1NeighborInfo.html</anchorfile>
      <anchor>a9c9516ed08de1300bd5e5ceebe1b516a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::DataFidelity</name>
    <filename>classmirtk_1_1DataFidelity.html</filename>
    <base>mirtk::EnergyTerm</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1EnergyTerm.html</anchorfile>
      <anchor>a592cb603567d4cc929ea37a53b100a08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1EnergyTerm.html</anchorfile>
      <anchor>a01cc9587b942f17797d8fcc3af441384</anchor>
      <arglist>(bool gradient=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteDataSets</name>
      <anchorfile>classmirtk_1_1EnergyTerm.html</anchorfile>
      <anchor>a1a1f34b01eff15ffe0f6ae74ac6a7a1b</anchor>
      <arglist>(const char *, const char *, bool=true) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteGradient</name>
      <anchorfile>classmirtk_1_1EnergyTerm.html</anchorfile>
      <anchor>a3d5c8db6206b217510d2f811636a9401</anchor>
      <arglist>(const char *, const char *) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetWithPrefix</name>
      <anchorfile>classmirtk_1_1DataFidelity.html</anchorfile>
      <anchor>a810b1114ab511b5a4142df8b78bf7194</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1EnergyTerm.html</anchorfile>
      <anchor>ae5cf01c414a086c27874621afe103bc5</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>EvaluateGradient</name>
      <anchorfile>classmirtk_1_1EnergyTerm.html</anchorfile>
      <anchor>aa97a8166dd7c3d99992c1d09ef41040a</anchor>
      <arglist>(double *gradient, double step, double weight)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::DeformableSurfaceDebugger</name>
    <filename>classmirtk_1_1DeformableSurfaceDebugger.html</filename>
    <base>mirtk::Observer</base>
    <member kind="function">
      <type></type>
      <name>DeformableSurfaceDebugger</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceDebugger.html</anchorfile>
      <anchor>a62f8cfcc0ceabb4b7c5fa79626d25760</anchor>
      <arglist>(const DeformableSurfaceModel *=NULL, const char *=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>HandleEvent</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceDebugger.html</anchorfile>
      <anchor>a111291e10ec699371f0c7e25f3274751</anchor>
      <arglist>(Observable *, Event, const void *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DeformableSurfaceDebugger</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceDebugger.html</anchorfile>
      <anchor>af2e4b5b71d5f3462628a1371cebf5b0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearObservables</name>
      <anchorfile>classmirtk_1_1Observer.html</anchorfile>
      <anchor>a638353f8ad6e2d9d68bec0e87dede6f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Observer</name>
      <anchorfile>classmirtk_1_1Observer.html</anchorfile>
      <anchor>aa7b1a854d45f34c30b16d76be84193bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Observer</name>
      <anchorfile>classmirtk_1_1Observer.html</anchorfile>
      <anchor>a9c3ad314e5e13c64d0ff9e4614eb563e</anchor>
      <arglist>(const Observer &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Observer &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1Observer.html</anchorfile>
      <anchor>a73f7c6cf29582d13009a50457cb3b8eb</anchor>
      <arglist>(const Observer &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Observer</name>
      <anchorfile>classmirtk_1_1Observer.html</anchorfile>
      <anchor>aee963ab298c8f484314024c95194ac5d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::DeformableSurfaceLogger</name>
    <filename>classmirtk_1_1DeformableSurfaceLogger.html</filename>
    <base>mirtk::Observer</base>
    <member kind="function">
      <type></type>
      <name>DeformableSurfaceLogger</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceLogger.html</anchorfile>
      <anchor>abe1b65b2d456cbb96b83d0b33529848c</anchor>
      <arglist>(ostream *=&amp;cout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>HandleEvent</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceLogger.html</anchorfile>
      <anchor>a9aa1a30fb6f2dcaffb6b7e738ad3c1c5</anchor>
      <arglist>(Observable *, Event, const void *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DeformableSurfaceLogger</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceLogger.html</anchorfile>
      <anchor>a0e97985fcc8561bbb1cd52d3e8de6452</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::DeformableSurfaceModel</name>
    <filename>classmirtk_1_1DeformableSurfaceModel.html</filename>
    <base>mirtk::ObjectiveFunction</base>
    <member kind="function">
      <type>void</type>
      <name>Add</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a0127869de908da1574e7b793530025c6</anchor>
      <arglist>(class ExternalForce *, bool=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Add</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>aba2abb49fb3e2267146e2f02aaa0264f</anchor>
      <arglist>(class InternalForce *, bool=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Add</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>ab13c04608828bdc84d5c11bbfa362187</anchor>
      <arglist>(TransformationConstraint *, bool=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>af079c3f60a10cad3526a1ca7105932d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DeformableSurfaceModel</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>ad27aa14fc6a2f8c73fb7e5604a4e9095</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Empty</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a10b80ddb00d7f21911705bd511e006e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>ad08f5eb8447c7d07e49131d9a3c85c85</anchor>
      <arglist>(double *dx=NULL, double step=.0, bool *sgn_chg=NULL)</arglist>
    </member>
    <member kind="function">
      <type>class ExternalForce *</type>
      <name>ExternalForce</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a356a3b6bde6c6fabf5c117760ea3365e</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const class ExternalForce *</type>
      <name>ExternalForce</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>aeb777dbe39f005b1a1caf19590995cbe</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>ad7227c4d00e9714aac4f82eb9c75f09e</anchor>
      <arglist>(double *x) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a8238d235f4682fb2aadd392186d54921</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Gradient</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a7637a86c3573025cffe63b1ed0c06eb5</anchor>
      <arglist>(double *dx, double step=.0, bool *sgn_chg=NULL)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GradientNorm</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a0846e31196dd63e61ea172b5fbe21a3d</anchor>
      <arglist>(const double *) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GradientStep</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a13a4a315edec38299d3343b69174c865</anchor>
      <arglist>(const double *dx, double &amp;min, double &amp;max) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>ac060d03bb6f6c45a2e39db90c529e47b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>InitialValue</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>aefb82c293e53cd732e6d6bc4e8d5d720</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>InitialValue</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a591eb6b25fe667124932271ed8f3e8f8</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>class InternalForce *</type>
      <name>InternalForce</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a65aa26d867d0860ee6463bcae8d92fdc</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const class InternalForce *</type>
      <name>InternalForce</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a8427dcbc06d2a4ee8352397c009dea16</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsExternalForce</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>ab5a6d0063a3778b0d1c96fc9380b6dac</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsImplicitSurfaceForce</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a5ca41a79aebb999cb5a45fd56abdf304</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInternalForce</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a8f952afc8eae84c31f6324dfcdc31379</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumberOfDOFs</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a27fdbe628d1808cbc445732f0f713db1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfExternalForces</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>abfb1bca31d161cac8ff70bf881424918</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfForces</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a2bd96073c1866e0b20d8623718e75911</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfInternalForces</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a0b5ee08da3d516e15e7015ef486b531c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfPoints</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a496cf577754f83ef748ee98e38ccd6cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>vtkSmartPointer&lt; vtkPointSet &gt;</type>
      <name>Output</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a08afd563e1ecf389ac0dc64898e962a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>aef6b6450d43c14eb835ce88b6d2cd997</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>ae896c3e209803e33df2f77ce88010d52</anchor>
      <arglist>(const double *x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RawValue</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>ae0dd302df3ef978374b59bd8e33f05c1</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Remesh</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a7c0ef6fc454fa727e8361a5c760ab43d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a8a2a3f540f28fb6865344cfe7bab0f9d</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Step</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a8079710a926510dfa88b856c820f5052</anchor>
      <arglist>(double *dx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Sub</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>af205216833d770ee0976c46eeb390499</anchor>
      <arglist>(class ExternalForce *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Sub</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a360684f3e55d26ad46791d09483c70a3</anchor>
      <arglist>(class InternalForce *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Sub</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a99b562079f35748f121de0c895080340</anchor>
      <arglist>(TransformationConstraint *)</arglist>
    </member>
    <member kind="function">
      <type>EnergyTerm *</type>
      <name>Term</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a014f18f9d8364fa7b521b35f0ad6422d</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const EnergyTerm *</type>
      <name>Term</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a6e81ed17d82236bdd29b435548f45dcd</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a9e95792c62524a90943553c2e4758cf3</anchor>
      <arglist>(bool=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Upgrade</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a8b6681d2366825a5958ae4c59af4dddc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Value</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a9c0473ea0d4407855886f95823c754c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Value</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>aef8dddfad026c0ece1b45ee9c913c16f</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteDataSets</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a81e4a4c063ea234a1ddf7867fb0c66ff</anchor>
      <arglist>(const char *, const char *, bool=true) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteGradient</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>abc939d04e10ac02935531d00234bc16b</anchor>
      <arglist>(const char *, const char *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DeformableSurfaceModel</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a2a252fcbe34f8142b38942b92a135ed1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual</type>
      <name>~ObjectiveFunction</name>
      <anchorfile>classmirtk_1_1ObjectiveFunction.html</anchorfile>
      <anchor>a31980bb0fcca66494f1a764e7fd5626a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>IsExternalForce</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a4d8acaf338de68b0a29085863926b65e</anchor>
      <arglist>(const EnergyTerm *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>IsImplicitSurfaceForce</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a85e7b554a5ae4390f9a202ab2c377860</anchor>
      <arglist>(const EnergyTerm *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>IsInternalForce</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a8e6469fac6499f0328489a9100440ea3</anchor>
      <arglist>(const EnergyTerm *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>EnforceHardConstraints</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>aecf10bf6ca81aad1ca2570979a253766</anchor>
      <arglist>(double *dx) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>SmoothGradient</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>aabecf8492dfd4153dde870b37c6c4a49</anchor>
      <arglist>(double *dx) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1ObjectiveFunction.html</anchorfile>
      <anchor>a493a30bc248b61fbefd024a99354f458</anchor>
      <arglist>(double, StepLength)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; vtkSmartPointer&lt; vtkPolyData &gt; &gt;</type>
      <name>_BoundaryConstraint</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>acf95fbf722197a571ec7fc14958827d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; TransformationConstraint * &gt;</type>
      <name>_Constraint</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a9560150865702da3d0a28eeb3104562a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; class ExternalForce * &gt;</type>
      <name>_ExternalForce</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a239fa7195b9c34d2c605a2bd02e34190</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; class InternalForce * &gt;</type>
      <name>_InternalForce</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>ab233e4ab5cd34577a391f5f70ad0db06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_LowPassCounter</name>
      <anchorfile>classmirtk_1_1DeformableSurfaceModel.html</anchorfile>
      <anchor>a40dc856e65269d973bf01297ab400c21</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::DifferenceOfCompositionLieBracketImageFilter3D</name>
    <filename>classmirtk_1_1DifferenceOfCompositionLieBracketImageFilter3D.html</filename>
    <templarg></templarg>
    <base>mirtk::LieBracketImageFilter</base>
    <member kind="function">
      <type></type>
      <name>DifferenceOfCompositionLieBracketImageFilter3D</name>
      <anchorfile>classmirtk_1_1DifferenceOfCompositionLieBracketImageFilter3D.html</anchorfile>
      <anchor>ad5d18a6d498ed58a7efc5594865b79af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1DifferenceOfCompositionLieBracketImageFilter3D.html</anchorfile>
      <anchor>a52e10a583e4297d4b87fea65ffcd64d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1DifferenceOfCompositionLieBracketImageFilter3D.html</anchorfile>
      <anchor>acdcb2b74536949bb7bdb42e3e46036d7</anchor>
      <arglist>(double[3], int, int, int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1DifferenceOfCompositionLieBracketImageFilter3D.html</anchorfile>
      <anchor>af6f343c396272f76ba0081b57681fca4</anchor>
      <arglist>(int, int, int, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Scaling</name>
      <anchorfile>classmirtk_1_1DifferenceOfCompositionLieBracketImageFilter3D.html</anchorfile>
      <anchor>aff7cc6302bff920c6d3f3b80abcc1067</anchor>
      <arglist>(int, double)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Scaling</name>
      <anchorfile>classmirtk_1_1DifferenceOfCompositionLieBracketImageFilter3D.html</anchorfile>
      <anchor>a7617bff2222b9f716e3bdaa43a535ae5</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DifferenceOfCompositionLieBracketImageFilter3D</name>
      <anchorfile>classmirtk_1_1DifferenceOfCompositionLieBracketImageFilter3D.html</anchorfile>
      <anchor>a9628566825444c5a891dff93c30ca71b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ImageType *</type>
      <name>GetInput</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter.html</anchorfile>
      <anchor>a4800edb4176aef40ba6f1a063b08f77c</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Input</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter.html</anchorfile>
      <anchor>a120188679d1a9075b2023f857b750c8b</anchor>
      <arglist>(int, const ImageType *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ImageType *</type>
      <name>Input</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter.html</anchorfile>
      <anchor>a13a8a2e530498918c1a66e26e9563ae5</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LieBracketImageFilter</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter.html</anchorfile>
      <anchor>a3e377a881c19a37895a3bc6edd6adbb9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1DifferenceOfCompositionLieBracketImageFilter3D.html</anchorfile>
      <anchor>a6c98bb9fb5f5e24d38b73808cda2808a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LieBracketImageFilter</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter.html</anchorfile>
      <anchor>a7bf844d91d12158dfdf64a08c09651cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Finalize</name>
      <anchorfile>classmirtk_1_1ImageToImage.html</anchorfile>
      <anchor>a7bdc1fa457bcf59bf64e8566aac6f9ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_Scaling</name>
      <anchorfile>classmirtk_1_1DifferenceOfCompositionLieBracketImageFilter3D.html</anchorfile>
      <anchor>acc2265ca5be317745cdd892a4a00b57b</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ImageType *</type>
      <name>_Input2</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter.html</anchorfile>
      <anchor>a721e48df3a037d3a4b9068f409013246</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LieBracketImageFilter *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter.html</anchorfile>
      <anchor>ab451bfc0692feb376fe2d69ab19144fc</anchor>
      <arglist>(const ImageAttributes &amp;, bool=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LieBracketImageFilter *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter.html</anchorfile>
      <anchor>a80053800ba0bebec444f44218f1fe974</anchor>
      <arglist>(const BaseImage *, bool=true)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::Dilation</name>
    <filename>classmirtk_1_1Dilation.html</filename>
    <templarg>TVoxel</templarg>
    <base>mirtk::ImageToImage</base>
    <member kind="function">
      <type></type>
      <name>Dilation</name>
      <anchorfile>classmirtk_1_1Dilation.html</anchorfile>
      <anchor>af825292e938b677df995ed0934eec073</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1Dilation.html</anchorfile>
      <anchor>aefd4fe3c30c9212d5afd6e1fcb107e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Dilation</name>
      <anchorfile>classmirtk_1_1Dilation.html</anchorfile>
      <anchor>a4ba41c84d49f16fb16fad36554124727</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1Dilation.html</anchorfile>
      <anchor>a7b0b8f34cd5a230952a662142160a6f7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::DiscreteMap</name>
    <filename>classmirtk_1_1DiscreteMap.html</filename>
    <base>mirtk::VolumetricMap</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1DiscreteMap.html</anchorfile>
      <anchor>a682894e1e75a13a088cbde339902ef6b</anchor>
      <arglist>(double &amp;x1, double &amp;y1, double &amp;z1, double &amp;x2, double &amp;y2, double &amp;z2) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteMap</name>
      <anchorfile>classmirtk_1_1DiscreteMap.html</anchorfile>
      <anchor>a3ee43dd77464f614cea602fbe7dd4787</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteMap</name>
      <anchorfile>classmirtk_1_1DiscreteMap.html</anchorfile>
      <anchor>ae22e7bf281da902b9f3540a980b4b2f3</anchor>
      <arglist>(const DiscreteMap &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1DiscreteMap.html</anchorfile>
      <anchor>a747b1850562687a257a60efb85b41c91</anchor>
      <arglist>(double *v, double x, double y, double z=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1DiscreteMap.html</anchorfile>
      <anchor>ac5e6db13027832d01039ebb58be0ac82</anchor>
      <arglist>(double x, double y, double z=0, int l=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1DiscreteMap.html</anchorfile>
      <anchor>ae956099c482636025580903ea1c73b08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VolumetricMap *</type>
      <name>NewCopy</name>
      <anchorfile>classmirtk_1_1DiscreteMap.html</anchorfile>
      <anchor>abb7f022046785377402654f651a158fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumberOfComponents</name>
      <anchorfile>classmirtk_1_1DiscreteMap.html</anchorfile>
      <anchor>aa8f9479edfd65ec3abee70504cca29fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DiscreteMap &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1DiscreteMap.html</anchorfile>
      <anchor>ac8c7d302fb974a92de6debac93b05840</anchor>
      <arglist>(const DiscreteMap &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1DiscreteMap.html</anchorfile>
      <anchor>abc5d4de27f9f941c3bacb0bfa4fbc80d</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1DiscreteMap.html</anchorfile>
      <anchor>a3f26947114cb0afcc6398da4d13bb813</anchor>
      <arglist>(const char *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DiscreteMap</name>
      <anchorfile>classmirtk_1_1DiscreteMap.html</anchorfile>
      <anchor>a3caefdff1eb5bc4fa936e02e3538aca3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>ReadMap</name>
      <anchorfile>classmirtk_1_1VolumetricMap.html</anchorfile>
      <anchor>ad819f77b1313cd1a1831eed2175c4eb0</anchor>
      <arglist>(Cifstream &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteMap</name>
      <anchorfile>classmirtk_1_1VolumetricMap.html</anchorfile>
      <anchor>ae0ae6b5b2ee36cc0a80af4065cbd2873</anchor>
      <arglist>(Cofstream &amp;) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::DisplacementToVelocityField</name>
    <filename>classmirtk_1_1DisplacementToVelocityField.html</filename>
    <templarg>TVoxel</templarg>
    <base>mirtk::ImageToImage</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DisplacementToVelocityField</name>
      <anchorfile>classmirtk_1_1DisplacementToVelocityField.html</anchorfile>
      <anchor>a9b941a5442c6e4abf505fc5e1c9ad014</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1ImageToImage.html</anchorfile>
      <anchor>a24f7c58a556ba64263f04d04322fe062</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DisplacementToVelocityField</name>
      <anchorfile>classmirtk_1_1DisplacementToVelocityField.html</anchorfile>
      <anchor>ac46bab4d0ace06a058dfd0f41300231b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1ImageToImage.html</anchorfile>
      <anchor>ab13e82af173b290188077d36922f3698</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::DisplacementToVelocityFieldBCH</name>
    <filename>classmirtk_1_1DisplacementToVelocityFieldBCH.html</filename>
    <templarg>VoxelType</templarg>
    <base>DisplacementToVelocityField&lt; VoxelType &gt;</base>
    <member kind="typedef">
      <type>VelocityToDisplacementField&lt; VoxelType &gt;</type>
      <name>ExponentialFilterType</name>
      <anchorfile>classmirtk_1_1DisplacementToVelocityFieldBCH.html</anchorfile>
      <anchor>af70a1e6602fae0dca23f5b70b39a96c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericImage&lt; VoxelType &gt;</type>
      <name>ImageType</name>
      <anchorfile>classmirtk_1_1DisplacementToVelocityFieldBCH.html</anchorfile>
      <anchor>a5e1ed071d553a299a2e9e9685bef5b8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericImage&lt; VoxelType &gt;</type>
      <name>ImageType</name>
      <anchorfile>classmirtk_1_1ImageToImage.html</anchorfile>
      <anchor>a00305d97368a382b1390575ba1b3b13c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VoxelType</type>
      <name>VoxelType</name>
      <anchorfile>classmirtk_1_1ImageToImage.html</anchorfile>
      <anchor>acf4bd8bb898039c1ec60e6199def2a5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DisplacementToVelocityFieldBCH</name>
      <anchorfile>classmirtk_1_1DisplacementToVelocityFieldBCH.html</anchorfile>
      <anchor>ab66145185e78cd557d0ff19de82a104f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ExponentialFilter</name>
      <anchorfile>classmirtk_1_1DisplacementToVelocityFieldBCH.html</anchorfile>
      <anchor>a01a382193aced6faac27f829f6ce6818</anchor>
      <arglist>(ExponentialFilterType *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NumberOfSteps</name>
      <anchorfile>classmirtk_1_1DisplacementToVelocityFieldBCH.html</anchorfile>
      <anchor>a70de144abee24be5fdf5d2009704d4cb</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfSteps</name>
      <anchorfile>classmirtk_1_1DisplacementToVelocityFieldBCH.html</anchorfile>
      <anchor>a42f7b928a18b0fe1fcd2b76495816e95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1DisplacementToVelocityFieldBCH.html</anchorfile>
      <anchor>a6fd22e2690d9aea39781f3c16854d7ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UpperIntegrationLimit</name>
      <anchorfile>classmirtk_1_1DisplacementToVelocityFieldBCH.html</anchorfile>
      <anchor>afcc7c8a40d78aa7b800427b718e760f2</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>UpperIntegrationLimit</name>
      <anchorfile>classmirtk_1_1DisplacementToVelocityFieldBCH.html</anchorfile>
      <anchor>a54f239e987f79226a95a1d34275eed07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DisplacementToVelocityFieldBCH</name>
      <anchorfile>classmirtk_1_1DisplacementToVelocityFieldBCH.html</anchorfile>
      <anchor>a1496ef620b38241d6279b903af2d2286</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DisplacementToVelocityField</name>
      <anchorfile>classmirtk_1_1DisplacementToVelocityField.html</anchorfile>
      <anchor>a9b941a5442c6e4abf505fc5e1c9ad014</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageToImage</name>
      <anchorfile>classmirtk_1_1ImageToImage.html</anchorfile>
      <anchor>ad8178f5ebe06619d7e05ca99c08da819</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>RequiresBuffering</name>
      <anchorfile>classmirtk_1_1ImageToImage.html</anchorfile>
      <anchor>acc2ae5e1522d69f9ef1c01fa4f97f650</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1ImageToImage.html</anchorfile>
      <anchor>a330d2ead06bcbcbb6a8cead8b38722f4</anchor>
      <arglist>(int, int, int, int=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ImageToImage</name>
      <anchorfile>classmirtk_1_1ImageToImage.html</anchorfile>
      <anchor>a28551fb003575de82b6015a11fbf9b8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Finalize</name>
      <anchorfile>classmirtk_1_1DisplacementToVelocityFieldBCH.html</anchorfile>
      <anchor>a48b9d346c33c1e08883624cea5157742</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1DisplacementToVelocityFieldBCH.html</anchorfile>
      <anchor>a0357970fd042151386d8dd28d279ae12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DisplacementToVelocityField</name>
      <anchorfile>classmirtk_1_1DisplacementToVelocityField.html</anchorfile>
      <anchor>ac46bab4d0ace06a058dfd0f41300231b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1ImageToImage.html</anchorfile>
      <anchor>af0128937402667f9572dfeee3d50d2d5</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAggregateMacro</name>
      <anchorfile>classmirtk_1_1ImageToImage.html</anchorfile>
      <anchor>a26c50174bc34f27bc33dc18feb64761a</anchor>
      <arglist>(ImageType, Buffer)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAggregateMacro</name>
      <anchorfile>classmirtk_1_1ImageToImage.html</anchorfile>
      <anchor>ad881dd9d4ebeb16a008cba3e7b24a20b</anchor>
      <arglist>(const ImageType, Input)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAggregateMacro</name>
      <anchorfile>classmirtk_1_1ImageToImage.html</anchorfile>
      <anchor>a1bf258919bc034578cd33e9247579bc4</anchor>
      <arglist>(ImageType, Output)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::DistanceErrorFunction</name>
    <filename>classmirtk_1_1DistanceErrorFunction.html</filename>
    <base>mirtk::RadialErrorFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Derivative</name>
      <anchorfile>classmirtk_1_1DistanceErrorFunction.html</anchorfile>
      <anchor>aed55b0b6f9e4e64d8075ccfd240c8785</anchor>
      <arglist>(double d) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DistanceErrorFunction</name>
      <anchorfile>classmirtk_1_1DistanceErrorFunction.html</anchorfile>
      <anchor>ab947bfdcbf236bb408222de1e738b44e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DistanceErrorFunction</name>
      <anchorfile>classmirtk_1_1DistanceErrorFunction.html</anchorfile>
      <anchor>af984aa81333c2fbf97f019a9d4dcb2bd</anchor>
      <arglist>(const DistanceErrorFunction &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RadialErrorFunction *</type>
      <name>NewInstance</name>
      <anchorfile>classmirtk_1_1DistanceErrorFunction.html</anchorfile>
      <anchor>a0f7e91789a2ce15e05226f9b07ee149e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TypeId</type>
      <name>Type</name>
      <anchorfile>classmirtk_1_1DistanceErrorFunction.html</anchorfile>
      <anchor>a7284aba1bd562bb8bd544cf859e5d64b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Value</name>
      <anchorfile>classmirtk_1_1DistanceErrorFunction.html</anchorfile>
      <anchor>a5133f0385f29db0b5b1d861919577950</anchor>
      <arglist>(double d) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DistanceErrorFunction</name>
      <anchorfile>classmirtk_1_1DistanceErrorFunction.html</anchorfile>
      <anchor>adafd77b84aabc3c4687f46ccad294adf</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::double2x2</name>
    <filename>structmirtk_1_1double2x2.html</filename>
  </compound>
  <compound kind="struct">
    <name>mirtk::double3x3</name>
    <filename>structmirtk_1_1double3x3.html</filename>
  </compound>
  <compound kind="struct">
    <name>mirtk::double3x4</name>
    <filename>structmirtk_1_1double3x4.html</filename>
  </compound>
  <compound kind="struct">
    <name>mirtk::double4x4</name>
    <filename>structmirtk_1_1double4x4.html</filename>
  </compound>
  <compound kind="class">
    <name>mirtk::Downsampling</name>
    <filename>classmirtk_1_1Downsampling.html</filename>
    <templarg></templarg>
    <base>mirtk::ImageToImage</base>
    <member kind="function">
      <type></type>
      <name>Downsampling</name>
      <anchorfile>classmirtk_1_1Downsampling.html</anchorfile>
      <anchor>a8e1b7ed7e976c63a3a7b0a51c8c2676b</anchor>
      <arglist>(int=2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Downsampling</name>
      <anchorfile>classmirtk_1_1Downsampling.html</anchorfile>
      <anchor>ad68f1a0f603f550c9d4586ba55a96c9f</anchor>
      <arglist>(int, int, int=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Kernel</name>
      <anchorfile>classmirtk_1_1Downsampling.html</anchorfile>
      <anchor>a6836214e4d681c5b64e9709cc3c93e2d</anchor>
      <arglist>(ScalarFunction *, int, bool=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1Downsampling.html</anchorfile>
      <anchor>a71d2f9295edef64bf69316f883144716</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>DiscreteKernel</name>
      <anchorfile>classmirtk_1_1Downsampling.html</anchorfile>
      <anchor>aff86809a4823f4741471684bb6dfa3c5</anchor>
      <arglist>(GenericImage&lt; RealPixel &gt; &amp;, double)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1Downsampling.html</anchorfile>
      <anchor>a028522a0f315d28188868b6aa1a7f128</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::EdgeConnectivity</name>
    <filename>classmirtk_1_1EdgeConnectivity.html</filename>
    <base>GenericSparseMatrix&lt; int &gt;</base>
    <member kind="function">
      <type></type>
      <name>EdgeConnectivity</name>
      <anchorfile>classmirtk_1_1EdgeConnectivity.html</anchorfile>
      <anchor>a9250cc45dbd9c8ce79d83336cc023267</anchor>
      <arglist>(vtkDataSet *=NULL, int n=3, const EdgeTable *=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeConnectivity</name>
      <anchorfile>classmirtk_1_1EdgeConnectivity.html</anchorfile>
      <anchor>a411e35d15b43010a28db1c0ff210f60b</anchor>
      <arglist>(const EdgeConnectivity &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetAdjacentPoints</name>
      <anchorfile>classmirtk_1_1EdgeConnectivity.html</anchorfile>
      <anchor>a38b61ea5cfae2253382c262c524e809e</anchor>
      <arglist>(int, int &amp;, const int *&amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetAdjacentPoints</name>
      <anchorfile>classmirtk_1_1EdgeConnectivity.html</anchorfile>
      <anchor>a8569b490ed9832289c2d903e709a7ae0</anchor>
      <arglist>(int, const int *&amp;, const int *&amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetConnectedPoints</name>
      <anchorfile>classmirtk_1_1EdgeConnectivity.html</anchorfile>
      <anchor>a9f1b01b1f5b55962cd6022398ad70507</anchor>
      <arglist>(int, int &amp;, const int *&amp;, int n=-1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetConnectedPoints</name>
      <anchorfile>classmirtk_1_1EdgeConnectivity.html</anchorfile>
      <anchor>ade475dc6328761bac5b88b2a67691b74</anchor>
      <arglist>(int, const int *&amp;, const int *&amp;, int n=-1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1EdgeConnectivity.html</anchorfile>
      <anchor>a99190ce5921316a68cbcec71eec89977</anchor>
      <arglist>(vtkDataSet *, int n=3, const EdgeTable *=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1EdgeConnectivity.html</anchorfile>
      <anchor>a0e0cff332bd0b31f448e36f66bbe17c0</anchor>
      <arglist>(vtkDataSet *, double r, const EdgeTable *=NULL)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfAdjacentPoints</name>
      <anchorfile>classmirtk_1_1EdgeConnectivity.html</anchorfile>
      <anchor>a066845d19a78ae4dee20b4efe67f3015</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfConnectedPoints</name>
      <anchorfile>classmirtk_1_1EdgeConnectivity.html</anchorfile>
      <anchor>ad7fa5471ba934cf3f34d9271291a1292</anchor>
      <arglist>(int, int n=-1) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfPoints</name>
      <anchorfile>classmirtk_1_1EdgeConnectivity.html</anchorfile>
      <anchor>adf0a3a28487fe191d4d79b9e56f63bbf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>EdgeConnectivity &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1EdgeConnectivity.html</anchorfile>
      <anchor>a0315789a31582f501cc865fb4c03cfde</anchor>
      <arglist>(const EdgeConnectivity &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EdgeConnectivity</name>
      <anchorfile>classmirtk_1_1EdgeConnectivity.html</anchorfile>
      <anchor>a9fc5bbffae89e8c3c9c7d921260461a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a7abd49b2b63e86d3eb7e35b62f68bcdd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearIndex</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>afff824ea0deb0d05bd0eac7aa9843880</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Col</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>af12fb2917e57faa2eef61bc0ce80ccf7</anchor>
      <arglist>(int, Entries &amp;, bool=false)</arglist>
    </member>
    <member kind="function">
      <type>Entries</type>
      <name>Col</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a9ebb687ea262e46d35d839f934cdcf48</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ColNNZ</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>af522e2e0a204fec110c0f19a2d4b15df</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>EntryType</type>
      <name>ColSum</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a06516709c1aaf59dc0e2822186ee82e1</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Column</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>aae691e81aa15949002a1ceb42571c4ed</anchor>
      <arglist>(int, Entries &amp;, bool=false)</arglist>
    </member>
    <member kind="function">
      <type>Entries</type>
      <name>Column</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a17eba58029dca6fc49ea8b882a6d1f73</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>EntryType</type>
      <name>ColumnSum</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a724f4e658dfc834e9455df6ab70307ed</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>Diag</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a30d8e58ccd33f88262e1cff144bd04e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Diag</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a34f6a92909aa0a5b865bd432f2c557bd</anchor>
      <arglist>(const Vector &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Diag</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a59f18f0d7c3392046cb74fa4d992b7a5</anchor>
      <arglist>(intd)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Eigenvalues</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a53bb5003e380a39fe61d63f209e8f24f</anchor>
      <arglist>(Vector &amp;v, int k, const char *sigma=&quot;LM&quot;, int p=0, double tol=.0, int maxit=0, Vector *v0=NULL) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Eigenvectors</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a1802a7c54decc64b41a283a3579379fa</anchor>
      <arglist>(Matrix &amp;E, int k, const char *sigma=&quot;LM&quot;, int p=0, double tol=.0, int maxit=0, Vector *v0=NULL) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Eigenvectors</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a176785de7644ffcd6be49faae9e713ae</anchor>
      <arglist>(Matrix &amp;E, Vector &amp;v, int k, const char *sigma=&quot;LM&quot;, int p=0, double tol=.0, int maxit=0, Vector *v0=NULL) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericSparseMatrix</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>acdc70a479d25dc3128df16f1da152da1</anchor>
      <arglist>(StorageLayout=CCS)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericSparseMatrix</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a78af354b1ca414d33b104e4212cd0e21</anchor>
      <arglist>(int, int=0, StorageLayout=CCS)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericSparseMatrix</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>acd1cee9604d2c7c3fc958392eaeec9c5</anchor>
      <arglist>(int, int, int, StorageLayout=CCS)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericSparseMatrix</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a377c08d09b0c368835c3dbf6221d8a59</anchor>
      <arglist>(const GenericSparseMatrix&lt; TOtherEntry &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>EntryType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a0ae98bdd8cd275a1d589dca3b1079293</anchor>
      <arglist>(int, int=-1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetCol</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a91e4e52304ed63296523fdb6640aa031</anchor>
      <arglist>(int, Entries &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetColumn</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>afe8dcaa1b2d9575ea7999dbe5a2bb0b8</anchor>
      <arglist>(int, Entries &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetDiag</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a64482cce5c08e9821346ca3422f3448f</anchor>
      <arglist>(Vector &amp;d) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetRawData</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>acf67436b68c36bfd723570dbea516c49</anchor>
      <arglist>(int *&amp;, int *&amp;, int *&amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRow</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>aadaec8c5e6e105d411495137ae73ffa0</anchor>
      <arglist>(int, Entries &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Index</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a96110e8090bad42c8262ab128f1ae15c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a8aa80ad270c1339866a86a33875c1c14</anchor>
      <arglist>(int, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a5067c5d51dc54e2da9d96856c803d5bd</anchor>
      <arglist>(int, int, Array&lt; Entries &gt; &amp;, bool=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>ac56c40ac6b5a3b190bf2bc331f1844fc</anchor>
      <arglist>(int, int, Entries[], bool=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSymmetric</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a59b9bb9133e560133dea1c41e32a50ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Layout</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a4cb02b5e3c2f7f659346dd1ec04ff364</anchor>
      <arglist>(StorageLayout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MakeSymmetric</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a3cf9bff747b6516ec3767af54bb9c8a7</anchor>
      <arglist>(bool extent=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a5ec58e1852f9bb5372380040c33482ab</anchor>
      <arglist>(int, Size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a7a8d4c3e6afd5b96ad89b0ad1542764f</anchor>
      <arglist>(int, MaxNumberOfUnusedEntries)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a2acbd3dac538a6db5da3cf72ebc4fbd4</anchor>
      <arglist>(enum StorageLayout, Layout)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a8b13abd855644698b4a8088e1f09c613</anchor>
      <arglist>(int, Rows)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a4116690befe8531c88eb3002ef57cd5c</anchor>
      <arglist>(int, Cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a784b08520654453a43561ca5cf1855de</anchor>
      <arglist>(int, NNZ)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MultAv</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>ac295b3a755eda2a66c0ee3a707f58834</anchor>
      <arglist>(EntryType[], EntryType[]) const</arglist>
    </member>
    <member kind="function">
      <type>EntryType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a2da8f978cd5922263df9dba2955a7e49</anchor>
      <arglist>(int, int=-1)</arglist>
    </member>
    <member kind="function">
      <type>GenericSparseMatrix</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a4252fa3eac76af26cdea0eddf455da7d</anchor>
      <arglist>(EntryType) const</arglist>
    </member>
    <member kind="function">
      <type>GenericSparseMatrix &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>ad256011495a2ee67f3aa46518110fa70</anchor>
      <arglist>(EntryType)</arglist>
    </member>
    <member kind="function">
      <type>GenericSparseMatrix</type>
      <name>operator/</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a3682957549ee7abffe3587d14cbbc4e6</anchor>
      <arglist>(EntryType) const</arglist>
    </member>
    <member kind="function">
      <type>GenericSparseMatrix &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a83e1e1122cd5023859a966f7f997cdde</anchor>
      <arglist>(EntryType)</arglist>
    </member>
    <member kind="function">
      <type>GenericSparseMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a683b63878e88997aa5719e9418ce2672</anchor>
      <arglist>(const GenericSparseMatrix&lt; TOtherEntry &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a914edc41c9f14fd46a3995ff8d4ddffb</anchor>
      <arglist>(int, int, EntryType)</arglist>
    </member>
    <member kind="function">
      <type>int *</type>
      <name>RawPointer</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a463bd76c158f88d218e6665e0a674190</anchor>
      <arglist>(int=0)</arglist>
    </member>
    <member kind="function">
      <type>const int *</type>
      <name>RawPointer</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>ae7cf484f228fe2bd89ad5e06c3aa5cc4</anchor>
      <arglist>(int=0) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ReadMAT</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a6e772311a90ebd7e7937494b2c8f06f4</anchor>
      <arglist>(const char *, const char *=&quot;A&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RemoveZeros</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>ae5e117b7ddb2d1f6d24fcec27f2036e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reserve</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a2cba15218c56e3a2aaeab2a183f4439b</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Row</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a340b90c967b76513dfafe08f81c4065a</anchor>
      <arglist>(int, Entries &amp;, bool=false)</arglist>
    </member>
    <member kind="function">
      <type>Entries</type>
      <name>Row</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>abe47b83db6e96b1ab30e9e277b645203</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>RowNNZ</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a2d2163f3223c5c37d8a30a5ca8636d04</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>EntryType</type>
      <name>RowSum</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a190a258dadccab795eb9e726468a00a5</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>GenericSparseMatrix &amp;</type>
      <name>ScaleCol</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a5c6200a360c853e613ab75c541c74327</anchor>
      <arglist>(int, EntryType)</arglist>
    </member>
    <member kind="function">
      <type>GenericSparseMatrix &amp;</type>
      <name>ScaleColumn</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>ac9332516f897919ae472b96e94e7395c</anchor>
      <arglist>(int, EntryType)</arglist>
    </member>
    <member kind="function">
      <type>GenericSparseMatrix &amp;</type>
      <name>ScaleRow</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a2ff276de5a28c329fdedcd4e65df21b0</anchor>
      <arglist>(int, EntryType)</arglist>
    </member>
    <member kind="function">
      <type>GenericSparseMatrix</type>
      <name>Sub</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a1b4e6d54dff0209facd4993e8f1c1870</anchor>
      <arglist>(int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Sub</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a4e6a455d692fd7bc225e0efa9db22594</anchor>
      <arglist>(int, int, const GenericSparseMatrix &amp;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SubNNZ</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>ad0bb9efdb932fa894c17163799fb2dd9</anchor>
      <arglist>(int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Transpose</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>aea1f1c647aa34d0628ab3186b26a7d2e</anchor>
      <arglist>(bool keep_layout=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteMAT</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a30f13fcc2aa929a9271f28b894584b41</anchor>
      <arglist>(const char *, const char *=&quot;A&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WriteMFile</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>adadd2c09f21a03dedfacc9abd619d573</anchor>
      <arglist>(const char *, const char *=&quot;A&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Zero</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a4f6e977a7d62499146b0a5d0346830d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>Array&lt; Entry &gt;</type>
      <name>Entries</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>ad8f3d86aea04fbc2a39795fe46637a4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Pair&lt; int, int &gt;</type>
      <name>Entry</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a2b061953a85a2b047c02c97e6fcd2922</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>EntryType</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>ad8daecd8b5240942033b8f3b3a1c05ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>StorageLayout</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a6dd1f0cede7b141fa994dddf1436b5b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CheckEntries</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a6ce14ef41cb5e9247b8da2f7f4ebe55b</anchor>
      <arglist>(Entries &amp;) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CopyAttributes</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a1b25525b53e55a0491be67c86e0375f0</anchor>
      <arglist>(const GenericSparseMatrix&lt; TOtherEntry &gt; &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int *</type>
      <name>_Col</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a8c204a21a95563c47374dd0cc131aaa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EntryType *</type>
      <name>_Data</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a6e2509b792d5ed200e6558bb666d6f36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; int &gt; *</type>
      <name>_Index</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>ad6f531b061e0991ae2804cae06bc2112</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int *</type>
      <name>_Row</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a5bbea4a2edde46995a4573e872cdcd73</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::EdgeIterator</name>
    <filename>classmirtk_1_1EdgeIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>EdgeIterator</name>
      <anchorfile>classmirtk_1_1EdgeIterator.html</anchorfile>
      <anchor>a25b1fbbbd5fcbc7ce633d2af2d4263dc</anchor>
      <arglist>(const EdgeTable &amp;table)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetNextEdge</name>
      <anchorfile>classmirtk_1_1EdgeIterator.html</anchorfile>
      <anchor>abda364b6673077037abd6fb23d3a167b</anchor>
      <arglist>(IdType &amp;ptId1, IdType &amp;ptId2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitTraversal</name>
      <anchorfile>classmirtk_1_1EdgeIterator.html</anchorfile>
      <anchor>a894deb924f597cc8346685051219359f</anchor>
      <arglist>(int begin=0, int end=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitTraversal</name>
      <anchorfile>classmirtk_1_1EdgeIterator.html</anchorfile>
      <anchor>aa73ec4309f05e312a8043eb25a0d6ee7</anchor>
      <arglist>(const blocked_range&lt; IdType &gt; &amp;re)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::EdgeTable</name>
    <filename>classmirtk_1_1EdgeTable.html</filename>
    <base>GenericSparseMatrix&lt; int &gt;</base>
    <member kind="function">
      <type>int</type>
      <name>EdgeId</name>
      <anchorfile>classmirtk_1_1EdgeTable.html</anchorfile>
      <anchor>acbda1865e125265ce64cd4eaee05aea7</anchor>
      <arglist>(IdType1, IdType2) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeTable</name>
      <anchorfile>classmirtk_1_1EdgeTable.html</anchorfile>
      <anchor>acb6e2a1b50c3e84c9729a54728b451f0</anchor>
      <arglist>(vtkDataSet *=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeTable</name>
      <anchorfile>classmirtk_1_1EdgeTable.html</anchorfile>
      <anchor>acb69ea6ddeff9fa804b85eec991de382</anchor>
      <arglist>(const EdgeTable &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetAdjacentPoints</name>
      <anchorfile>classmirtk_1_1EdgeTable.html</anchorfile>
      <anchor>afe71628e78a1b372d3f7ba9b37984485</anchor>
      <arglist>(int, int &amp;, const int *&amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetAdjacentPoints</name>
      <anchorfile>classmirtk_1_1EdgeTable.html</anchorfile>
      <anchor>a00332fa68c7f3aec9615d490d15bcc93</anchor>
      <arglist>(int, const int *&amp;, const int *&amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetEdge</name>
      <anchorfile>classmirtk_1_1EdgeTable.html</anchorfile>
      <anchor>a01fa7692cc0aa19e402a2eaa1e6ff449</anchor>
      <arglist>(EdgeIdType, IdType1 &amp;ptId1, IdType2 &amp;ptId2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1EdgeTable.html</anchorfile>
      <anchor>ac5eb60b6074f3f1af9bc20a09cbbebd3</anchor>
      <arglist>(vtkDataSet *)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsEdge</name>
      <anchorfile>classmirtk_1_1EdgeTable.html</anchorfile>
      <anchor>ae66b47a31466e84a8a1a30f72302be9a</anchor>
      <arglist>(IdType1, IdType2) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfAdjacentPoints</name>
      <anchorfile>classmirtk_1_1EdgeTable.html</anchorfile>
      <anchor>a50f870f85a2c1f29f78da084a5d3d4d3</anchor>
      <arglist>(IdType) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfPoints</name>
      <anchorfile>classmirtk_1_1EdgeTable.html</anchorfile>
      <anchor>a692a304d36e12e80840ddfbff9d31dcd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>EdgeTable &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1EdgeTable.html</anchorfile>
      <anchor>aca9cc305cec43781bd264f0fe7de1f7c</anchor>
      <arglist>(const EdgeTable &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EdgeTable</name>
      <anchorfile>classmirtk_1_1EdgeTable.html</anchorfile>
      <anchor>a15215c4e3362c8078725f0c9550df3c4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::EnergyTerm</name>
    <filename>classmirtk_1_1EnergyTerm.html</filename>
    <base>mirtk::Configurable</base>
  </compound>
  <compound kind="class">
    <name>mirtk::EnergyThreshold</name>
    <filename>classmirtk_1_1EnergyThreshold.html</filename>
    <base>mirtk::StoppingCriterion</base>
    <member kind="function">
      <type></type>
      <name>EnergyThreshold</name>
      <anchorfile>classmirtk_1_1EnergyThreshold.html</anchorfile>
      <anchor>a5816ec6f283e33f0911e2c375775bbbb</anchor>
      <arglist>(const ObjectiveFunction *=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EnergyThreshold</name>
      <anchorfile>classmirtk_1_1EnergyThreshold.html</anchorfile>
      <anchor>a96b4cd430d00ea172be28cd43539d50a</anchor>
      <arglist>(const EnergyThreshold &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Fulfilled</name>
      <anchorfile>classmirtk_1_1EnergyThreshold.html</anchorfile>
      <anchor>a91c4123acaf1f17a0d75aa7b2eddcde5</anchor>
      <arglist>(int iter, double prev, double value, const double *delta)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StoppingCriterion *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1EnergyThreshold.html</anchorfile>
      <anchor>ad3cd3c2b17c331b4ba883522bc385f78</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>EnergyThreshold &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1EnergyThreshold.html</anchorfile>
      <anchor>afc46ed8114df3ef6a84c58ded43b4ac8</anchor>
      <arglist>(const EnergyThreshold &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1EnergyThreshold.html</anchorfile>
      <anchor>a00df5cace839cf3f708fab7bf7048706</anchor>
      <arglist>(ostream &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EnergyThreshold</name>
      <anchorfile>classmirtk_1_1EnergyThreshold.html</anchorfile>
      <anchor>a34a50dc977a9786c20c4fc81e90bf750</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1StoppingCriterion.html</anchorfile>
      <anchor>ac4f58d778fea92e208508a631736731b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StoppingCriterion</name>
      <anchorfile>classmirtk_1_1StoppingCriterion.html</anchorfile>
      <anchor>a301b4f6609921f359917d38e598e1235</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>StoppingCriterion &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1StoppingCriterion.html</anchorfile>
      <anchor>afc41082953264aae8e323d32be180f6a</anchor>
      <arglist>(const StoppingCriterion &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>StoppingCriterion</name>
      <anchorfile>classmirtk_1_1StoppingCriterion.html</anchorfile>
      <anchor>aaf1ea37853fbc1903009dbbfaa00d311</anchor>
      <arglist>(const ObjectiveFunction *=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>StoppingCriterion</name>
      <anchorfile>classmirtk_1_1StoppingCriterion.html</anchorfile>
      <anchor>af60b98c419f10eaf55a7fafc32d97f01</anchor>
      <arglist>(const LocalOptimizer *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>StoppingCriterion</name>
      <anchorfile>classmirtk_1_1StoppingCriterion.html</anchorfile>
      <anchor>a1a78216534ee5b9f2bc30a4865ecd19f</anchor>
      <arglist>(const StoppingCriterion &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::Erosion</name>
    <filename>classmirtk_1_1Erosion.html</filename>
    <templarg>TVoxel</templarg>
    <base>mirtk::ImageToImage</base>
    <member kind="function">
      <type></type>
      <name>Erosion</name>
      <anchorfile>classmirtk_1_1Erosion.html</anchorfile>
      <anchor>a6f334143580d047c228dcfef9ad6ff62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1Erosion.html</anchorfile>
      <anchor>a290b7d21909bc605cbfac15c6534a05e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Erosion</name>
      <anchorfile>classmirtk_1_1Erosion.html</anchorfile>
      <anchor>a642fa826f572a460f3827df067abfd5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1Erosion.html</anchorfile>
      <anchor>a590b3c8d7aec6350001d94640f5c65ce</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::EulerMethod</name>
    <filename>classmirtk_1_1EulerMethod.html</filename>
    <base>mirtk::LocalOptimizer</base>
    <member kind="function">
      <type></type>
      <name>EulerMethod</name>
      <anchorfile>classmirtk_1_1EulerMethod.html</anchorfile>
      <anchor>ab8322bd16626f44ae1fef759bfcdd4a9</anchor>
      <arglist>(ObjectiveFunction *=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EulerMethod</name>
      <anchorfile>classmirtk_1_1EulerMethod.html</anchorfile>
      <anchor>a8320376efbd60d9affe3e2d43c749f3a</anchor>
      <arglist>(const EulerMethod &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1EulerMethod.html</anchorfile>
      <anchor>ae53a7cf4327c570b2089211b77aab62d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EulerMethod &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1EulerMethod.html</anchorfile>
      <anchor>aeff231e84bfd428f6fbce36a51de54c9</anchor>
      <arglist>(const EulerMethod &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1EulerMethod.html</anchorfile>
      <anchor>a89d86041e7561b54777391c86107c283</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1EulerMethod.html</anchorfile>
      <anchor>af8116f2d59212e535634ebaa3487230b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1EulerMethod.html</anchorfile>
      <anchor>a52af7d36bfba7434eb62ac6ba1de9e7f</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EulerMethod</name>
      <anchorfile>classmirtk_1_1EulerMethod.html</anchorfile>
      <anchor>a404d8eec359dd67f151509cd33985b0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Finalize</name>
      <anchorfile>classmirtk_1_1EulerMethod.html</anchorfile>
      <anchor>a5c247019cd5dd3dacadba8cae67d834e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>GradientNorm</name>
      <anchorfile>classmirtk_1_1EulerMethod.html</anchorfile>
      <anchor>a3d1c9630ee2d3c33019add4141c70063</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>RemeshModel</name>
      <anchorfile>classmirtk_1_1EulerMethod.html</anchorfile>
      <anchor>a9b1f8e07ceb2daa86cb08ad3e23b64db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>TruncateDisplacement</name>
      <anchorfile>classmirtk_1_1EulerMethod.html</anchorfile>
      <anchor>a5c133aeabfe6c28bae9aec0df188c592</anchor>
      <arglist>(bool force=false)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>UpdateDisplacement</name>
      <anchorfile>classmirtk_1_1EulerMethod.html</anchorfile>
      <anchor>a49447313f08774882d615eaafdc96382</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>UpdateNormalDisplacement</name>
      <anchorfile>classmirtk_1_1EulerMethod.html</anchorfile>
      <anchor>a65094be970169c150a31e98946b7d83c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::EulerMethodWithDamping</name>
    <filename>classmirtk_1_1EulerMethodWithDamping.html</filename>
    <base>mirtk::EulerMethod</base>
    <member kind="function">
      <type></type>
      <name>EulerMethodWithDamping</name>
      <anchorfile>classmirtk_1_1EulerMethodWithDamping.html</anchorfile>
      <anchor>a3afcd10768dc95e8ec8bcd24239923e0</anchor>
      <arglist>(ObjectiveFunction *=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EulerMethodWithDamping</name>
      <anchorfile>classmirtk_1_1EulerMethodWithDamping.html</anchorfile>
      <anchor>aea32acc1f289657180de8ef149934612</anchor>
      <arglist>(const EulerMethodWithDamping &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1EulerMethodWithDamping.html</anchorfile>
      <anchor>ae68adbd2f68d2dfd491eafdc1213edb9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EulerMethodWithDamping &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1EulerMethodWithDamping.html</anchorfile>
      <anchor>a3fa04566654d318708467e2e5c9467e4</anchor>
      <arglist>(const EulerMethodWithDamping &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1EulerMethodWithDamping.html</anchorfile>
      <anchor>a6f3bab5249d81e407f2e60e3174bc796</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1EulerMethodWithDamping.html</anchorfile>
      <anchor>abefdb0528840d9288c237a17ec917148</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>UpdateDisplacement</name>
      <anchorfile>classmirtk_1_1EulerMethodWithDamping.html</anchorfile>
      <anchor>ab1e0adaf6e885b8078a077dce2a62046</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EulerMethodWithDamping</name>
      <anchorfile>classmirtk_1_1EulerMethodWithDamping.html</anchorfile>
      <anchor>a3ca55eb6498c92454c05a5a4be8358b2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::EulerMethodWithMomentum</name>
    <filename>classmirtk_1_1EulerMethodWithMomentum.html</filename>
    <base>mirtk::EulerMethod</base>
    <member kind="function">
      <type></type>
      <name>EulerMethodWithMomentum</name>
      <anchorfile>classmirtk_1_1EulerMethodWithMomentum.html</anchorfile>
      <anchor>a9b9e804239eb9d009187a4a9f17682fa</anchor>
      <arglist>(ObjectiveFunction *=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EulerMethodWithMomentum</name>
      <anchorfile>classmirtk_1_1EulerMethodWithMomentum.html</anchorfile>
      <anchor>ac81fbef99546f0c2639eba5b02121a67</anchor>
      <arglist>(const EulerMethodWithMomentum &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1EulerMethodWithMomentum.html</anchorfile>
      <anchor>a9e1e2f4bb55a6c50c60f8cee3f719a60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EulerMethodWithMomentum &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1EulerMethodWithMomentum.html</anchorfile>
      <anchor>a3a2e02fa47fcbc1bb4501beac802fa3d</anchor>
      <arglist>(const EulerMethodWithMomentum &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1EulerMethodWithMomentum.html</anchorfile>
      <anchor>aa654a521ebe9c80a1acbacf3119692a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1EulerMethodWithMomentum.html</anchorfile>
      <anchor>a1ba871425259bc9cd1ccd28f43f980ba</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EulerMethodWithMomentum</name>
      <anchorfile>classmirtk_1_1EulerMethodWithMomentum.html</anchorfile>
      <anchor>a36cb91653353487d84598f1e17b60bea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>UpdateDisplacement</name>
      <anchorfile>classmirtk_1_1EulerMethodWithMomentum.html</anchorfile>
      <anchor>ac2b6a16fc8a5a82d52af5fed5751496e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>UpdateNormalDisplacement</name>
      <anchorfile>classmirtk_1_1EulerMethodWithMomentum.html</anchorfile>
      <anchor>ab67fd355db456bb5816a6580a2a2bdae</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::EvaluateBSplineSVFFD</name>
    <filename>classmirtk_1_1EvaluateBSplineSVFFD.html</filename>
    <base>mirtk::VoxelFunction</base>
    <member kind="variable" protection="protected">
      <type>const BSplineFreeFormTransformationSV *</type>
      <name>_Input</name>
      <anchorfile>classmirtk_1_1EvaluateBSplineSVFFD.html</anchorfile>
      <anchor>a865d861b17c80139c0104dcc27c8966d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseImage *</type>
      <name>_Output</name>
      <anchorfile>classmirtk_1_1EvaluateBSplineSVFFD.html</anchorfile>
      <anchor>ad6cc6195258b9693136f9b1252ef33f0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::EvaluateBSplineSVFFD3D</name>
    <filename>classmirtk_1_1EvaluateBSplineSVFFD3D.html</filename>
    <base>mirtk::VoxelFunction</base>
  </compound>
  <compound kind="class">
    <name>mirtk::EvaluateGlobalSVFFD</name>
    <filename>classmirtk_1_1EvaluateGlobalSVFFD.html</filename>
    <base>mirtk::VoxelFunction</base>
  </compound>
  <compound kind="class">
    <name>mirtk::EvaluateGlobalSVFFD3D</name>
    <filename>classmirtk_1_1EvaluateGlobalSVFFD3D.html</filename>
    <base>mirtk::VoxelFunction</base>
  </compound>
  <compound kind="class">
    <name>mirtk::EventDelegate</name>
    <filename>classmirtk_1_1EventDelegate.html</filename>
    <base>mirtk::Observer</base>
    <member kind="function">
      <type>void</type>
      <name>Bind</name>
      <anchorfile>classmirtk_1_1EventDelegate.html</anchorfile>
      <anchor>af0e7d1c03885ad4860a1ee64f56d27b1</anchor>
      <arglist>(Delegate0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Bind</name>
      <anchorfile>classmirtk_1_1EventDelegate.html</anchorfile>
      <anchor>a169637c58e130c739ec5bbc767e5babb</anchor>
      <arglist>(Delegate1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Bind</name>
      <anchorfile>classmirtk_1_1EventDelegate.html</anchorfile>
      <anchor>af5e2e2f8ad3352b8c7c877c02004906e</anchor>
      <arglist>(Delegate2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Bind</name>
      <anchorfile>classmirtk_1_1EventDelegate.html</anchorfile>
      <anchor>ab46e5e03c2e306c4234c8bbe5861e840</anchor>
      <arglist>(Delegate3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Bind</name>
      <anchorfile>classmirtk_1_1EventDelegate.html</anchorfile>
      <anchor>a567ed6454da12066fe43b8c7d64e2fd2</anchor>
      <arglist>(Event, Delegate0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Bind</name>
      <anchorfile>classmirtk_1_1EventDelegate.html</anchorfile>
      <anchor>a4c4d233606a562ce08f5e17f23444635</anchor>
      <arglist>(Event, Delegate1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Bind</name>
      <anchorfile>classmirtk_1_1EventDelegate.html</anchorfile>
      <anchor>ada680b8ae0a3626395bfde3fb3eb47d7</anchor>
      <arglist>(Event, Delegate2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Bind</name>
      <anchorfile>classmirtk_1_1EventDelegate.html</anchorfile>
      <anchor>a0f34f5edff1f13087d19668637b96e42</anchor>
      <arglist>(Event, Delegate3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EventDelegate</name>
      <anchorfile>classmirtk_1_1EventDelegate.html</anchorfile>
      <anchor>a23858bf02352b89262f9cb1cfb074111</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>HandleEvent</name>
      <anchorfile>classmirtk_1_1EventDelegate.html</anchorfile>
      <anchor>a7fe4d53b530ba79816f9ba959e6e74b4</anchor>
      <arglist>(Observable *, Event, const void *=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~EventDelegate</name>
      <anchorfile>classmirtk_1_1EventDelegate.html</anchorfile>
      <anchor>a4eef1fd0769fa919120f77fade7d7523</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ExternalForce</name>
    <filename>classmirtk_1_1ExternalForce.html</filename>
    <base>mirtk::PointSetForce</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1ExternalForce.html</anchorfile>
      <anchor>a28d4e76f438e007d173568a9e3d6bba6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1ExternalForce.html</anchorfile>
      <anchor>adf90c0164ffb266e22f87684f0b39968</anchor>
      <arglist>(bool=true)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateGradient</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>a769225f0fb176eaf3dc1d2d955266571</anchor>
      <arglist>(double *gradient, double step, double weight)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ExtrapolateImageFunction</name>
    <filename>classmirtk_1_1ExtrapolateImageFunction.html</filename>
    <base>mirtk::ImageFunction</base>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>GetAsDouble</name>
      <anchorfile>classmirtk_1_1ExtrapolateImageFunction.html</anchorfile>
      <anchor>a517a4f2de07bb5c9d3aadc7eacdf31c4</anchor>
      <arglist>(int, int, int=0, int=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1ExtrapolateImageFunction.html</anchorfile>
      <anchor>a027fe9744b12f7d8142c9977919480f8</anchor>
      <arglist>(Vector &amp;, int, int, int=0, int=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1ImageFunction.html</anchorfile>
      <anchor>a9306883cc059a96e52bd6943b20da5a9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::FastCubicBSplineInterpolateImageFunction</name>
    <filename>classmirtk_1_1FastCubicBSplineInterpolateImageFunction.html</filename>
    <base>GenericFastCubicBSplineInterpolateImageFunction&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>FastCubicBSplineInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1FastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a27d57cea863d4462f8435942e4e82c8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingInterval</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a383d8a46915cf45bf02893a2d50a3d79</anchor>
      <arglist>(double, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateJacobian</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ab5a17dfa7b2a0050db76f01c5dbccaf9</anchor>
      <arglist>(Matrix &amp;, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateJacobianInside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a91440c6f195e78f8442c71e78a042a3a</anchor>
      <arglist>(Matrix &amp;, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateJacobianOutside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a4e826c237bea40ca98948b521255aa29</anchor>
      <arglist>(Matrix &amp;, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericFastCubicBSplineInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>af8d3892487ac3b9bbb8406aa90ab35b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a3f88ecd8cefc0bc177844d232dd6d78c</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>af52c2a500ef59989ceb53a7a63b806da</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a9af4d3f3b7a4040f4dbb1c25a0916854</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>af12acca8f8c97f795ed31445cd1468fa</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a9f44a30567defef9033b28758240283c</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a50fcd3944cd3729298434352b4c14c2f</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a2bed2320c14b8184fab251ca5e05891c</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ac5fb63d7491fc0378f03d074c1b050da</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a309529628a107802346e7b3bea24da84</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside2D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ab1984fd552d11ec287e01c2b98b4c9f9</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside3D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a67edb335f5641f92e64554a764f66472</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside4D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a192607fcca9c73e42bf5a0201c3a8aea</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a3f0457ede146fa8e74146f8d51437f24</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a8991b9d687ddccf182f1a97c3537fd19</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a23d82a4542fa222dc21017662da5da1e</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a3bec28ae4f8da1acd140810e318fa47b</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ad38753b49fc907287222c485bda3bf88</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a6f9cac9a3e60200d96482b09a0a38779</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a3ee5106a4e6a1ba63871ba9db2ea2ceb</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a177d42bbc39f45c922e4bfa307f60b45</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>af22a3753031c9909fa4270615120ce2e</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>af621a0a8f12b39c17c82a333b5a1b70a</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a19f41886792050bddeb0fbd2019a30f6</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>aa9935117ddf9ec7fea46d235c7a89fcb</anchor>
      <arglist>(bool=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a3d0e14c6cfaf9d10490949d6c30d9bf9</anchor>
      <arglist>(Matrix &amp;, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a5e09f47d4ce3be55efe069e751c29d98</anchor>
      <arglist>(Matrix &amp;, const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian2D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a0f20e12f7bb0f7357b567d7d8b2e1ace</anchor>
      <arglist>(Matrix &amp;, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian2D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ad89f9f0df4e19bf1d7fd4e4f72dc7828</anchor>
      <arglist>(Matrix &amp;, const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian3D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a5d79355a2b3fdccc34dca833a22d4788</anchor>
      <arglist>(Matrix &amp;, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian3D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a3ba05a5cd0048e3078376d811ce16c3b</anchor>
      <arglist>(Matrix &amp;, const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian4D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>aefaebc7f83d3b5e024c751820a2cb6ca</anchor>
      <arglist>(Matrix &amp;, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian4D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>aeffb8ed8917fa9a4346e1b0243d403a9</anchor>
      <arglist>(Matrix &amp;, const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkAggregateMacro</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>adfde265b6226e7b2b3439d392332da18</anchor>
      <arglist>(CoefficientExtrapolator, InfiniteCoefficient)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a97203bad7342ec8490fda84c122136eb</anchor>
      <arglist>(CoefficientImage, Coefficient)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericFastCubicBSplineInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a52d2f8006b3153a9742ce29e6ccaf8a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_s2</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a6480adfe0bcfe2b5b9127b1e15bb2cf7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::FastCubicBSplineInterpolateImageFunction2D</name>
    <filename>classmirtk_1_1FastCubicBSplineInterpolateImageFunction2D.html</filename>
    <base>GenericFastCubicBSplineInterpolateImageFunction2D&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>FastCubicBSplineInterpolateImageFunction2D</name>
      <anchorfile>classmirtk_1_1FastCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a7a2c680a684009b45674b5a1e734badd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericFastCubicBSplineInterpolateImageFunction2D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a68bfe68a60b753f715910e322c69b8c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a9d4bea7719174525fb872306d9618fee</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a58b29a5081cc67f816e0d63f52020ce8</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>ad0a4f3a0274a9f880907f5a9ccf212bf</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>ac372440f78be4056730068dce0d244a5</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>af598dd1cb258e1399d42217b6d21ddbb</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>adddb0ddd29b15c0afa20e213317776bf</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a10a2f0422a178d1a7b607c53e3d778bf</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a1d076a6d68821449aa8be87bbbe8d49e</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::FastCubicBSplineInterpolateImageFunction3D</name>
    <filename>classmirtk_1_1FastCubicBSplineInterpolateImageFunction3D.html</filename>
    <base>GenericFastCubicBSplineInterpolateImageFunction3D&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>FastCubicBSplineInterpolateImageFunction3D</name>
      <anchorfile>classmirtk_1_1FastCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a08c2b09648b6811887830046343d075b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericFastCubicBSplineInterpolateImageFunction3D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a6ca167561c48ba2b795b0b374ed1e0f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>ac9770ea8b6b46912614e313d9f620697</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>af489057378c183256697e03877140ca0</anchor>
      <arglist>(const TOtherImage *, double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>acc9708db6703f971edb792e6ee19598b</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a150b3812ca5d5c56e1d51779c1410b05</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a6e19d3b22de440c75d613806c1fcc371</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a2a38b1fc4216445ea608362090e913a2</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a0f76c011f09250a0ef1bf3e615eb8b5b</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a4f4904aef0bb1976f26d8a37243b1730</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::FastCubicBSplineInterpolateImageFunction4D</name>
    <filename>classmirtk_1_1FastCubicBSplineInterpolateImageFunction4D.html</filename>
    <base>GenericFastCubicBSplineInterpolateImageFunction4D&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>FastCubicBSplineInterpolateImageFunction4D</name>
      <anchorfile>classmirtk_1_1FastCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>abebeca0611c30ef1f119b2788dc8fa08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericFastCubicBSplineInterpolateImageFunction4D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>ad3ef5e3f0dc7990234a911b7d880a416</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>ac3247899ed33f7538486c0e25e2fa56c</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>ac433532be8946c8b76840949e1f04f94</anchor>
      <arglist>(const TOtherImage *, double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a01c931516ab59de556e9663cca48b37e</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a12996f872c5ab4d3a2855b2bbcca9538</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>af0e864d70447f5a4b89341392104b376</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>ac8257e5c81e06427f37e6290b88276f2</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a6ac7a268d26e967214ab546e84713cc3</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a8c63017449566557d0a73afb845c335e</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::FastLinearImageGradientFunction</name>
    <filename>classmirtk_1_1FastLinearImageGradientFunction.html</filename>
    <base>GenericFastLinearImageGradientFunction&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>FastLinearImageGradientFunction</name>
      <anchorfile>classmirtk_1_1FastLinearImageGradientFunction.html</anchorfile>
      <anchor>aaaaee0601925b677f02db28bcdb2a300</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingInterval</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a2c4def1c1f6e9b2f98fa16f3b8d581ca</anchor>
      <arglist>(double, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericFastLinearImageGradientFunction</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>aeb624833f432a885fa1ea3d61985c830</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a85a77299e8b2c5d216d92fe8c2f1bc2e</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>ae4c7a0e1f7a52438215f82885216a022</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a4f20c60ceb4b0a93edc6c66b5cc51870</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>abbee14195d8bc45fa40c25f4d8376b78</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>adcdf47bcbc07de6860e5c7e7aba77208</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a3970b961f51dbc236e16553bdc9b365c</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>af0eef3669b7a1296c76c50be60354f34</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>ae743dcca02bb6ebf5e3cb5600c81f6e1</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a3449c39e0722431d965138ec8d747289</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>abdeeafb875b27a63fa5b0fa5ec5208c9</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a3f56fb7dc49c6e26b46f7df465ae2231</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>af4acf5bcd80aaf052bad2c08d98c4fb3</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a46104f7d15b79b0c9a50dd9b6c094858</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>aba7615f59d57ba1e83695c86aa31ead3</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>aba0ddc893ac6ab70501e5572f0866b8a</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>ac0b25a85bb331f061a25afe8b08b9332</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a5634658b3e9051aef5f2fd1431e47dca</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a5d6850c40c5af91d095cd4e04f8ddb53</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a266302444d3ed04195572478baeb58cd</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>add1926cc0b8ce7cd70eb6dd9182755ab</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a875e78dfe19ce8c2245aa0dff0ef8b00</anchor>
      <arglist>(bool=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericFastLinearImageGradientFunction</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a602b763d7dbef3cb68c90d33ecc0b627</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Extrapolator</name>
      <anchorfile>classmirtk_1_1GenericImageGradientFunction.html</anchorfile>
      <anchor>ac448fe7ac352b7f2a612b55eb50012ba</anchor>
      <arglist>(ExtrapolateImageFunction *, bool=false)</arglist>
    </member>
    <member kind="function">
      <type>ExtrapolatorType *</type>
      <name>Extrapolator</name>
      <anchorfile>classmirtk_1_1GenericImageGradientFunction.html</anchorfile>
      <anchor>a12fb9a728b809c9b9c331723555e2bdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ExtrapolatorType *</type>
      <name>Extrapolator</name>
      <anchorfile>classmirtk_1_1GenericImageGradientFunction.html</anchorfile>
      <anchor>a6cba982d7ce872b14ebe11179c638eed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Input</name>
      <anchorfile>classmirtk_1_1GenericImageGradientFunction.html</anchorfile>
      <anchor>a0a916f8a71539e086c4160fbd943cd9d</anchor>
      <arglist>(const BaseImage *)</arglist>
    </member>
    <member kind="function">
      <type>const ImageType *</type>
      <name>Input</name>
      <anchorfile>classmirtk_1_1GenericImageGradientFunction.html</anchorfile>
      <anchor>a5bef7cc8d85d3cd4a2f0ea99258e4937</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ExtrapolateImageFunction *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1GenericImageGradientFunction.html</anchorfile>
      <anchor>a9a5dc899bfe4001d9a78127343144b7d</anchor>
      <arglist>(enum ExtrapolationMode, const BaseImage *=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericImageGradientFunction</name>
      <anchorfile>classmirtk_1_1GenericImageGradientFunction.html</anchorfile>
      <anchor>a19c738073d95cc7a27febedaddd9e380</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a61cf53c206d973fa0b92830c8543195f</anchor>
      <arglist>(double, double, int &amp;, int &amp;, int &amp;, int &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>afbc0e17c353cba4e7e7b6d45d4d0d7f5</anchor>
      <arglist>(double, double, double, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a2389d5722846b6d2479e2936a5ee9a78</anchor>
      <arglist>(double, double, double, double, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a291f1e7a6964a7fa81dcca973cfc5702</anchor>
      <arglist>(double *, double, double, double=0, int=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateInside</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a52edc34be42c44517a8e1d74714bb865</anchor>
      <arglist>(double *, double, double, double=0, int=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateOutside</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a2c4bf9dc3f9d51797b533a06f95b2330</anchor>
      <arglist>(double *, double, double, double=0, int=1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateWithPadding</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>ae00ffef4bdecdbffac2b7cfed49265ab</anchor>
      <arglist>(double *, double, double, double=0, int=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateWithPaddingInside</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>af103a60b2ecede49312432213c9fdc25</anchor>
      <arglist>(double *, double, double, double=0, int=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a58a168f076c3856e6e84ac6a436b0ef2</anchor>
      <arglist>(double *, double, double, double=0, int=1) const </arglist>
    </member>
    <member kind="function">
      <type>enum ExtrapolationMode</type>
      <name>ExtrapolationMode</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a134ccc31811fc3055b367c46d67b623a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ExtrapolateImageFunction *</type>
      <name>Extrapolator</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a0c40cbb5e4df3aa66b809ab97ce7afa7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ExtrapolateImageFunction *</type>
      <name>Extrapolator</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>aa6a679bdce7d3a6b4d257e861bc6c2e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a7a32cb605bc5d985283060abbc2bd921</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetTOrigin</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>ab770825985f032fe33a1fc49c6f8f457</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>acbb185ed91649c4b040bc8f18bffe375</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>const BaseImage *</type>
      <name>Input</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>ad27c05d188c34fb0259b043ac50c85d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Inside</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a7d6f1c0276da880c51c3496889d8fe30</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Inside</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a1dd7c6e4d7aa29718038c93a85217d39</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Inside</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a55ca8575ab2edacd57ffded5197e6a50</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual enum InterpolationMode</type>
      <name>InterpolationMode</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a0cba83ceed09fef2b450eaf0fa01730c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsForeground</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a109816871082efacf3d8ac1de6eccd73</anchor>
      <arglist>(double, double) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsForeground</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>aba2472981163ef8c2d751093431fbad8</anchor>
      <arglist>(double, double, double) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsForeground</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>afe6cad3e8a4cdc04c4b2493ce1730098</anchor>
      <arglist>(double, double, double, double) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInside</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a94bf7ba32ae603c902a81b16ef25fd1a</anchor>
      <arglist>(double, double) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInside</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>ad31ed1eaf648d9f19d100e904b15db14</anchor>
      <arglist>(double, double, double) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInside</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>aa3edc17a52b7ab4816528e28829fc92d</anchor>
      <arglist>(double, double, double, double) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsOutside</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a615434ab3e176f40e2bd519227388643</anchor>
      <arglist>(double, double) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsOutside</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>ac25264c5efebd64eba031b7a0534d2f0</anchor>
      <arglist>(double, double, double) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsOutside</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>aa19a62b104a3cd52bfc06667e996aabc</anchor>
      <arglist>(double, double, double, double) const </arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>acc7486837104bb85e08a0a6eefb0cd5e</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WorldToImage</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>af9bca6800a8277cf706816701e38fb57</anchor>
      <arglist>(double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WorldToImage</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a961babf492b3acf09a00e08e97f12c75</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WorldToImage</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a900a3442d039885c68e6d25e080d304c</anchor>
      <arglist>(Point &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ImageGradientFunction</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>ac1956dcb0f99707aea6efef43f039e80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>Vector3D&lt; double &gt;</type>
      <name>GradientType</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a056a7cd6adc514024fb87df77fbc98ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GenericImageGradientFunction *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1GenericImageGradientFunction.html</anchorfile>
      <anchor>adb78f00058dc579a5e20ef1e113ca411</anchor>
      <arglist>(enum InterpolationMode, const BaseImage *=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GenericImageGradientFunction *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1GenericImageGradientFunction.html</anchorfile>
      <anchor>a6a254877d1e0e4ec9c92b8dc2ee8d475</anchor>
      <arglist>(enum InterpolationMode, enum ExtrapolationMode, const BaseImage *=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ImageGradientFunction *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a21ce74c57ff69c3fa71cd05563c908e9</anchor>
      <arglist>(enum InterpolationMode, const BaseImage *=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ImageGradientFunction *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>aad735ae0618ec64fdcdfff6c783ae314</anchor>
      <arglist>(enum InterpolationMode, enum ExtrapolationMode, const BaseImage *=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GenericImageGradientFunction</name>
      <anchorfile>classmirtk_1_1GenericImageGradientFunction.html</anchorfile>
      <anchor>a7dfd33fce8d4577776d20e58e712631e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ImageGradientFunction</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a1b8a3f066d3075f6e377b34d3ab0cffa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ImageGradientToWorld</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a2835d12ff57eef879712e2fbcaacd22c</anchor>
      <arglist>(GradientType &amp;) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ExtrapolateImageFunction *</type>
      <name>_InfiniteInput</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>ab456985fd67269ca4ed57339c6ad537e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_InfiniteInputOwner</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a95547c8d62f18ec23d3b85301b03e20b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseImage *</type>
      <name>_Input</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a9268a3d0dedc8a1325fca821da2e0b47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix</type>
      <name>_Orientation</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a9f876664d8c93541ac2605f39fc21b1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GradientType</type>
      <name>_VoxelSize</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a6c2f57a3ee46a717d389a33a8b6783ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_x1</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a5ff1cde28f9dfdbefca6a4053b578f78</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::FastLinearImageGradientFunction2D</name>
    <filename>classmirtk_1_1FastLinearImageGradientFunction2D.html</filename>
    <base>GenericFastLinearImageGradientFunction2D&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>FastLinearImageGradientFunction2D</name>
      <anchorfile>classmirtk_1_1FastLinearImageGradientFunction2D.html</anchorfile>
      <anchor>ababd7a8a1a14d2c8632738bd06b9880f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericFastLinearImageGradientFunction2D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction2D.html</anchorfile>
      <anchor>aefcd6b1b80bfba50f3dba6eb224d8d2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction2D.html</anchorfile>
      <anchor>a902389319634fa7bb2decc918490814b</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction2D.html</anchorfile>
      <anchor>ac08ff524067ddd5f8752fa051429f132</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction2D.html</anchorfile>
      <anchor>a5fbe0894a3314e3c71d87074d630d2a6</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction2D.html</anchorfile>
      <anchor>a3eba9d2a7562559f02f990433da96500</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction2D.html</anchorfile>
      <anchor>a9eaffd7728178dc7f7d8d477e83bc92b</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction2D.html</anchorfile>
      <anchor>a9bef1d766aa313a1066f47b2aacfda88</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction2D.html</anchorfile>
      <anchor>ae71878d2a8aa8897e8ea125bef5f7483</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction2D.html</anchorfile>
      <anchor>aed9696ad0eda92bb00b6ba2d80af0567</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::FastLinearImageGradientFunction3D</name>
    <filename>classmirtk_1_1FastLinearImageGradientFunction3D.html</filename>
    <base>GenericFastLinearImageGradientFunction3D&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>FastLinearImageGradientFunction3D</name>
      <anchorfile>classmirtk_1_1FastLinearImageGradientFunction3D.html</anchorfile>
      <anchor>ae22c5ef327ba5f3feeaf213b4aebb930</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericFastLinearImageGradientFunction3D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction3D.html</anchorfile>
      <anchor>aab9fbcbd9c101dd4266d051d70a08d10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction3D.html</anchorfile>
      <anchor>aa4e4614dd1eb2687006b15d1b058c15a</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction3D.html</anchorfile>
      <anchor>adc6d8917171a3b0157079cd25043cc78</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction3D.html</anchorfile>
      <anchor>a15885e2296eb5961c4df60a00f03c7e7</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction3D.html</anchorfile>
      <anchor>ae8ad4ab516645e25fcc04ed9009e3a30</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction3D.html</anchorfile>
      <anchor>a8b5e53a1b06c3f3044b2ce242d71d33e</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction3D.html</anchorfile>
      <anchor>a5de0ffc71f9e1e1f80b0673f2acc6a95</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction3D.html</anchorfile>
      <anchor>ad78db64fc00c018979fb28f72df1bdd9</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction3D.html</anchorfile>
      <anchor>afc757433062e913f634137bf1323f1d5</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::FiducialMatch</name>
    <filename>classmirtk_1_1FiducialMatch.html</filename>
    <base>mirtk::PointCorrespondence</base>
    <member kind="function">
      <type></type>
      <name>FiducialMatch</name>
      <anchorfile>classmirtk_1_1FiducialMatch.html</anchorfile>
      <anchor>aff93ecc4007f0d690e17fbee83bd63e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FiducialMatch</name>
      <anchorfile>classmirtk_1_1FiducialMatch.html</anchorfile>
      <anchor>a160fdc2b42ed586912729463c0631fc0</anchor>
      <arglist>(const FiducialMatch &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>GetInputSourcePoint</name>
      <anchorfile>classmirtk_1_1FiducialMatch.html</anchorfile>
      <anchor>a5a0077d17ffba90fd87967c5b93bad38</anchor>
      <arglist>(int, Point &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>GetInputTargetPoint</name>
      <anchorfile>classmirtk_1_1FiducialMatch.html</anchorfile>
      <anchor>a153f7ab3e46be0b9e1ce001b869cfc86</anchor>
      <arglist>(int, Point &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetSourceIndex</name>
      <anchorfile>classmirtk_1_1FiducialMatch.html</anchorfile>
      <anchor>a3422de496ed9ad5b5c34c588615218f4</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>GetSourcePoint</name>
      <anchorfile>classmirtk_1_1FiducialMatch.html</anchorfile>
      <anchor>a869ffbee0914d9b355ffddd07532cb4c</anchor>
      <arglist>(int, Point &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetTargetIndex</name>
      <anchorfile>classmirtk_1_1FiducialMatch.html</anchorfile>
      <anchor>a876e23d7ca3675bc1fd88ea96783af4d</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>GetTargetPoint</name>
      <anchorfile>classmirtk_1_1FiducialMatch.html</anchorfile>
      <anchor>aab41836a5a8c0ab948e4cab714b87a2a</anchor>
      <arglist>(int, Point &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1FiducialMatch.html</anchorfile>
      <anchor>a47f1babfe44465536ce228f52a1a36dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PointCorrespondence *</type>
      <name>NewInstance</name>
      <anchorfile>classmirtk_1_1FiducialMatch.html</anchorfile>
      <anchor>ae62a54c45a6a0234f62292748c8a5352</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1FiducialMatch.html</anchorfile>
      <anchor>aa0c1c6fbe9c5ba84925d3de3c66aa8bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1FiducialMatch.html</anchorfile>
      <anchor>a8674812c03f8eafc68fe05456eecb728</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TypeId</type>
      <name>Type</name>
      <anchorfile>classmirtk_1_1FiducialMatch.html</anchorfile>
      <anchor>a5c39549e5ef18329ae6c23301ddb2df0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FiducialMatch</name>
      <anchorfile>classmirtk_1_1FiducialMatch.html</anchorfile>
      <anchor>af6c056359e0ade6474d51dd4ae962c8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>aa6abd95f25fcd3a2e90403f7a3d82078</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Upgrade</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a7fd8285e5664ae554efce234f26f4377</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>InvertCorrespondenceMap</name>
      <anchorfile>classmirtk_1_1FiducialMatch.html</anchorfile>
      <anchor>ae15ff09cb820b11ae4348cc97897ea3b</anchor>
      <arglist>(const RegisteredPointSet *, const RegisteredPointSet *, const Array&lt; int &gt; &amp;, Array&lt; int &gt; &amp;) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ValidateCorrespondenceMap</name>
      <anchorfile>classmirtk_1_1FiducialMatch.html</anchorfile>
      <anchor>ab28f31bc56f6e578205d4a16c8dea37a</anchor>
      <arglist>(const RegisteredPointSet *, const RegisteredPointSet *, const Array&lt; int &gt; &amp;, const char *=NULL) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::FiducialRegistrationError</name>
    <filename>classmirtk_1_1FiducialRegistrationError.html</filename>
    <base>mirtk::PointCorrespondenceDistance</base>
    <member kind="function">
      <type></type>
      <name>FiducialRegistrationError</name>
      <anchorfile>classmirtk_1_1FiducialRegistrationError.html</anchorfile>
      <anchor>a39cd212d0a1f2551bc7efcfedd84e0aa</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FiducialRegistrationError</name>
      <anchorfile>classmirtk_1_1FiducialRegistrationError.html</anchorfile>
      <anchor>af9d09fb3b89536dd6a3afe304a447b18</anchor>
      <arglist>(const FiducialRegistrationError &amp;)</arglist>
    </member>
    <member kind="function">
      <type>FiducialRegistrationError &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1FiducialRegistrationError.html</anchorfile>
      <anchor>af9a7a93318bd1e97d279b7bc284adcad</anchor>
      <arglist>(const FiducialRegistrationError &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FiducialRegistrationError</name>
      <anchorfile>classmirtk_1_1FiducialRegistrationError.html</anchorfile>
      <anchor>ac6298b57e9404243ae64073c789d112a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DoEvaluateSourceError</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>ad97d92ad39b0de73449efd1846ec4478</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DoEvaluateTargetError</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>a5d2c69e4181c3d4a228a4743f0c262a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>a17f3ea2e21385ac2164390c1c3f0ee3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PointCorrespondenceDistance &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>a43acafcfaf25704ff75adf40db19097f</anchor>
      <arglist>(const PointCorrespondenceDistance &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>a4de6aeb6bb426c5577462f9af4f60bd0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PointCorrespondenceDistance</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>a03083447905c9b5df81d3ec86bee33db</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PointCorrespondenceDistance</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>a0028b8d7455603092adecdf0a77494b7</anchor>
      <arglist>(const PointCorrespondenceDistance &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Reinitialize</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>a55a742289c674140c065746c6da30000</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>a45d70e5334acc0af217fd1fcbf1c553b</anchor>
      <arglist>(bool=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Upgrade</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>a3d2f103d2a0159df8060517203d50e0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteDataSets</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>a55d87e03673d82f60aa1871ba6993aed</anchor>
      <arglist>(const char *, const char *, bool=true) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteGradient</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>a033079417acd8a0f991ba6836c76ea97</anchor>
      <arglist>(const char *, const char *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PointCorrespondenceDistance</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>a082513bcd9f83b581f420a75b5ca1d38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>aa637abc18c69e0e4b78b61ac6189945f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>EvaluateGradient</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>a1e1c8792a3f4e77fffe9b6a63b4628e7</anchor>
      <arglist>(double *gradient, double step, double weight)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ForwardEvent</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>a5e2cca25c7fdf4573e34d66fd5bce31d</anchor>
      <arglist>(Observable *, Event, const void *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>aa4e435eaa212bf56aed4eea331150afd</anchor>
      <arglist>(Array&lt; int &gt;, TargetSample)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>af2a88f8c3695a697aa4d93f9ebb2571f</anchor>
      <arglist>(Array&lt; int &gt;, SourceSample)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>aacc0b927699ee427f60df06b386464f2</anchor>
      <arglist>(int, NumberOfUpdates)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkComponentMacro</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>ae1289b9fd1fb679664b235703833a431</anchor>
      <arglist>(PointCorrespondence, Correspondence)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkComponentMacro</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>aebdd3375122a64a91d26cee3d178e318</anchor>
      <arglist>(RadialErrorFunction, ErrorFunction)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>a0e22ae936c4001aed63a2d73a506f14d</anchor>
      <arglist>(double, TargetSampleDistance)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>a27cb2405ca26dfb38808b4df1f9ffbbb</anchor>
      <arglist>(double, SourceSampleDistance)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>a7c0d27087763041cdae3c7a6a3190bab</anchor>
      <arglist>(int, NumberOfTargetSamples)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>a7d3976887b43fb7c92c27a0d1577060b</anchor>
      <arglist>(int, NumberOfSourceSamples)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>a92d319e3648939d9fe2c9720e400b2ac</anchor>
      <arglist>(int, UpdatePeriod)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>a47669765c201ebbee3325a32ab0c30c8</anchor>
      <arglist>(bool, EvaluateTargetError)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>a5c4a400bd55b767140b67bbe082e34fa</anchor>
      <arglist>(bool, EvaluateSourceError)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>NonParametricGradient</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>a9589cd848ca3231bd06b6dedc6457246</anchor>
      <arglist>(const RegisteredPointSet *source, GradientType *gradient)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>adc1f063e4224d57e34d4348459830b17</anchor>
      <arglist>(const RegisteredPointSet *source, const GradientType *np_gradient, double *gradient, double weight)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PointCorrespondenceDistance</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>aa45c9227d23748fb1f94bfa4ef98b998</anchor>
      <arglist>(const char *, double, PointCorrespondence *, RadialErrorFunction *=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SamplePoints</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>afe4511b870eb96184f676352f75ff6af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetWithoutPrefix</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>a7a1a6ed6f12d354bef1d3e5d4a98f701</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteDataSet</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>a77be68481862b19d3af0b61fb1cbd2ab</anchor>
      <arglist>(const char *, const RegisteredPointSet *, const Array&lt; int &gt; &amp;, const PointCorrespondence *) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EventDelegate</type>
      <name>_EventDelegate</name>
      <anchorfile>classmirtk_1_1PointCorrespondenceDistance.html</anchorfile>
      <anchor>a20710e5774b26cf707488aae6885ae4d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::float2x2</name>
    <filename>structmirtk_1_1float2x2.html</filename>
  </compound>
  <compound kind="struct">
    <name>mirtk::float3x3</name>
    <filename>structmirtk_1_1float3x3.html</filename>
  </compound>
  <compound kind="struct">
    <name>mirtk::float3x4</name>
    <filename>structmirtk_1_1float3x4.html</filename>
  </compound>
  <compound kind="struct">
    <name>mirtk::float4x4</name>
    <filename>structmirtk_1_1float4x4.html</filename>
  </compound>
  <compound kind="class">
    <name>mirtk::FluidFreeFormTransformation</name>
    <filename>classmirtk_1_1FluidFreeFormTransformation.html</filename>
    <base>mirtk::MultiLevelTransformation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Approximate</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>ad9f97722ac78a5ec390118d8e283742a</anchor>
      <arglist>(const ImageAttributes &amp;, double *, double *, double *, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Approximate</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>aac91afad413705649273a99a1b96e82e</anchor>
      <arglist>(const double *, const double *, const double *, double *, double *, double *, int, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Approximate</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>a7d0f15c593e8301855bf1cfa5428d222</anchor>
      <arglist>(const double *, const double *, const double *, const double *, double *, double *, double *, int, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApproximateAsNew</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>ac5bf97140062c5f32527284f45b3d217</anchor>
      <arglist>(const ImageAttributes &amp;, double *, double *, double *, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApproximateAsNew</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>ab67eb05df350f3cb47cd99ba803881c1</anchor>
      <arglist>(const double *, const double *, const double *, double *, double *, double *, int, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApproximateAsNew</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>a56b011fca58d35d94622600daf0e073c</anchor>
      <arglist>(const double *, const double *, const double *, const double *, double *, double *, double *, int, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateDOFs</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>a61ecd04e6d9d904ae381e3732ecd431d</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, const double *, int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateDOFsGradient</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>a40ca84a607486de1995424ad9db51937</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, const double *, int, double *, double=1.0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>CanRead</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>ac32caf903282d4ebd48548178e0c5901</anchor>
      <arglist>(TransformationType) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Clear</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>a7df310f527f0ce5f046be4508ea16003</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>CombineLocalTransformation</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>adbc61efe81a9cc7b4ec401bf9b783361</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>ae5559a99401431d895f7d8ac70107eea</anchor>
      <arglist>(const Transformation *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Displacement</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>ab244ea98685a88d2ef46cb2034087bcf</anchor>
      <arglist>(int, int, GenericImage&lt; double &gt; &amp;, double, double=-1, const WorldCoordsImage *=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Displacement</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>ab7e46b3245a8480491e68bf1645a610e</anchor>
      <arglist>(int, int, GenericImage&lt; float &gt; &amp;, double, double=-1, const WorldCoordsImage *=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>DOFBoundingBox</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>a1dc2373bf7b3864c89f19758aed06bb2</anchor>
      <arglist>(const Image *, int, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, double=1) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FluidFreeFormTransformation</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>a5cc23a54262cac522a5549d9f90bbb84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FluidFreeFormTransformation</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>aa5155df63f9b215151fb1635c937e5a4</anchor>
      <arglist>(const RigidTransformation &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FluidFreeFormTransformation</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>a99a49d3dffa83e3bae3f05fd10027d76</anchor>
      <arglist>(const AffineTransformation &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FluidFreeFormTransformation</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>aec6c5ee7acccb06dd1704d2424cc4563</anchor>
      <arglist>(const FluidFreeFormTransformation &amp;)</arglist>
    </member>
    <member kind="function">
      <type>AffineTransformation *</type>
      <name>GetAffineTransformation</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>aaedddfd140dec815b76daad490156aec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const AffineTransformation *</type>
      <name>GetAffineTransformation</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>af2d5c8ed16e9b36afc6f16c9d3c064ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Hessian</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>aec4b49fa2b1c5409c42d20de3828202c</anchor>
      <arglist>(int, int, Matrix[3], double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Inverse</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>af2454065c54b5840412e474abe38ae42</anchor>
      <arglist>(int, int, double &amp;, double &amp;, double &amp;, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InverseDisplacement</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>a72d5c7191ceb2ca8425ea90ad8990c22</anchor>
      <arglist>(int, int, GenericImage&lt; double &gt; &amp;, double, double=-1, const WorldCoordsImage *=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InverseDisplacement</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>a1889f5239e056c23a25cd3fa70e1678c</anchor>
      <arglist>(int, int, GenericImage&lt; float &gt; &amp;, double, double=-1, const WorldCoordsImage *=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsIdentity</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>a49fdce0737aa13d18bab9435c2c7f5d1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Jacobian</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>a1a531889ad5fe460badbf03de6e630e3</anchor>
      <arglist>(int, int, Matrix &amp;, double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>MergeGlobalIntoLocalDisplacement</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>a2fc676c4f59439989ad87bec428eeb30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>a380812d3ca729a0ffaedd007cff10ed2</anchor>
      <arglist>(const GenericImage&lt; double &gt; *, double *, const WorldCoordsImage *=NULL, const WorldCoordsImage *=NULL, double=-1, double=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>ad72b67023c0988ccbb46ec99c56df8b1</anchor>
      <arglist>(const PointSet &amp;, const Vector3D&lt; double &gt; *, double *, double=0, double=-1, double=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>a3c4bb1495dff20d85cba785f5569628e</anchor>
      <arglist>(Indent=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Reset</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>aa730ca8ebaa1c17c0f032b926533dd01</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Transform</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>a2e2f1a1d90d2b0a5a38e0232900beb9a</anchor>
      <arglist>(int, int, double &amp;, double &amp;, double &amp;, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FluidFreeFormTransformation</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>aa5a3eeafb9758acbb3b81021d62c2c7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Add</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a77c510592c82605906baa7cb12cb1ded</anchor>
      <arglist>(const DOFValue *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>BendingEnergy</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>aab505666d426f1b5826fd104bc24228b</anchor>
      <arglist>(int, int, double, double, double, double=0, double=-1, bool=true) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>BendingEnergy</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>ae67971a98dc7e0b4834b9d346674936d</anchor>
      <arglist>(int, double, double, double, double=0, double=-1, bool=true) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>BendingEnergy</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a7fc2f7374638a0d9c65361fe52e40ebf</anchor>
      <arglist>(double, double, double, double=0, double=-1, bool=true) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DeriveJacobianWrtDOF</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a7eab469a97b7d700be9e639e9819a595</anchor>
      <arglist>(Matrix &amp;, int, double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Displacement</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>aaa9175bc8e2f7400140baae51c0f7d38</anchor>
      <arglist>(int, int, double &amp;, double &amp;, double &amp;, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Displacement</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a395e81a1e8e7b2a848fcddec219b7b90</anchor>
      <arglist>(int, double &amp;, double &amp;, double &amp;, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Displacement</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>afdc9d329db3c0338fbe7e0d20c544139</anchor>
      <arglist>(int, int, GenericImage&lt; double &gt; &amp;, double=-1, const WorldCoordsImage *=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Displacement</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>adb914ba2f8c4e6809d659874f6ba7132</anchor>
      <arglist>(int, int, GenericImage&lt; float &gt; &amp;, double=-1, const WorldCoordsImage *=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Displacement</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a61ff50785ba732f68e04249c90e5da98</anchor>
      <arglist>(int, GenericImage&lt; double &gt; &amp;, double=-1, const WorldCoordsImage *=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Displacement</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a83107115769e32275a9d5ef8de2e0fec</anchor>
      <arglist>(int, GenericImage&lt; float &gt; &amp;, double=-1, const WorldCoordsImage *=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Displacement</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a200f5d49366c9f17e2ca91c18fb6d841</anchor>
      <arglist>(int, GenericImage&lt; double &gt; &amp;, double, double=-1, const WorldCoordsImage *=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Displacement</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>ac9ba3921ef7b41e41ed9dc127a236258</anchor>
      <arglist>(int, GenericImage&lt; float &gt; &amp;, double, double=-1, const WorldCoordsImage *=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Displacement</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a7e78cda4d6dcb938dca692d91df614d9</anchor>
      <arglist>(GenericImage&lt; double &gt; &amp;, double, double=-1, const WorldCoordsImage *=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Displacement</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a426ba5cdba7e54fbdcc536fddf9451d9</anchor>
      <arglist>(GenericImage&lt; float &gt; &amp;, double, double=-1, const WorldCoordsImage *=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>DOFGradientNorm</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>ac658c84b7e2662a4c335d8a402a3f852</anchor>
      <arglist>(const double *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a21151199f2c2f2da0cd69cf493ad121d</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>adfe9ef83f5b0325c9e54d2c974114bc4</anchor>
      <arglist>(DOFValue *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AffineTransformation *</type>
      <name>GetGlobalTransformation</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a1436c195cdb9948855d847e3e008ecd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const AffineTransformation *</type>
      <name>GetGlobalTransformation</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a096eedc95dbede98ce18ee6399124cd3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FreeFormTransformation *</type>
      <name>GetLocalTransformation</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>aebe5ba46bab187d22773cc81436b2e44</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const FreeFormTransformation *</type>
      <name>GetLocalTransformation</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a0ab31f608e7f51b9f7bb068bea04f0c5</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DOFStatus</type>
      <name>GetStatus</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a7b69ecf260d124a9475a7fa1dae88739</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GlobalHessian</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a2b7d2d10782b72cc791717ef037599ca</anchor>
      <arglist>(Matrix[3], double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GlobalInverse</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a06e23a0ebb06be421ff8676039309d62</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GlobalJacobian</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>af89b35a333d5dc573b4ad031030ae5f7</anchor>
      <arglist>(Matrix &amp;, double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GlobalTransform</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>ac6e4d61b80d4d381eda277a6b613ca54</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasSameDOFsAs</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a88b3335889a560538a745d46156aa8a6</anchor>
      <arglist>(const Transformation *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Hessian</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a0f1c5e668c7c3a18466e471161a86a87</anchor>
      <arglist>(int, Matrix[3], double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Hessian</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>affde4cfd4d6df79b223cd2299c1fa62d</anchor>
      <arglist>(Matrix[3], double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>InsertLocalTransformation</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>ac21bc430b231b867bc50f8b9c6a61e7f</anchor>
      <arglist>(FreeFormTransformation *, int=0, bool=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Inverse</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a7789476e87b020f58046ddab7f61e56a</anchor>
      <arglist>(int, double &amp;, double &amp;, double &amp;, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Inverse</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a3660d079da3b7e4a3186f5c8511bfdda</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>InverseDisplacement</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a9b15323ad92fd43caf0824b1f7a91198</anchor>
      <arglist>(int, int, double &amp;, double &amp;, double &amp;, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>InverseDisplacement</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a21e15ec40d4923c6c27e203b64b27967</anchor>
      <arglist>(int, double &amp;, double &amp;, double &amp;, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InverseDisplacement</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>ad659edc7d7aaf999e7f399931562ecfa</anchor>
      <arglist>(int, GenericImage&lt; double &gt; &amp;, double, double=-1, const WorldCoordsImage *=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InverseDisplacement</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>aa5cd45e49ee0f1316bee485c3aba0e10</anchor>
      <arglist>(int, GenericImage&lt; float &gt; &amp;, double, double=-1, const WorldCoordsImage *=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InverseDisplacement</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a11b638c4a34f8f4d573dcefd5d021781</anchor>
      <arglist>(GenericImage&lt; double &gt; &amp;, double, double=-1, const WorldCoordsImage *=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InverseDisplacement</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a4eec8c61e01e65689856bfbcfa1cc512</anchor>
      <arglist>(GenericImage&lt; float &gt; &amp;, double, double=-1, const WorldCoordsImage *=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Jacobian</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>ab6fa83de0cddafc4cb133fed998bbeff</anchor>
      <arglist>(int, Matrix &amp;, double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Jacobian</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a06d5d02abfca082baef0efba362e75a4</anchor>
      <arglist>(Matrix &amp;, double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Jacobian</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a11668465be082844bf65cc71c641c04f</anchor>
      <arglist>(int, int, double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Jacobian</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a9dfa6bab4106b31e03d591e6115b44a5</anchor>
      <arglist>(int, double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDOFs</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a1104f328986f79d7d4828b6df68cbcba</anchor>
      <arglist>(double[3], int, double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalDisplacement</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>aba603ed21a9342bebbba6159791456a2</anchor>
      <arglist>(int, int, double &amp;, double &amp;, double &amp;, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalDisplacement</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a4ee195b2c6b9ac608fe863553c6d07ab</anchor>
      <arglist>(int, double &amp;, double &amp;, double &amp;, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalHessian</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a2281478d9fe68c9efe8decc0ab4049fb</anchor>
      <arglist>(int, Matrix[3], double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalHessian</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a50f599bcf1f53d3572e1c2d07a044106</anchor>
      <arglist>(Matrix[3], double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>LocalInverse</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a44f8bd724ae53dc575b909929e22a42c</anchor>
      <arglist>(int, int, double &amp;, double &amp;, double &amp;, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>LocalInverse</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a7b1abd5ff92971850e8a31e12d86d121</anchor>
      <arglist>(int, double &amp;, double &amp;, double &amp;, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>LocalInverse</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a45ea18672067d4e3f2c718ee6ee941db</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>LocalInverseDisplacement</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>aaa93a9dd459c0624042a5e4693a92c4f</anchor>
      <arglist>(int, int, double &amp;, double &amp;, double &amp;, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>LocalInverseDisplacement</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a17724ea0494952ca2babf2e09517f9e8</anchor>
      <arglist>(int, double &amp;, double &amp;, double &amp;, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalJacobian</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a1f9c84165fa7453c8b8c7c8519717caf</anchor>
      <arglist>(int, Matrix &amp;, double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalJacobian</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a4d848103d15180cb74278fb33ec70c0f</anchor>
      <arglist>(Matrix &amp;, double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>LocalJacobian</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a10f6c854efb17c4788a82c9d65788215</anchor>
      <arglist>(int, double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalTransform</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a32293887cd36e6aeb34e1ddb6222dc58</anchor>
      <arglist>(int, int, double &amp;, double &amp;, double &amp;, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalTransform</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a1e0af92cba84c27fc0a91c52a44b39cc</anchor>
      <arglist>(int, double &amp;, double &amp;, double &amp;, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalTransform</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a7423e4904b6896a2b07d5cf9247cc7de</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>LocalTransformationIsActive</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a2648a3bba129c7e676c11ba85bdf225f</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalTransformationStatus</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a7c3f0b58ec8ff0d5c0b8b31aa805241e</anchor>
      <arglist>(int, FFDStatus)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FFDStatus</type>
      <name>LocalTransformationStatus</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a083d478b1ed117c71d476316f8219698</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumberOfActiveCPs</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>accd5d8f94f1495481da49f218ebef78d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumberOfActiveLevels</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a44c3a3789672dfbce1da9efe05550cc3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumberOfCPs</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a71fda8c977b1c81b6c027b3e090d9fe5</anchor>
      <arglist>(bool=false) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumberOfDOFs</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a3cbfd208cb3bd23ab19df5efe7fdf3b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumberOfLevels</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>ae99df741cfe0ab0791dcb0d860351dde</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumberOfPassiveLevels</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a6edb4f6688e912e57e40252167e79b1a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a319673cb8bd16627b73ec4cff21e083c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FreeFormTransformation *</type>
      <name>PopLocalTransformation</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a34104834d01b21e6242975317638dbe9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PushLocalTransformation</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>acd0df9468e25472e1cdf515190e8021f</anchor>
      <arglist>(FreeFormTransformation *, bool=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a1d10c2ec27d4c0a0e4023695704f5626</anchor>
      <arglist>(int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a1fc04369173d7c93de69d3ddcb54cfcf</anchor>
      <arglist>(const DOFValue *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FreeFormTransformation *</type>
      <name>PutLocalTransformation</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a6243d98e28a450d7ea1b0dc160b3b451</anchor>
      <arglist>(FreeFormTransformation *, int, bool=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutStatus</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a0b9049f1b374f2fd30161aed8981460d</anchor>
      <arglist>(int, DOFStatus)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FreeFormTransformation *</type>
      <name>RemoveLocalTransformation</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>ad4d9be932beecffff512f5c757e74f9a</anchor>
      <arglist>(int=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>RequiresCachingOfDisplacements</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a61cc155118e42602c3502cb6261df58b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>ac1cb343e68eebc01a36d73a84d473ea5</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Transform</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a5fe2f5b2812af52baa00a17f5a120329</anchor>
      <arglist>(int, double &amp;, double &amp;, double &amp;, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Transform</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>abee078fa973939cfc97b216f74fa6d85</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Transform</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a9c77e169cf4418b95fd7a95ec00b0a30</anchor>
      <arglist>(int, int, Point &amp;, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Transform</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>ad15c01ff5f4f738d9a07fbd006ae47de</anchor>
      <arglist>(int, Point &amp;, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Transform</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>adce9d642868a675b2be3051d9b1f8bd7</anchor>
      <arglist>(int, int, PointSet &amp;, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Transform</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a7efc56b4c2c110915c387aa8e609b89a</anchor>
      <arglist>(int, PointSet &amp;, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a9f508075202b66edc136d4c2b7b7c925</anchor>
      <arglist>(const DOFValue *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MultiLevelTransformation</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a61dcc560f9d8bf9ff9d45ca7a330e494</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>CheckTransformation</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>ae1941fdc5f00fe31bfdd96cddbf6deb1</anchor>
      <arglist>(FreeFormTransformation *) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Cifstream &amp;</type>
      <name>ReadDOFs</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>a5310b50774c795c8fd9fc202f84cdb92</anchor>
      <arglist>(Cifstream &amp;, TransformationType)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Cofstream &amp;</type>
      <name>WriteDOFs</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>a0039570b3b8870a8bf75502e97cfa93a</anchor>
      <arglist>(Cofstream &amp;) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>InterpolateGlobalDisplacement</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>ad3b37d9af0e66d83ff4cb81e02d92aa6</anchor>
      <arglist>(FreeFormTransformation *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MultiLevelTransformation</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a5f55095a43bd6f3aca16bb8af1d42bde</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MultiLevelTransformation</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a30f4c752a432036389a209ef02d7d099</anchor>
      <arglist>(const RigidTransformation &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MultiLevelTransformation</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a66f0868629622050208c0d6ccc829da9</anchor>
      <arglist>(const AffineTransformation &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MultiLevelTransformation</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a2126e1db1d5d6cce2d75ebdd00297056</anchor>
      <arglist>(const MultiLevelTransformation &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AffineTransformation</type>
      <name>_AffineTransformation</name>
      <anchorfile>classmirtk_1_1FluidFreeFormTransformation.html</anchorfile>
      <anchor>a9ef2ba2653e7cf907305c8a81f5f1c7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AffineTransformation</type>
      <name>_GlobalTransformation</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>ae41729bf41ca02892f9c2d4e0cb5e85f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FreeFormTransformation *</type>
      <name>_LocalTransformation</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a09ee3e7312b92dea136c20a4a12e9213</anchor>
      <arglist>[MAX_TRANS]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_LocalTransformationOwner</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a5b71f4bb53b18393b0e7db5de33c38b9</anchor>
      <arglist>[MAX_TRANS]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FFDStatus</type>
      <name>_LocalTransformationStatus</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a5721725c4aa878d89cfb9543eac8c415</anchor>
      <arglist>[MAX_TRANS]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_NumberOfLevels</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a1cac7df5b2043f4ea5f42b36fbfcb2ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Status</type>
      <name>FFDStatus</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>aa29ab918c400b5a8e9ffa0d4bedc83be</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ForEachVoxelBody</name>
    <filename>structmirtk_1_1ForEachVoxelBody.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>mirtk::ForEachVoxelIfBody</name>
    <filename>structmirtk_1_1ForEachVoxelIfBody.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelBody</base>
  </compound>
  <compound kind="class">
    <name>mirtk::FreeFormTransformation</name>
    <filename>classmirtk_1_1FreeFormTransformation.html</filename>
    <base>mirtk::Transformation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>BendingEnergy</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a6a5c9ea0029a646130bcb9a922892fa5</anchor>
      <arglist>(double, double, double, double=0, double=-1, bool=true) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>BendingEnergy</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a59a6bb417767b6d2e438388c19224622</anchor>
      <arglist>(bool=false, bool=true) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>BendingEnergy</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>ae9d3fdb9053cb93da5a5760d47861ff0</anchor>
      <arglist>(const ImageAttributes &amp;attr, double=-1, bool=true) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BendingEnergyGradient</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a8d09aedc762f752def72d2d1381b0666</anchor>
      <arglist>(double *, double=1.0, bool=false, bool=true) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>ace106cd30401fc1f03bade561bc40ead</anchor>
      <arglist>(int, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double=1) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetTAfterSubdivision</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>ae1c2b400124aeae9cfbf078225c9c474</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetTSpacingAfterSubdivision</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a8ad9b780d051a01c7e04dd18527df8a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetXAfterSubdivision</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a8727f4c2907a257a0e4ee756b1b52177</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetXSpacingAfterSubdivision</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>aa6eb7c0c07bda867b8115e6b7e9b91f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetYAfterSubdivision</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a20ff8403036c0ea675bfb774a50dddd2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetYSpacingAfterSubdivision</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>abad49fa246f00cc54d52dbd62e75cbce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetZAfterSubdivision</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a5f9377f9fec92e365cbbf82c49d2267c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetZSpacingAfterSubdivision</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>abd0db9a76eef81a6558fa2b8f567500e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a8877b940f589219e5765e85325191737</anchor>
      <arglist>(const ImageAttributes &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Interpolate</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>af4e5aa6e1e98b462e713b782dd27c656</anchor>
      <arglist>(const double *, const double *, const double *)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDOFs</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a8051199769b865c8182da23d77354432</anchor>
      <arglist>(Matrix &amp;, int, double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>KernelSize</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a9450748bc335c39efce3076dd75a387a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>ad06748845ff5984f9f903812d59041c7</anchor>
      <arglist>(const GenericImage&lt; double &gt; *, double *, const WorldCoordsImage *, const WorldCoordsImage *, double=-1, double=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>a506507aa88da957f2121e179d2b85d7d</anchor>
      <arglist>(Indent=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Subdivide</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation.html</anchorfile>
      <anchor>ac5ece33a3690a4e444936b6f82993485</anchor>
      <arglist>(bool=true, bool=true, bool=true, bool=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateDOFs</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a00af3941fbf064422048f2f81cab8e78</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, const double *, int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>CanRead</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>aa0241200e2c60f8401d16e5434035874</anchor>
      <arglist>(TransformationType) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDOFs</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>acf9f1f3d95fc48b4d21ebc904a6c7026</anchor>
      <arglist>(double[3], int, double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalJacobian</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>ad844534836f8e077295b1f42ca92f3d2</anchor>
      <arglist>(Matrix &amp;, double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>LocalTransform</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>aa82dfe77e99efd0dbffc523c69af47e1</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=-1) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Cifstream &amp;</type>
      <name>ReadDOFs</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a8ad39d2dffdd4608f49c596ee45fb1b8</anchor>
      <arglist>(Cifstream &amp;, TransformationType)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::FreeFormTransformation3D</name>
    <filename>classmirtk_1_1FreeFormTransformation3D.html</filename>
    <base>mirtk::FreeFormTransformation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDOFs</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation3D.html</anchorfile>
      <anchor>a181b53a9cae17affac5cb97d96f74895</anchor>
      <arglist>(double[3], int, int, int, double, double, double) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::FreeFormTransformation4D</name>
    <filename>classmirtk_1_1FreeFormTransformation4D.html</filename>
    <base>mirtk::FreeFormTransformation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDOFs</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation4D.html</anchorfile>
      <anchor>ad515e1d4919ba55a36c6a21e0d0640fa</anchor>
      <arglist>(Matrix &amp;, int, int, int, int, double, double, double, double, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDOFs</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation4D.html</anchorfile>
      <anchor>ac7e748a871d0a6a8cf9534fb36e19d22</anchor>
      <arglist>(double[3], int, int, int, int, double, double, double, double, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1FreeFormTransformation4D.html</anchorfile>
      <anchor>a21d136c0b17abfa63ce5d0f63471852a</anchor>
      <arglist>(const GenericImage&lt; double &gt; *, double *, const WorldCoordsImage *, const WorldCoordsImage *, double=-1, double=1) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::FreeFormTransformationEmbeddedRungeKutta</name>
    <filename>classmirtk_1_1FreeFormTransformationEmbeddedRungeKutta.html</filename>
    <templarg>TFreeFormTransformation</templarg>
    <templarg>TButcherTableau</templarg>
    <base>mirtk::FreeFormTransformationRungeKutta</base>
    <member kind="typedef">
      <type>TButcherTableau</type>
      <name>BT</name>
      <anchorfile>classmirtk_1_1FreeFormTransformationEmbeddedRungeKutta.html</anchorfile>
      <anchor>acc445799b4a69d68b5bb8dfeb5fa21de</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>dkdp</name>
      <anchorfile>classmirtk_1_1FreeFormTransformationRungeKutta.html</anchorfile>
      <anchor>abd3b8ef41555a1c12891123fc59e5b5c</anchor>
      <arglist>(Matrix &amp;dk, const Matrix &amp;Dv, const Matrix &amp;dx, const double dv[3], double h)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>dkdx</name>
      <anchorfile>classmirtk_1_1FreeFormTransformationRungeKutta.html</anchorfile>
      <anchor>ad4af0b7b598f2de19f7af873a8d6466a</anchor>
      <arglist>(Matrix &amp;dk, const Matrix &amp;Dv, const Matrix &amp;dx, double h)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::FreeFormTransformationExplicitRungeKutta</name>
    <filename>classmirtk_1_1FreeFormTransformationExplicitRungeKutta.html</filename>
    <templarg>TFreeFormTransformation</templarg>
    <templarg>TButcherTableau</templarg>
    <base>mirtk::FreeFormTransformationRungeKutta</base>
    <member kind="typedef">
      <type>TButcherTableau</type>
      <name>BT</name>
      <anchorfile>classmirtk_1_1FreeFormTransformationExplicitRungeKutta.html</anchorfile>
      <anchor>aae68aec3134d6fffd9faad6e3cad9ef3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::FreeFormTransformationIntegrationRK4</name>
    <filename>classmirtk_1_1FreeFormTransformationIntegrationRK4.html</filename>
    <templarg></templarg>
    <base>FreeFormTransformationExplicitRungeKutta&lt; TFreeFormTransformation, FreeFormTransformationButcherTableauRK4 &gt;</base>
    <member kind="typedef">
      <type>FreeFormTransformationButcherTableauRK4</type>
      <name>BT</name>
      <anchorfile>classmirtk_1_1FreeFormTransformationExplicitRungeKutta.html</anchorfile>
      <anchor>aae68aec3134d6fffd9faad6e3cad9ef3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::FreeFormTransformationIntegrationRKBS23</name>
    <filename>classmirtk_1_1FreeFormTransformationIntegrationRKBS23.html</filename>
    <templarg></templarg>
    <base>FreeFormTransformationEmbeddedRungeKutta&lt; TFreeFormTransformation, FreeFormTransformationButcherTableauRKBS23 &gt;</base>
    <member kind="typedef">
      <type>FreeFormTransformationButcherTableauRKBS23</type>
      <name>BT</name>
      <anchorfile>classmirtk_1_1FreeFormTransformationEmbeddedRungeKutta.html</anchorfile>
      <anchor>acc445799b4a69d68b5bb8dfeb5fa21de</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::FreeFormTransformationIntegrationRKCK45</name>
    <filename>classmirtk_1_1FreeFormTransformationIntegrationRKCK45.html</filename>
    <templarg></templarg>
    <base>FreeFormTransformationEmbeddedRungeKutta&lt; TFreeFormTransformation, FreeFormTransformationButcherTableauRKCK45 &gt;</base>
    <member kind="typedef">
      <type>FreeFormTransformationButcherTableauRKCK45</type>
      <name>BT</name>
      <anchorfile>classmirtk_1_1FreeFormTransformationEmbeddedRungeKutta.html</anchorfile>
      <anchor>acc445799b4a69d68b5bb8dfeb5fa21de</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::FreeFormTransformationIntegrationRKDP45</name>
    <filename>classmirtk_1_1FreeFormTransformationIntegrationRKDP45.html</filename>
    <templarg></templarg>
    <base>FreeFormTransformationEmbeddedRungeKutta&lt; TFreeFormTransformation, FreeFormTransformationButcherTableauRKDP45 &gt;</base>
    <member kind="typedef">
      <type>FreeFormTransformationButcherTableauRKDP45</type>
      <name>BT</name>
      <anchorfile>classmirtk_1_1FreeFormTransformationEmbeddedRungeKutta.html</anchorfile>
      <anchor>acc445799b4a69d68b5bb8dfeb5fa21de</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::FreeFormTransformationIntegrationRKE1</name>
    <filename>classmirtk_1_1FreeFormTransformationIntegrationRKE1.html</filename>
    <templarg></templarg>
    <base>FreeFormTransformationExplicitRungeKutta&lt; TFreeFormTransformation, FreeFormTransformationButcherTableauRKE1 &gt;</base>
    <member kind="typedef">
      <type>FreeFormTransformationButcherTableauRKE1</type>
      <name>BT</name>
      <anchorfile>classmirtk_1_1FreeFormTransformationExplicitRungeKutta.html</anchorfile>
      <anchor>aae68aec3134d6fffd9faad6e3cad9ef3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::FreeFormTransformationIntegrationRKE2</name>
    <filename>classmirtk_1_1FreeFormTransformationIntegrationRKE2.html</filename>
    <templarg></templarg>
    <base>FreeFormTransformationExplicitRungeKutta&lt; TFreeFormTransformation, FreeFormTransformationButcherTableauRKE2 &gt;</base>
    <member kind="typedef">
      <type>FreeFormTransformationButcherTableauRKE2</type>
      <name>BT</name>
      <anchorfile>classmirtk_1_1FreeFormTransformationExplicitRungeKutta.html</anchorfile>
      <anchor>aae68aec3134d6fffd9faad6e3cad9ef3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::FreeFormTransformationIntegrationRKEH12</name>
    <filename>classmirtk_1_1FreeFormTransformationIntegrationRKEH12.html</filename>
    <templarg></templarg>
    <base>FreeFormTransformationEmbeddedRungeKutta&lt; TFreeFormTransformation, FreeFormTransformationButcherTableauRKEH12 &gt;</base>
    <member kind="typedef">
      <type>FreeFormTransformationButcherTableauRKEH12</type>
      <name>BT</name>
      <anchorfile>classmirtk_1_1FreeFormTransformationEmbeddedRungeKutta.html</anchorfile>
      <anchor>acc445799b4a69d68b5bb8dfeb5fa21de</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::FreeFormTransformationIntegrationRKF45</name>
    <filename>classmirtk_1_1FreeFormTransformationIntegrationRKF45.html</filename>
    <templarg></templarg>
    <base>FreeFormTransformationEmbeddedRungeKutta&lt; TFreeFormTransformation, FreeFormTransformationButcherTableauRKF45 &gt;</base>
    <member kind="typedef">
      <type>FreeFormTransformationButcherTableauRKF45</type>
      <name>BT</name>
      <anchorfile>classmirtk_1_1FreeFormTransformationEmbeddedRungeKutta.html</anchorfile>
      <anchor>acc445799b4a69d68b5bb8dfeb5fa21de</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::FreeFormTransformationIntegrationRKH2</name>
    <filename>classmirtk_1_1FreeFormTransformationIntegrationRKH2.html</filename>
    <templarg></templarg>
    <base>FreeFormTransformationExplicitRungeKutta&lt; TFreeFormTransformation, FreeFormTransformationButcherTableauRKH2 &gt;</base>
    <member kind="typedef">
      <type>FreeFormTransformationButcherTableauRKH2</type>
      <name>BT</name>
      <anchorfile>classmirtk_1_1FreeFormTransformationExplicitRungeKutta.html</anchorfile>
      <anchor>aae68aec3134d6fffd9faad6e3cad9ef3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::FreeFormTransformationRungeKutta</name>
    <filename>classmirtk_1_1FreeFormTransformationRungeKutta.html</filename>
  </compound>
  <compound kind="class">
    <name>mirtk::FundamentalMap</name>
    <filename>classmirtk_1_1FundamentalMap.html</filename>
    <base>mirtk::VolumetricMap</base>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1VolumetricMap.html</anchorfile>
      <anchor>a23763ad3d373a3b8cfbcf4e38c85b38c</anchor>
      <arglist>(double *v, double x, double y, double z=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1VolumetricMap.html</anchorfile>
      <anchor>a6c633d3c5191b3710e107db7438b4b80</anchor>
      <arglist>(double x, double y, double z=0, int l=0) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual VolumetricMap *</type>
      <name>NewCopy</name>
      <anchorfile>classmirtk_1_1VolumetricMap.html</anchorfile>
      <anchor>aa54333b34bbd03a3c29e78a5b3be24f8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1FundamentalMap.html</anchorfile>
      <anchor>ab6540738373e0ecdbe1fc6d0421322cf</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::FundamentalVolumeParameterizer</name>
    <filename>classmirtk_1_1FundamentalVolumeParameterizer.html</filename>
    <base>mirtk::VolumeParameterizer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FundamentalVolumeParameterizer</name>
      <anchorfile>classmirtk_1_1FundamentalVolumeParameterizer.html</anchorfile>
      <anchor>a6ab6bb6cfb298689df61202ab1956deb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>AddSourcePoint</name>
      <anchorfile>classmirtk_1_1FundamentalVolumeParameterizer.html</anchorfile>
      <anchor>a583c01e70784db60143c033381b9ae0c</anchor>
      <arglist>(double q[3])</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>AddWeights</name>
      <anchorfile>classmirtk_1_1FundamentalVolumeParameterizer.html</anchorfile>
      <anchor>aa40b28c52d2b396dace32ebfbcbd552e</anchor>
      <arglist>(int k, const Matrix &amp;w)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CopyAttributes</name>
      <anchorfile>classmirtk_1_1FundamentalVolumeParameterizer.html</anchorfile>
      <anchor>afa74708b3d85000f78750fe9bbde8ee1</anchor>
      <arglist>(const FundamentalVolumeParameterizer &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FundamentalVolumeParameterizer</name>
      <anchorfile>classmirtk_1_1FundamentalVolumeParameterizer.html</anchorfile>
      <anchor>ad39477a70c4478ff6b63b0e11fbaaf59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FundamentalVolumeParameterizer</name>
      <anchorfile>classmirtk_1_1FundamentalVolumeParameterizer.html</anchorfile>
      <anchor>a51dc4d1ce7038036256546578d4ffd84</anchor>
      <arglist>(const FundamentalVolumeParameterizer &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>GetClosestPointOnOffsetSurface</name>
      <anchorfile>classmirtk_1_1FundamentalVolumeParameterizer.html</anchorfile>
      <anchor>a7cd627fdb1b931f9dbde63432d79fc56</anchor>
      <arglist>(double x[3], double p[3])</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>GetCoefficients</name>
      <anchorfile>classmirtk_1_1FundamentalVolumeParameterizer.html</anchorfile>
      <anchor>a1b88096a5003f622612151f71c7043cf</anchor>
      <arglist>(int k, Matrix &amp;coeff) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>GetConstraints</name>
      <anchorfile>classmirtk_1_1FundamentalVolumeParameterizer.html</anchorfile>
      <anchor>a7bf5c0b27ac5a58b814414735275ce5e</anchor>
      <arglist>(int k, Matrix &amp;b) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1FundamentalVolumeParameterizer.html</anchorfile>
      <anchor>a85bfa929233dffee0b4ae67780a3c6af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>InitializeResidualMap</name>
      <anchorfile>classmirtk_1_1FundamentalVolumeParameterizer.html</anchorfile>
      <anchor>ac1546168617fe8beb18f715ae955563d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>NumberOfBoundaryPoints</name>
      <anchorfile>classmirtk_1_1FundamentalVolumeParameterizer.html</anchorfile>
      <anchor>a120850a5493cdcb8aaeed5885ff3a2a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>NumberOfSourcePoints</name>
      <anchorfile>classmirtk_1_1FundamentalVolumeParameterizer.html</anchorfile>
      <anchor>a4d672c6d93b470ea2a9a7d941bd42cfd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>NumberOfSourcePoints</name>
      <anchorfile>classmirtk_1_1FundamentalVolumeParameterizer.html</anchorfile>
      <anchor>ae3ee4dfce427af49be4b87ccf9ddba88</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>NumberOfSourcePointSets</name>
      <anchorfile>classmirtk_1_1FundamentalVolumeParameterizer.html</anchorfile>
      <anchor>a4e1bd49c5b2c84e822467e718ea2f8dc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>FundamentalVolumeParameterizer &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1FundamentalVolumeParameterizer.html</anchorfile>
      <anchor>af6d20d029063750d603b05051535b8fd</anchor>
      <arglist>(const FundamentalVolumeParameterizer &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Parameterize</name>
      <anchorfile>classmirtk_1_1FundamentalVolumeParameterizer.html</anchorfile>
      <anchor>a0c8969141dd06efcceefd3c213a4ddb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PartitionSourcePoints</name>
      <anchorfile>classmirtk_1_1FundamentalVolumeParameterizer.html</anchorfile>
      <anchor>ad25473730766086ab8f873e754b55617</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PlaceBoundaryPoints</name>
      <anchorfile>classmirtk_1_1FundamentalVolumeParameterizer.html</anchorfile>
      <anchor>ac2692e26ff5c827319c8de38aca6db34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>PlaceSourcePoints</name>
      <anchorfile>classmirtk_1_1FundamentalVolumeParameterizer.html</anchorfile>
      <anchor>a6b7781f479f1da8769fa295a9b3710a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>SourcePointIndex</name>
      <anchorfile>classmirtk_1_1FundamentalVolumeParameterizer.html</anchorfile>
      <anchor>ac577553e9b2fa1300e1dfcaea1336f1f</anchor>
      <arglist>(int k, int i) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>UpdateBoundary</name>
      <anchorfile>classmirtk_1_1FundamentalVolumeParameterizer.html</anchorfile>
      <anchor>a58a307061f1acd0ed7dcc96439fd372a</anchor>
      <arglist>(vtkPolyData *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>UpdateResidualMap</name>
      <anchorfile>classmirtk_1_1FundamentalVolumeParameterizer.html</anchorfile>
      <anchor>ab0f2a2a19d5246e91b356e2da606d9b6</anchor>
      <arglist>(double *=NULL, double *=NULL, double *=NULL)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Finalize</name>
      <anchorfile>classmirtk_1_1VolumeParameterizer.html</anchorfile>
      <anchor>aa1144469987b4de3abe84546a79da991</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::FuzzyCorrespondence</name>
    <filename>classmirtk_1_1FuzzyCorrespondence.html</filename>
    <base>mirtk::PointCorrespondence</base>
    <member kind="typedef">
      <type>GenericSparseMatrix&lt; float &gt;</type>
      <name>WeightMatrix</name>
      <anchorfile>classmirtk_1_1FuzzyCorrespondence.html</anchorfile>
      <anchor>ade29cbdc1cbd9bf045d5b94f06ab3ae6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>GetInputSourcePoint</name>
      <anchorfile>classmirtk_1_1FuzzyCorrespondence.html</anchorfile>
      <anchor>aa832733afac88ce4702aa2feb7fb852d</anchor>
      <arglist>(int, Point &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>GetInputTargetPoint</name>
      <anchorfile>classmirtk_1_1FuzzyCorrespondence.html</anchorfile>
      <anchor>af3e98a403fb7e76538bc450bfe35d6bf</anchor>
      <arglist>(int, Point &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>GetSourcePoint</name>
      <anchorfile>classmirtk_1_1FuzzyCorrespondence.html</anchorfile>
      <anchor>a8620d201b26e4de8e454384197d3a375</anchor>
      <arglist>(int, Point &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>GetTargetPoint</name>
      <anchorfile>classmirtk_1_1FuzzyCorrespondence.html</anchorfile>
      <anchor>a9a50ac7e1c0ce7bad34fefe20c60fd7e</anchor>
      <arglist>(int, Point &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1FuzzyCorrespondence.html</anchorfile>
      <anchor>a2511f8d357b6272441b919d4a4e25062</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1FuzzyCorrespondence.html</anchorfile>
      <anchor>aea22f9eedd4f3efd61f224adbe6fc57e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Reinitialize</name>
      <anchorfile>classmirtk_1_1FuzzyCorrespondence.html</anchorfile>
      <anchor>ace855f54b48934fe3f5fe561eb7af7c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1FuzzyCorrespondence.html</anchorfile>
      <anchor>a15719c76729b4e0c11291c97868e75b8</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1FuzzyCorrespondence.html</anchorfile>
      <anchor>aae9160b34366ea7ef344b38f595c83b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Upgrade</name>
      <anchorfile>classmirtk_1_1FuzzyCorrespondence.html</anchorfile>
      <anchor>a38e1eeaa6286bb9746fe4a3223d46f1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FuzzyCorrespondence</name>
      <anchorfile>classmirtk_1_1FuzzyCorrespondence.html</anchorfile>
      <anchor>aeda73c4eff8271cc6ef16e1220ddb630</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PointCorrespondence *</type>
      <name>NewInstance</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a9a9ba2d366fb9602f7f263322a65d665</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TypeId</type>
      <name>Type</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>ab79746b7e6dd806ea612b0fd51deec44</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AddGaussianNoise</name>
      <anchorfile>classmirtk_1_1FuzzyCorrespondence.html</anchorfile>
      <anchor>a2c9f1402c3bcd845b3094ea86764c9f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>CalculateClusters</name>
      <anchorfile>classmirtk_1_1FuzzyCorrespondence.html</anchorfile>
      <anchor>a7d49bc1c56e19a36fa5ec72b76200318</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>CalculateWeights</name>
      <anchorfile>classmirtk_1_1FuzzyCorrespondence.html</anchorfile>
      <anchor>aec16ef5fbf8b0a765a78b0fafa58c5fd</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FuzzyCorrespondence</name>
      <anchorfile>classmirtk_1_1FuzzyCorrespondence.html</anchorfile>
      <anchor>a474abc6cad3c8bc9e2b997f77c96c7bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FuzzyCorrespondence</name>
      <anchorfile>classmirtk_1_1FuzzyCorrespondence.html</anchorfile>
      <anchor>adf8156b695286873bea37bc21ede0bc3</anchor>
      <arglist>(const FuzzyCorrespondence &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Init</name>
      <anchorfile>classmirtk_1_1FuzzyCorrespondence.html</anchorfile>
      <anchor>a613eeff28d5aa7442182ac455e42bfb3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1FuzzyCorrespondence.html</anchorfile>
      <anchor>a1c14d180dbe9b8c4599ce284f72fb1da</anchor>
      <arglist>(PointSet, InputTargetClusters)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1FuzzyCorrespondence.html</anchorfile>
      <anchor>abc4690e478671cf1736fc6c1a4305d72</anchor>
      <arglist>(PointSet, InputSourceClusters)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1FuzzyCorrespondence.html</anchorfile>
      <anchor>aa725593af1fe1764559579fef8daec4e</anchor>
      <arglist>(PointSet, TargetClusters)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1FuzzyCorrespondence.html</anchorfile>
      <anchor>ae2f1fa3ae5b5c0d9e2138c94c5eb595f</anchor>
      <arglist>(PointSet, SourceClusters)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1FuzzyCorrespondence.html</anchorfile>
      <anchor>a8c52ce6839ab7a137ffa9c460f7f0809</anchor>
      <arglist>(Array&lt; bool &gt;, TargetOutlier)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1FuzzyCorrespondence.html</anchorfile>
      <anchor>a205fdf630c3bc0cd6236e75d435f1d41</anchor>
      <arglist>(Array&lt; bool &gt;, SourceOutlier)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1FuzzyCorrespondence.html</anchorfile>
      <anchor>a37f95757c154e07147f0ee00ca1d213b</anchor>
      <arglist>(double, MinWeight)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1FuzzyCorrespondence.html</anchorfile>
      <anchor>a3b883c1f5f012a2dab0f2d7f278ae087</anchor>
      <arglist>(double, GaussianNoise)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1FuzzyCorrespondence.html</anchorfile>
      <anchor>a3d2e12933a7f5897ddf1db603f15d943</anchor>
      <arglist>(WeightMatrix, Weight)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>NormalizeWeights</name>
      <anchorfile>classmirtk_1_1FuzzyCorrespondence.html</anchorfile>
      <anchor>a1feb1c0f23e0f02915e29d9d8d5258a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteDataSets</name>
      <anchorfile>classmirtk_1_1FuzzyCorrespondence.html</anchorfile>
      <anchor>a757a9e76370821d33bded2f700287483</anchor>
      <arglist>(const char *, const char *, bool=true) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GaussianBlurring</name>
    <filename>classmirtk_1_1GaussianBlurring.html</filename>
    <templarg></templarg>
    <base>mirtk::ImageToImage</base>
    <member kind="function">
      <type></type>
      <name>GaussianBlurring</name>
      <anchorfile>classmirtk_1_1GaussianBlurring.html</anchorfile>
      <anchor>acc06699f6c64f674e8569294eb5a37ab</anchor>
      <arglist>(double=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianBlurring</name>
      <anchorfile>classmirtk_1_1GaussianBlurring.html</anchorfile>
      <anchor>a07ccd16df72e8f1c3b23e9d10946e27c</anchor>
      <arglist>(double, double, double=.0, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1GaussianBlurring.html</anchorfile>
      <anchor>aca5fbdbe6665d8c7987dcb56562d570b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>RunT</name>
      <anchorfile>classmirtk_1_1GaussianBlurring.html</anchorfile>
      <anchor>a0ca20dfee27f118d8d36fd3cf4020486</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>RunX</name>
      <anchorfile>classmirtk_1_1GaussianBlurring.html</anchorfile>
      <anchor>affc2ee95963aa4c57eb2ba2b0d90fcfa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>RunY</name>
      <anchorfile>classmirtk_1_1GaussianBlurring.html</anchorfile>
      <anchor>a807836ee6c56aef7672e6c4e5b9f28f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>RunZ</name>
      <anchorfile>classmirtk_1_1GaussianBlurring.html</anchorfile>
      <anchor>a822e6fcb685bad12151fd536b9344cfb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetSigma</name>
      <anchorfile>classmirtk_1_1GaussianBlurring.html</anchorfile>
      <anchor>ab6b811f2fddfc25d327a2c98320b108e</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetSigma</name>
      <anchorfile>classmirtk_1_1GaussianBlurring.html</anchorfile>
      <anchor>a14ae49a6bb1717bf23b09ac7a1334ca7</anchor>
      <arglist>(double, double, double=.0, double=.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GaussianBlurring</name>
      <anchorfile>classmirtk_1_1GaussianBlurring.html</anchorfile>
      <anchor>a706702dbd4ca96b1694e0fb0ce91f369</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>KernelSize</name>
      <anchorfile>classmirtk_1_1GaussianBlurring.html</anchorfile>
      <anchor>a422ee0a5dd57839291a74a9c384633d2</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Finalize</name>
      <anchorfile>classmirtk_1_1GaussianBlurring.html</anchorfile>
      <anchor>a0008783ac89dfae52d1701533bc1a31e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GaussianBlurring.html</anchorfile>
      <anchor>a51620434edde0b341a565fece6137d44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>InitializeKernel</name>
      <anchorfile>classmirtk_1_1GaussianBlurring.html</anchorfile>
      <anchor>ab892152b4943d492cd28df13548de50c</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GenericImage&lt; RealPixel &gt; *</type>
      <name>_Kernel</name>
      <anchorfile>classmirtk_1_1GaussianBlurring.html</anchorfile>
      <anchor>a1e4459b7a6e753996a4d0dfde715055d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GaussianBlurring2D</name>
    <filename>classmirtk_1_1GaussianBlurring2D.html</filename>
    <templarg></templarg>
    <base>mirtk::GaussianBlurring</base>
    <member kind="function">
      <type></type>
      <name>GaussianBlurring2D</name>
      <anchorfile>classmirtk_1_1GaussianBlurring2D.html</anchorfile>
      <anchor>a8089d1c8ff9067d3d9572d778329df9b</anchor>
      <arglist>(double=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianBlurring2D</name>
      <anchorfile>classmirtk_1_1GaussianBlurring2D.html</anchorfile>
      <anchor>a4ad79fcc093c3b322bc847deca80658f</anchor>
      <arglist>(double, double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GaussianBlurring2D</name>
      <anchorfile>classmirtk_1_1GaussianBlurring2D.html</anchorfile>
      <anchor>a650f897ca913c5e273b373e2734653c4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GaussianBlurring4D</name>
    <filename>classmirtk_1_1GaussianBlurring4D.html</filename>
    <templarg></templarg>
    <base>mirtk::GaussianBlurring</base>
    <member kind="function">
      <type></type>
      <name>GaussianBlurring4D</name>
      <anchorfile>classmirtk_1_1GaussianBlurring4D.html</anchorfile>
      <anchor>aed1a8125d3982a2ffe38d452ba50f2c3</anchor>
      <arglist>(double=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianBlurring4D</name>
      <anchorfile>classmirtk_1_1GaussianBlurring4D.html</anchorfile>
      <anchor>a107dd1e032577cffbd5f18293102f37f</anchor>
      <arglist>(double, double, double, double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GaussianBlurring4D</name>
      <anchorfile>classmirtk_1_1GaussianBlurring4D.html</anchorfile>
      <anchor>a10bede5586cd43f91ed8796908ec4ff6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GaussianBlurringWithPadding</name>
    <filename>classmirtk_1_1GaussianBlurringWithPadding.html</filename>
    <templarg></templarg>
    <base>mirtk::GaussianBlurring</base>
    <member kind="function">
      <type></type>
      <name>GaussianBlurringWithPadding</name>
      <anchorfile>classmirtk_1_1GaussianBlurringWithPadding.html</anchorfile>
      <anchor>abb87f17ebc227a42e97aeaec7dad23cb</anchor>
      <arglist>(double, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianBlurringWithPadding</name>
      <anchorfile>classmirtk_1_1GaussianBlurringWithPadding.html</anchorfile>
      <anchor>a614e7a8b4c85590d30bb7a1c3512afc6</anchor>
      <arglist>(double, double, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianBlurringWithPadding</name>
      <anchorfile>classmirtk_1_1GaussianBlurringWithPadding.html</anchorfile>
      <anchor>a422001406e5a7e8ba5f2492933a3be36</anchor>
      <arglist>(double, double, double, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianBlurringWithPadding</name>
      <anchorfile>classmirtk_1_1GaussianBlurringWithPadding.html</anchorfile>
      <anchor>a2f1462ef7c7f6b9c00c71580b927ff9f</anchor>
      <arglist>(double, double, double, double, VoxelType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1GaussianBlurringWithPadding.html</anchorfile>
      <anchor>a62fcc322e18379b7551bec102fd44f0d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GaussianBlurringWithPadding2D</name>
    <filename>classmirtk_1_1GaussianBlurringWithPadding2D.html</filename>
    <templarg></templarg>
    <base>mirtk::GaussianBlurringWithPadding</base>
    <member kind="function">
      <type></type>
      <name>GaussianBlurringWithPadding2D</name>
      <anchorfile>classmirtk_1_1GaussianBlurringWithPadding2D.html</anchorfile>
      <anchor>a6de7aa0bd131bfe44a7340eb124da3f9</anchor>
      <arglist>(double=1.0, VoxelType=-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianBlurringWithPadding2D</name>
      <anchorfile>classmirtk_1_1GaussianBlurringWithPadding2D.html</anchorfile>
      <anchor>ac03235ad84ab390cfc629144392616df</anchor>
      <arglist>(double, double, VoxelType)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GaussianErrorFunction</name>
    <filename>classmirtk_1_1GaussianErrorFunction.html</filename>
    <base>mirtk::RadialErrorFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Derivative</name>
      <anchorfile>classmirtk_1_1GaussianErrorFunction.html</anchorfile>
      <anchor>a42f0a3e062a491a58733b47b2c9b053c</anchor>
      <arglist>(double d) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianErrorFunction</name>
      <anchorfile>classmirtk_1_1GaussianErrorFunction.html</anchorfile>
      <anchor>ad0495cc5fbf8a20a5bea33640a3f239f</anchor>
      <arglist>(double sigma=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianErrorFunction</name>
      <anchorfile>classmirtk_1_1GaussianErrorFunction.html</anchorfile>
      <anchor>a62c561a8c0aa8488d9f2f24a46b252be</anchor>
      <arglist>(const GaussianErrorFunction &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RadialErrorFunction *</type>
      <name>NewInstance</name>
      <anchorfile>classmirtk_1_1GaussianErrorFunction.html</anchorfile>
      <anchor>a26768d688d68ca345d9cec4fe6ecb8f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1GaussianErrorFunction.html</anchorfile>
      <anchor>aaa5befe7e34cc6e2903a60d5a570880a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1GaussianErrorFunction.html</anchorfile>
      <anchor>acbc9aed1b5eb18cffe3c3ee5f5d2177c</anchor>
      <arglist>(const char *name, const char *value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TypeId</type>
      <name>Type</name>
      <anchorfile>classmirtk_1_1GaussianErrorFunction.html</anchorfile>
      <anchor>a3097b09d00cdd3e1a370383959ad9c14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Value</name>
      <anchorfile>classmirtk_1_1GaussianErrorFunction.html</anchorfile>
      <anchor>a8234f6be1b905a43ddc9dbb063120cde</anchor>
      <arglist>(double d) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GaussianErrorFunction</name>
      <anchorfile>classmirtk_1_1GaussianErrorFunction.html</anchorfile>
      <anchor>a90f518c2de28d66af78f473f77fc61f2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GaussianInterpolateImageFunction</name>
    <filename>classmirtk_1_1GaussianInterpolateImageFunction.html</filename>
    <base>GenericGaussianInterpolateImageFunction&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>GaussianInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GaussianInterpolateImageFunction.html</anchorfile>
      <anchor>ae3f61bba2cf9f9172a51a19f490468ce</anchor>
      <arglist>(double sigma=1.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>afc33def3037f4fc967e07ca17172eff7</anchor>
      <arglist>(double, double, int &amp;, int &amp;, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>ace11d78467f7f72cb6d9904bf581a054</anchor>
      <arglist>(double, double, double, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a60a12bcb78fa568a75ee3a38e6feeb5e</anchor>
      <arglist>(double, double, double, double, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingInterval</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a1d8df1512aa0e182d8305f0e83a14d22</anchor>
      <arglist>(double, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericGaussianInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>aebd5795badbb16fb6c057197bdeedbd5</anchor>
      <arglist>(double=1.0)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>ac7ade780edfb78589d86937a0d11927b</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a653c8aec76a043b06e8daacd1b3c47ef</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a8bdf2f565835b4924407c915b05e927a</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a8bdd2e08b27d6461fbe778f0a4780967</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>aef8c53ac0f06fc32d671007b1f6290a1</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>abeaafbd03b87acc5b0dc67bcbd626de3</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a0c01e02a1eca45440f856cdb4cda055c</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a702c5ae0dfa91c624c54d80b2e3d6476</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>abdf0c73d273a7c515e07b2a522d9a3c2</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a4c5d7827a0b0538ac54287004f651faf</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a94c49d4b203459a5a308d21aa93299b7</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a8bdd5605b88d4aefd541427164b96fd2</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a592e1fd11b708f5b16df548b13069c2a</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a55b0c0d908af8670e56226ab3b587c02</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a035fc69be6d3b460dad5f3383171e024</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>ad0b50d70ceb737267c3a21f36425e85a</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>afab326c597a473b1637721b046f0166f</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a9e81d65caef22ab8bc41d2b2fb2b7cdf</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a0e3319b46a707e9af796160820fbf9cf</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>ad7f72c8c12f6b75fa67f4802922bcfaa</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a2844dac6bc3dd0c7034bf0607b9733f8</anchor>
      <arglist>(bool=false)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_dx</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a518fd89573720ab819367a564e43cecb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_RadiusT</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>aef2b8413cd7609101a9c531a04482a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_RadiusX</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a21dc7671e77b3a890146f464bd3a9f6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_RadiusY</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>add9d798f985fd557181dd51e2dc031c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_RadiusZ</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a47593fe695fa42f059aed89235bb93ea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GaussianInterpolateImageFunction2D</name>
    <filename>classmirtk_1_1GaussianInterpolateImageFunction2D.html</filename>
    <base>GenericGaussianInterpolateImageFunction2D&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>GaussianInterpolateImageFunction2D</name>
      <anchorfile>classmirtk_1_1GaussianInterpolateImageFunction2D.html</anchorfile>
      <anchor>aa41ab52d771ce63db839cd5bc4260734</anchor>
      <arglist>(double sigma)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericGaussianInterpolateImageFunction2D</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction2D.html</anchorfile>
      <anchor>a25d553b206aba22ddc43e86bac32daa8</anchor>
      <arglist>(double sigma=1.0)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction2D.html</anchorfile>
      <anchor>af4be9537c4c55de21560d0500c9bdbd7</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction2D.html</anchorfile>
      <anchor>ab43448c39ad8ea059f2fe9cb8d9ada0f</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction2D.html</anchorfile>
      <anchor>aed2f4b40c1c6151fc8efd747f1fcaa65</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction2D.html</anchorfile>
      <anchor>a80decd214fd94cec0b3e7915c1b362ce</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction2D.html</anchorfile>
      <anchor>accf3b601947862e61b644363683b2203</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction2D.html</anchorfile>
      <anchor>a3a09dcd4faadb87e6d0f0366ccba312c</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction2D.html</anchorfile>
      <anchor>a05bcd622d562c0431f31279883fcb5c2</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction2D.html</anchorfile>
      <anchor>a176c8cca3b4d438f75981f86154c0e95</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GaussianInterpolateImageFunction3D</name>
    <filename>classmirtk_1_1GaussianInterpolateImageFunction3D.html</filename>
    <base>GenericGaussianInterpolateImageFunction3D&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>GaussianInterpolateImageFunction3D</name>
      <anchorfile>classmirtk_1_1GaussianInterpolateImageFunction3D.html</anchorfile>
      <anchor>a827dabcddcab053fabf6bfce5c3f1e6d</anchor>
      <arglist>(double sigma)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericGaussianInterpolateImageFunction3D</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction3D.html</anchorfile>
      <anchor>a1c248b99af3a9fdcc170738de7f4875b</anchor>
      <arglist>(double sigma=1.0)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction3D.html</anchorfile>
      <anchor>a9ff3b25051da3be9ba45d871ce6a966c</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction3D.html</anchorfile>
      <anchor>ad31149affd3d048839ecc4d44d33b20d</anchor>
      <arglist>(const TOtherImage *, double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction3D.html</anchorfile>
      <anchor>a21fd760d262e5dc4f3d137466e74669c</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction3D.html</anchorfile>
      <anchor>ac8d2ade2e3f10b850cb7bb76ec48de8d</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction3D.html</anchorfile>
      <anchor>a998a810ba6dca3b5ea7564633bd6eb14</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction3D.html</anchorfile>
      <anchor>a77679f4f9f9fe9bba1a0dad526f8ed1f</anchor>
      <arglist>(const TOtherImage *, double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction3D.html</anchorfile>
      <anchor>a0816443096203cef03ef90c642976d1e</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction3D.html</anchorfile>
      <anchor>ad31c7917eb3bd1122e0c4374730c7685</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GaussianInterpolateImageFunction4D</name>
    <filename>classmirtk_1_1GaussianInterpolateImageFunction4D.html</filename>
    <base>GenericGaussianInterpolateImageFunction4D&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>GaussianInterpolateImageFunction4D</name>
      <anchorfile>classmirtk_1_1GaussianInterpolateImageFunction4D.html</anchorfile>
      <anchor>aaf464b8d5d22f57e7ac04f9449742cfa</anchor>
      <arglist>(double sigma)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericGaussianInterpolateImageFunction4D</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction4D.html</anchorfile>
      <anchor>ad3e1d870e337b498099e0b4c11bc911c</anchor>
      <arglist>(double sigma=1.0)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction4D.html</anchorfile>
      <anchor>a4536db12f2d4ef4f6a008c66b42c6455</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction4D.html</anchorfile>
      <anchor>a6dc1f930415d9bfb6dd1f8ed0b3859f1</anchor>
      <arglist>(const TOtherImage *, double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction4D.html</anchorfile>
      <anchor>a47dff6e9af8fd9cbe4e4b67d86f6f2d2</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction4D.html</anchorfile>
      <anchor>a409a3f81ee1157b13443e463af227b7d</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction4D.html</anchorfile>
      <anchor>a9e8525017d1319fab343249d1eb6fb8b</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction4D.html</anchorfile>
      <anchor>a05f5f30408394ffbb45f971428ee1099</anchor>
      <arglist>(const TOtherImage *, double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction4D.html</anchorfile>
      <anchor>a8facc4a833e677108e979de8c2f7b2e3</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction4D.html</anchorfile>
      <anchor>adcd5fb80a25ba59ab0d3fdb11fd49cf9</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GaussianPyramidFilter</name>
    <filename>classmirtk_1_1GaussianPyramidFilter.html</filename>
    <templarg></templarg>
    <base>mirtk::ImageToImage</base>
    <member kind="function">
      <type></type>
      <name>GaussianPyramidFilter</name>
      <anchorfile>classmirtk_1_1GaussianPyramidFilter.html</anchorfile>
      <anchor>a6e8fcb240fe4012d37283260a72f6429</anchor>
      <arglist>(int=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianPyramidFilter</name>
      <anchorfile>classmirtk_1_1GaussianPyramidFilter.html</anchorfile>
      <anchor>acccd89a10674f586c093035d3fae0ebb</anchor>
      <arglist>(int, int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1GaussianPyramidFilter.html</anchorfile>
      <anchor>a277494685d4bc2ebc891a1477999890a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Downsample</name>
      <anchorfile>classmirtk_1_1GaussianPyramidFilter.html</anchorfile>
      <anchor>a15e79a153e279ca855bc7b3f3b3dc56e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GaussianPyramidFilter.html</anchorfile>
      <anchor>a46e07628c956cbf36a27e365f83caf11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Upsample</name>
      <anchorfile>classmirtk_1_1GaussianPyramidFilter.html</anchorfile>
      <anchor>aed885dab1e2f8a18ab473668154819f5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericBSplineInterpolateImageFunction</name>
    <filename>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericInterpolateImageFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingInterval</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a434935d577e9561f25a3106ca14cbe05</anchor>
      <arglist>(double, int &amp;, int &amp;) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericBSplineInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a027cd69df9e218516bc1c88b8058a0dc</anchor>
      <arglist>(int=3)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a52fcb4115bca18652ba3b2732c0a8d29</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>aa04c8f32c6d250d4fece1856470285be</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a12aa437dce4b5f259af99bbadfb71438</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a07a1763bc7944bd57198e1145ad1d547</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ac34c68b3c1c2c3596202bc0a52284b26</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a6032425d6e38a8f2904f34ef69416a08</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ad4faee3a2650176aed36b9b29be5db30</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a35cc09577d7d2871a0a926caa5028ec8</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a43a69f4af532a2e6b037ae34d19d2cb7</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a0bdc097b2c92b8db75a087d9f15d58b6</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a303332bcb417847e584766e0cf4302ab</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ab8f24bc2df06704691d125b63e7815a8</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>aad6c76ee6dc02839466ed6f3516acbc1</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a24c6a1292233ae948d53792667f59e4f</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ad78e98e2967b64fcdc94c8d96b5fa72e</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a20d4df23d9b74e4e4d493e46bc9c8f8f</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>abe711099323fd9b5f5ed099e431fabe9</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a3fa423f692ea5c11278e868f1ad05885</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a22bc2214e706a93093426044b3d81e3c</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a7f3be75e40197def9b12d0dc65ca5ba6</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a61f23af8a52ff5051c69674ce84b8f53</anchor>
      <arglist>(bool=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a6be9e40933ca779c9fc0e495927cd9e7</anchor>
      <arglist>(CoefficientImage, Coefficient)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkComponentMacro</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>aa191793c31a4ea2963e4549800e9905c</anchor>
      <arglist>(CoefficientExtrapolator, InfiniteCoefficient)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a8e0f85d10a9679455ec81ced6797edc5</anchor>
      <arglist>(int, SplineDegree)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericBSplineInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a38148750922f91af64841f2f21143fd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>EvaluateInside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>adc813beaa64778b9b5117bab4a68c242</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateInside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a9abfbae35cb015877f16c99b0aeb2276</anchor>
      <arglist>(double *, double, double, double=0, int=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateInside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a8cff8f4d7a0e630045f6db9413b68f79</anchor>
      <arglist>(Vector &amp;, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>EvaluateOutside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>aa4064ad99a03735de2d6c4a9e2f8455e</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateOutside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>addcfd890bee90b573f6319bcc270c883</anchor>
      <arglist>(double *, double, double, double=0, int=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateOutside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a721a14eb3927f96cb3887422d2633dd6</anchor>
      <arglist>(Vector &amp;, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>EvaluateWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a8a592822346f101c7b953938af210f0d</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>adb50060437023b3e01e8b86da90e739a</anchor>
      <arglist>(double *, double, double, double=0, int=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a826b09ee41395dc39852fd5e52c3e9bd</anchor>
      <arglist>(Vector &amp;, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>EvaluateWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a6277075b6dd22e0b3f06224bf11cb2ae</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a929d79584f9a6e2e0564e4fd4a6c726a</anchor>
      <arglist>(double *, double, double, double=0, int=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a03875a96eaeb2925946dba7cb5f37ae0</anchor>
      <arglist>(Vector &amp;, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Extrapolator</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a0c25e76e00c32396aaf8eb67660c03be</anchor>
      <arglist>(ExtrapolateImageFunction *, bool=false)</arglist>
    </member>
    <member kind="function">
      <type>ExtrapolatorType *</type>
      <name>Extrapolator</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a2f0c9ce790e16ae4547f5b246dbfddb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ExtrapolatorType *</type>
      <name>Extrapolator</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a5fc620f5650dd6eaffe502fe464ebe13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a4a42298381e2f7e8688f5f43f111d5d4</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>aa84119ecf4e7644239196d5b12ab8d51</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Input</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>ac5586fec12bd46c7de04d2dbf8fbdfcd</anchor>
      <arglist>(const BaseImage *)</arglist>
    </member>
    <member kind="function">
      <type>const ImageType *</type>
      <name>Input</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>ac5e50cabb8aa5598305813d6fceb3849</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ExtrapolateImageFunction *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a62658af272b80089502a28bd6e526e30</anchor>
      <arglist>(enum ExtrapolationMode, const BaseImage *=NULL)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a6729b633ced57b38da8d121296bf719f</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a02c31f2212c25738e79e939fe5e8c33b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GenericInterpolateImageFunction *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>abb771f285163718d91fff67f2c53b4cb</anchor>
      <arglist>(enum InterpolationMode, const TImage *=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GenericInterpolateImageFunction *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a230de238ee3f30caee7361365c75a7e5</anchor>
      <arglist>(enum InterpolationMode, enum ExtrapolationMode, const TImage *=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GenericInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a9330db1c2ec340317ac12ea3b64de193</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericBSplineInterpolateImageFunction2D</name>
    <filename>classmirtk_1_1GenericBSplineInterpolateImageFunction2D.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericBSplineInterpolateImageFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericBSplineInterpolateImageFunction2D</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a3c10fd95a531ae5c415195b87054d0c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>ac117a365526bf0891a93406854b02394</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a4b69dc95f5acfba3d44ec92683afc492</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a7ebc868c4923d8cff6d503f5ed33f4ca</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a4b28ba4cdd7bff89b720d4b85e63e9af</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>ae023a50f772e8e1867d4ee1481d78b1c</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a2d90bdee2895503b0a2a7907e1a54a7b</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a908225ed3c7c0a8c5b9639b73406a3b2</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a672a2ab3fb1d1e457becfacf5c7b601f</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericBSplineInterpolateImageFunction3D</name>
    <filename>classmirtk_1_1GenericBSplineInterpolateImageFunction3D.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericBSplineInterpolateImageFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericBSplineInterpolateImageFunction3D</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a597e2aae4bdcee45b1c13e94e1e0ea73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a50ae176ed28f78d42df632bc1caf8a08</anchor>
      <arglist>(double, double, double, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a9505ef3ce24eca80aebd31c42b18b3c2</anchor>
      <arglist>(const TOtherImage *, double, double, double, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>ae33354ffcc4395a1a638e3398f8a5d20</anchor>
      <arglist>(double, double, double, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a18cbbe62a9220d66a53c3b05ae61f229</anchor>
      <arglist>(double, double, double, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a2c571f1a15a317a18b1d374847c23e9b</anchor>
      <arglist>(double, double, double, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a77208554f5370a7d4ae66f04e3eb6215</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>ad572048947adee3506ce69c9f4426b08</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>aa867e81eab24aa159f48be9a15a741fb</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericBSplineInterpolateImageFunction4D</name>
    <filename>classmirtk_1_1GenericBSplineInterpolateImageFunction4D.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericBSplineInterpolateImageFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericBSplineInterpolateImageFunction4D</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>ac7ccf46f0433e75c1a191875683f2507</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a54cb4e4d4d6987412e258a1fbb9e6ef1</anchor>
      <arglist>(double, double, double, double) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a33f98221d174225a30865ede9ff39e7b</anchor>
      <arglist>(const TOtherImage *, double, double, double, double) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a5161250240036e78bc63a0bbb7881624</anchor>
      <arglist>(double, double, double, double) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>ab4e7f99fbc8b2a6e1b77f16885440db8</anchor>
      <arglist>(double, double, double, double) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a208851fc03afb4cddf68cddf31b1a621</anchor>
      <arglist>(double, double, double, double) const </arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a30e0dd5404d258adf1693027c7a14f44</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double, double) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>add04499f14ea5d0360a6cb90937c008b</anchor>
      <arglist>(double, double, double, double) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>abc725e08fb6da677c0b0822a63c0313e</anchor>
      <arglist>(double, double, double, double) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericConstExtrapolateImageFunction</name>
    <filename>classmirtk_1_1GenericConstExtrapolateImageFunction.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericExtrapolateImageFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericConstExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericConstExtrapolateImageFunction.html</anchorfile>
      <anchor>a2b107f35edb57100b05caac28d4d228c</anchor>
      <arglist>(double padding_value=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericConstExtrapolateImageFunction.html</anchorfile>
      <anchor>a460c7abbcd3c92618da3466d4ce629f8</anchor>
      <arglist>(int i, int j, int k=0, int l=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericConstExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericConstExtrapolateImageFunction.html</anchorfile>
      <anchor>aa9b23f49ed8401d898f159a65af6f94f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericExtrapolateImageFunction.html</anchorfile>
      <anchor>a5d0e3962c2719e6b3e7b5ffe1e42a968</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetAsDouble</name>
      <anchorfile>classmirtk_1_1GenericExtrapolateImageFunction.html</anchorfile>
      <anchor>abb2d51aba810f0fc684f1ec88e47e4a7</anchor>
      <arglist>(int, int, int=0, int=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericExtrapolateImageFunction.html</anchorfile>
      <anchor>ab7bf576fc82b0ec8e2e84ed6af58fe03</anchor>
      <arglist>(Vector &amp;, int, int, int=0, int=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericExtrapolateImageFunction.html</anchorfile>
      <anchor>a2beae9dfda53b731baa541438dabe0d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Input</name>
      <anchorfile>classmirtk_1_1GenericExtrapolateImageFunction.html</anchorfile>
      <anchor>acdc2a5f12172d70643623e8e089b257a</anchor>
      <arglist>(const BaseImage *)</arglist>
    </member>
    <member kind="function">
      <type>const ImageType *</type>
      <name>Input</name>
      <anchorfile>classmirtk_1_1GenericExtrapolateImageFunction.html</anchorfile>
      <anchor>a4078bead6673c52fd2a24ea1d20d047d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericExtrapolateImageFunction.html</anchorfile>
      <anchor>a05000319814a864fdb3358cdde4147f3</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericExtrapolateImageFunction.html</anchorfile>
      <anchor>aa183094ced67894dd2998821d72539a1</anchor>
      <arglist>(int, int, int=0, int=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericExtrapolateImageFunction.html</anchorfile>
      <anchor>ac8281ced5e36c555a789cdcb3173cd72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>TImage</type>
      <name>ImageType</name>
      <anchorfile>classmirtk_1_1GenericExtrapolateImageFunction.html</anchorfile>
      <anchor>a2123eaddddaf78310963cc153ddeee6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImageType::RealType</type>
      <name>RealType</name>
      <anchorfile>classmirtk_1_1GenericExtrapolateImageFunction.html</anchorfile>
      <anchor>a5eb86672130110e0511a3f800225c98d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImageType::VoxelType</type>
      <name>VoxelType</name>
      <anchorfile>classmirtk_1_1GenericExtrapolateImageFunction.html</anchorfile>
      <anchor>a8a4ca0e97b1cba01c2b9066000240580</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GenericExtrapolateImageFunction *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1GenericExtrapolateImageFunction.html</anchorfile>
      <anchor>a74b1dfd5f7128491a2e1f4f489aff634</anchor>
      <arglist>(enum ExtrapolationMode, const TImage *=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GenericExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericExtrapolateImageFunction.html</anchorfile>
      <anchor>a455b22910e2a627b2a82e0156ec7f8ce</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericConstExtrapolateImageFunctionWithPeriodicTime</name>
    <filename>classmirtk_1_1GenericConstExtrapolateImageFunctionWithPeriodicTime.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericConstExtrapolateImageFunction</base>
    <member kind="typedef">
      <type>TImage</type>
      <name>ImageType</name>
      <anchorfile>classmirtk_1_1GenericConstExtrapolateImageFunctionWithPeriodicTime.html</anchorfile>
      <anchor>a29ddad4777af2e763876f8ec6a69aad2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImageType::RealType</type>
      <name>RealType</name>
      <anchorfile>classmirtk_1_1GenericConstExtrapolateImageFunctionWithPeriodicTime.html</anchorfile>
      <anchor>a2d5116c841605e43d72b1b6282798804</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImageType::VoxelType</type>
      <name>VoxelType</name>
      <anchorfile>classmirtk_1_1GenericConstExtrapolateImageFunctionWithPeriodicTime.html</anchorfile>
      <anchor>a26af4f1cab967b1187956e40344aeb07</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericConstExtrapolateImageFunctionWithPeriodicTime</name>
      <anchorfile>classmirtk_1_1GenericConstExtrapolateImageFunctionWithPeriodicTime.html</anchorfile>
      <anchor>af9ae11778290f521dc38a940b7b2b83f</anchor>
      <arglist>(double padding_value=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericConstExtrapolateImageFunctionWithPeriodicTime.html</anchorfile>
      <anchor>a06114ba3eae86b4ac294009f52ab3c60</anchor>
      <arglist>(int i, int j, int k=0, int l=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericConstExtrapolateImageFunctionWithPeriodicTime</name>
      <anchorfile>classmirtk_1_1GenericConstExtrapolateImageFunctionWithPeriodicTime.html</anchorfile>
      <anchor>a9c5b710d311a24dbf1a24601fc23c1f1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericCSplineInterpolateImageFunction</name>
    <filename>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericInterpolateImageFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingInterval</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a03c6a9ee4598267560aced98c4c0d9bd</anchor>
      <arglist>(double, int &amp;, int &amp;) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericCSplineInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a44b128b0dbbd37856e074b0cbfad97de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ada7547e54e979ce20e39481a529e3293</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a6746e7b66ed54ac4b2a35f18eb184769</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a7b0a5d86d35ac60ac07fbbc41de7df6e</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>aec507d3c4fe31e6d892ae4ead3586c47</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a502918d03f6ce5b5e0be20ea2b69d649</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a5f8a231c2cd31ebba87a18f57de70cd0</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a680c495e8217a2f424257c0466a38213</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a4a336e4c7bd4405df9064e31ac384848</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a8dc9129625ea149d17f2e60d8e36dedf</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a3710999cb06777604353109942cddd0f</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a5691270b11178d9091ad112315e7eb7a</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a1448d2d80c2d6f8c25c39d5419a087a6</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>abcb3fe3c21a1519ead462c54319ca146</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a46161ee7b62730a7eb8af0b33e534a3e</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a9a1fa6f0b5cbaf6a73eaee4ade842bc7</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a09309a24d3a7b2b37cf3f32b0742acee</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>aaef933848d267d3f5306e5bbb38f7d03</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a9bc208ecabd48195958458f1579cd1cf</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a47fadd07d37e85f01b48086343daa5e8</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a5a136e3d1155bdfeaf23234f51513769</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>abd70ed31525e0bf6e391b3df990b2843</anchor>
      <arglist>(bool=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericCSplineInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ac2a7c1e0f8295bcb0cee419c8340bafe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static Real</type>
      <name>CSpline</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a006f01907e3dfeebe67193a478a3fede</anchor>
      <arglist>(Real)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericCSplineInterpolateImageFunction2D</name>
    <filename>classmirtk_1_1GenericCSplineInterpolateImageFunction2D.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericCSplineInterpolateImageFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericCSplineInterpolateImageFunction2D</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>af5cb443f94e555cff1ec7961ca7c32e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a6654bfe7bbf5a20c4020a59fcf834d1f</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>aa6b7116b0a9e24d0559dad1bb6124325</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>abf3ffa63f207e67316202647f7185061</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a01dc83c3dbb0091709cfaa4b1a84156d</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a59cf53de4f52c3672320e1b0d1b654ba</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>ae7c6a50f705f1f73510cb7c2c64c4626</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>aff007d5416c371321d25c2e2108395bf</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a1400d49d3bb350b53b3dfebf7506e985</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericCSplineInterpolateImageFunction3D</name>
    <filename>classmirtk_1_1GenericCSplineInterpolateImageFunction3D.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericCSplineInterpolateImageFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericCSplineInterpolateImageFunction3D</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a0e0d6b684a1b9aa0084742365e17a4d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a7c0523ea8e96da6de068cd2a6b834e95</anchor>
      <arglist>(double, double, double, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a6d8634d7258ab68d9e26f67cc3bf5a09</anchor>
      <arglist>(const TOtherImage *, double, double, double, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>ab8fbe0879a3ddce6a1c02df3d05b2ef3</anchor>
      <arglist>(double, double, double, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>aed90eff77de83d547c80a16dc53fa398</anchor>
      <arglist>(double, double, double, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>afdd19c6d059132504e6589e4def8fe7c</anchor>
      <arglist>(double, double, double, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>aa172af0f7d6323353c26948f1fdee66d</anchor>
      <arglist>(const TOtherImage *, double, double, double, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a0eb1e55c05aed6ed105e75a388311ac0</anchor>
      <arglist>(double, double, double, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>abcad16363bac933c7b5c734f936f0d8f</anchor>
      <arglist>(double, double, double, double=0) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericCSplineInterpolateImageFunction4D</name>
    <filename>classmirtk_1_1GenericCSplineInterpolateImageFunction4D.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericCSplineInterpolateImageFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericCSplineInterpolateImageFunction4D</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>ae55ca01ef31b48bb87e6c4b7fbe71667</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a0e72509e44e4739bf2764ce6bcad71f5</anchor>
      <arglist>(double, double, double, double) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a06ba60d4d2c4db05ce978c670c8af338</anchor>
      <arglist>(const TOtherImage *, double, double, double, double) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>ad8c142f6c2764d882ca4a731e402dd8d</anchor>
      <arglist>(double, double, double, double) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a317e2cf61b3aea901a155c00d5b49a95</anchor>
      <arglist>(double, double, double, double) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>aeb9f0c165048c517d28543f514156ed2</anchor>
      <arglist>(double, double, double, double) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a985567bcc688b6d1b22b423c2546ce28</anchor>
      <arglist>(const TOtherImage *, double, double, double, double) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a5fd0f5bdda1c1b4204bbaf61ca027543</anchor>
      <arglist>(double, double, double, double) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericCSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a306511dfd00d0790e795474748cda37b</anchor>
      <arglist>(double, double, double, double) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericCubicBSplineInterpolateImageFunction</name>
    <filename>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericInterpolateImageFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingInterval</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a00eb778876296e1657d79a63902e5a35</anchor>
      <arglist>(double, int &amp;, int &amp;) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericCubicBSplineInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>aa5dfa769b9797d37ecf742b6135b4303</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ac1a5582d78794eb03ca3bd6a515fa266</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a7370859e3b632a1f49655634c4857e86</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a2c4c55be3fd954d24b51817cf7ea6cca</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a131c91387c38a3330dc398b450135c68</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a49c487c8c85b936fed2769ba575f42d6</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ad817e14f49d19694320ab7ee91ac9fea</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>adfb9a0d10497ab4ded113ee9e54d0451</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a30ddb644dc960942290e5f85ac69adaf</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a7c546933e37e01e09b3e01c489917e84</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside2D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a95796e4344e16e1ccbe3d686abeaea98</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside3D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a5e946856d19d3bd9e74edf077d87c607</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside4D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a2130737fd3eae29c2a9274ca827b3560</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a2d12f473f61b7b5c804ce8b4756df429</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a6bef68311820f258ffd81c8c2e3165fd</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a61a369e3e921cb27c25814aa6fed0656</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ad04024247f399cf5b0211e6820f1bb0d</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a54a54c5d6d05b0f314ed7e00456d47fd</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a016adc442b2aeabbb296d8b656280af0</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a51273bd9dd44412d708180bec565e4dd</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a97a218912d66af662b875186d7c03251</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a46182e4cb0ada613117bb10721e0a944</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a7a250a6d7fec62486f76a9364a3485fd</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a38772a4e4086eec646e02c5e5170d336</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a4f0e0ae21848a6cb93859905d94dc832</anchor>
      <arglist>(bool=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkAggregateMacro</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a3690d3eb9fea99d29ec00890deada290</anchor>
      <arglist>(CoefficientExtrapolator, InfiniteCoefficient)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a12370c7f675cb512bca3d556ecb5beda</anchor>
      <arglist>(CoefficientImage, Coefficient)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericCubicBSplineInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>adb1542d7a6abeeab54ffc6d1ffa83c23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_s2</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a21f14400afe6a38c52a0149309ad1140</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericCubicBSplineInterpolateImageFunction2D</name>
    <filename>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction2D.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericCubicBSplineInterpolateImageFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericCubicBSplineInterpolateImageFunction2D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a0042f815bbdda3e019607e7e0b3592db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>aca6255bc33a01c53cbeed3f9f7464a94</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a079793258242dd1051200a40160c2d16</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a9c1b4f90d38fbcaaa87d167838a0e22d</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a6ef12fe8c5b3dd29f051c87af64c0d95</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a7adba4fe592c482b25c9ba6266fd4747</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a610ce6c2a1c29d2c792028be3a8c3b7c</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>acfba8b9ab3066490fe144975ddd8f224</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a8bfd994717bcaf51e934808507b39f26</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericCubicBSplineInterpolateImageFunction3D</name>
    <filename>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction3D.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericCubicBSplineInterpolateImageFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericCubicBSplineInterpolateImageFunction3D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a4ae143203c19782a52efedcda9df72a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a593c7d46653b5b028859288667c3f06f</anchor>
      <arglist>(double, double, double, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a3087bb95d7441b4c3e224f83168a7382</anchor>
      <arglist>(const TOtherImage *, double, double, double, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a6c3b7d3debd578a8715fbe22328df5e9</anchor>
      <arglist>(double, double, double, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a2453be5df2a95f697d517ef068341a85</anchor>
      <arglist>(double, double, double, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a53674a44cf000b015d21bb53143987de</anchor>
      <arglist>(double, double, double, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>adc8a6c9d6d1988b70f31f8a5af67eb88</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>ae032071991f08cc7352ea43b123455a3</anchor>
      <arglist>(double, double, double, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a87b246a79da03aa0cce63c5ac22a8c5f</anchor>
      <arglist>(double, double, double, double=0) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericCubicBSplineInterpolateImageFunction4D</name>
    <filename>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction4D.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericCubicBSplineInterpolateImageFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericCubicBSplineInterpolateImageFunction4D</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>aa0d51ce7627a015f0d42626fd0c0026f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a3ff1d684ecb2097215cecc51e254cc99</anchor>
      <arglist>(double, double, double, double) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a2f51ed8179b9a0f491706d93534874f0</anchor>
      <arglist>(const TOtherImage *, double, double, double, double) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a4ecddfc827ed5a26dcfdec138069bfcf</anchor>
      <arglist>(double, double, double, double) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a4732033cf6d5c9d0c78b9f98b4a29298</anchor>
      <arglist>(double, double, double, double) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a628315b34437fafa8b5b3263825ec6a0</anchor>
      <arglist>(double, double, double, double) const </arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a9c156f51aba9c67fcbe630358f7d11c6</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double, double) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a4c9cb5f50fc4da3e5babe880d184ae87</anchor>
      <arglist>(double, double, double, double) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a6dd2fd0f2d30fc7806f4ed5a3fafa878</anchor>
      <arglist>(double, double, double, double) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericExtrapolateImageFunction</name>
    <filename>classmirtk_1_1GenericExtrapolateImageFunction.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::ExtrapolateImageFunction</base>
    <member kind="function" virtualness="pure">
      <type>virtual VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericExtrapolateImageFunction.html</anchorfile>
      <anchor>ae4a0f7ae8291f968d86f72e5a11331b8</anchor>
      <arglist>(int, int, int=0, int=0) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericFastCubicBSplineInterpolateImageFunction</name>
    <filename>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericInterpolateImageFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingInterval</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a383d8a46915cf45bf02893a2d50a3d79</anchor>
      <arglist>(double, int &amp;, int &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateJacobian</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ab5a17dfa7b2a0050db76f01c5dbccaf9</anchor>
      <arglist>(Matrix &amp;, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateJacobianInside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a91440c6f195e78f8442c71e78a042a3a</anchor>
      <arglist>(Matrix &amp;, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateJacobianOutside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a4e826c237bea40ca98948b521255aa29</anchor>
      <arglist>(Matrix &amp;, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericFastCubicBSplineInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>af8d3892487ac3b9bbb8406aa90ab35b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a3f88ecd8cefc0bc177844d232dd6d78c</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>af52c2a500ef59989ceb53a7a63b806da</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a9af4d3f3b7a4040f4dbb1c25a0916854</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>af12acca8f8c97f795ed31445cd1468fa</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a9f44a30567defef9033b28758240283c</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a50fcd3944cd3729298434352b4c14c2f</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a2bed2320c14b8184fab251ca5e05891c</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ac5fb63d7491fc0378f03d074c1b050da</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a309529628a107802346e7b3bea24da84</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside2D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ab1984fd552d11ec287e01c2b98b4c9f9</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside3D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a67edb335f5641f92e64554a764f66472</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside4D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a192607fcca9c73e42bf5a0201c3a8aea</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a3f0457ede146fa8e74146f8d51437f24</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a8991b9d687ddccf182f1a97c3537fd19</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a23d82a4542fa222dc21017662da5da1e</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a3bec28ae4f8da1acd140810e318fa47b</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ad38753b49fc907287222c485bda3bf88</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a6f9cac9a3e60200d96482b09a0a38779</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a3ee5106a4e6a1ba63871ba9db2ea2ceb</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a177d42bbc39f45c922e4bfa307f60b45</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>af22a3753031c9909fa4270615120ce2e</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>af621a0a8f12b39c17c82a333b5a1b70a</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a19f41886792050bddeb0fbd2019a30f6</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>aa9935117ddf9ec7fea46d235c7a89fcb</anchor>
      <arglist>(bool=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a3d0e14c6cfaf9d10490949d6c30d9bf9</anchor>
      <arglist>(Matrix &amp;, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a5e09f47d4ce3be55efe069e751c29d98</anchor>
      <arglist>(Matrix &amp;, const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian2D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a0f20e12f7bb0f7357b567d7d8b2e1ace</anchor>
      <arglist>(Matrix &amp;, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian2D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>ad89f9f0df4e19bf1d7fd4e4f72dc7828</anchor>
      <arglist>(Matrix &amp;, const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian3D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a5d79355a2b3fdccc34dca833a22d4788</anchor>
      <arglist>(Matrix &amp;, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian3D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a3ba05a5cd0048e3078376d811ce16c3b</anchor>
      <arglist>(Matrix &amp;, const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian4D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>aefaebc7f83d3b5e024c751820a2cb6ca</anchor>
      <arglist>(Matrix &amp;, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Jacobian4D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>aeffb8ed8917fa9a4346e1b0243d403a9</anchor>
      <arglist>(Matrix &amp;, const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkAggregateMacro</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>adfde265b6226e7b2b3439d392332da18</anchor>
      <arglist>(CoefficientExtrapolator, InfiniteCoefficient)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a97203bad7342ec8490fda84c122136eb</anchor>
      <arglist>(CoefficientImage, Coefficient)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericFastCubicBSplineInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a52d2f8006b3153a9742ce29e6ccaf8a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_s2</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction.html</anchorfile>
      <anchor>a6480adfe0bcfe2b5b9127b1e15bb2cf7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericFastCubicBSplineInterpolateImageFunction2D</name>
    <filename>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction2D.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericFastCubicBSplineInterpolateImageFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericFastCubicBSplineInterpolateImageFunction2D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a68bfe68a60b753f715910e322c69b8c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a9d4bea7719174525fb872306d9618fee</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a58b29a5081cc67f816e0d63f52020ce8</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>ad0a4f3a0274a9f880907f5a9ccf212bf</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>ac372440f78be4056730068dce0d244a5</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>af598dd1cb258e1399d42217b6d21ddbb</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>adddb0ddd29b15c0afa20e213317776bf</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a10a2f0422a178d1a7b607c53e3d778bf</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction2D.html</anchorfile>
      <anchor>a1d076a6d68821449aa8be87bbbe8d49e</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericFastCubicBSplineInterpolateImageFunction3D</name>
    <filename>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction3D.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericFastCubicBSplineInterpolateImageFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericFastCubicBSplineInterpolateImageFunction3D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a6ca167561c48ba2b795b0b374ed1e0f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>ac9770ea8b6b46912614e313d9f620697</anchor>
      <arglist>(double, double, double, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>af489057378c183256697e03877140ca0</anchor>
      <arglist>(const TOtherImage *, double, double, double, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>acc9708db6703f971edb792e6ee19598b</anchor>
      <arglist>(double, double, double, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a150b3812ca5d5c56e1d51779c1410b05</anchor>
      <arglist>(double, double, double, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a6e19d3b22de440c75d613806c1fcc371</anchor>
      <arglist>(double, double, double, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a2a38b1fc4216445ea608362090e913a2</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a0f76c011f09250a0ef1bf3e615eb8b5b</anchor>
      <arglist>(double, double, double, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction3D.html</anchorfile>
      <anchor>a4f4904aef0bb1976f26d8a37243b1730</anchor>
      <arglist>(double, double, double, double=0) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericFastCubicBSplineInterpolateImageFunction4D</name>
    <filename>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction4D.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericFastCubicBSplineInterpolateImageFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericFastCubicBSplineInterpolateImageFunction4D</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>ad3ef5e3f0dc7990234a911b7d880a416</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>ac3247899ed33f7538486c0e25e2fa56c</anchor>
      <arglist>(double, double, double, double) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>ac433532be8946c8b76840949e1f04f94</anchor>
      <arglist>(const TOtherImage *, double, double, double, double) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a01c931516ab59de556e9663cca48b37e</anchor>
      <arglist>(double, double, double, double) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a12996f872c5ab4d3a2855b2bbcca9538</anchor>
      <arglist>(double, double, double, double) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>af0e864d70447f5a4b89341392104b376</anchor>
      <arglist>(double, double, double, double) const </arglist>
    </member>
    <member kind="function">
      <type>TCoefficient::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>ac8257e5c81e06427f37e6290b88276f2</anchor>
      <arglist>(const TOtherImage *, const TCoefficient *, double, double, double, double) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a6ac7a268d26e967214ab546e84713cc3</anchor>
      <arglist>(double, double, double, double) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericFastCubicBSplineInterpolateImageFunction4D.html</anchorfile>
      <anchor>a8c63017449566557d0a73afb845c335e</anchor>
      <arglist>(double, double, double, double) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericFastLinearImageGradientFunction</name>
    <filename>classmirtk_1_1GenericFastLinearImageGradientFunction.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericImageGradientFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingInterval</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a2c4def1c1f6e9b2f98fa16f3b8d581ca</anchor>
      <arglist>(double, int &amp;, int &amp;) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericFastLinearImageGradientFunction</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>aeb624833f432a885fa1ea3d61985c830</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a85a77299e8b2c5d216d92fe8c2f1bc2e</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>ae4c7a0e1f7a52438215f82885216a022</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a4f20c60ceb4b0a93edc6c66b5cc51870</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>abbee14195d8bc45fa40c25f4d8376b78</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>adcdf47bcbc07de6860e5c7e7aba77208</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a3970b961f51dbc236e16553bdc9b365c</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>af0eef3669b7a1296c76c50be60354f34</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>ae743dcca02bb6ebf5e3cb5600c81f6e1</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a3449c39e0722431d965138ec8d747289</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>abdeeafb875b27a63fa5b0fa5ec5208c9</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a3f56fb7dc49c6e26b46f7df465ae2231</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>af4acf5bcd80aaf052bad2c08d98c4fb3</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a46104f7d15b79b0c9a50dd9b6c094858</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>aba7615f59d57ba1e83695c86aa31ead3</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>aba0ddc893ac6ab70501e5572f0866b8a</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>ac0b25a85bb331f061a25afe8b08b9332</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a5634658b3e9051aef5f2fd1431e47dca</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a5d6850c40c5af91d095cd4e04f8ddb53</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a266302444d3ed04195572478baeb58cd</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>add1926cc0b8ce7cd70eb6dd9182755ab</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a875e78dfe19ce8c2245aa0dff0ef8b00</anchor>
      <arglist>(bool=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericFastLinearImageGradientFunction</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction.html</anchorfile>
      <anchor>a602b763d7dbef3cb68c90d33ecc0b627</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Extrapolator</name>
      <anchorfile>classmirtk_1_1GenericImageGradientFunction.html</anchorfile>
      <anchor>ac448fe7ac352b7f2a612b55eb50012ba</anchor>
      <arglist>(ExtrapolateImageFunction *, bool=false)</arglist>
    </member>
    <member kind="function">
      <type>ExtrapolatorType *</type>
      <name>Extrapolator</name>
      <anchorfile>classmirtk_1_1GenericImageGradientFunction.html</anchorfile>
      <anchor>a12fb9a728b809c9b9c331723555e2bdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ExtrapolatorType *</type>
      <name>Extrapolator</name>
      <anchorfile>classmirtk_1_1GenericImageGradientFunction.html</anchorfile>
      <anchor>a6cba982d7ce872b14ebe11179c638eed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Input</name>
      <anchorfile>classmirtk_1_1GenericImageGradientFunction.html</anchorfile>
      <anchor>a0a916f8a71539e086c4160fbd943cd9d</anchor>
      <arglist>(const BaseImage *)</arglist>
    </member>
    <member kind="function">
      <type>const ImageType *</type>
      <name>Input</name>
      <anchorfile>classmirtk_1_1GenericImageGradientFunction.html</anchorfile>
      <anchor>a5bef7cc8d85d3cd4a2f0ea99258e4937</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ExtrapolateImageFunction *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1GenericImageGradientFunction.html</anchorfile>
      <anchor>a9a5dc899bfe4001d9a78127343144b7d</anchor>
      <arglist>(enum ExtrapolationMode, const BaseImage *=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericImageGradientFunction</name>
      <anchorfile>classmirtk_1_1GenericImageGradientFunction.html</anchorfile>
      <anchor>a19c738073d95cc7a27febedaddd9e380</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GenericImageGradientFunction *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1GenericImageGradientFunction.html</anchorfile>
      <anchor>adb78f00058dc579a5e20ef1e113ca411</anchor>
      <arglist>(enum InterpolationMode, const TImage *=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GenericImageGradientFunction *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1GenericImageGradientFunction.html</anchorfile>
      <anchor>a6a254877d1e0e4ec9c92b8dc2ee8d475</anchor>
      <arglist>(enum InterpolationMode, enum ExtrapolationMode, const TImage *=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GenericImageGradientFunction</name>
      <anchorfile>classmirtk_1_1GenericImageGradientFunction.html</anchorfile>
      <anchor>a7dfd33fce8d4577776d20e58e712631e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericFastLinearImageGradientFunction2D</name>
    <filename>classmirtk_1_1GenericFastLinearImageGradientFunction2D.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericFastLinearImageGradientFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericFastLinearImageGradientFunction2D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction2D.html</anchorfile>
      <anchor>aefcd6b1b80bfba50f3dba6eb224d8d2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction2D.html</anchorfile>
      <anchor>a902389319634fa7bb2decc918490814b</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction2D.html</anchorfile>
      <anchor>ac08ff524067ddd5f8752fa051429f132</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction2D.html</anchorfile>
      <anchor>a5fbe0894a3314e3c71d87074d630d2a6</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction2D.html</anchorfile>
      <anchor>a3eba9d2a7562559f02f990433da96500</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction2D.html</anchorfile>
      <anchor>a9eaffd7728178dc7f7d8d477e83bc92b</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction2D.html</anchorfile>
      <anchor>a9bef1d766aa313a1066f47b2aacfda88</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction2D.html</anchorfile>
      <anchor>ae71878d2a8aa8897e8ea125bef5f7483</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction2D.html</anchorfile>
      <anchor>aed9696ad0eda92bb00b6ba2d80af0567</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericFastLinearImageGradientFunction3D</name>
    <filename>classmirtk_1_1GenericFastLinearImageGradientFunction3D.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericFastLinearImageGradientFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericFastLinearImageGradientFunction3D</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction3D.html</anchorfile>
      <anchor>aab9fbcbd9c101dd4266d051d70a08d10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction3D.html</anchorfile>
      <anchor>aa4e4614dd1eb2687006b15d1b058c15a</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction3D.html</anchorfile>
      <anchor>adc6d8917171a3b0157079cd25043cc78</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction3D.html</anchorfile>
      <anchor>a15885e2296eb5961c4df60a00f03c7e7</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction3D.html</anchorfile>
      <anchor>ae8ad4ab516645e25fcc04ed9009e3a30</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction3D.html</anchorfile>
      <anchor>a8b5e53a1b06c3f3044b2ce242d71d33e</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction3D.html</anchorfile>
      <anchor>a5de0ffc71f9e1e1f80b0673f2acc6a95</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction3D.html</anchorfile>
      <anchor>ad78db64fc00c018979fb28f72df1bdd9</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericFastLinearImageGradientFunction3D.html</anchorfile>
      <anchor>afc757433062e913f634137bf1323f1d5</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericGaussianInterpolateImageFunction</name>
    <filename>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericInterpolateImageFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>afc33def3037f4fc967e07ca17172eff7</anchor>
      <arglist>(double, double, int &amp;, int &amp;, int &amp;, int &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>ace11d78467f7f72cb6d9904bf581a054</anchor>
      <arglist>(double, double, double, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a60a12bcb78fa568a75ee3a38e6feeb5e</anchor>
      <arglist>(double, double, double, double, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingInterval</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a1d8df1512aa0e182d8305f0e83a14d22</anchor>
      <arglist>(double, int &amp;, int &amp;) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericGaussianInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>aebd5795badbb16fb6c057197bdeedbd5</anchor>
      <arglist>(double=1.0)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>ac7ade780edfb78589d86937a0d11927b</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a653c8aec76a043b06e8daacd1b3c47ef</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a8bdf2f565835b4924407c915b05e927a</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a8bdd2e08b27d6461fbe778f0a4780967</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>aef8c53ac0f06fc32d671007b1f6290a1</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>abeaafbd03b87acc5b0dc67bcbd626de3</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a0c01e02a1eca45440f856cdb4cda055c</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a702c5ae0dfa91c624c54d80b2e3d6476</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>abdf0c73d273a7c515e07b2a522d9a3c2</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a4c5d7827a0b0538ac54287004f651faf</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a94c49d4b203459a5a308d21aa93299b7</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a8bdd5605b88d4aefd541427164b96fd2</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a592e1fd11b708f5b16df548b13069c2a</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a55b0c0d908af8670e56226ab3b587c02</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a035fc69be6d3b460dad5f3383171e024</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>ad0b50d70ceb737267c3a21f36425e85a</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>afab326c597a473b1637721b046f0166f</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a9e81d65caef22ab8bc41d2b2fb2b7cdf</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a0e3319b46a707e9af796160820fbf9cf</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>ad7f72c8c12f6b75fa67f4802922bcfaa</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a2844dac6bc3dd0c7034bf0607b9733f8</anchor>
      <arglist>(bool=false)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_dx</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a518fd89573720ab819367a564e43cecb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_RadiusT</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>aef2b8413cd7609101a9c531a04482a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_RadiusX</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a21dc7671e77b3a890146f464bd3a9f6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_RadiusY</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>add9d798f985fd557181dd51e2dc031c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_RadiusZ</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction.html</anchorfile>
      <anchor>a47593fe695fa42f059aed89235bb93ea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericGaussianInterpolateImageFunction2D</name>
    <filename>classmirtk_1_1GenericGaussianInterpolateImageFunction2D.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericGaussianInterpolateImageFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericGaussianInterpolateImageFunction2D</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction2D.html</anchorfile>
      <anchor>a25d553b206aba22ddc43e86bac32daa8</anchor>
      <arglist>(double sigma=1.0)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction2D.html</anchorfile>
      <anchor>af4be9537c4c55de21560d0500c9bdbd7</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction2D.html</anchorfile>
      <anchor>ab43448c39ad8ea059f2fe9cb8d9ada0f</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction2D.html</anchorfile>
      <anchor>aed2f4b40c1c6151fc8efd747f1fcaa65</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction2D.html</anchorfile>
      <anchor>a80decd214fd94cec0b3e7915c1b362ce</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction2D.html</anchorfile>
      <anchor>accf3b601947862e61b644363683b2203</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction2D.html</anchorfile>
      <anchor>a3a09dcd4faadb87e6d0f0366ccba312c</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction2D.html</anchorfile>
      <anchor>a05bcd622d562c0431f31279883fcb5c2</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction2D.html</anchorfile>
      <anchor>a176c8cca3b4d438f75981f86154c0e95</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericGaussianInterpolateImageFunction3D</name>
    <filename>classmirtk_1_1GenericGaussianInterpolateImageFunction3D.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericGaussianInterpolateImageFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericGaussianInterpolateImageFunction3D</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction3D.html</anchorfile>
      <anchor>a1c248b99af3a9fdcc170738de7f4875b</anchor>
      <arglist>(double sigma=1.0)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction3D.html</anchorfile>
      <anchor>a9ff3b25051da3be9ba45d871ce6a966c</anchor>
      <arglist>(double, double, double, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction3D.html</anchorfile>
      <anchor>ad31149affd3d048839ecc4d44d33b20d</anchor>
      <arglist>(const TOtherImage *, double, double, double, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction3D.html</anchorfile>
      <anchor>a21fd760d262e5dc4f3d137466e74669c</anchor>
      <arglist>(double, double, double, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction3D.html</anchorfile>
      <anchor>ac8d2ade2e3f10b850cb7bb76ec48de8d</anchor>
      <arglist>(double, double, double, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction3D.html</anchorfile>
      <anchor>a998a810ba6dca3b5ea7564633bd6eb14</anchor>
      <arglist>(double, double, double, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction3D.html</anchorfile>
      <anchor>a77679f4f9f9fe9bba1a0dad526f8ed1f</anchor>
      <arglist>(const TOtherImage *, double, double, double, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction3D.html</anchorfile>
      <anchor>a0816443096203cef03ef90c642976d1e</anchor>
      <arglist>(double, double, double, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction3D.html</anchorfile>
      <anchor>ad31c7917eb3bd1122e0c4374730c7685</anchor>
      <arglist>(double, double, double, double=0) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericGaussianInterpolateImageFunction4D</name>
    <filename>classmirtk_1_1GenericGaussianInterpolateImageFunction4D.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericGaussianInterpolateImageFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericGaussianInterpolateImageFunction4D</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction4D.html</anchorfile>
      <anchor>ad3e1d870e337b498099e0b4c11bc911c</anchor>
      <arglist>(double sigma=1.0)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction4D.html</anchorfile>
      <anchor>a4536db12f2d4ef4f6a008c66b42c6455</anchor>
      <arglist>(double, double, double, double) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction4D.html</anchorfile>
      <anchor>a6dc1f930415d9bfb6dd1f8ed0b3859f1</anchor>
      <arglist>(const TOtherImage *, double, double, double, double) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction4D.html</anchorfile>
      <anchor>a47dff6e9af8fd9cbe4e4b67d86f6f2d2</anchor>
      <arglist>(double, double, double, double) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction4D.html</anchorfile>
      <anchor>a409a3f81ee1157b13443e463af227b7d</anchor>
      <arglist>(double, double, double, double) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction4D.html</anchorfile>
      <anchor>a9e8525017d1319fab343249d1eb6fb8b</anchor>
      <arglist>(double, double, double, double) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction4D.html</anchorfile>
      <anchor>a05f5f30408394ffbb45f971428ee1099</anchor>
      <arglist>(const TOtherImage *, double, double, double, double) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction4D.html</anchorfile>
      <anchor>a8facc4a833e677108e979de8c2f7b2e3</anchor>
      <arglist>(double, double, double, double) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericGaussianInterpolateImageFunction4D.html</anchorfile>
      <anchor>adcd5fb80a25ba59ab0d3fdb11fd49cf9</anchor>
      <arglist>(double, double, double, double) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericImage</name>
    <filename>classmirtk_1_1GenericImage.html</filename>
    <templarg>VoxelType</templarg>
    <base>mirtk::BaseImage</base>
    <member kind="typedef">
      <type>voxel_info&lt; ScalarType &gt;::RealType</type>
      <name>RealScalarType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a79137ddf636c95f596e39b0c6b9b6a83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>voxel_info&lt; VoxelType &gt;::RealType</type>
      <name>RealType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa99b2a5e620031bb7afe5263a25f81f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>voxel_info&lt; VoxelType &gt;::ScalarType</type>
      <name>ScalarType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9d5f6dda2a94510c9d91155404594238</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TVoxel</type>
      <name>VoxelType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac9ca2966d74eca854694dc31ce3add94</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6e792ba0aabc434af936adade0ed5791</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BaseImage *</type>
      <name>Copy</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a274b0dd592d075a24b79fb1103ecae32</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9e0bf930fb5efa14fd69fecce8220e0b</anchor>
      <arglist>(const VoxelType *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afa17d6e4d9fb69ab7e0b6d3a5da73d00</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae4af0759dcf4e4cd3013cbe165021366</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CropPad</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ad9252baff8d79f81822098b77fdb007c</anchor>
      <arglist>(int margin=0)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa10e4d965a0037827cbc692cee7282d1</anchor>
      <arglist>(int=0)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afbd0a3b1f357f43e019823e1090b93f4</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a51f7ca5415621dc8b1be3ae94464992a</anchor>
      <arglist>(int=0) const </arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a04129fbfd9bfbe78e9adb068703a001a</anchor>
      <arglist>(int, int, int=0, int=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ad1326c2e86894919bc9d02b44867c455</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ad149740f9839223d7096eb08f6291ec3</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a1b4066f860bfc18fc24561e3a08bf271</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipYT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aaf315650e241f9fdfcba160f4bac373a</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipYZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a1e4bf3b9d56ebe49bccb6dcf1cb49dda</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipZT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a2e32a37adb7ffc8ac3a57deae538698b</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a00c0ebcb1dcbd3c36954265d34d768dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ad6ca57574a54a3fd51e608b641d3fb48</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a76ffb2d003e871acd11af22364bd5f42</anchor>
      <arglist>(int, int, int=1, int=1, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae053507fa68cb6bd1e6b3c8723bd2d75</anchor>
      <arglist>(int, int, int, int, int, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a60b153ca95c7f13b54af31b3252d6a07</anchor>
      <arglist>(const ImageAttributes &amp;, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa37ceaa717fcbc3136bdab13d39b3b38</anchor>
      <arglist>(const ImageAttributes &amp;, int, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a911a78170253dec52f40ab2981dad112</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ad6b48148b9e002572fa64aaa9326e6a5</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afb0dc37758d03599aa773ba128e4a0f4</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a74b5edc480e16cba4aad4a8c9b3e7700</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a88de6cd3ed6212be1e49ac34e3f0eed9</anchor>
      <arglist>(int, int, int=0, int=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af1573070e7d06775159caf27395ba6d6</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0e7dc76c82f36bc10fe6bae68fcf4c8b</anchor>
      <arglist>(int, int, int=0, int=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8f288ce3534a3260654e4b97042a66b2</anchor>
      <arglist>(Vector &amp;, int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af607713dfe9d429d936dd57d19e4c2d0</anchor>
      <arglist>(Vector &amp;, int, int, int=0, int=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a803262c011d7f8997fa6daa3b7c33951</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5f128aa0fab53377db01eab5a6203b7d</anchor>
      <arglist>(int, int, int=0, int=0) const </arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>GetAverage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a87d7573f0fcecfe9fb0c95be2edd92ad</anchor>
      <arglist>(int=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abf9e71af9c077932c75f6d019e8e40bb</anchor>
      <arglist>(int=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a85563faa61c5ae710bf279709bfd5776</anchor>
      <arglist>(int=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a44f27382851f5e12c7b27de8d7e91c06</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac66d9d2ef4b46f726aa83c029ae5d726</anchor>
      <arglist>(int, int, int=0, int=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetDataType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a2cfdb2025a1b820bdca42c900766762b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetDataTypeMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>adf2d6be075f40e73c7e38e8cd6cd3894</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetDataTypeMin</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4a0da7ecbc3afecaa2ff4bfbfa7e8bc6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetDataTypeSize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aabeb99350636041b00d2c74ca513539e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a31d04e9c69a72ddb3ccc72c46e2f6116</anchor>
      <arglist>(int, int=-1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ada9c1f867f851e8cf20e777a53289407</anchor>
      <arglist>(GenericImage &amp;, int, int=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a922d1b487eee194d509671c0975778b3</anchor>
      <arglist>(BaseImage *&amp;, int, int=-1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMaxPosition</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a77c1be916d9e0be47486f34cbec85cb8</anchor>
      <arglist>(Point &amp;, int=1, int=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae12800f47714efb75c0bdc1733cefb70</anchor>
      <arglist>(VoxelType &amp;, VoxelType &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a15263dab40602aec9d8023aaf84af48b</anchor>
      <arglist>(VoxelType &amp;, VoxelType &amp;, VoxelType) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a44b48fad850b52bf004cb8fb8097a16b</anchor>
      <arglist>(VoxelType *, VoxelType *) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5626ece18826ef8f4010932f597c3809</anchor>
      <arglist>(VoxelType *, VoxelType *, VoxelType) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMaxPad</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a651e8b4818bd611d462ec054a2e5d3b0</anchor>
      <arglist>(VoxelType *, VoxelType *, VoxelType) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>GetPointerToVoxels</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a104db5b6f2ee2f4084a04872c8573e8b</anchor>
      <arglist>(int=0, int=0, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>GetPointerToVoxels</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ab0724f27ead65f0d9cdf0a404291d2d0</anchor>
      <arglist>(int=0, int=0, int=0, int=0) const </arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a61ca2d3e3916c118f530da48c858eaab</anchor>
      <arglist>(int, int) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4af6e7a51ca7cd933f5b3197a47aea0e</anchor>
      <arglist>(GenericImage &amp;, int, int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a879449b483a06edad3cb64ffbc18f019</anchor>
      <arglist>(BaseImage *&amp;, int, int) const </arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a1267a620961f3b6bdd22ebab6bcd879a</anchor>
      <arglist>(int, int, int, int, int, int) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6e7a7aed1369b2157b8c8686af1f02eb</anchor>
      <arglist>(GenericImage &amp;, int, int, int, int, int, int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afb54adef8ee18bbe5ed59036bfd8ffd4</anchor>
      <arglist>(BaseImage *&amp;, int, int, int, int, int, int) const </arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a3f0e5d51e5e95cf21af4705282708f44</anchor>
      <arglist>(int, int, int, int, int, int, int, int) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7566bdb15030b20c2f9716134bc09a92</anchor>
      <arglist>(GenericImage &amp;, int, int, int, int, int, int, int, int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ab87c3076d3989fcaafca9887b0fd91a1</anchor>
      <arglist>(BaseImage *&amp;, int, int, int, int, int, int, int, int) const </arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>GetSD</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afe7cde6be587aace5441e122813fa5c6</anchor>
      <arglist>(int=1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GravityCenter</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ab5cd3e2562c532c04c7dfd8e8392e56e</anchor>
      <arglist>(Point &amp;, int=1, int=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a29f8246cfc3ca2d142d45a912e80eec7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6d71fae8b82b452cccf5f73aa3cf43df</anchor>
      <arglist>(const ImageAttributes &amp;, int, VoxelType *data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ab3c46a3d5c964239937f1b5f196b7cfc</anchor>
      <arglist>(const ImageAttributes &amp;, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9226ad6eb70185f55ba3ec7fd3c684be</anchor>
      <arglist>(const ImageAttributes &amp;, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a72b8acd576763f9074d835ef3fd00cbc</anchor>
      <arglist>(int, int, int, int, int, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a94d68fbfbacfdd2259251da15f21e7c8</anchor>
      <arglist>(int, int, int=1, int=1, VoxelType *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>N</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a445e2db97c1ae66f68e1f48569330b68</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a3428e228cdb894c0dd7324790dd2fed2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BinaryImage</type>
      <name>operator!=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae422faafb5cc503c46dbe41b0093c29b</anchor>
      <arglist>(VoxelType) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa7cb99b55c3a646c2ebdcf7917cde637</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a122db8601ed785cb68adb08f320614a2</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a827c9b59c984acac4e022dc0106a934a</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const VoxelType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a479f251be3669f28a7333907d3748da4</anchor>
      <arglist>(int, int, int=0, int=0) const </arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a71bb6d4ef78403253e440a4ce6c705fc</anchor>
      <arglist>(const GenericImage &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a51f7b830215b4f252eb34f584889e8bd</anchor>
      <arglist>(double) const </arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af658a43114c97e6cf8552f56dedad641</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a1b4e3f69c7ddc6f9c9cbd59065f19e40</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator+</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aca4421c7c2375ae1e3c245da76dfd8db</anchor>
      <arglist>(const GenericImage &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator+</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a2e8e71cb6c2fe72c3be209b987b7678c</anchor>
      <arglist>(double) const </arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a1b8435bb3e3b5ce3aa0a83c6362c11ed</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a14176eec6168fc7059a18f4d172da0d3</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator-</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae1a02597a15208b78e0af6f0f2e38870</anchor>
      <arglist>(const GenericImage &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator-</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9ae585108889b1690b7aa3b980b676a8</anchor>
      <arglist>(double) const </arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a799ed6963ffbb16de13bb2f757f17ff4</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ab4f127dd60e91fab02e646ddaae175d9</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator/</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acaff6d1ecf0c9e9335f0ed54f80c2689</anchor>
      <arglist>(const GenericImage &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator/</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acb8efc62e28bfd30668e1dd047f30fa4</anchor>
      <arglist>(double) const </arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a60ee792b41491abe18443f6aa40c29ba</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa8c8aa9880c80db8fc6f1d20393eda2d</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator&lt;</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ab0455ca592ff61bc22c1b6c5d2ce3c48</anchor>
      <arglist>(VoxelType) const </arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator&lt;=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5e5b9564082bcdbccad02c6050d4cf1f</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a93da69d85925c07f70c94a227c8f3456</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a64fef6b77d016c234d7cc889a07d04e6</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>affd2de5bc09206775827494da46cac9c</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a3abe9f2c0d22d3d52e5baa9321bf9549</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ab61c006928ab86d3bcb67a362a0693bb</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator&gt;</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acbef9322452f03ad957f632323d30237</anchor>
      <arglist>(VoxelType) const </arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator&gt;=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8b285f2ce505e8e70308cb8a1eeed088</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acca310957bfc1080c170ee74ded4d2f4</anchor>
      <arglist>(int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acd494c7039d4e01ebb50f28174ace41b</anchor>
      <arglist>(int, int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6d7409f3810cf37d28f1a6d54da389ad</anchor>
      <arglist>(int, int, int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a83bebf9102ff90bbe9909d3eea4f0203</anchor>
      <arglist>(int, int, int, int, VoxelType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a954e524a435eb076d754c25ec35ff70c</anchor>
      <arglist>(int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a39d1b7a776221fe6194c09cccb0cf046</anchor>
      <arglist>(int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a95a1963f21b8cf5ce3ef8d522a2c9d97</anchor>
      <arglist>(int, int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a1ae9c02fea5c78cb0b08c70c09007b3a</anchor>
      <arglist>(int, int, int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aca43b3b19e9cae2713e75f77b79bc057</anchor>
      <arglist>(int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9850de321e58f0f5e7fad19a525d4a19</anchor>
      <arglist>(int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0a6b96f01802ce4979080a760349ad43</anchor>
      <arglist>(int, int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8e3e7e98e2125e6d67c863d0e0b885a8</anchor>
      <arglist>(int, int, int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutBackgroundValueAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aeb37b40f030833e6327b802fba4c92b8</anchor>
      <arglist>(double, bool)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a51f10a3e6e7174681d1a9add3a41fbaf</anchor>
      <arglist>(VoxelType, VoxelType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a37121c72a2d5de789c508ba745ac91de</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectX</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9eac61cdd0d85facd067d53bed782fe2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a08490c13ad5e08c297e62097bcd59fa6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0cbfd8cbd35c86cc48a2d454bb46d797</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>VoxelToIndex</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a69ac06b74d6f1980656a87ec57153fa8</anchor>
      <arglist>(int, int, int=0, int=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a2a1604267a70e8e28e1f53bc94659065</anchor>
      <arglist>(const char *) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5cddf673a05dac2cf1d481054b8b9e21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>AllocateImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ad9661642e2461734f3439ef58cb0a748</anchor>
      <arglist>(VoxelType *=NULL)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VoxelType *</type>
      <name>_data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af2309882e10f1427d5facaac6597d204</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_dataOwner</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa2284d63fc7615ac07a0b9265f484897</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VoxelType ****</type>
      <name>_matrix</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a79b3bd6a8fd9957ed24eb0bb8458345c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericImageGradientFunction</name>
    <filename>classmirtk_1_1GenericImageGradientFunction.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::ImageGradientFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImageGradientFunction.html</anchorfile>
      <anchor>a709c39e2659ab503d3d92def28805899</anchor>
      <arglist>(bool coeff=false)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>BoundingInterval</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a34d7d983d776b0f9ace36cb83d58b6ae</anchor>
      <arglist>(double, int &amp;, int &amp;) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual GradientType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>acf947235ec0a0b4662e28a50f19d6e01</anchor>
      <arglist>(double, double, double=0, double=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual GradientType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a6c03106e4643913467ffc6498c08d5ee</anchor>
      <arglist>(double, double, double=0, double=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual GradientType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>aefce92f9420981527d639ea1040a743d</anchor>
      <arglist>(double, double, double=0, double=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual GradientType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>ac7659c2e19e0b38e745c7e6a1d750e65</anchor>
      <arglist>(double, double, double=0, double=0) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericImageIterator</name>
    <filename>classmirtk_1_1GenericImageIterator.html</filename>
    <templarg></templarg>
    <base>mirtk::ImageIterator</base>
    <member kind="function">
      <type>VoxelType *</type>
      <name>Current</name>
      <anchorfile>classmirtk_1_1GenericImageIterator.html</anchorfile>
      <anchor>ac311ece045c7badfd0509bef92c3b6dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>Current</name>
      <anchorfile>classmirtk_1_1GenericImageIterator.html</anchorfile>
      <anchor>a09691e4ca93045c6b63b567c05c3442f</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImageIterator</name>
      <anchorfile>classmirtk_1_1GenericImageIterator.html</anchorfile>
      <anchor>a240052514491112b062a48fb230b5f06</anchor>
      <arglist>(const ImageAttributes &amp;, VoxelType *=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImageIterator</name>
      <anchorfile>classmirtk_1_1GenericImageIterator.html</anchorfile>
      <anchor>ada1c23a6a94adf7455d8edef04267011</anchor>
      <arglist>(GenericImage&lt; VoxelType &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImageIterator</name>
      <anchorfile>classmirtk_1_1GenericImageIterator.html</anchorfile>
      <anchor>a3c63a17c34546700c6f19fb7f8607f7c</anchor>
      <arglist>(GenericImage&lt; VoxelType &gt; *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImageIterator</name>
      <anchorfile>classmirtk_1_1GenericImageIterator.html</anchorfile>
      <anchor>a044b6d08d838e8a13127ed72910d746b</anchor>
      <arglist>(const ConstImageIterator &amp;)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>Next</name>
      <anchorfile>classmirtk_1_1GenericImageIterator.html</anchorfile>
      <anchor>a6a95caf321ef8c30395ce215678dd86c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>Next</name>
      <anchorfile>classmirtk_1_1GenericImageIterator.html</anchorfile>
      <anchor>a076206b2898d955207c47456ff3bec1b</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>GenericImageIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImageIterator.html</anchorfile>
      <anchor>ad7129ece33abfd2231fd77c22f94cb6a</anchor>
      <arglist>(const GenericImageIterator &amp;)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType &amp;</type>
      <name>Value</name>
      <anchorfile>classmirtk_1_1GenericImageIterator.html</anchorfile>
      <anchor>a6c6f37e96346e3da6f2f6d90783b0c79</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType &amp;</type>
      <name>Value</name>
      <anchorfile>classmirtk_1_1GenericImageIterator.html</anchorfile>
      <anchor>a81561ea129185849ee9f77c7d835e661</anchor>
      <arglist>(int t) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ValueAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImageIterator.html</anchorfile>
      <anchor>a05256e7e50c6a6ad2f192756744a0081</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ValueAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImageIterator.html</anchorfile>
      <anchor>a0ea2198ae3c1a76263257cb6c157421d</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GenericImageIterator</name>
      <anchorfile>classmirtk_1_1GenericImageIterator.html</anchorfile>
      <anchor>a3b264ab48adb63cab65cf0a9d262413c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>Current</name>
      <anchorfile>classmirtk_1_1ImageIterator.html</anchorfile>
      <anchor>a454173f5be7543577bcbd2658895621e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>Current</name>
      <anchorfile>classmirtk_1_1ImageIterator.html</anchorfile>
      <anchor>a81a04b48f3df54c20b46f568c5099285</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageIterator</name>
      <anchorfile>classmirtk_1_1ImageIterator.html</anchorfile>
      <anchor>af8ed56d09cdc9831e44ee6119b8c6629</anchor>
      <arglist>(const ImageAttributes &amp;, int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageIterator</name>
      <anchorfile>classmirtk_1_1ImageIterator.html</anchorfile>
      <anchor>aabf4437a1ebbe93b1ea986fc2b0d15f9</anchor>
      <arglist>(const ImageAttributes &amp;, void *=NULL, int=MIRTK_VOXEL_UNKNOWN)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageIterator</name>
      <anchorfile>classmirtk_1_1ImageIterator.html</anchorfile>
      <anchor>a9f2afb1d816e3e3b52bde6091f2fd9ba</anchor>
      <arglist>(BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageIterator</name>
      <anchorfile>classmirtk_1_1ImageIterator.html</anchorfile>
      <anchor>a5f7bd55bf5bc7285c42a5a18544880ab</anchor>
      <arglist>(BaseImage *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageIterator</name>
      <anchorfile>classmirtk_1_1ImageIterator.html</anchorfile>
      <anchor>ae44fc5223e2de9ce6e044c7edd714629</anchor>
      <arglist>(const ConstImageIterator &amp;)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>Next</name>
      <anchorfile>classmirtk_1_1ImageIterator.html</anchorfile>
      <anchor>aefa4dbb5fa1aa94d32bc90492a5348f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>Next</name>
      <anchorfile>classmirtk_1_1ImageIterator.html</anchorfile>
      <anchor>abbc793cbbc093a91fb63056541753092</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>ImageIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1ImageIterator.html</anchorfile>
      <anchor>ad4bf981579f6d017b051a7906756e00b</anchor>
      <arglist>(const ImageIterator &amp;)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType &amp;</type>
      <name>Value</name>
      <anchorfile>classmirtk_1_1ImageIterator.html</anchorfile>
      <anchor>a7a99fbd6ebb3019b739031912372d5a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType &amp;</type>
      <name>Value</name>
      <anchorfile>classmirtk_1_1ImageIterator.html</anchorfile>
      <anchor>aeeffca22f0ecad46ab8d4fc76efa3c9d</anchor>
      <arglist>(int t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ImageIterator</name>
      <anchorfile>classmirtk_1_1ImageIterator.html</anchorfile>
      <anchor>abb8042d298a74a75c734b0bfd60b65c5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericInterpolateImageFunction</name>
    <filename>classmirtk_1_1GenericInterpolateImageFunction.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::InterpolateImageFunction</base>
    <member kind="function" virtualness="pure">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>ab0f26534a351ca1d52ce97516d72789a</anchor>
      <arglist>(double, double, double=0, double=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a525c841a9f9ff6c6f726dc56a8f735ad</anchor>
      <arglist>(double, double, double=0, double=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a9fbb4778429ddc928d2ec4aef9797a36</anchor>
      <arglist>(double, double, double=0, double=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>af48408abe646870b4b1ddf5f7a59f06f</anchor>
      <arglist>(double, double, double=0, double=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a1bb8a15511bea147030867fb0beb90cc</anchor>
      <arglist>(bool coeff=false)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>BoundingInterval</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a5045c72e2a238208370d0279eb4469df</anchor>
      <arglist>(double, int &amp;, int &amp;) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericLinearImageGradientFunction</name>
    <filename>classmirtk_1_1GenericLinearImageGradientFunction.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericImageGradientFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingInterval</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction.html</anchorfile>
      <anchor>a03911f5e6195371e631283ee38a24f18</anchor>
      <arglist>(double, int &amp;, int &amp;) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericLinearImageGradientFunction</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction.html</anchorfile>
      <anchor>a5b25b05a8fa9ebe7833689e98c5b0e2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction.html</anchorfile>
      <anchor>a2874e38c5c8a365284afd3ef1fd78adb</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetInside2D</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction.html</anchorfile>
      <anchor>a60b49f4d84dcebc59e13db7ede1b45ce</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetInside3D</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction.html</anchorfile>
      <anchor>a0d7441ab252794a7f1eb46132d0ab24f</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction.html</anchorfile>
      <anchor>af54140a988367be826a4df9d3784deef</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction.html</anchorfile>
      <anchor>ac9b2dc2e8e34c0ded13d5f125e11407c</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPaddingInside2D</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction.html</anchorfile>
      <anchor>abf4c1954bad5d79232ffa687d865092d</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPaddingInside3D</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction.html</anchorfile>
      <anchor>a7aa087406ff098fb5a032122c162840e</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction.html</anchorfile>
      <anchor>ab46acc5ecf8236ec105342345013f5d9</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction.html</anchorfile>
      <anchor>ac93a33233b516c9b612634fd3bf6b606</anchor>
      <arglist>(bool=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericLinearImageGradientFunction</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction.html</anchorfile>
      <anchor>ad3024865da4ad1e0af5df242663a19b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GenericLinearInterpolateImageFunction&lt; TImage &gt;</type>
      <name>_ContinuousImage</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction.html</anchorfile>
      <anchor>aef382e80d52c3e4d44516831bc00e7ed</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericLinearImageGradientFunction2D</name>
    <filename>classmirtk_1_1GenericLinearImageGradientFunction2D.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericLinearImageGradientFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericLinearImageGradientFunction2D</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction2D.html</anchorfile>
      <anchor>ae7cc605b5f6a6c62a67981d06380ad6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction2D.html</anchorfile>
      <anchor>a4769ab2531381292570f84ad70e223f9</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction2D.html</anchorfile>
      <anchor>a97e9e9b686340d916fb9d20fe4a59640</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericLinearImageGradientFunction3D</name>
    <filename>classmirtk_1_1GenericLinearImageGradientFunction3D.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericLinearImageGradientFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericLinearImageGradientFunction3D</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction3D.html</anchorfile>
      <anchor>a8451afee2dc3333956fadc36c8a1b1de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction3D.html</anchorfile>
      <anchor>add151e42f26b8ffd17dc55415de50be1</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction3D.html</anchorfile>
      <anchor>adcf6a15ddd845fd612411b99f9c8fc03</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericLinearInterpolateImageFunction</name>
    <filename>classmirtk_1_1GenericLinearInterpolateImageFunction.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericInterpolateImageFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingInterval</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>af93dfa12a33f7bc66fe507aaef0aa6c5</anchor>
      <arglist>(double, int &amp;, int &amp;) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericLinearInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a5040a98cdd16e4fcb27b35649cda99d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a6ddb29881a99a84715895a75da8e7f33</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a11f3616e9db52101df15d41c1dd03735</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a28c3d04ca451f67a4ebd9e832aa47930</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a08f5efc877d71e08e2f94be03a28e156</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a73e5599e347924701f646533131a88b7</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a30a197c832965e5edea8c06f4fae84f7</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>ad2fa0ac8a8e8d00c6469060dca20f37c</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>ad0a93bf0aa8043f182ab7f5fce7d2724</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>af578884bf41870cd42a22b7365b1bd5b</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>GenericLinearInterpolateImageFunction&lt; BaseImage &gt;::VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a23deac3c47079497de3811cb928025a9</anchor>
      <arglist>(double x, double y, double z, double t) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside2D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>aa9168da3d11e0c3b7042367e39f01030</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside3D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>ac14568e5ce580cb3e01fe54925a0db75</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside4D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a6d7eaf8efde7026071dc1dc57289e070</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a648e0bef0ca94751a75b174b2d2da79e</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>abf909c206c534a9fc3fc56e7c62029a1</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>aee6fcfe804fff7d29f0c4dd290fa76f2</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a5d3fa2a873aaca11c3e697779f385439</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a51e55034c449d1a28ef5b9116b449b17</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a6889990e2182c0e99eea63a6a8ce1b6f</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a2afc8e7275d0ea0c35b0b9c9b3f943a2</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a3794ac708d52b20ab9ce22e14dcd91ae</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>acba77a74c0ff0d63f78c5798171c49d8</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>ad6e16827903f04cf453a78e544e1e20b</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a0df5c59420960694e9cce4b5b5913bf6</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a15df003416197ba2c4a2410a8ad237e3</anchor>
      <arglist>(bool=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericLinearInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>afe0463e1f4324ce69b5387a81d038a2c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericLinearInterpolateImageFunction2D</name>
    <filename>classmirtk_1_1GenericLinearInterpolateImageFunction2D.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericLinearInterpolateImageFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericLinearInterpolateImageFunction2D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction2D.html</anchorfile>
      <anchor>a144bcd54f3d26b27d7a0ac5782c5c237</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction2D.html</anchorfile>
      <anchor>afd05407040eb7c905b121937ed472e60</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction2D.html</anchorfile>
      <anchor>aac0bb9e672f8d3edc1958cc4ed833e0b</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction2D.html</anchorfile>
      <anchor>a31c7f8077b0e854db159cbadbf0cbc4d</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction2D.html</anchorfile>
      <anchor>a72941a37c25b1d7bea5098329ae5425a</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction2D.html</anchorfile>
      <anchor>ace9b49192f377ce38f679eeba1c8182f</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction2D.html</anchorfile>
      <anchor>aad65ef604782cc0b3e1dae4bd64bbb37</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction2D.html</anchorfile>
      <anchor>a9b3e13ea4355828c001fa873b1a7ea3e</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction2D.html</anchorfile>
      <anchor>a80e1e1a5992bf77fbb24f2af3521a20c</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericLinearInterpolateImageFunction3D</name>
    <filename>classmirtk_1_1GenericLinearInterpolateImageFunction3D.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericLinearInterpolateImageFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericLinearInterpolateImageFunction3D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction3D.html</anchorfile>
      <anchor>ad201627be31bb02600b103ee568c439b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction3D.html</anchorfile>
      <anchor>a75b900baf5ee4e8475b2dce1e4ff6504</anchor>
      <arglist>(double, double, double, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction3D.html</anchorfile>
      <anchor>afe84ee19e84a604b9df8e8750d045355</anchor>
      <arglist>(const TOtherImage *, double, double, double, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction3D.html</anchorfile>
      <anchor>aa8a99c4d75ac4d681e9f376f3a8cf277</anchor>
      <arglist>(double, double, double, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction3D.html</anchorfile>
      <anchor>ae16a7ca87fc7103c5962643e28754d58</anchor>
      <arglist>(double, double, double, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction3D.html</anchorfile>
      <anchor>a64a9348ca18707a37150d45a03699be2</anchor>
      <arglist>(double, double, double, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction3D.html</anchorfile>
      <anchor>a8f39e7974ab5da40cc08540932dd19b1</anchor>
      <arglist>(const TOtherImage *, double, double, double, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction3D.html</anchorfile>
      <anchor>a28884681f5db1f03008012ebfb517df6</anchor>
      <arglist>(double, double, double, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction3D.html</anchorfile>
      <anchor>af1f42f2aacd7ba553cd6034ef3ab8a50</anchor>
      <arglist>(double, double, double, double=0) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericLinearInterpolateImageFunction4D</name>
    <filename>classmirtk_1_1GenericLinearInterpolateImageFunction4D.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericLinearInterpolateImageFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericLinearInterpolateImageFunction4D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction4D.html</anchorfile>
      <anchor>a836755ecfa0b515c9962e5694cb934b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction4D.html</anchorfile>
      <anchor>aed1bbf2a3383f132d7835c751eb97c66</anchor>
      <arglist>(double, double, double, double) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction4D.html</anchorfile>
      <anchor>a945cf6188399c345138d261aaebaec62</anchor>
      <arglist>(const TOtherImage *, double, double, double, double) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction4D.html</anchorfile>
      <anchor>a1e0e5706055811977a6ceeef49aab5af</anchor>
      <arglist>(double, double, double, double) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction4D.html</anchorfile>
      <anchor>a8a31623cd8833a140769eaf4a2253147</anchor>
      <arglist>(double, double, double, double) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction4D.html</anchorfile>
      <anchor>a51f99c8972493ad484acf4967fb6bdcc</anchor>
      <arglist>(double, double, double, double) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction4D.html</anchorfile>
      <anchor>a6beb35c28b7246c12a279ac8b2f591f6</anchor>
      <arglist>(const TOtherImage *, double, double, double, double) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction4D.html</anchorfile>
      <anchor>ac7ed789506e00ad70f09775eb4b0e115</anchor>
      <arglist>(double, double, double, double) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction4D.html</anchorfile>
      <anchor>a2bfc8f367fdfe5f296e3c2396a0497d4</anchor>
      <arglist>(double, double, double, double) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericMirrorExtrapolateImageFunction</name>
    <filename>classmirtk_1_1GenericMirrorExtrapolateImageFunction.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::IndexExtrapolateImageFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericMirrorExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericMirrorExtrapolateImageFunction.html</anchorfile>
      <anchor>ae57d891938041c93ba532e6bcba03ac9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>TransformIndex</name>
      <anchorfile>classmirtk_1_1GenericMirrorExtrapolateImageFunction.html</anchorfile>
      <anchor>a285e136381d8f0ed3ecb5c5ad51ae8c5</anchor>
      <arglist>(int &amp;index, int max) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericMirrorExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericMirrorExtrapolateImageFunction.html</anchorfile>
      <anchor>af18263a6b0fe90a8afcba48219537485</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a58718aba89f6b534eb7dcec0428ffb17</anchor>
      <arglist>(int, int, int=0, int=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>ae8aacac9b05741b0e0aa1e17e1903e70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsForeground</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a710ffd07690440611527e950f90e64f0</anchor>
      <arglist>(int, int, int=0, int=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Transform</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a994f47f20686636e472b507c4ec6d266</anchor>
      <arglist>(int &amp;, int &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Transform</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a723968f24927bfc1d198e0894b6f248d</anchor>
      <arglist>(int &amp;, int &amp;, int &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Transform</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a3114e8641541e355eae750e255366c64</anchor>
      <arglist>(int &amp;, int &amp;, int &amp;, int &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>TransformT</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>adcae5962f85d5d1d232a80bf16e8a563</anchor>
      <arglist>(int &amp;l) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>TransformT</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a278496ea349ef2c12120938c04ee1472</anchor>
      <arglist>(int &amp;l, int c) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TransformX</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>aa6436d31ba8f32a4d7cee4adcdadae0a</anchor>
      <arglist>(int &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TransformX</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a3b6cfcf14d8ab306143c0f06ee826e73</anchor>
      <arglist>(int &amp;, int) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TransformY</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a26e7e917badec85b78fa864bbd1b5b33</anchor>
      <arglist>(int &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TransformY</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a13fc05469115fa1e2d103e3cfad14f2f</anchor>
      <arglist>(int &amp;, int) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TransformZ</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a6c806288dc11f892a14a6d89a1cbf833</anchor>
      <arglist>(int &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TransformZ</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a6dcc9f60087b314c93bece04b945f056</anchor>
      <arglist>(int &amp;, int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IndexExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a26674588f01f2a3b9f80114a0d2d6b3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Apply</name>
      <anchorfile>classmirtk_1_1GenericMirrorExtrapolateImageFunction.html</anchorfile>
      <anchor>afc91b084028ef7b4b40fe02c8b02095f</anchor>
      <arglist>(int &amp;index, int max)</arglist>
    </member>
    <member kind="typedef">
      <type>TImage</type>
      <name>ImageType</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a1868c1fea95c1243173b429e891a232f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImageType::RealType</type>
      <name>RealType</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a138ca258a1a77f09baf39d4e02751b7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImageType::VoxelType</type>
      <name>VoxelType</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a2cc6d24e4ab60fa2f2c99e13a6b52a72</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IndexExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>ad436529ab7a2a53fefa652bcb6d7669a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_tmax</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a98c67188327d04f09a7f9d334a04024b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_xmax</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>aa138da4590f6d6c6a35d0907c1f97efd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_ymax</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a1f6705775ba8ae4b8342bb155b239474</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_zmax</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a95b991eb6c2c5e1dd29e82a8b0caa7cd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericNearestNeighborExtrapolateImageFunction</name>
    <filename>classmirtk_1_1GenericNearestNeighborExtrapolateImageFunction.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::IndexExtrapolateImageFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericNearestNeighborExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericNearestNeighborExtrapolateImageFunction.html</anchorfile>
      <anchor>aabae47b07144c71ce8af1f81f386140a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>TransformIndex</name>
      <anchorfile>classmirtk_1_1GenericNearestNeighborExtrapolateImageFunction.html</anchorfile>
      <anchor>a9c5a5cae527a9b870d982ae2d2493adc</anchor>
      <arglist>(int &amp;index, int max) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericNearestNeighborExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericNearestNeighborExtrapolateImageFunction.html</anchorfile>
      <anchor>ab81109984812efd0910ae4719d9e36ed</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericNearestNeighborInterpolateImageFunction</name>
    <filename>classmirtk_1_1GenericNearestNeighborInterpolateImageFunction.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericInterpolateImageFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingInterval</name>
      <anchorfile>classmirtk_1_1GenericNearestNeighborInterpolateImageFunction.html</anchorfile>
      <anchor>aa5f792c50aef37e4f16610cf2491cb65</anchor>
      <arglist>(double, int &amp;, int &amp;) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericNearestNeighborInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericNearestNeighborInterpolateImageFunction.html</anchorfile>
      <anchor>a20d73d2c0de3cf89e5c37daca66052af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericNearestNeighborInterpolateImageFunction.html</anchorfile>
      <anchor>adc3fd3512c969cf277a68211d71352b2</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericNearestNeighborInterpolateImageFunction.html</anchorfile>
      <anchor>afd2c61672668117e6c3d29590df6cd22</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericNearestNeighborInterpolateImageFunction.html</anchorfile>
      <anchor>a792bdcdf71f42744bebd3272e9c0acd3</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericNearestNeighborInterpolateImageFunction.html</anchorfile>
      <anchor>acbdd50d99d5c663b740bce7e9f8317b3</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericNearestNeighborInterpolateImageFunction.html</anchorfile>
      <anchor>a97723ad7fe4716ffa6849f9e05d826a8</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericNearestNeighborInterpolateImageFunction.html</anchorfile>
      <anchor>a533cf6a6789badb3f37b90bde1b99bd5</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericNearestNeighborInterpolateImageFunction.html</anchorfile>
      <anchor>a160be4de44cc14dc5b5c339893c53baa</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericNearestNeighborInterpolateImageFunction.html</anchorfile>
      <anchor>a8b3b46e2ef860dbeaff80f995c2dc827</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericNearestNeighborInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericNearestNeighborInterpolateImageFunction.html</anchorfile>
      <anchor>a1174ebadd9becd4195cbaefb302a5670</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericRegistrationDebugger</name>
    <filename>classmirtk_1_1GenericRegistrationDebugger.html</filename>
    <base>mirtk::Observer</base>
    <member kind="function">
      <type></type>
      <name>GenericRegistrationDebugger</name>
      <anchorfile>classmirtk_1_1GenericRegistrationDebugger.html</anchorfile>
      <anchor>a32b41dd75270c711a94dca20d4fac1e7</anchor>
      <arglist>(const char *=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>HandleEvent</name>
      <anchorfile>classmirtk_1_1GenericRegistrationDebugger.html</anchorfile>
      <anchor>a008d628559f78777c8cd41b8d978b1cd</anchor>
      <arglist>(Observable *, Event, const void *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GenericRegistrationDebugger</name>
      <anchorfile>classmirtk_1_1GenericRegistrationDebugger.html</anchorfile>
      <anchor>a73234960aedce6d6b7cd8ecba077e8e7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericRegistrationFilter</name>
    <filename>classmirtk_1_1GenericRegistrationFilter.html</filename>
    <base>mirtk::RegistrationFilter</base>
    <class kind="struct">mirtk::GenericRegistrationFilter::ConstraintInfo</class>
    <class kind="struct">mirtk::GenericRegistrationFilter::DisplacementInfo</class>
    <class kind="struct">mirtk::GenericRegistrationFilter::ImageSimilarityInfo</class>
    <class kind="struct">mirtk::GenericRegistrationFilter::PointSetConstraintInfo</class>
    <class kind="struct">mirtk::GenericRegistrationFilter::PointSetDistanceInfo</class>
    <class kind="struct">mirtk::GenericRegistrationFilter::PointSetOutputInfo</class>
    <class kind="struct">mirtk::GenericRegistrationFilter::TransformationInfo</class>
    <member kind="typedef">
      <type>GenericImage&lt; double &gt;</type>
      <name>DisplacementImageType</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>ae7ff79e044051a1f23263241f670df42</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Array&lt; ResampledImageType &gt;</type>
      <name>ResampledImageList</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a45587ecfabaa1e33fe7d666e126d02da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RegisteredImage::InputImageType</type>
      <name>ResampledImageType</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a3bfd7bbba7389772d52bafe4412acb36</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ResampledImageType::VoxelType</type>
      <name>VoxelType</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>aa072bf1dfc64726179b87e37c8de5721</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddInput</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>ab2615c4271b5e93e6a279d1cd5f5a0cf</anchor>
      <arglist>(const BaseImage *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddInput</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>af6e54f40a68a963517769ee07b3dcfa0</anchor>
      <arglist>(vtkPointSet *, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Clear</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a443caffeba82751d4ba74c539f3c0735</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericRegistrationFilter</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>ab85a8e6e876ec53ea9240a05dfe81404</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GuessParameter</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a47fa6734c70c0583936b637289ebafc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Input</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>afe2f24063066e2c72f2af8a3fa8219f8</anchor>
      <arglist>(const BaseImage *, const BaseImage *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Input</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>aa2a6d8162ce11cee0bdd6f5ce6c35b1d</anchor>
      <arglist>(int, const BaseImage **)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Input</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a002f390ee4e91966109d7eb3a444e04a</anchor>
      <arglist>(int, const GenericImage&lt; TVoxel &gt; **)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Input</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a915261a919aa991495411b5a477f2785</anchor>
      <arglist>(vtkPointSet *, vtkPointSet *, double=.0, double=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Input</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a696108fada2f06de38019d995cc329db</anchor>
      <arglist>(int, vtkPointSet **, double *=NULL)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsFixedImage</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>abb77ee7bd320b5bf40f578c66c720b3e</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsFixedPointSet</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>ad038ebaa4edf666a43f62a8c4dd73a30</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsMovingImage</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a8db2ba4654b53deb721c10d3effc6e8d</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsMovingPointSet</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>ae4177c1c5f39514015377e5e2ec43d40</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSourceImage</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a4f7f202ee138a2a11d51111a99f4867a</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSourcePointSet</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a72d839b211f5c1fc59823962ea56bc99</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsTargetImage</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a5e05888efe1d94c212005d892b22a9d7</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsTargetPointSet</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>af2b367b302e7ab17cb95df3100a0ba1d</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAggregateMacro</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a6a16c5f451493170623338c57dc7a2ee</anchor>
      <arglist>(const Transformation, InitialGuess)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAggregateMacro</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a50865a53c6cab455d072537ba04d17cf</anchor>
      <arglist>(BinaryImage, Domain)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a999e698656a461968f6332579b7cf723</anchor>
      <arglist>(int, NumberOfLevels)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a307c7ff906da6a4b590f01e9f172c7c1</anchor>
      <arglist>(MFFDMode, MultiLevelMode)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>ae52ce31829cc55c5ccdb6023fccf36bf</anchor>
      <arglist>(Array&lt; enum TransformationModel &gt;, TransformationModel)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a632b30ba9acd68b13154a1a722fe548e</anchor>
      <arglist>(enum InterpolationMode, InterpolationMode)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a17b93b349f742183d9477813e8bb771a</anchor>
      <arglist>(enum ExtrapolationMode, ExtrapolationMode)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>ad9eb6d8688d8b038d2727fe8e06e10da</anchor>
      <arglist>(bool, PrecomputeDerivatives)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>abfe72fea19fb6ae5980a98eafdeaf960</anchor>
      <arglist>(enum SimilarityMeasure, SimilarityMeasure)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a36c0c2eb7f9653853314192b80ec9349</anchor>
      <arglist>(enum PointSetDistanceMeasure, PointSetDistanceMeasure)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a6e61895b2acc655774430e4a09e1345a</anchor>
      <arglist>(enum OptimizationMethod, OptimizationMethod)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a82ae5a222b33b43f712bc56cad4a9988</anchor>
      <arglist>(bool, NormalizeWeights)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>aa1b59673b09aecfdd2d5166a864ec6ef</anchor>
      <arglist>(bool, MergeGlobalAndLocalTransformation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a3834a2b5007744821b66512d51f1aae9</anchor>
      <arglist>(bool, RegisterX)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a032b2fb566bc95ea2bcd5766ba931b5c</anchor>
      <arglist>(bool, RegisterY)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a8b2b7845aa3b2d41695e51a18ce058f7</anchor>
      <arglist>(bool, RegisterZ)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a8698a87c23039f4dfb9ecd0ac418c6d8</anchor>
      <arglist>(bool, AdaptiveRemeshing)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfImages</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a1b68b268a2c50481d47c2f729d9cdf74</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfPointSets</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a01c8efb71746fc57aa528a6c4353d8cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfRequiredImages</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a7f44bb46756a57c442ccd04bcfabe7de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfRequiredPointSets</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a0e9333b758c614bc69d0d3ba12bfa957</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>aa87392472e778cb548caa7eb35d7f2c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a8639d21d36ff8b4c8b11bf3b5861919d</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ParseEnergyFormula</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a49d2e2db5658feb7ad444626e4d28919</anchor>
      <arglist>(int=-1, int=-1, int=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a4cbdd21ab4d8dc9a3ef01da2e57d0a54</anchor>
      <arglist>(istream &amp;, bool=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Reset</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a6819781f67fe998a907d743d2c312973</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a4c7817786faf232810703fec9b6317da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>acca0c64b89e6a1f2e0054067a963caf5</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a6e4b7f402be4e81c323b232ad19b9725</anchor>
      <arglist>(const char *, const char *, int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>TransformationModel</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a3a0edfd08df833f3ea0ed2b5e83631f4</anchor>
      <arglist>(enum TransformationModel)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>ad273c1c06eed510528fbc6a08c175bcd</anchor>
      <arglist>(const char *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericRegistrationFilter</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a8cdae63405ae6053d13f930688e02276</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Output</name>
      <anchorfile>classmirtk_1_1RegistrationFilter.html</anchorfile>
      <anchor>a18a4dfb175fe5d787f53ef35c574708d</anchor>
      <arglist>(Transformation **)</arglist>
    </member>
    <member kind="function">
      <type>Transformation *</type>
      <name>Output</name>
      <anchorfile>classmirtk_1_1RegistrationFilter.html</anchorfile>
      <anchor>ae22ad7975fab295713abd9a55c11d378</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1RegistrationFilter.html</anchorfile>
      <anchor>a46b8858c2c1a014f45d00f98f60fb2e7</anchor>
      <arglist>(const char *, bool=false)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual</type>
      <name>~RegistrationFilter</name>
      <anchorfile>classmirtk_1_1RegistrationFilter.html</anchorfile>
      <anchor>ad54bbdbf04128f8624acda57a453bf88</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AddImageSimilarityTerm</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a55fb3171d0ebd752cdb7a48c71d5a3a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AddPenaltyTerm</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a32cb7af2bc0298f89553e5c9a9aa2f11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AddPointSetConstraintTerm</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a34260161c5d0c8a976a4e444933a619c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AddPointSetDistanceTerm</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a59815dc0a49d6044cfe58881b065b760</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>ApplyInitialGuess</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>ac9facc98bbdb71c71d5551692f3d5c7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Vector3D&lt; double &gt;</type>
      <name>AverageOutputResolution</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a038ad8324d4ded97714b136d5b2d85d3</anchor>
      <arglist>(int=-1) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Finalize</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a4b2e4af960a7d5e38cc1b6e68095c7de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>FinalLevel</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a32d2030b256622097d9021115355127e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual struct ImageAttributes</type>
      <name>ImageAttributes</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a82e9efb8338e03a849316d4331054be7</anchor>
      <arglist>(int, int=-1) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a45a042c4e4f4f8f91d9ee9e00da13b6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>InitializeEnergy</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a257999d1618a50a1757d015de1dd5264</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>InitializeOptimizer</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a415acd5f33f38c75ed4d0a4230bc3729</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>InitializeOutput</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>aae9bf9af0b49aa85b1386ae06b4a3846</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>InitializePointSets</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a2fea686c6d28976b9b9e918d3ea081d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>InitializePyramid</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>ad17c68cf291ee09f2acdc8dd60251e13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>InitializeStatus</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a53f0de70c2a5445b2638394466bd1c6e</anchor>
      <arglist>(HomogeneousTransformation *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>InitializeStatus</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a3f79742f2bb7fd80da02d7cd5fe18f32</anchor>
      <arglist>(FreeFormTransformation *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>InitializeStatus</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>afa3fd24bee75fb8c1b85c6550bb426b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>InitializeTransformation</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a0d3fde4b050a9fa2492c68a2a1266782</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>InitialLevel</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>ad4f88ddb6d8e4a40bca9587cfbd7cc13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Transformation *</type>
      <name>MakeInitialGuess</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>ac38549dff63f25bd7a73f75d9463f978</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>MultiResolutionOptimization</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>add5df6421640ccde72b1fa36bfbbf500</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>NumberOfFrames</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>ac06dfe8a64309032cd9f93bafadd6d49</anchor>
      <arglist>(double *=NULL, double *=NULL, double *=NULL) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>RegisteredPointSet *</type>
      <name>OutputPointSet</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a65dea2145d8b12b26c6a72e6fbc94464</anchor>
      <arglist>(int, double, TransformationInfo)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Transformation *</type>
      <name>OutputTransformation</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a469b15ff33d70e176ded96321c8f4ec3</anchor>
      <arglist>(TransformationInfo)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>PreUpdateCallback</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a5428e85d2f745f32406c736090ad6100</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual struct ImageAttributes</type>
      <name>RegistrationDomain</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a4ace5821da9839370bffbfe79c64d657</anchor>
      <arglist>(int=-1) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>SetInputOf</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a26c5889bd9d00a0445692f1e6413a836</anchor>
      <arglist>(RegisteredImage *, const struct ImageAttributes &amp;, int, TransformationInfo)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual enum TransformationType</type>
      <name>TransformationType</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a03b476da81410ea3770168edaaf6c95e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>Output</name>
      <anchorfile>classmirtk_1_1RegistrationFilter.html</anchorfile>
      <anchor>a47afc2b3674f0309f4daa691ff684c28</anchor>
      <arglist>(Transformation *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RegistrationFilter</name>
      <anchorfile>classmirtk_1_1RegistrationFilter.html</anchorfile>
      <anchor>a30de2bfa828a055877186230584233ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; double &gt;</type>
      <name>_Background</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a5da23abd38aba76df95d9a72dd10fd3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; double &gt;</type>
      <name>_Blurring</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a89f2ad7a0a8b85aeeb0f8fec0828bfe1</anchor>
      <arglist>[MAX_NO_RESOLUTIONS]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_Centering</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a08623e49169c9a69a9e92557953cb923</anchor>
      <arglist>[MAX_NO_RESOLUTIONS]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; Point &gt;</type>
      <name>_Centroid</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>af5c5c907be96536df0e63f4ef3ce64ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; ConstraintInfo &gt;</type>
      <name>_ConstraintInfo</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a07579a8b80ce1aaa96238da1d1fbc3a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_CropPadFFD</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a3d8140309aa3d0b8cf89b8e7930db9fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_CropPadImages</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a367947211550529aa46b6d6f87deef56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_CurrentLevel</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a8858308ffd3764741e43d141c3a85329</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>enum TransformationModel</type>
      <name>_CurrentModel</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>aad6c6b6076726e69d5803b20730ce28c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_DefaultBackground</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>ac01de5f2ca5d877568159b0d1e079981</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_DefaultPadding</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a02fe697b8beb8d2b3e637376baf774f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; DisplacementInfo &gt;</type>
      <name>_DisplacementInfo</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>ae282353d25f021d7152a7e0cb910a6af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_DownsampleWithPadding</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a0989c5214b30e59d3e8b47d369fcb851</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RegistrationEnergy</type>
      <name>_Energy</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a72f0a851496bf354c8dab9db5e3b7719</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>string</type>
      <name>_EnergyFormula</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>aba6588e350bef9fd1250e487eb4921d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EventDelegate</type>
      <name>_EventDelegate</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>af7aa171ee22e4a31c8d84c73e13686de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; ResampledImageList &gt;</type>
      <name>_Image</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a4fa2ca54042d1d876859ca1f29739c86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; ImageSimilarityInfo &gt;</type>
      <name>_ImageSimilarityInfo</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a13882c128c1f40859bc5ea1f394a8c38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; const BaseImage * &gt;</type>
      <name>_Input</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a15f626051027f65f27d5606ff664e875</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; BinaryImage * &gt;</type>
      <name>_Mask</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>aeb9675e1149ada09a1bb901e702e2cf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_MaxControlPointSpacing</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a073529e076a1f208bacaf6d6a2ece312</anchor>
      <arglist>[MAX_NO_RESOLUTIONS][4]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; double &gt;</type>
      <name>_MaxEdgeLength</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a1ffc5f6f8d605e2d6371890ec3e53d4d</anchor>
      <arglist>[MAX_NO_RESOLUTIONS]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_MinControlPointSpacing</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a3428c7f08143c7fa4f010be916c98747</anchor>
      <arglist>[MAX_NO_RESOLUTIONS][4]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; double &gt;</type>
      <name>_MinEdgeLength</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a4658f2a76c310dedb1e6d8617fc40695</anchor>
      <arglist>[MAX_NO_RESOLUTIONS]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LocalOptimizer *</type>
      <name>_Optimizer</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a2d5b36b2287dd4125263735ba9742634</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; double &gt;</type>
      <name>_Padding</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a30b35dc0a2e618f5fcdbc654e8572f67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParameterList</type>
      <name>_Parameter</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a015f3709451ca0ba3e7d4b7b69067bf2</anchor>
      <arglist>[MAX_NO_RESOLUTIONS]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; Array&lt; void * &gt; &gt;</type>
      <name>_PointSet</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a7205f870307ba81962a443cad4056063</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; PointSetConstraintInfo &gt;</type>
      <name>_PointSetConstraintInfo</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>aaa723ffd0f5612410986e88244747672</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; PointSetDistanceInfo &gt;</type>
      <name>_PointSetDistanceInfo</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>adf4f50ceef7b2cb5197ad0434fda5b41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; void * &gt;</type>
      <name>_PointSetInput</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>ad10940a1ae6af9484420151a83dada69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; void * &gt;</type>
      <name>_PointSetOutput</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>acb4ea9e9cf79a4613198f89f41e3a741</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; PointSetOutputInfo &gt;</type>
      <name>_PointSetOutputInfo</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a004f8335523d96903526c12fa2b0be77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; double &gt;</type>
      <name>_PointSetTime</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>ada6f0165d6460129ef49e9d4cc70d684</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RegistrationEnergy::PreUpdateFunctionType</type>
      <name>_PreUpdateDelegate</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a61cd1b47fb98bb6d980bbdbadc78c84c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>struct ImageAttributes</type>
      <name>_RegistrationDomain</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a88d78e6d094fec9bbd01fd23d65b5378</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; Vector3D&lt; double &gt; &gt;</type>
      <name>_Resolution</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>add448af465fc51373d8f9d30448d6fba</anchor>
      <arglist>[MAX_NO_RESOLUTIONS]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Point</type>
      <name>_SourceOffset</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>adbc36447c4e2de5cce25dadf1436733e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_Subdivide</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>ad52e2058a56f1aea7cdf37430dd4883a</anchor>
      <arglist>[MAX_NO_RESOLUTIONS][4]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Point</type>
      <name>_TargetOffset</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>ae83f38d4c65e82ec8ac7762ef2db1751</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Transformation *</type>
      <name>_Transformation</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>aee6d465f1e90d984cfcde4bbf2d2f49e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; TransformationInfo &gt;</type>
      <name>_TransformationInfo</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a55370199244d1e742c4bc8ce7228b9e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; Transformation * &gt;</type>
      <name>_TransformationInstance</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>a3f13de84de4168bea3e0fb1534c23a7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_UseGaussianResolutionPyramid</name>
      <anchorfile>classmirtk_1_1GenericRegistrationFilter.html</anchorfile>
      <anchor>ac91d7ffc615d3e5f1bf4accd3b0b621b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::GenericRegistrationFilter::ConstraintInfo</name>
    <filename>structmirtk_1_1GenericRegistrationFilter_1_1ConstraintInfo.html</filename>
    <member kind="variable">
      <type>ConstraintMeasure</type>
      <name>_Measure</name>
      <anchorfile>structmirtk_1_1GenericRegistrationFilter_1_1ConstraintInfo.html</anchorfile>
      <anchor>a4f12887ec2c1ab2aa9de132b820000aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>_Name</name>
      <anchorfile>structmirtk_1_1GenericRegistrationFilter_1_1ConstraintInfo.html</anchorfile>
      <anchor>a4ea8597dc73205e6fc172fde250bdfbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_Weight</name>
      <anchorfile>structmirtk_1_1GenericRegistrationFilter_1_1ConstraintInfo.html</anchorfile>
      <anchor>a0f384e2241439836c979e19b8063938b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::GenericRegistrationFilter::DisplacementInfo</name>
    <filename>structmirtk_1_1GenericRegistrationFilter_1_1DisplacementInfo.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>_DispIndex</name>
      <anchorfile>structmirtk_1_1GenericRegistrationFilter_1_1DisplacementInfo.html</anchorfile>
      <anchor>a9e22b76ccf46db75d0716ff0aea8fae0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ImageAttributes</type>
      <name>_Domain</name>
      <anchorfile>structmirtk_1_1GenericRegistrationFilter_1_1DisplacementInfo.html</anchorfile>
      <anchor>ad3e02435f28184a9ae68dbdb13cd03c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_InputTime</name>
      <anchorfile>structmirtk_1_1GenericRegistrationFilter_1_1DisplacementInfo.html</anchorfile>
      <anchor>a94c5af2c232aa585d2f5bc5c0eebcef1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Transformation *</type>
      <name>_Transformation</name>
      <anchorfile>structmirtk_1_1GenericRegistrationFilter_1_1DisplacementInfo.html</anchorfile>
      <anchor>aa6c3d72a648541e7d526f318c4bc83aa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::GenericRegistrationFilter::ImageSimilarityInfo</name>
    <filename>structmirtk_1_1GenericRegistrationFilter_1_1ImageSimilarityInfo.html</filename>
    <member kind="variable">
      <type>bool</type>
      <name>_DefaultSign</name>
      <anchorfile>structmirtk_1_1GenericRegistrationFilter_1_1ImageSimilarityInfo.html</anchorfile>
      <anchor>af17ae36be200d87c218bb7198d514b05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SimilarityMeasure</type>
      <name>_Measure</name>
      <anchorfile>structmirtk_1_1GenericRegistrationFilter_1_1ImageSimilarityInfo.html</anchorfile>
      <anchor>aaad661d49c729c2a037009b0918efb54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>_Name</name>
      <anchorfile>structmirtk_1_1GenericRegistrationFilter_1_1ImageSimilarityInfo.html</anchorfile>
      <anchor>a575e52404dc12a13df3ce1ff1b873188</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_SourceIndex</name>
      <anchorfile>structmirtk_1_1GenericRegistrationFilter_1_1ImageSimilarityInfo.html</anchorfile>
      <anchor>a8025b8a737c9327936bc030921dd0222</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TransformationInfo</type>
      <name>_SourceTransformation</name>
      <anchorfile>structmirtk_1_1GenericRegistrationFilter_1_1ImageSimilarityInfo.html</anchorfile>
      <anchor>ae997651c8c1799db6668c7d73f7888c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_TargetIndex</name>
      <anchorfile>structmirtk_1_1GenericRegistrationFilter_1_1ImageSimilarityInfo.html</anchorfile>
      <anchor>a797ef88ffc314df0262ae87c696483ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TransformationInfo</type>
      <name>_TargetTransformation</name>
      <anchorfile>structmirtk_1_1GenericRegistrationFilter_1_1ImageSimilarityInfo.html</anchorfile>
      <anchor>ab3bf237ed709b0af4d2054bb534abfba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_Weight</name>
      <anchorfile>structmirtk_1_1GenericRegistrationFilter_1_1ImageSimilarityInfo.html</anchorfile>
      <anchor>a513c9e616b20febd4ec53994ab9cd5a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::GenericRegistrationFilter::PointSetConstraintInfo</name>
    <filename>structmirtk_1_1GenericRegistrationFilter_1_1PointSetConstraintInfo.html</filename>
    <member kind="variable">
      <type>EnergyMeasure</type>
      <name>_Measure</name>
      <anchorfile>structmirtk_1_1GenericRegistrationFilter_1_1PointSetConstraintInfo.html</anchorfile>
      <anchor>a81ede7b6dd7a237e40539d35d67e572c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>_Name</name>
      <anchorfile>structmirtk_1_1GenericRegistrationFilter_1_1PointSetConstraintInfo.html</anchorfile>
      <anchor>a55f30a4567ce671c87825a92b3f0e773</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_PointSetIndex</name>
      <anchorfile>structmirtk_1_1GenericRegistrationFilter_1_1PointSetConstraintInfo.html</anchorfile>
      <anchor>ac59ac3da6a9c88c5592d8b9145012650</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TransformationInfo</type>
      <name>_Transformation</name>
      <anchorfile>structmirtk_1_1GenericRegistrationFilter_1_1PointSetConstraintInfo.html</anchorfile>
      <anchor>ad66867e3f5f170d6fa41e965b8bb736e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_Weight</name>
      <anchorfile>structmirtk_1_1GenericRegistrationFilter_1_1PointSetConstraintInfo.html</anchorfile>
      <anchor>a332360533152466e60af267b10e0b8e4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::GenericRegistrationFilter::PointSetDistanceInfo</name>
    <filename>structmirtk_1_1GenericRegistrationFilter_1_1PointSetDistanceInfo.html</filename>
    <member kind="variable">
      <type>bool</type>
      <name>_DefaultSign</name>
      <anchorfile>structmirtk_1_1GenericRegistrationFilter_1_1PointSetDistanceInfo.html</anchorfile>
      <anchor>a04ab473678ef621dddbc15693c415603</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PointSetDistanceMeasure</type>
      <name>_Measure</name>
      <anchorfile>structmirtk_1_1GenericRegistrationFilter_1_1PointSetDistanceInfo.html</anchorfile>
      <anchor>afec27f6074f041cd76b860ecb22e8e8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>_Name</name>
      <anchorfile>structmirtk_1_1GenericRegistrationFilter_1_1PointSetDistanceInfo.html</anchorfile>
      <anchor>a7984608469f58de802d40c323b39f08f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_SourceIndex</name>
      <anchorfile>structmirtk_1_1GenericRegistrationFilter_1_1PointSetDistanceInfo.html</anchorfile>
      <anchor>a9908f835454b241b59fe65c4a8331384</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TransformationInfo</type>
      <name>_SourceTransformation</name>
      <anchorfile>structmirtk_1_1GenericRegistrationFilter_1_1PointSetDistanceInfo.html</anchorfile>
      <anchor>a0e2e06828c133d817f239820d13fedb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_TargetIndex</name>
      <anchorfile>structmirtk_1_1GenericRegistrationFilter_1_1PointSetDistanceInfo.html</anchorfile>
      <anchor>a5f26772392439142fcb10b19953330b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TransformationInfo</type>
      <name>_TargetTransformation</name>
      <anchorfile>structmirtk_1_1GenericRegistrationFilter_1_1PointSetDistanceInfo.html</anchorfile>
      <anchor>a7cb89d3f8aa8b9abf54e23acccebf803</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_Weight</name>
      <anchorfile>structmirtk_1_1GenericRegistrationFilter_1_1PointSetDistanceInfo.html</anchorfile>
      <anchor>a4c54b36ad5ee10d82afd3c7295128298</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::GenericRegistrationFilter::PointSetOutputInfo</name>
    <filename>structmirtk_1_1GenericRegistrationFilter_1_1PointSetOutputInfo.html</filename>
  </compound>
  <compound kind="struct">
    <name>mirtk::GenericRegistrationFilter::TransformationInfo</name>
    <filename>structmirtk_1_1GenericRegistrationFilter_1_1TransformationInfo.html</filename>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericRegistrationLogger</name>
    <filename>classmirtk_1_1GenericRegistrationLogger.html</filename>
    <base>mirtk::Observer</base>
    <member kind="function">
      <type></type>
      <name>GenericRegistrationLogger</name>
      <anchorfile>classmirtk_1_1GenericRegistrationLogger.html</anchorfile>
      <anchor>ada116a2cb5facc909ff4c1eb966c98b3</anchor>
      <arglist>(ostream *=&amp;cout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>HandleEvent</name>
      <anchorfile>classmirtk_1_1GenericRegistrationLogger.html</anchorfile>
      <anchor>a4e2f2baaa94cec26f5f6f76c209823f8</anchor>
      <arglist>(Observable *, Event, const void *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GenericRegistrationLogger</name>
      <anchorfile>classmirtk_1_1GenericRegistrationLogger.html</anchorfile>
      <anchor>a4b9ecdd5be22cb030549be80c3080de5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericRepeatExtrapolateImageFunction</name>
    <filename>classmirtk_1_1GenericRepeatExtrapolateImageFunction.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::IndexExtrapolateImageFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericRepeatExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericRepeatExtrapolateImageFunction.html</anchorfile>
      <anchor>a0730ec007ba4e824c0cfd826fd5ed714</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>TransformIndex</name>
      <anchorfile>classmirtk_1_1GenericRepeatExtrapolateImageFunction.html</anchorfile>
      <anchor>af2188c70bceb2172b8328ca62f1666c4</anchor>
      <arglist>(int &amp;index, int max) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericRepeatExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericRepeatExtrapolateImageFunction.html</anchorfile>
      <anchor>acddc01b690d3840df5e32002af08766b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Apply</name>
      <anchorfile>classmirtk_1_1GenericRepeatExtrapolateImageFunction.html</anchorfile>
      <anchor>af3aed13f0f9b58871824b967b7a2b4e9</anchor>
      <arglist>(int &amp;index, int max)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Apply</name>
      <anchorfile>classmirtk_1_1GenericRepeatExtrapolateImageFunction.html</anchorfile>
      <anchor>ae2d280ef564ede3e0ff408cbe001eba9</anchor>
      <arglist>(double &amp;cindex, int max)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericSincInterpolateImageFunction</name>
    <filename>classmirtk_1_1GenericSincInterpolateImageFunction.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericInterpolateImageFunction</base>
    <member kind="typedef">
      <type>Sinc&lt; Real &gt;</type>
      <name>Kernel</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>adec693f02718893e6853ab4793d79735</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingInterval</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>a051a0cc1ce1440b1e96dabc2542f479f</anchor>
      <arglist>(double, int &amp;, int &amp;) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericSincInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>aeefbeb6fdbef74cad4945f359bf2c622</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>a3ca207aa88d892879128d771546668f3</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>abafad35ce4df1c4573f88617a881e242</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>ab9c861075994d1b837168b584d6a258a</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>acfb7a2d9e64b3db0af1a863d7683eab9</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>a0b5aae503239d0b3cad8f17a9e789f2d</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>a8e18420c0e43304955e200957dabccd2</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>a9a4a04837a4744cf217a5b966a946220</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>ab7d4d402c43811f7682d3eb8bb804d90</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>ab4b3bb181cbe2827fa51afda4d78fcd8</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>ac8e79e190e0d35736eb3b49223a24b7f</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>a8cb1db0d044caa779342cffa3f0c0edc</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>aad84a4668efa9fc56cf2773161c5b2f1</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>a6b4a30fb95d9ef24d836fc37eb06d516</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>a321c270f797a7c1bd0e865ddb98998c0</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>abc03d2eea72e40c8d8ad56ab7d9fb8b2</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>a9f8d42f377ea438bfdf4bf720256a9de</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>aac8684c22992a4940e779420d4c8d9b8</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>a46499b9d0a60552c6c33d98873a2b2ee</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>a756c68ef884a661143b419533e6afc5d</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>ac08cbc8455a0dec75171114c4e4f58ee</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>a398270d0b1c13f726279f5aff660aff4</anchor>
      <arglist>(bool=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>af41e9e7f1bdfe330cf29c1352ae043c9</anchor>
      <arglist>(double, Epsilon)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericSincInterpolateImageFunction2D</name>
    <filename>classmirtk_1_1GenericSincInterpolateImageFunction2D.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericSincInterpolateImageFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericSincInterpolateImageFunction2D</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction2D.html</anchorfile>
      <anchor>aa81402ec3fa9df5a763c150d8f65722b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction2D.html</anchorfile>
      <anchor>ac7c9db53bf8a8dfacd8ca8e44d83e0ba</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction2D.html</anchorfile>
      <anchor>ab0de61eeca7cbc7e0ff0f1187f4521e3</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction2D.html</anchorfile>
      <anchor>aca72e983e7a095b3751b50a90aed95fb</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction2D.html</anchorfile>
      <anchor>a7db2636029f7b0f9a105497954a30d43</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction2D.html</anchorfile>
      <anchor>a230a828a095128061f7dc312520daf54</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction2D.html</anchorfile>
      <anchor>aa916b401e873fb485a710a62172c07b5</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction2D.html</anchorfile>
      <anchor>aaf4de5e496ec66a03da9f26a8c959b70</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction2D.html</anchorfile>
      <anchor>a73d55b39c72b79e26d3627e1ad23fd64</anchor>
      <arglist>(double, double, double=0, double=0) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericSincInterpolateImageFunction3D</name>
    <filename>classmirtk_1_1GenericSincInterpolateImageFunction3D.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericSincInterpolateImageFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericSincInterpolateImageFunction3D</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction3D.html</anchorfile>
      <anchor>a517debf34f0a492a016be0e9010c68a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction3D.html</anchorfile>
      <anchor>a3a276b8c41906f935eb134258749a783</anchor>
      <arglist>(double, double, double, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction3D.html</anchorfile>
      <anchor>acc65a6998951c5e36a25d6a2bc34aa03</anchor>
      <arglist>(const TOtherImage *, double, double, double, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction3D.html</anchorfile>
      <anchor>a028ddd9acf1343b62ca0f32bce2b161c</anchor>
      <arglist>(double, double, double, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction3D.html</anchorfile>
      <anchor>ab75837d5f6a5e3a2064d18c02689a061</anchor>
      <arglist>(double, double, double, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction3D.html</anchorfile>
      <anchor>a1de39a97e893af627bfa42f23b1b5e1a</anchor>
      <arglist>(double, double, double, double=0) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction3D.html</anchorfile>
      <anchor>af726587a1cbc44d50491a47ff728e6ff</anchor>
      <arglist>(const TOtherImage *, double, double, double, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction3D.html</anchorfile>
      <anchor>a62a15f58f773d056c226bef1a2bf2a5b</anchor>
      <arglist>(double, double, double, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction3D.html</anchorfile>
      <anchor>a393bf5431d8acc7d3cc2ad59a700bcd2</anchor>
      <arglist>(double, double, double, double=0) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericSincInterpolateImageFunction4D</name>
    <filename>classmirtk_1_1GenericSincInterpolateImageFunction4D.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericSincInterpolateImageFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericSincInterpolateImageFunction4D</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction4D.html</anchorfile>
      <anchor>ab80b584c4f5a77243a91e8af8b6f4e78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction4D.html</anchorfile>
      <anchor>a8a8e1c89d10aec9cd31d9015ef30d0d9</anchor>
      <arglist>(double, double, double, double) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction4D.html</anchorfile>
      <anchor>a54c9dc148d13feea0fa652904789cf86</anchor>
      <arglist>(const TOtherImage *, double, double, double, double) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction4D.html</anchorfile>
      <anchor>ab3ae8b18bd581bdbb855a5db6719762e</anchor>
      <arglist>(double, double, double, double) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction4D.html</anchorfile>
      <anchor>aa1a828e82ab32ca7f73b9ddf169e199e</anchor>
      <arglist>(double, double, double, double) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction4D.html</anchorfile>
      <anchor>a88ece9374629c344149a920fa449adec</anchor>
      <arglist>(double, double, double, double) const </arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction4D.html</anchorfile>
      <anchor>aca4d95de516c96e9ad4721381f872a93</anchor>
      <arglist>(const TOtherImage *, double, double, double, double) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction4D.html</anchorfile>
      <anchor>ab2909108ac77914240d999089a0615c5</anchor>
      <arglist>(double, double, double, double) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction4D.html</anchorfile>
      <anchor>a633e4bc0df198e9ffa9d75a5787bfa76</anchor>
      <arglist>(double, double, double, double) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GenericSparseMatrix</name>
    <filename>classmirtk_1_1GenericSparseMatrix.html</filename>
    <templarg>TEntry</templarg>
    <base>mirtk::Object</base>
    <member kind="typedef">
      <type>Array&lt; Entry &gt;</type>
      <name>Entries</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>ad8f3d86aea04fbc2a39795fe46637a4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Pair&lt; int, TEntry &gt;</type>
      <name>Entry</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a2b061953a85a2b047c02c97e6fcd2922</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TEntry</type>
      <name>EntryType</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>ad8daecd8b5240942033b8f3b3a1c05ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>StorageLayout</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a6dd1f0cede7b141fa994dddf1436b5b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a7abd49b2b63e86d3eb7e35b62f68bcdd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearIndex</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>afff824ea0deb0d05bd0eac7aa9843880</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Col</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>af12fb2917e57faa2eef61bc0ce80ccf7</anchor>
      <arglist>(int, Entries &amp;, bool=false)</arglist>
    </member>
    <member kind="function">
      <type>Entries</type>
      <name>Col</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a9ebb687ea262e46d35d839f934cdcf48</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ColNNZ</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>af522e2e0a204fec110c0f19a2d4b15df</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>EntryType</type>
      <name>ColSum</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a06516709c1aaf59dc0e2822186ee82e1</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Column</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>aae691e81aa15949002a1ceb42571c4ed</anchor>
      <arglist>(int, Entries &amp;, bool=false)</arglist>
    </member>
    <member kind="function">
      <type>Entries</type>
      <name>Column</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a17eba58029dca6fc49ea8b882a6d1f73</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>EntryType</type>
      <name>ColumnSum</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a724f4e658dfc834e9455df6ab70307ed</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>Diag</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a30d8e58ccd33f88262e1cff144bd04e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Diag</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a34f6a92909aa0a5b865bd432f2c557bd</anchor>
      <arglist>(const Vector &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Diag</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a59f18f0d7c3392046cb74fa4d992b7a5</anchor>
      <arglist>(TEntry d)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Eigenvalues</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a53bb5003e380a39fe61d63f209e8f24f</anchor>
      <arglist>(Vector &amp;v, int k, const char *sigma=&quot;LM&quot;, int p=0, double tol=.0, int maxit=0, Vector *v0=NULL) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Eigenvectors</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a1802a7c54decc64b41a283a3579379fa</anchor>
      <arglist>(Matrix &amp;E, int k, const char *sigma=&quot;LM&quot;, int p=0, double tol=.0, int maxit=0, Vector *v0=NULL) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Eigenvectors</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a176785de7644ffcd6be49faae9e713ae</anchor>
      <arglist>(Matrix &amp;E, Vector &amp;v, int k, const char *sigma=&quot;LM&quot;, int p=0, double tol=.0, int maxit=0, Vector *v0=NULL) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericSparseMatrix</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>acdc70a479d25dc3128df16f1da152da1</anchor>
      <arglist>(StorageLayout=CCS)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericSparseMatrix</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a78af354b1ca414d33b104e4212cd0e21</anchor>
      <arglist>(int, int=0, StorageLayout=CCS)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericSparseMatrix</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>acd1cee9604d2c7c3fc958392eaeec9c5</anchor>
      <arglist>(int, int, int, StorageLayout=CCS)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericSparseMatrix</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a377c08d09b0c368835c3dbf6221d8a59</anchor>
      <arglist>(const GenericSparseMatrix&lt; TOtherEntry &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>EntryType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a0ae98bdd8cd275a1d589dca3b1079293</anchor>
      <arglist>(int, int=-1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetCol</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a91e4e52304ed63296523fdb6640aa031</anchor>
      <arglist>(int, Entries &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetColumn</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>afe8dcaa1b2d9575ea7999dbe5a2bb0b8</anchor>
      <arglist>(int, Entries &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetDiag</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a64482cce5c08e9821346ca3422f3448f</anchor>
      <arglist>(Vector &amp;d) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetRawData</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>acf67436b68c36bfd723570dbea516c49</anchor>
      <arglist>(int *&amp;, int *&amp;, TEntry *&amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRow</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>aadaec8c5e6e105d411495137ae73ffa0</anchor>
      <arglist>(int, Entries &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Index</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a96110e8090bad42c8262ab128f1ae15c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a8aa80ad270c1339866a86a33875c1c14</anchor>
      <arglist>(int, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a5067c5d51dc54e2da9d96856c803d5bd</anchor>
      <arglist>(int, int, Array&lt; Entries &gt; &amp;, bool=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>ac56c40ac6b5a3b190bf2bc331f1844fc</anchor>
      <arglist>(int, int, Entries[], bool=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSymmetric</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a59b9bb9133e560133dea1c41e32a50ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Layout</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a4cb02b5e3c2f7f659346dd1ec04ff364</anchor>
      <arglist>(StorageLayout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MakeSymmetric</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a3cf9bff747b6516ec3767af54bb9c8a7</anchor>
      <arglist>(bool extent=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a5ec58e1852f9bb5372380040c33482ab</anchor>
      <arglist>(int, Size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a7a8d4c3e6afd5b96ad89b0ad1542764f</anchor>
      <arglist>(int, MaxNumberOfUnusedEntries)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a2acbd3dac538a6db5da3cf72ebc4fbd4</anchor>
      <arglist>(enum StorageLayout, Layout)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a8b13abd855644698b4a8088e1f09c613</anchor>
      <arglist>(int, Rows)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a4116690befe8531c88eb3002ef57cd5c</anchor>
      <arglist>(int, Cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a784b08520654453a43561ca5cf1855de</anchor>
      <arglist>(int, NNZ)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MultAv</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>ac295b3a755eda2a66c0ee3a707f58834</anchor>
      <arglist>(EntryType[], EntryType[]) const </arglist>
    </member>
    <member kind="function">
      <type>EntryType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a2da8f978cd5922263df9dba2955a7e49</anchor>
      <arglist>(int, int=-1)</arglist>
    </member>
    <member kind="function">
      <type>GenericSparseMatrix</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a4252fa3eac76af26cdea0eddf455da7d</anchor>
      <arglist>(EntryType) const </arglist>
    </member>
    <member kind="function">
      <type>GenericSparseMatrix &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>ad256011495a2ee67f3aa46518110fa70</anchor>
      <arglist>(EntryType)</arglist>
    </member>
    <member kind="function">
      <type>GenericSparseMatrix</type>
      <name>operator/</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a3682957549ee7abffe3587d14cbbc4e6</anchor>
      <arglist>(EntryType) const </arglist>
    </member>
    <member kind="function">
      <type>GenericSparseMatrix &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a83e1e1122cd5023859a966f7f997cdde</anchor>
      <arglist>(EntryType)</arglist>
    </member>
    <member kind="function">
      <type>GenericSparseMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a683b63878e88997aa5719e9418ce2672</anchor>
      <arglist>(const GenericSparseMatrix&lt; TOtherEntry &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a914edc41c9f14fd46a3995ff8d4ddffb</anchor>
      <arglist>(int, int, EntryType)</arglist>
    </member>
    <member kind="function">
      <type>TEntry *</type>
      <name>RawPointer</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a463bd76c158f88d218e6665e0a674190</anchor>
      <arglist>(int=0)</arglist>
    </member>
    <member kind="function">
      <type>const TEntry *</type>
      <name>RawPointer</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>ae7cf484f228fe2bd89ad5e06c3aa5cc4</anchor>
      <arglist>(int=0) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ReadMAT</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a6e772311a90ebd7e7937494b2c8f06f4</anchor>
      <arglist>(const char *, const char *=&quot;A&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RemoveZeros</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>ae5e117b7ddb2d1f6d24fcec27f2036e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reserve</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a2cba15218c56e3a2aaeab2a183f4439b</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Row</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a340b90c967b76513dfafe08f81c4065a</anchor>
      <arglist>(int, Entries &amp;, bool=false)</arglist>
    </member>
    <member kind="function">
      <type>Entries</type>
      <name>Row</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>abe47b83db6e96b1ab30e9e277b645203</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>RowNNZ</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a2d2163f3223c5c37d8a30a5ca8636d04</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>EntryType</type>
      <name>RowSum</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a190a258dadccab795eb9e726468a00a5</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>GenericSparseMatrix &amp;</type>
      <name>ScaleCol</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a5c6200a360c853e613ab75c541c74327</anchor>
      <arglist>(int, EntryType)</arglist>
    </member>
    <member kind="function">
      <type>GenericSparseMatrix &amp;</type>
      <name>ScaleColumn</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>ac9332516f897919ae472b96e94e7395c</anchor>
      <arglist>(int, EntryType)</arglist>
    </member>
    <member kind="function">
      <type>GenericSparseMatrix &amp;</type>
      <name>ScaleRow</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a2ff276de5a28c329fdedcd4e65df21b0</anchor>
      <arglist>(int, EntryType)</arglist>
    </member>
    <member kind="function">
      <type>GenericSparseMatrix</type>
      <name>Sub</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a1b4e6d54dff0209facd4993e8f1c1870</anchor>
      <arglist>(int, int, int, int) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Sub</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a4e6a455d692fd7bc225e0efa9db22594</anchor>
      <arglist>(int, int, const GenericSparseMatrix &amp;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SubNNZ</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>ad0bb9efdb932fa894c17163799fb2dd9</anchor>
      <arglist>(int, int, int, int) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Transpose</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>aea1f1c647aa34d0628ab3186b26a7d2e</anchor>
      <arglist>(bool keep_layout=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteMAT</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a30f13fcc2aa929a9271f28b894584b41</anchor>
      <arglist>(const char *, const char *=&quot;A&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WriteMFile</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>adadd2c09f21a03dedfacc9abd619d573</anchor>
      <arglist>(const char *, const char *=&quot;A&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Zero</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a4f6e977a7d62499146b0a5d0346830d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CheckEntries</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a6ce14ef41cb5e9247b8da2f7f4ebe55b</anchor>
      <arglist>(Entries &amp;) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CopyAttributes</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a1b25525b53e55a0491be67c86e0375f0</anchor>
      <arglist>(const GenericSparseMatrix&lt; TOtherEntry &gt; &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int *</type>
      <name>_Col</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a8c204a21a95563c47374dd0cc131aaa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EntryType *</type>
      <name>_Data</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a6e2509b792d5ed200e6558bb666d6f36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array&lt; int &gt; *</type>
      <name>_Index</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>ad6f531b061e0991ae2804cae06bc2112</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int *</type>
      <name>_Row</name>
      <anchorfile>classmirtk_1_1GenericSparseMatrix.html</anchorfile>
      <anchor>a5bbea4a2edde46995a4573e872cdcd73</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GIPLImageReader</name>
    <filename>classmirtk_1_1GIPLImageReader.html</filename>
    <base>mirtk::ImageReader</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>CanRead</name>
      <anchorfile>classmirtk_1_1GIPLImageReader.html</anchorfile>
      <anchor>af8f35ae0fc803ad1048ba35ffe0f926d</anchor>
      <arglist>(const char *) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageReader</name>
      <anchorfile>classmirtk_1_1ImageReader.html</anchorfile>
      <anchor>a72cdf9dc480c8d57475a085e4139fccc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1ImageReader.html</anchorfile>
      <anchor>ad8758ae63e5d8bd3c5666073830c0cad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1ImageReader.html</anchorfile>
      <anchor>a27da0364936a83139d4af0438a39e3cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BaseImage *</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1ImageReader.html</anchorfile>
      <anchor>afb19fa3a926309be10eb55566bddd2cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ImageReader</name>
      <anchorfile>classmirtk_1_1ImageReader.html</anchorfile>
      <anchor>a3e9261028e89f52eb667a50d665e3087</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>CheckHeader</name>
      <anchorfile>classmirtk_1_1GIPLImageReader.html</anchorfile>
      <anchor>a55899e2813f59e2a751fbf6d6c10d2ad</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ImageReader *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1ImageReader.html</anchorfile>
      <anchor>ab5bdaf2d59d4e93bb99acd2e96e5e5c7</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ImageReader *</type>
      <name>TryNew</name>
      <anchorfile>classmirtk_1_1ImageReader.html</anchorfile>
      <anchor>a768a4e960ee9fd33ff612cc895e6eca6</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>ReadHeader</name>
      <anchorfile>classmirtk_1_1GIPLImageReader.html</anchorfile>
      <anchor>ae69911e48a1f46af90d1c5fd3c4e5ce5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_ReflectX</name>
      <anchorfile>classmirtk_1_1ImageReader.html</anchorfile>
      <anchor>ab470c837d9aa4955b9111783007705e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_ReflectY</name>
      <anchorfile>classmirtk_1_1ImageReader.html</anchorfile>
      <anchor>a3343170f0a82e0fabd030d42155709c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_ReflectZ</name>
      <anchorfile>classmirtk_1_1ImageReader.html</anchorfile>
      <anchor>a91ba4d903f7067a52247d059a2b839d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_Start</name>
      <anchorfile>classmirtk_1_1ImageReader.html</anchorfile>
      <anchor>a7dcaf8eb400b0fb8702cdab0c8899775</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GIPLImageWriter</name>
    <filename>classmirtk_1_1GIPLImageWriter.html</filename>
    <base>mirtk::ImageWriter</base>
    <member kind="function" static="yes">
      <type>static Array&lt; string &gt;</type>
      <name>Extensions</name>
      <anchorfile>classmirtk_1_1GIPLImageWriter.html</anchorfile>
      <anchor>a8070ee75e3728e21a9031800418054ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ImageWriter *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1ImageWriter.html</anchorfile>
      <anchor>a655367294fdcd37a381edb028830b18a</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GIPLImageWriter.html</anchorfile>
      <anchor>a09853f1940b09b708c4fc00b109d0bf4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Finalize</name>
      <anchorfile>classmirtk_1_1ImageWriter.html</anchorfile>
      <anchor>a5db6d032d5d418f2a905e1502cdb5a89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ImageWriter</name>
      <anchorfile>classmirtk_1_1ImageWriter.html</anchorfile>
      <anchor>a535d9f619d9e56f1125713c2b745665c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1ImageWriter.html</anchorfile>
      <anchor>abdae43fe1b29568bb707099f89b9709c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ImageWriter</name>
      <anchorfile>classmirtk_1_1ImageWriter.html</anchorfile>
      <anchor>a72f9d6dfcd34a85ded003510b0b3a535</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_ReflectX</name>
      <anchorfile>classmirtk_1_1ImageWriter.html</anchorfile>
      <anchor>ab7054ab3fa7379ded2cd32b75babb0b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_ReflectY</name>
      <anchorfile>classmirtk_1_1ImageWriter.html</anchorfile>
      <anchor>ae7c1ac8aa4a0a20d782116302fb8f020</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_ReflectZ</name>
      <anchorfile>classmirtk_1_1ImageWriter.html</anchorfile>
      <anchor>a22671ce924727ba8bef72b5b46bc409d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_Start</name>
      <anchorfile>classmirtk_1_1ImageWriter.html</anchorfile>
      <anchor>ab4092861ea4ee82ad87c5ab5d33beded</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GradientDescent</name>
    <filename>classmirtk_1_1GradientDescent.html</filename>
    <base>mirtk::LocalOptimizer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GradientDescent.html</anchorfile>
      <anchor>a72aa0c2725f59af3ac129e10c8a7433e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Finalize</name>
      <anchorfile>classmirtk_1_1GradientDescent.html</anchorfile>
      <anchor>a773d1c420b686b0302e7ccde4cf06227</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Gradient</name>
      <anchorfile>classmirtk_1_1GradientDescent.html</anchorfile>
      <anchor>a363e850e2bab5f5f4da85edfadc37996</anchor>
      <arglist>(double *, double=.0, bool *=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GradientFieldSimilarity</name>
    <filename>classmirtk_1_1GradientFieldSimilarity.html</filename>
    <base>mirtk::ImageSimilarity</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1GradientFieldSimilarity.html</anchorfile>
      <anchor>aa8aa208b4bd41269d95e5ca1193a5208</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteDataSets</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>af9f792733adbcab6d2e668c4ce4ebfc3</anchor>
      <arglist>(const char *, const char *, bool=true) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1GradientFieldSimilarity.html</anchorfile>
      <anchor>a55684411379e06f5c19955bc97b078ff</anchor>
      <arglist>(bool=true)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>NonParametricGradient</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a4d4a3161fb17db195cb962df9cffb0a6</anchor>
      <arglist>(const RegisteredImage *image, GradientImageType *gradient)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetWithoutPrefix</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a7f20cb7c4fe19de82b0fdb012bb16cba</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::GradientImageFilter</name>
    <filename>classmirtk_1_1GradientImageFilter.html</filename>
    <templarg></templarg>
    <base>mirtk::ImageToImage</base>
    <member kind="enumeration">
      <type></type>
      <name>GradientType</name>
      <anchorfile>classmirtk_1_1GradientImageFilter.html</anchorfile>
      <anchor>a1224d78a14fc6f98091a0e5b2f969ff9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GradientImageFilter</name>
      <anchorfile>classmirtk_1_1GradientImageFilter.html</anchorfile>
      <anchor>ae43978b9bb79676a0abed6bd49891fd7</anchor>
      <arglist>(GradientType type=GRADIENT_MAGNITUDE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1GradientImageFilter.html</anchorfile>
      <anchor>a4312eba9e784264c678ac024a1d59368</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Finalize</name>
      <anchorfile>classmirtk_1_1GradientImageFilter.html</anchorfile>
      <anchor>ab481d41dafd9a1e62caeed4050509a29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GradientImageFilter.html</anchorfile>
      <anchor>aff5978864ff4680e039ff465951d9b05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1GradientImageFilter.html</anchorfile>
      <anchor>af56034586856440ce29df8d2b25476ec</anchor>
      <arglist>(GradientType, Type)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1GradientImageFilter.html</anchorfile>
      <anchor>a49015f04d1db31aeb3e590039d19d05a</anchor>
      <arglist>(bool, UseVoxelSize)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1GradientImageFilter.html</anchorfile>
      <anchor>af842b0560824aaf5ca96bc2029ea3971</anchor>
      <arglist>(bool, UseOrientation)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1GradientImageFilter.html</anchorfile>
      <anchor>a19f54ee75e4f2ebe1db203f643de8fff</anchor>
      <arglist>(double, PaddingValue)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::HarmonicFundamentalVolumeParameterizer</name>
    <filename>classmirtk_1_1HarmonicFundamentalVolumeParameterizer.html</filename>
    <base>mirtk::FundamentalVolumeParameterizer</base>
    <member kind="function">
      <type></type>
      <name>HarmonicFundamentalVolumeParameterizer</name>
      <anchorfile>classmirtk_1_1HarmonicFundamentalVolumeParameterizer.html</anchorfile>
      <anchor>a9055b178e5f697012d98aaf91217be7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HarmonicFundamentalVolumeParameterizer</name>
      <anchorfile>classmirtk_1_1HarmonicFundamentalVolumeParameterizer.html</anchorfile>
      <anchor>af80316431ae7c7dc8b4a02910a6424e1</anchor>
      <arglist>(const HarmonicFundamentalVolumeParameterizer &amp;)</arglist>
    </member>
    <member kind="function">
      <type>HarmonicFundamentalVolumeParameterizer &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1HarmonicFundamentalVolumeParameterizer.html</anchorfile>
      <anchor>a7b88a1da5c85d4015b8c0fd2c12fb46d</anchor>
      <arglist>(const HarmonicFundamentalVolumeParameterizer &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HarmonicFundamentalVolumeParameterizer</name>
      <anchorfile>classmirtk_1_1HarmonicFundamentalVolumeParameterizer.html</anchorfile>
      <anchor>a535de9e43ae69eed7cb9fa9b74b68760</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>AddSourcePoint</name>
      <anchorfile>classmirtk_1_1HarmonicFundamentalVolumeParameterizer.html</anchorfile>
      <anchor>a6af5caef662783585462ca54bb1b428f</anchor>
      <arglist>(double q[3])</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>AddWeights</name>
      <anchorfile>classmirtk_1_1HarmonicFundamentalVolumeParameterizer.html</anchorfile>
      <anchor>a3f9f566ab74e568b6eb4c6e071f606d9</anchor>
      <arglist>(int k, const Matrix &amp;w)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>GetCoefficients</name>
      <anchorfile>classmirtk_1_1HarmonicFundamentalVolumeParameterizer.html</anchorfile>
      <anchor>a4fb9166cf1241a7424b4992b07b6cfea</anchor>
      <arglist>(int k, Matrix &amp;coeff) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>GetConstraints</name>
      <anchorfile>classmirtk_1_1HarmonicFundamentalVolumeParameterizer.html</anchorfile>
      <anchor>ae6ef34e3bfdce82c6f5ecc03d9f230ce</anchor>
      <arglist>(int k, Matrix &amp;b) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1HarmonicFundamentalVolumeParameterizer.html</anchorfile>
      <anchor>af02b0256d459ecd081e2fcb6f0bb10c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Parameterize</name>
      <anchorfile>classmirtk_1_1HarmonicFundamentalVolumeParameterizer.html</anchorfile>
      <anchor>a1648def577e8322909b717e321588e03</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::HarmonicMap</name>
    <filename>classmirtk_1_1HarmonicMap.html</filename>
    <base>mirtk::FundamentalMap</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1HarmonicMap.html</anchorfile>
      <anchor>a577553f3dac003c06183441d98c63704</anchor>
      <arglist>(double *v, double x, double y, double z=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1HarmonicMap.html</anchorfile>
      <anchor>ab6b40ebb7d11b5b96697ed27ef9c1fcd</anchor>
      <arglist>(double x, double y, double z=0, int l=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VolumetricMap *</type>
      <name>NewCopy</name>
      <anchorfile>classmirtk_1_1HarmonicMap.html</anchorfile>
      <anchor>a094e3942567ee71b50aecd3913b79c9d</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::HarmonicTetrahedralVolumeParameterizer</name>
    <filename>classmirtk_1_1HarmonicTetrahedralVolumeParameterizer.html</filename>
    <base>mirtk::LinearTetrahedralVolumeParameterizer</base>
    <member kind="function">
      <type></type>
      <name>HarmonicTetrahedralVolumeParameterizer</name>
      <anchorfile>classmirtk_1_1HarmonicTetrahedralVolumeParameterizer.html</anchorfile>
      <anchor>a8db8f90d7461bd1de2a10adfc2e6b82f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HarmonicTetrahedralVolumeParameterizer</name>
      <anchorfile>classmirtk_1_1HarmonicTetrahedralVolumeParameterizer.html</anchorfile>
      <anchor>a187982b82006b5e0e3c78f3dc672afe0</anchor>
      <arglist>(const HarmonicTetrahedralVolumeParameterizer &amp;)</arglist>
    </member>
    <member kind="function">
      <type>HarmonicTetrahedralVolumeParameterizer &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1HarmonicTetrahedralVolumeParameterizer.html</anchorfile>
      <anchor>af608a4a290bdfa717c526f7a8a542789</anchor>
      <arglist>(const HarmonicTetrahedralVolumeParameterizer &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HarmonicTetrahedralVolumeParameterizer</name>
      <anchorfile>classmirtk_1_1HarmonicTetrahedralVolumeParameterizer.html</anchorfile>
      <anchor>a3917b76fd5078da2be74330e4de47936</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Matrix3x3</type>
      <name>GetWeight</name>
      <anchorfile>classmirtk_1_1HarmonicTetrahedralVolumeParameterizer.html</anchorfile>
      <anchor>a2807355d14e36220d4ff7dde71b4c678</anchor>
      <arglist>(vtkIdType cellId, const double v0[3], const double v1[3], const double v2[3], const double v3[3], double volume) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1LinearTetrahedralVolumeParameterizer.html</anchorfile>
      <anchor>abec90c4e904a94d54954e8a3323d9e92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Finalize</name>
      <anchorfile>classmirtk_1_1TetrahedralVolumeParameterizer.html</anchorfile>
      <anchor>aa1acab2ea4f38ea10946082bd6641316</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::HashImage</name>
    <filename>classmirtk_1_1HashImage.html</filename>
    <templarg>TVoxel</templarg>
    <base>mirtk::BaseImage</base>
    <member kind="typedef">
      <type>DataMap::const_iterator</type>
      <name>DataIterator</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a7dee02ee17ca97fe7627ca51852209f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UnorderedMap&lt; int, VoxelType &gt;</type>
      <name>DataMap</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>ae9d5ab819014b1090a16d894058cea53</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>voxel_info&lt; VoxelType &gt;::RealType</type>
      <name>RealType</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a9534860d1f770cf7624552802e15ece1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>voxel_info&lt; VoxelType &gt;::ScalarType</type>
      <name>ScalarType</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>aebf045f61db485711ba330748053b4c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TVoxel</type>
      <name>VoxelType</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a7935e46fcc401b39627708628f2cf0b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>af8bc9ec74431777b63e2d344752543af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BaseImage *</type>
      <name>Copy</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a9bd301965c1d92a811efc58cfa14a82d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a326c7d8402ce6395b3327406765c6fac</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a9aef943c01064dfec127ee951c4c974c</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>ab0b757bf2a6ff2dd4ebd9fb00bf062f7</anchor>
      <arglist>(const HashImage&lt; TVoxel2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyTo</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a7c7b6038429948906382d4da7f92813e</anchor>
      <arglist>(GenericImage&lt; TVoxel2 &gt; &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXT</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>aaeb7658109c39c52d83ab813e58cd18a</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXY</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a9a11331faca17273b8f345e4a7b2d6c2</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXZ</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a80372b7d447e81d38e4a8e918818d161</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipYT</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a37e3e802a7a6fc2a6c686746f76d7a05</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipYZ</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a4ded8a4727d842406f395351d81936eb</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipZT</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a40ad1a51d0df37dc56aede503914f8dd</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a5501ffd5d544725c080d0cc0beacddc0</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>ad4e52e56647d2726db7ee92a54b804c3</anchor>
      <arglist>(int, int, int=0, int=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetAsDouble</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>aae7f85439d53f57b6bc370a2d9e5830f</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetAsDouble</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>aa9eda3faf159b07ea01f1c135d0a91aa</anchor>
      <arglist>(int, int, int=0, int=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a464a26a331419d91836ad3d23cec4453</anchor>
      <arglist>(Vector &amp;, int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a1d49d80cd6f335a04bebe0d83fa230e4</anchor>
      <arglist>(Vector &amp;, int, int, int=0, int=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a197274ba2b8ec5721192e36414470924</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a2d74108a0a1130a74353c1db93d62072</anchor>
      <arglist>(int, int, int=0, int=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a98bb720d673715beb7949ac3fdc01aaa</anchor>
      <arglist>(int=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a180e705e85d1f412650ef8f2796a039d</anchor>
      <arglist>(int=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a55fef8de03490ae130fdbd4fa6f26e5f</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a106771e2247c326b46ec242b9ca6e379</anchor>
      <arglist>(int, int, int=0, int=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetDataType</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>ab332606ce5dfdda74efae422fa90e4fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetDataTypeMax</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a76f802fb8012b99734029af25e002b22</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetDataTypeMin</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>add5f186f6f0709d3e18a46b7879c8fd6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetDataTypeSize</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>abf4baa47123af7f5d5cd339315a06683</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HashImage</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a900a1c4d6f5b54ed7b3685e301f65a77</anchor>
      <arglist>(int, int=-1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a56c21956db97e65ebab1b8678ec0c93c</anchor>
      <arglist>(HashImage &amp;, int, int=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a83d83083196c23745ac83fd64f0bef2a</anchor>
      <arglist>(BaseImage *&amp;, int, int=-1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a667d98652a866ff33978212131f932be</anchor>
      <arglist>(VoxelType &amp;, VoxelType &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a24dd7519fb414bfba84c1a36c9efc2b4</anchor>
      <arglist>(VoxelType &amp;, VoxelType &amp;, VoxelType) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a0255a9ced6423d984a017092109e5fdc</anchor>
      <arglist>(VoxelType *, VoxelType *) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a0d39022cc78db44edd705dc579b2326d</anchor>
      <arglist>(VoxelType *, VoxelType *, VoxelType) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMaxPad</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a48a0033970a877e7dd5908f2792e2493</anchor>
      <arglist>(VoxelType *, VoxelType *, VoxelType) const </arglist>
    </member>
    <member kind="function">
      <type>HashImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>abe2d8dd5124f5f1dee0880376e5c5eeb</anchor>
      <arglist>(int, int) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>ab4dbf9612a63d91911bc4a4272f7fb20</anchor>
      <arglist>(HashImage &amp;, int, int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a68009f76d5bf3518a76bc0e72481c0e7</anchor>
      <arglist>(BaseImage *&amp;, int, int) const </arglist>
    </member>
    <member kind="function">
      <type>HashImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a0428712a0791f790ee3ea5b1a718b103</anchor>
      <arglist>(int, int, int, int, int, int) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a10afc5e9de3c5f0000b51e68c2a77499</anchor>
      <arglist>(HashImage &amp;, int, int, int, int, int, int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>ae216b0498daa872c17749fdd5bb6fdea</anchor>
      <arglist>(BaseImage *&amp;, int, int, int, int, int, int) const </arglist>
    </member>
    <member kind="function">
      <type>HashImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>aed2a822b76d17d1da83e3ed1ff3c4f43</anchor>
      <arglist>(int, int, int, int, int, int, int, int) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a4e40c0b9324f332b921d24d89ec95b40</anchor>
      <arglist>(HashImage &amp;, int, int, int, int, int, int, int, int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>adfa8e1287c33aee837de780bd35eacb2</anchor>
      <arglist>(BaseImage *&amp;, int, int, int, int, int, int, int, int) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HashImage</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>ae7a5a977bce686799a9fb2f2868e2c98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HashImage</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a3ffe4afef3f883fc8ed1881bec2f6ccc</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HashImage</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a359a816128ee3510d015d6ee53230298</anchor>
      <arglist>(int, int, int=1, int=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HashImage</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a89377d95c2206e34f29b90774d65c2a8</anchor>
      <arglist>(int, int, int, int, int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HashImage</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>af38d5554de899a94f2779eb7b08cf3ec</anchor>
      <arglist>(const ImageAttributes &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HashImage</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a2ae0f79b39b3f24bca373c8e139f5595</anchor>
      <arglist>(const ImageAttributes &amp;, int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HashImage</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a1ffffb5c390c11764f6153db8cf07d8c</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HashImage</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a5ec86660cf113f2c76692bc3ab5341f5</anchor>
      <arglist>(const HashImage&lt; VoxelType &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HashImage</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a313add660df3c5d59d18652dd2ef935b</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HashImage</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a3fde92bed3b411d063283a621f2adec5</anchor>
      <arglist>(const HashImage&lt; TVoxel2 &gt; &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>ad579a94ee102dcd1669a8432f0faf034</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a24a14cadc91d20ee0abc1c19c8b392a2</anchor>
      <arglist>(const ImageAttributes &amp;, int=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a43462f874eeb335c2a6244c0f6033410</anchor>
      <arglist>(int, int, int, int, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a195077f714e37062bf18b634c5db5485</anchor>
      <arglist>(int, int, int=1, int=1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>N</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a764a3ca9be41d0b65cb5e94cf58f9dff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HashImage</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a6c9cb7265a48dc42d2da37c634394f5b</anchor>
      <arglist>(const HashImage &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>HashImage</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>aa1db4a65048bfad0afd0aa744029b59e</anchor>
      <arglist>(ScalarType) const </arglist>
    </member>
    <member kind="function">
      <type>HashImage &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a5cadcdc7098a6a2ac407496f049b0437</anchor>
      <arglist>(ScalarType)</arglist>
    </member>
    <member kind="function">
      <type>HashImage &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a6f82f49f1f37be42b63781dee000669b</anchor>
      <arglist>(const HashImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>HashImage</type>
      <name>operator+</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a2b28938ea9460f2cbf8c8e5d0bc37c90</anchor>
      <arglist>(const HashImage &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>HashImage</type>
      <name>operator+</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a1540a2012cff252f543b0a80239b8f04</anchor>
      <arglist>(ScalarType) const </arglist>
    </member>
    <member kind="function">
      <type>HashImage &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a4519ccf61be6feff5d47e07a7c5bbce6</anchor>
      <arglist>(ScalarType)</arglist>
    </member>
    <member kind="function">
      <type>HashImage &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a103c2b56fb2bce6e7af101fc3fb4d4b3</anchor>
      <arglist>(const HashImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>HashImage</type>
      <name>operator-</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a79950d9502fc08f25e1f536eb45c8c30</anchor>
      <arglist>(const HashImage &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>HashImage</type>
      <name>operator-</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>accae1b61f6c51ccb74d9a0926d8c04ce</anchor>
      <arglist>(ScalarType) const </arglist>
    </member>
    <member kind="function">
      <type>HashImage &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>af3c2a480d755d934a2ba7eee3217b2d7</anchor>
      <arglist>(ScalarType)</arglist>
    </member>
    <member kind="function">
      <type>HashImage &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a8447450f4d29ef1d33c8865dfe042086</anchor>
      <arglist>(const HashImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>HashImage</type>
      <name>operator/</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a526518cec7f0ba560bbffd3a5d1882da</anchor>
      <arglist>(const HashImage &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>HashImage</type>
      <name>operator/</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a6cdb2e8bf9ceb8665e2824a88d362e5c</anchor>
      <arglist>(ScalarType) const </arglist>
    </member>
    <member kind="function">
      <type>HashImage &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>ac157366ca4fd063baacaf7b0fec1753f</anchor>
      <arglist>(ScalarType)</arglist>
    </member>
    <member kind="function">
      <type>HashImage &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>ad241ccb764e69d563c752bb02ee32501</anchor>
      <arglist>(const HashImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>HashImage &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>acac26113c01e1b50374382b814f98412</anchor>
      <arglist>(VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>HashImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a70df3975e453e0741195c6517612e773</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>HashImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a2c959576d12fcbebd9e76056332081e2</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>HashImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a721404fb5d2a1e207da7120723bfea1d</anchor>
      <arglist>(const HashImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>HashImage&lt; VoxelType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>ae4eca1b97303b16c4b5304fecd55caa8</anchor>
      <arglist>(const HashImage&lt; TVoxel2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a05c71b4b4931dfd650d89f902495d6f9</anchor>
      <arglist>(const HashImage&lt; TVoxel2 &gt; &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a60f08a991cacedeac74edc5b9edae2c2</anchor>
      <arglist>(int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a82f80c4678768a5a68b6b1f2d02fe810</anchor>
      <arglist>(int, int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>ac3f5a0679ce9929a5246db7da0d9d8dd</anchor>
      <arglist>(int, int, int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a7f4c8be794f37b304586d8ae90347046</anchor>
      <arglist>(int, int, int, int, VoxelType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a1733d90fc160176142aee0d423d55ac8</anchor>
      <arglist>(int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>af2aaf313351987d91a3a98307e57b33a</anchor>
      <arglist>(int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>ad784198913f49d98a9ee5961036041da</anchor>
      <arglist>(int, int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a0b1befe7b906274b184bb1443ec3a13a</anchor>
      <arglist>(int, int, int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a52b97ee360b8d0878b74b6e8dabcf427</anchor>
      <arglist>(int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a28c9d48fb9d86137e5485cb209c832be</anchor>
      <arglist>(int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a2e4ab5d33037100eb26338882363f13c</anchor>
      <arglist>(int, int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a3a5151bf051654bebbd69827523728b1</anchor>
      <arglist>(int, int, int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutBackgroundValueAsDouble</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a60608ab14961f97319e19fe63745834c</anchor>
      <arglist>(double, bool)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutBackgroundValueAsDouble</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>aa5bf1f8eb46440151396a85491163b72</anchor>
      <arglist>(double value, bool threshold)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutBackgroundValueAsDouble</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>aead21343ed21759a69e2f0843c54c7c6</anchor>
      <arglist>(double value, bool threshold)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutMinMax</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>ad0fd47f9311de8f9f85c3bdfd4c0fd9a</anchor>
      <arglist>(VoxelType, VoxelType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a69fb7956f95d1082615e1c9be7c08c87</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a94773f12d7fb761be1d441b511853b3c</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>ae2024e843f89f62344ec6b623de9d765</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectX</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>ac52ea38afec026c8520ce29c7c8b56eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectY</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>ae51f91c91d607d9649a29d0e02252674</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectZ</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a14a0e319bce68a71d5a43d8c448d1630</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>VoxelToIndex</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a9e9888b0916370b2e64aafd737bbe9e6</anchor>
      <arglist>(int, int, int=0, int=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>af8a4990506f10459cb775570daccf9e1</anchor>
      <arglist>(const char *) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a86cc1b0a7c39df3cf27ee988309b7678</anchor>
      <arglist>(const char *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>ab5638801c914fede306afba1916394c0</anchor>
      <arglist>(const char *) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HashImage</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a91da625b0297966ff589dc31a3ad26ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>VoxelType</type>
      <name>Access</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>ae8c0df61e728fbff1f2c2024eb8f8b86</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>AllocateImage</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a890f705c5c30101151c7a576f9d933ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>ae0a9a46a0d4325025ddf8e4894159e6d</anchor>
      <arglist>(DataMap, Data)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1HashImage.html</anchorfile>
      <anchor>a17e6338635ae4a2c8ae59cfedcd36c3b</anchor>
      <arglist>(VoxelType, DefaultValue)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::HessianImageFilter</name>
    <filename>classmirtk_1_1HessianImageFilter.html</filename>
    <templarg></templarg>
    <base>mirtk::ImageToImage</base>
    <member kind="enumeration">
      <type></type>
      <name>OutputType</name>
      <anchorfile>classmirtk_1_1HessianImageFilter.html</anchorfile>
      <anchor>a78e0192a1807c57453f99accc24d9ddf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HessianImageFilter</name>
      <anchorfile>classmirtk_1_1HessianImageFilter.html</anchorfile>
      <anchor>a9c875fe3828dac934d18af424c930723</anchor>
      <arglist>(OutputType type=HESSIAN_MATRIX)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1HessianImageFilter.html</anchorfile>
      <anchor>a67189f0b8b8839bf6852efd256d35816</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1HessianImageFilter.html</anchorfile>
      <anchor>accc1368098c4c1dcfe286b31abf95ffb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1HessianImageFilter.html</anchorfile>
      <anchor>adc7c9a313a73d828e2767262f8408f5b</anchor>
      <arglist>(bool, UseVoxelSize)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1HessianImageFilter.html</anchorfile>
      <anchor>afba0246116a2d160f9ecc14871a3788c</anchor>
      <arglist>(bool, UseOrientation)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1HessianImageFilter.html</anchorfile>
      <anchor>aae4e4cbe125e82d04d16a4edf11d635c</anchor>
      <arglist>(double, PaddingValue)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1HessianImageFilter.html</anchorfile>
      <anchor>a6a512ee23741b9ff07f5d8c0fe237a34</anchor>
      <arglist>(OutputType, Type)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::Histogram1D</name>
    <filename>classmirtk_1_1Histogram1D.html</filename>
    <templarg>HistogramType</templarg>
    <base>mirtk::Object</base>
    <member kind="function">
      <type>void</type>
      <name>Add</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>ae7d4ff627cfde4dd1992aced2800d414</anchor>
      <arglist>(int, HistogramType=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddSample</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>ae9eef7e661ac20d387443540b76e7398</anchor>
      <arglist>(double, HistogramType=1)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>BinToCDF</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a8e5ab2a3df2857749ea492560dd32071</anchor>
      <arglist>(int bin) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>BinToPDF</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a4062af6cf6f4382c2cf249c9fd49864f</anchor>
      <arglist>(int bin) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>BinToVal</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>adeea6d74a46c914f5fc8a19a7a50f2c4</anchor>
      <arglist>(int bin) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>CDFToBin</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a0ea6467d179589f21fdf8e9d2401f372</anchor>
      <arglist>(double p) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>CDFToVal</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a06ea257f6a157ad6505654623a54a67c</anchor>
      <arglist>(double p) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Delete</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a04488126798c180276ffa7ab8608b0e6</anchor>
      <arglist>(int, HistogramType=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DelSample</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a7178a3a0dd4156a30aca6403ca075347</anchor>
      <arglist>(double, HistogramType=1)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Entropy</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a9b54798abcb16390c7eeea6174dfb03b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetMax</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a0ed224ec124cc16b34368bbe66a64dbb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetMin</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a298d45520c9ce91a57b1fde81cff5bfd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GetWidth</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a8e1dee181b226dc7a550d27062b38d52</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Histogram1D</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>ad3b17b7b3def40081ecd5597b9430fd7</anchor>
      <arglist>(const Histogram1D &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Histogram1D</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>af6296e3f8300fa95b1ca3c0f08194937</anchor>
      <arglist>(int nbins=256)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Histogram1D</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a42f5e859d3437a9b5cd3707d66ad0f90</anchor>
      <arglist>(double min, double max, double width)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Histogram1D</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a29aded97602dc37c05cdec3e37d5892d</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Log</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a926826fae62145b6bca4c1d23f8c8fbe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Max</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>aca0d75c91de0c0d4f287b3a641619a7f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Max</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a9a253e5796e2a6436b0d8ec3e4a0599e</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Mean</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a31acc08ce3a22dcbca19d21d5499dcf8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Min</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>ae2ce595b179f481ecd28711900896431</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Min</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a5aeb41c0cc8fd2e66c7fb95710ebd0ef</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfBins</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a71c87a6d0c1ad02eb3130bf1750b8801</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NumberOfBins</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a8216ad519694ed6e89c218eef1c190d2</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>HistogramType</type>
      <name>NumberOfSamples</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>aec6ee703cfda1b104a00d6ebbda066b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NumberOfSamples</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a3decc94e34b231bffb4fa97a0d04882f</anchor>
      <arglist>(HistogramType)</arglist>
    </member>
    <member kind="function">
      <type>HistogramType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a984112b09a927c9080a9d5751f9d4b9d</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const HistogramType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a1d0799530b4c38ceba398cac534d8db8</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a89412cb989f7d9ea36ca96d9038c0947</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutMax</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>ab0871ef56abddbacb09103d3195dbcc1</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutMin</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a726febf4bd634476297519a09f2aea39</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutNumberOfBins</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a2973cba1a2169a7c3bd464f775767122</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutWidth</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>af5c744fffc6223b3940dca697604ac43</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>HistogramType *</type>
      <name>RawPointer</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a1a05a515f3438cbb3e4ce0a1616f29d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const HistogramType *</type>
      <name>RawPointer</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>ad87f540ac1fc405c3d481ffbe137d259</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>ac71dbcbc731d60ca1a9b35bf764e5e3d</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reset</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a865280e77d49be504ecf64f9c88278dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Smooth</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a86e4e0c2a65db1b0c3f8060a73aaaf01</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>StandardDeviation</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a7e27b782d2dd349552b9e8687929cd0a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ValToBin</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a82d0576152a7cff69796d4526c8b9838</anchor>
      <arglist>(double val) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ValToCDF</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>ab2c905405cf490d07a37f5ce503235f5</anchor>
      <arglist>(double val) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ValToPDF</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a47218ce02b03261d2c36101446cadc89</anchor>
      <arglist>(double val) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ValToRange</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a4b99c878fbc2a585f64f76f52b36f314</anchor>
      <arglist>(double val) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Variance</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a0b59deb0091569b9ec3e576da7283c2b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>af9c03a944a914764914a5281b6798dce</anchor>
      <arglist>(const char *) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Histogram1D</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>adc7de4a38bd98db09fe9df346e4e525d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HistogramType *</type>
      <name>_bins</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>ae28dc599ba12e3cad64e83802c2c3d36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_max</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>afa78a8d14e53593e8b2a240f4e782e19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_min</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a7991365fe94e35d07b36d18feaa8ddbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_nbins</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a14b6594bf773d37fe1d79801577a3d85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HistogramType</type>
      <name>_nsamp</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a9f474c7e48cb88aa5e9ed137e0390006</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_width</name>
      <anchorfile>classmirtk_1_1Histogram1D.html</anchorfile>
      <anchor>a46ea664644bb8072476f8717e6b182df</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::Histogram2D</name>
    <filename>classmirtk_1_1Histogram2D.html</filename>
    <templarg></templarg>
    <base>mirtk::Object</base>
    <member kind="function">
      <type>void</type>
      <name>Add</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a408a8eacbd3de310891f5820b1a5e2a1</anchor>
      <arglist>(int, int, HistogramType=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddSample</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a4b4c546a9d963e9b8078904b4945a929</anchor>
      <arglist>(double, double, HistogramType=1)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>BinToValX</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a500fc381bb4b69d044a1a464f88ee7b5</anchor>
      <arglist>(int bin) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>BinToValY</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>ac59f057ae0b8351257690429f8fabfc8</anchor>
      <arglist>(int bin) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ConditionalMeanXY</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a5ef8a751292d32dfd7130d9f892f4b4f</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ConditionalMeanYX</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a6233f314965bad53e08e2857417ef71f</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ConditionalProbabilityXY</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a9da7e52563955e3d335f4a905357f4c1</anchor>
      <arglist>(int, int) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ConditionalProbabilityYX</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a8d88c71f6d511a7feaaa48412a362a48</anchor>
      <arglist>(int, int) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ConditionalVarianceXY</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a1d2f62a329cd21445aa5526588ababc2</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ConditionalVarianceYX</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>af91a6bc0f6ed5dcd89473f3da19ea6d6</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>CorrelationRatioXY</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a4b4df86bd744b75e5f5b8e7343066a03</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>CorrelationRatioYX</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a1c81a864cb60817e8f5dcb1dc04be8b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Covariance</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a9f4754c2d0a7c64cab6b5572ee6f513d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>CrossCorrelation</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>af6ad425d049109addbb2ed55e66147b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Delete</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>aef749128863860b9c386269c1c417993</anchor>
      <arglist>(int, int, HistogramType=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DelSample</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>aa821b49662fe5a5bf8267bd9f216d7fe</anchor>
      <arglist>(double, double, HistogramType=1)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>EntropyX</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a93f14c5c5c53a619da7b454eaf7d3fe0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>EntropyY</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a404ca19250be415ae201d0b917e3e49a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMax</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a575fa65d555f2d1933ba54c81ff66bca</anchor>
      <arglist>(double *, double *) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMax</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a0f7d57e683afd8637766a247fa2e534e</anchor>
      <arglist>(double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMin</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a44448a78b1633994c1c01fbc82a7100b</anchor>
      <arglist>(double *, double *) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMin</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>ac008db1cb0ce4d1a363110c54f007108</anchor>
      <arglist>(double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetNumberOfBins</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>acf50b7e8f69f10ae89d2846641363e07</anchor>
      <arglist>(int *, int *) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetNumberOfBins</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a2873f2ebb8791dd918fa9e51f33842cd</anchor>
      <arglist>(int &amp;, int &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetWidth</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a39a6757b914f2538183371c28cc40466</anchor>
      <arglist>(double *, double *) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetWidth</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a30a81230ce4cd4c8a676257074b24e6f</anchor>
      <arglist>(double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Histogram2D</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>ad9d4c5f8a90e2549e9df4ef5e4b275a3</anchor>
      <arglist>(const Histogram2D &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Histogram2D</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a70d8b61d9293c0241e23ffd91a6309a9</anchor>
      <arglist>(int nbins_x=256, int nbins_y=256)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Histogram2D</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>aaf3edb92adce245549a71ae0fdb9b765</anchor>
      <arglist>(double min_x, double max_x, double width_x, double min_y, double max_y, double width_y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>HistogramX</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a8420b60f409c05497221e169d546cc94</anchor>
      <arglist>(Histogram1D&lt; HistogramType &gt; &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Histogram1D&lt; HistogramType &gt;</type>
      <name>HistogramX</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a3baf26bef18b34d3dbb1464330adab20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>HistogramY</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>ad4030b9a04df456bfc262aa196dc93bd</anchor>
      <arglist>(Histogram1D&lt; HistogramType &gt; &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Histogram1D&lt; HistogramType &gt;</type>
      <name>HistogramY</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>af3dbe018d43991ab042d7e57e7ed2459</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a1e78efe5df3f842df8e1dfcfdd9f7b6f</anchor>
      <arglist>(double min_x, double max_x, double width_x, double min_y, double max_y, double width_y)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>JointEntropy</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a83b46070517a5e99748ef4f4cad4431c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>JointProbability</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a874ac936350041f8b79a1d6eb9cb1d69</anchor>
      <arglist>(int, int) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Kappa</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>aeb1b6db60c9c611fcc4e23ad381b3e6a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>LabelConsistency</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>acae2bce0d4a85382b2dfde990750ef5e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Log</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a65d46b705c2bfe94282c0ab65437e08f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>MarginalProbabilityX</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a93ea2ffbc0fea145d61071b282802e94</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>MarginalProbabilityY</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>afc4c7ed81e2ee1349554a261b92a8c41</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>MaxX</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>aec06957805e8c9eff2a28b6b380de248</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>MaxY</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a8fdcf89388da7578f58f2e1b3bc4d85c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>MeanX</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>aa2831380a1f889d75fee0414bdb46754</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>MeanY</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>ad9e3cc2a0561cb4d64af7bd51cb57e1f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>MinX</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a5557bd748c3451f93dccf8c2836b9842</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>MinY</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a60e001670ec9822e9a7f22694168a096</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>MutualInformation</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>ad737e0cee97fd2ee56f7c5ad2805c5eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>NormalizedMutualInformation</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a1db0f8f9568c1aba3de4bc9add5cdb2f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfBins</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a764be35b4e1b0359ecca37fbcb235a52</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfBinsX</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a6fd312a9004df63a932761d4a72934bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfBinsY</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a5ccc9d9f89bffb5ec33a85680a69cd8a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HistogramType</type>
      <name>NumberOfSamples</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a5a358e8765fec09c81d753c1f8938436</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NumberOfSamples</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>ae2b6986f1cc3493643c145a8005621aa</anchor>
      <arglist>(HistogramType)</arglist>
    </member>
    <member kind="function">
      <type>HistogramType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>abdfa55ab84a78b6845d9f429128a9037</anchor>
      <arglist>(int, int)</arglist>
    </member>
    <member kind="function">
      <type>const HistogramType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a688e2e902ccd8eefb0752c0bcd199996</anchor>
      <arglist>(int, int) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a9242fe53142d9c677337f7e9e8372413</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutMax</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>af80b3d59bfe5876c982ccd1292bc646a</anchor>
      <arglist>(double, double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutMin</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a6d13cc3fb4e2b46150e4be19807da4bb</anchor>
      <arglist>(double, double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutNumberOfBins</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a5fdb2c74373b9cb280358ac4d2607dff</anchor>
      <arglist>(int, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutNumberOfBinsX</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>ab195e933d2404283d0dbb18c8f677c2d</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutNumberOfBinsY</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a3e98fd565a06c77e13a89f86c7d939e2</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutWidth</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a777bf3d9523c9c69ae7b9f504ed82f43</anchor>
      <arglist>(double, double)</arglist>
    </member>
    <member kind="function">
      <type>HistogramType *</type>
      <name>RawPointer</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a93a145ba16d70b0ba874ff4a74adf3cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const HistogramType *</type>
      <name>RawPointer</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a0f881125f6afcb168073e8b7f863b318</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a378b5c2d7b4f38fd3be8c5e9c687f8af</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reset</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a00bd258ad14092f01d164b2128bce213</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reset</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a56027586387f7070ad2859f68ed14e13</anchor>
      <arglist>(const Histogram2D &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Smooth</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a8e55a6364e17cbb8161c4dcfa37e0afe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>StandardDeviationX</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a418cc32af48b9abdce668bb2482bc60d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>StandardDeviationY</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a75b8025d5bc2c34cba216df5d77f4c24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SumsOfSquaredDifferences</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a4d27656e9226f8fc5592dff37ee87665</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ValToBinX</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a0d09b5511b25323444033bf33e6aafe6</anchor>
      <arglist>(double val) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ValToBinY</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a3a91ee4ac70100e3f63fb797071b8fb6</anchor>
      <arglist>(double val) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>VarianceX</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>aba0189511d436715e42af411183dff67</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>VarianceY</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a762b8354b7aadd6d0ba3e98a9a82b649</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>WidthX</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a5ebec4a6785b273f12c897fa9f3bb26e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>WidthY</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>aca5e9c03251fbc27d9c6b540736e4121</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a32ffbd93be8705e156cde2ef6909470e</anchor>
      <arglist>(const char *) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WriteAsImage</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a8a74927844cdad1f24f927134620f3bf</anchor>
      <arglist>(const char *) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Histogram2D</name>
      <anchorfile>classmirtk_1_1Histogram2D.html</anchorfile>
      <anchor>a8726c5cbffed1df549517464cdcfd582</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::HistogramImageSimilarity</name>
    <filename>classmirtk_1_1HistogramImageSimilarity.html</filename>
    <base>mirtk::ImageSimilarity</base>
    <member kind="typedef">
      <type>Histogram2D&lt; double &gt;</type>
      <name>JointHistogramType</name>
      <anchorfile>classmirtk_1_1HistogramImageSimilarity.html</anchorfile>
      <anchor>a80c35840a3524615b54b864b140c4ab5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyAttributes</name>
      <anchorfile>classmirtk_1_1HistogramImageSimilarity.html</anchorfile>
      <anchor>aa62fc857b2b61ca93c929ff716ce0e75</anchor>
      <arglist>(const HistogramImageSimilarity &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Exclude</name>
      <anchorfile>classmirtk_1_1HistogramImageSimilarity.html</anchorfile>
      <anchor>ab759d9af3a9a8ce68f054ee8186a00d6</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Include</name>
      <anchorfile>classmirtk_1_1HistogramImageSimilarity.html</anchorfile>
      <anchor>aa5407fa2fa3c9b0cef260dc7009cf1e7</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1HistogramImageSimilarity.html</anchorfile>
      <anchor>a6d0a55d9fc1c20809c1ed770b25919c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkComponentMacro</name>
      <anchorfile>classmirtk_1_1HistogramImageSimilarity.html</anchorfile>
      <anchor>ae47e3c21a10dcc8ded2b815cb634992c</anchor>
      <arglist>(JointHistogramType, Histogram)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkLooseComponentMacro</name>
      <anchorfile>classmirtk_1_1HistogramImageSimilarity.html</anchorfile>
      <anchor>a0fb37de7f182f11b8090613a84e4191a</anchor>
      <arglist>(JointHistogramType, Samples)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1HistogramImageSimilarity.html</anchorfile>
      <anchor>ac8eb28ab8dcb8808cb79913409d6eca3</anchor>
      <arglist>(bool, UseParzenWindow)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1HistogramImageSimilarity.html</anchorfile>
      <anchor>aacb0b947fb69b708f5f627fe3ff16b57</anchor>
      <arglist>(int, NumberOfTargetBins)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1HistogramImageSimilarity.html</anchorfile>
      <anchor>a453715629ad508c98d3c773479b606bb</anchor>
      <arglist>(int, NumberOfSourceBins)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1HistogramImageSimilarity.html</anchorfile>
      <anchor>a55336d66973177c77d135b4e6dccf1da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1HistogramImageSimilarity.html</anchorfile>
      <anchor>a6d833e9b46bbd3c1485cd0e97fa94a5f</anchor>
      <arglist>(Indent=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1HistogramImageSimilarity.html</anchorfile>
      <anchor>a2e3d2a42666964f64b6b45b8905648a7</anchor>
      <arglist>(bool=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteDataSets</name>
      <anchorfile>classmirtk_1_1HistogramImageSimilarity.html</anchorfile>
      <anchor>ad2087ce93d2f4f23d87f67c1c1c7ad55</anchor>
      <arglist>(const char *, const char *, bool=true) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>DefaultNumberOfBins</name>
      <anchorfile>classmirtk_1_1HistogramImageSimilarity.html</anchorfile>
      <anchor>a4a22676b2e95eedca22a06b5b19b5305</anchor>
      <arglist>(const BaseImage *image, double min_intensity=numeric_limits&lt; double &gt;::quiet_NaN(), double max_intensity=numeric_limits&lt; double &gt;::quiet_NaN())</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>HistogramImageSimilarity</name>
      <anchorfile>classmirtk_1_1HistogramImageSimilarity.html</anchorfile>
      <anchor>aa61c9fbe838c3a463849fe9593d18a98</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>HistogramImageSimilarity</name>
      <anchorfile>classmirtk_1_1HistogramImageSimilarity.html</anchorfile>
      <anchor>a025587d238b67a0e650c9af0d14996a8</anchor>
      <arglist>(const HistogramImageSimilarity &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>HistogramImageSimilarity &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1HistogramImageSimilarity.html</anchorfile>
      <anchor>a6fafa0f931dc87e1fe5c7ccf1f5266d4</anchor>
      <arglist>(const HistogramImageSimilarity &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetWithPrefix</name>
      <anchorfile>classmirtk_1_1HistogramImageSimilarity.html</anchorfile>
      <anchor>ac74b96a7a1f4bee676bbc3c09b485031</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~HistogramImageSimilarity</name>
      <anchorfile>classmirtk_1_1HistogramImageSimilarity.html</anchorfile>
      <anchor>a0e5d52539a98ecdd65ffff7c4c3f94a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>InitializeInput</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a8da137da16ef27a9d847f933865a74ef</anchor>
      <arglist>(const ImageAttributes &amp;domain)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a3a462d733b5d7d0945ba19badf11ba5f</anchor>
      <arglist>(const RegisteredImage *image, GradientImageType *np_gradient, double *gradient, double weight)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::HomogeneousTransformation</name>
    <filename>classmirtk_1_1HomogeneousTransformation.html</filename>
    <base>mirtk::Transformation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateDOFs</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>a963e21227d42eee4ce6614d902c57102</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, const double *, int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>a688720f544d8c64197e776fadae161e0</anchor>
      <arglist>(const Transformation *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>a970666b37fcb84305e10234b4a98da28</anchor>
      <arglist>(Indent=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>ae9c8683660f0b124f9eb69811b09fea2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a72e42d0566ce4baa3aebc50bdd3ed80a</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Cifstream &amp;</type>
      <name>ReadDOFs</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>a9fdd20099f8f8aa5acefd4edb8c6d409</anchor>
      <arglist>(Cifstream &amp;, TransformationType)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>UpdateDOFs</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>a479c7073cf10ac1a0a1612847dbe7a40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>UpdateMatrix</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformation.html</anchorfile>
      <anchor>acb67cc2a7d23216d98abab581018dc24</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::HomogeneousTransformationIterator</name>
    <filename>classmirtk_1_1HomogeneousTransformationIterator.html</filename>
    <base>mirtk::Point</base>
    <member kind="function">
      <type></type>
      <name>HomogeneousTransformationIterator</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformationIterator.html</anchorfile>
      <anchor>aa937886d1b4a8fc0fd4d49bab9df51e7</anchor>
      <arglist>(const HomogeneousTransformation *=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformationIterator.html</anchorfile>
      <anchor>a831030692af583d885656f4d13aa1bc3</anchor>
      <arglist>(const BaseImage *target, const BaseImage *source, double x=.0, double y=.0, double z=.0, bool inv=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NextX</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformationIterator.html</anchorfile>
      <anchor>acea95ac914848dbb87b43ada87a88f0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NextX</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformationIterator.html</anchorfile>
      <anchor>af1da2e0797f1db4683579171013841e6</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NextY</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformationIterator.html</anchorfile>
      <anchor>a72a4485b49fd5a4ca9a0d71494baf79e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NextY</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformationIterator.html</anchorfile>
      <anchor>a8ebaa745c596e86a369f150b9ca482df</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NextZ</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformationIterator.html</anchorfile>
      <anchor>acee31154f885e8b493ab04e8282ec9a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NextZ</name>
      <anchorfile>classmirtk_1_1HomogeneousTransformationIterator.html</anchorfile>
      <anchor>a7c6c2065f6f831db29524d4beaf0300e</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Distance</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>a5fdab543f3703996acba262f2ad03318</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Distance</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>a5ad11f1a706e50074ce13ffd0f87fb2b</anchor>
      <arglist>(const Point &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>abc17f7cc0ed7faa5efb6054c4054ba0c</anchor>
      <arglist>(const Point &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>ab6d50f5402cfaac8f425edd051d263d3</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>aa603bc0e16bcfe420a8b8a33ae56b3a8</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>a756441d081fba45b7f7395cd2cfb7d75</anchor>
      <arglist>(const Point &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>aff5ffcab1e244a66486a5bac9e2f8a7a</anchor>
      <arglist>(const Matrix &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Point &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>a5f8668fbc7d7860fea2a955871859e9a</anchor>
      <arglist>(const Point &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Point &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>a8b020c7a8babe01fd50e664f4308cacc</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>Point &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>a26054013c9590a308a06453b21dca430</anchor>
      <arglist>(const Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Point &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>ac92168e12f3bc7c3ebe400cc1c777335</anchor>
      <arglist>(const Matrix &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>operator+</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>a93e2b649356fbc0670cf1acbb955c7b3</anchor>
      <arglist>(const Point &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Point &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>a96a8bb1bad6648bed5e5974cb956e730</anchor>
      <arglist>(const Point &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Point &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>a834440ac66b2993079c5f8107f230350</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>Point &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>aea0d1653f9708d5ea913cd2ccfbf9281</anchor>
      <arglist>(const Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>operator-</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>a24d9429288ce39dd84d32c7ffc60fc44</anchor>
      <arglist>(const Point &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Point &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>a04fdf0520bedf8a428025e84ea4a01a3</anchor>
      <arglist>(const Point &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Point &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>acbcfe3823f48689384e7331f60297f70</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>Point &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>a480fc60c48b450242e6a6e49b6fb2035</anchor>
      <arglist>(const Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>operator/</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>a1a80a0075a71a68ddd2a645570dc7cb6</anchor>
      <arglist>(const Point &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Point &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>ac74248ee429de5548a892eb5577e7f41</anchor>
      <arglist>(const Point &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Point &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>ad1f5812b7102c5e6e6bf1b0a50cf2123</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>Point &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>a241593c1ba2ef96c68ffaf069225e9c1</anchor>
      <arglist>(const Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&lt;</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>a67e010bc41a9372075776797b17dcbd0</anchor>
      <arglist>(const Point &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Point &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>ac535e4f61e74da02a2e0090d65dd9110</anchor>
      <arglist>(const Point &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Point &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>a71edfad3c3a883b0a497988d11059a75</anchor>
      <arglist>(const Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>a9a317d25f0ff10958a394c25105ca5e2</anchor>
      <arglist>(const Point &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator&gt;</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>a6b77549860178839e226811758b50a2f</anchor>
      <arglist>(const Point &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>a03f157abf6e49a3d7446fa70d982807f</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>a3b40c3c6867fb97733d61f6c369ed194</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>a7beccea412f44437b0e3e80c7c3db58d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>abac286d92657f4b2b9124b1d1a386539</anchor>
      <arglist>(double, double, double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>ae1e3f78ff0bc6a97d3a912a05f36b134</anchor>
      <arglist>(const double[3])</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>af463e49f23a1d94a5e1d54d9dae91777</anchor>
      <arglist>(const Point &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>a4fb6ff6f545158c01856d0d12ce60405</anchor>
      <arglist>(const Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SquaredDistance</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>ab9751af427591d74c5e9ad6baffcc197</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SquaredDistance</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>aec41129a9edf1ed6fb9df0f3f91ed092</anchor>
      <arglist>(const Point &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Point</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>a1db495d5ac273b1ff2907432e1d42321</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_x</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>abbec5091fde53c7456dd4ab7b661f7c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_y</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>abc4e09fdfc4a10bb06030967e1d4f293</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_z</name>
      <anchorfile>classmirtk_1_1Point.html</anchorfile>
      <anchor>acdd777bac348760a6c3d66b64bf1b777</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ImageAttributes</name>
    <filename>structmirtk_1_1ImageAttributes.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>ContainsInSpace</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a19399404bc0a99b3d5004bcf453d486f</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>EqualInSpace</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a84ed2559283ffcc8d502ba7ffda334fc</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>EqualInTime</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>af8c578a31320f35f0f7619991c51c122</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>GetImageToWorldMatrix</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a573e0cfc22bca6301e73445144a19c46</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>GetImageToWorldOrientation</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a9b90a27420457d7cd4ccca01cacccec9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>GetLatticeToWorldMatrix</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a841c033865fa76ffbbd7c6f312bf56f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>GetLatticeToWorldOrientation</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a09ea631a06c1d25dcb5633d331d84fad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>GetWorldToImageMatrix</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>af293f923c84afa91b08fe2476b4707ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>GetWorldToImageOrientation</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>aa0e59463693b0e9d6a7ea1ea083c0c9b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>GetWorldToLatticeMatrix</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a015d47797a9aea921f097c5473cd50f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>GetWorldToLatticeOrientation</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a1ff194a797948e0ecdc58aaf4be48f64</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageAttributes</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a7b0d750a9e9a751748fd677a83c8bea5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageAttributes</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a5255188523ceee8c6df8929e081e602e</anchor>
      <arglist>(int, int, double=1.0, double=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageAttributes</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a0aa66b57e964a5a2b56f7625bbbe2d60</anchor>
      <arglist>(int, int, int, double=1.0, double=1.0, double=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageAttributes</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>abd3b5c3eb4f65cd524d189a4f1d6418c</anchor>
      <arglist>(int, int, int, int, double=1.0, double=1.0, double=1.0, double=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageAttributes</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>adb7462b96703e14d7324856aff096597</anchor>
      <arglist>(const ImageAttributes &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IndexToLattice</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a57f2da515d5329e8d57a5fe87b250759</anchor>
      <arglist>(int, int *, int *, int *=NULL, int *=NULL) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IndexToLattice</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a53f0e9de8eb76aeb45adb4f33e489f97</anchor>
      <arglist>(int, int &amp;, int &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IndexToLattice</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>ac370d60f59c59d2c5ecaf96586c024d6</anchor>
      <arglist>(int, int &amp;, int &amp;, int &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IndexToLattice</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a460b440484ad9261ec1ad77031c8dc73</anchor>
      <arglist>(int, int &amp;, int &amp;, int &amp;, int &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IndexToWorld</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a90d025739ed58f996bc93a563c727eb7</anchor>
      <arglist>(int, double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IndexToWorld</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a770f6ab5e18b1df92f41a9a41e2d853e</anchor>
      <arglist>(int, double &amp;, double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IndexToWorld</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a81268d4e4c3a33f3ff50d4b332bc03ef</anchor>
      <arglist>(int, Point &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>IndexToWorld</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a613e80ea66a264bbb85d5ebe66d96e4a</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsBoundary</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>ae9c8c33512d6f4e2ba86469229e35f1a</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsBoundary</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a061bd377a2b8ee43c64516f2d1ac80c0</anchor>
      <arglist>(int, int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsBoundary</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a9e5e4eb65d18896c34ded7c6e4c800a2</anchor>
      <arglist>(int, int, int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsBoundary</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>ab2267dab22fa1a9489802a011ab3c6df</anchor>
      <arglist>(int, int, int, int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInside</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a8fa3ac645ed9a86bb335cc66eee82b3e</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInside</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a198bf0a1cf11d7530895a5efbe036f36</anchor>
      <arglist>(int, int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInside</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a131b38fb1c1b79a070949a8040c6f620</anchor>
      <arglist>(int, int, int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInside</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a7b2e730909fc15188115808acc39b002</anchor>
      <arglist>(int, int, int, int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsOutside</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a21c20a750dd535ff85e2d82e3daa4824</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsOutside</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>abe32f84fa564086bc61d24f1bcb13679</anchor>
      <arglist>(int, int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsOutside</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a3f39a89ae8103f2f8673d3ce029dffbb</anchor>
      <arglist>(int, int, int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsOutside</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a0bc51946f3ca16c3ac7d0cf31b9ae8c6</anchor>
      <arglist>(int, int, int, int) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>LatticeToIndex</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a6ec125d21cfee74d97bc5807f187037f</anchor>
      <arglist>(int, int, int=0, int=0) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>LatticeToTime</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a56d770c8014aaa5027c4f221fcb84a9b</anchor>
      <arglist>(double) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>LatticeToWorld</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a34e852fe323e2943af90d99209691933</anchor>
      <arglist>(Point &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>LatticeToWorld</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a96fa00a5059549aba58e36812924da2f</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>LatticeToWorld</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>aedd17b2eef7ffc0745819ee37be49dcd</anchor>
      <arglist>(double *, double *, double *) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>LatticeToWorld</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>ad9f2312b7e8b21d4171720e50c6eb3bf</anchor>
      <arglist>(double *, double *, double *, double *) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfLatticePoints</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>adb516a291a58cf1d7f7bcca0397510af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfPoints</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>aa52b4716921ea429fd99de0a44f57ca6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfSpatialPoints</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a0a47ea241bbe602f972579571e47e199</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a7a48e909d588a0cc48dfa077aacdfe0a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>af68e90a476a021cc84811b845143d72e</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>ImageAttributes &amp;</type>
      <name>operator=</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a16c941b0a4e80faa3b1cfa0f02df5f8e</anchor>
      <arglist>(const ImageAttributes &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>affa6e16edfe9b137ffcba21a864ed457</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a7a29ae43b51ae66a31211f1e66fe0c99</anchor>
      <arglist>(Indent=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutAffineMatrix</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>afd15d7e31e6b430d9cf24aece117529d</anchor>
      <arglist>(const Matrix &amp;m, bool apply=false)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>TimeToLattice</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a92d4c3cd576accaaddbd0b71ed59e2c6</anchor>
      <arglist>(double) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WorldToLattice</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a5600f43bb9d0730f0d815d2a4e7d4594</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WorldToLattice</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>aa72b49fb265248928f7ce5fe35810356</anchor>
      <arglist>(Point &amp;) const </arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_dt</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>ace52b4f86734d958e0b638c47c8194bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_dx</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a14b1bc549e02f620ff5f7b8d1e0b0bd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_dy</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a77f5b4976b487d381a5e1076701f410f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_dz</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a75ec697a6efe71b1f53f57d63109dc37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Matrix *</type>
      <name>_i2w</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a5e88b5de938c70447de10dfb19b54612</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix</type>
      <name>_smat</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a9d59fe867d7ece386b2c938d8cfc8b48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_t</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a0db054b14bb18bc0264727e133b6b442</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_torigin</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a9f14c3e7ac4d4d36f90c49bf1987ec0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Matrix *</type>
      <name>_w2i</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>ad85be169c1076eed13686765b308f6f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_x</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a74058b13cfddcec549dd2749aad54aec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_xaxis</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>ab92622462a3f6b52ee56f5607d429a9f</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_xorigin</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a6542b79ad96dbec5b6c874da2dc2ccc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_y</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>af57f60209e0e90cb125412d8bf68f020</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_yaxis</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a3b0d2458d4e24abeeee251cee1b9c1f5</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_yorigin</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a61792ddcb1ae95540b388c4c5c584809</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_z</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>abf3e386aa5f062ad1464e0b1b5f9c8ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_zaxis</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>a6908c8a8ae1900eea53e5866f3c63351</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_zorigin</name>
      <anchorfile>structmirtk_1_1ImageAttributes.html</anchorfile>
      <anchor>ab75051ede52a70ca32031550beae2f06</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ImageChannel</name>
    <filename>classmirtk_1_1ImageChannel.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::Object</base>
    <member kind="typedef">
      <type>TImage</type>
      <name>ImageType</name>
      <anchorfile>classmirtk_1_1ImageChannel.html</anchorfile>
      <anchor>adde4e8abec5b3f3f735437f275d00896</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Image</name>
      <anchorfile>classmirtk_1_1ImageChannel.html</anchorfile>
      <anchor>a27315f3a6e72a2ec5cff7207bd6f6717</anchor>
      <arglist>(ImageType *image, bool manage=false, bool copy=false)</arglist>
    </member>
    <member kind="function">
      <type>ImageType *</type>
      <name>Image</name>
      <anchorfile>classmirtk_1_1ImageChannel.html</anchorfile>
      <anchor>a349cfd4603a07067a3e449970e6acac0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageChannel</name>
      <anchorfile>classmirtk_1_1ImageChannel.html</anchorfile>
      <anchor>a2ac25b96861d9c6e9190e62408e8cc78</anchor>
      <arglist>(ImageType *image=NULL, bool manage=false, bool copy=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageChannel</name>
      <anchorfile>classmirtk_1_1ImageChannel.html</anchorfile>
      <anchor>acb5561b2660e0aa454555ee97b0de467</anchor>
      <arglist>(const ImageChannel &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageChannel</name>
      <anchorfile>classmirtk_1_1ImageChannel.html</anchorfile>
      <anchor>a5758ffc295c877f9c9e3b3d92ddfaaa4</anchor>
      <arglist>(const ImageChannel&lt; TOtherImage &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ImageChannel &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1ImageChannel.html</anchorfile>
      <anchor>a59c287426feded8deb360bd3f6632668</anchor>
      <arglist>(const ImageChannel &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ImageChannel &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1ImageChannel.html</anchorfile>
      <anchor>a23d3e385ac171acf7c0325a9f11ffaaa</anchor>
      <arglist>(const ImageChannel&lt; TOtherImage &gt; &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ImageChannel</name>
      <anchorfile>classmirtk_1_1ImageChannel.html</anchorfile>
      <anchor>a65dc5e09ca7cbe1146693404456f8fa3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ImageType *</type>
      <name>_Image</name>
      <anchorfile>classmirtk_1_1ImageChannel.html</anchorfile>
      <anchor>ad3b26e508407a9431666c45a6617fca8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_Manage</name>
      <anchorfile>classmirtk_1_1ImageChannel.html</anchorfile>
      <anchor>aff795af90b398ba0421ac49199fe32b1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ImageCovariance</name>
    <filename>classmirtk_1_1ImageCovariance.html</filename>
    <base>mirtk::HistogramImageSimilarity</base>
    <member kind="function">
      <type></type>
      <name>ImageCovariance</name>
      <anchorfile>classmirtk_1_1ImageCovariance.html</anchorfile>
      <anchor>ab180dd5dc07c584b832425480b6b203c</anchor>
      <arglist>(const char *=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageCovariance</name>
      <anchorfile>classmirtk_1_1ImageCovariance.html</anchorfile>
      <anchor>a90c450e0f1b313b775d77d13f6a691d3</anchor>
      <arglist>(const ImageCovariance &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ImageCovariance &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1ImageCovariance.html</anchorfile>
      <anchor>a98d866ab6ed668f06e40f940b791485b</anchor>
      <arglist>(const ImageCovariance &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>RawValue</name>
      <anchorfile>classmirtk_1_1ImageCovariance.html</anchorfile>
      <anchor>a95480be74e77148041c8e261432fac18</anchor>
      <arglist>(double) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ImageCovariance</name>
      <anchorfile>classmirtk_1_1ImageCovariance.html</anchorfile>
      <anchor>af8ef4d018c619dbfce0cfd6d1efcd1a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1ImageCovariance.html</anchorfile>
      <anchor>a065a6c75f24531e80dda9e678c4ac781</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ImageEdgeForce</name>
    <filename>classmirtk_1_1ImageEdgeForce.html</filename>
    <base>mirtk::ExternalForce</base>
    <member kind="function">
      <type></type>
      <name>ImageEdgeForce</name>
      <anchorfile>classmirtk_1_1ImageEdgeForce.html</anchorfile>
      <anchor>a504897e632acabf565716a25a83d03a5</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageEdgeForce</name>
      <anchorfile>classmirtk_1_1ImageEdgeForce.html</anchorfile>
      <anchor>a38e409efb2f59e53343510edc3df4318</anchor>
      <arglist>(const ImageEdgeForce &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1ImageEdgeForce.html</anchorfile>
      <anchor>ae0d39dea9a9feeac43df21c6c55fdd03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ImageEdgeForce &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1ImageEdgeForce.html</anchorfile>
      <anchor>a0e638919f16bebbf421dbd8b9c946ddb</anchor>
      <arglist>(const ImageEdgeForce &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1ImageEdgeForce.html</anchorfile>
      <anchor>a3d98882747c9a2998d704e159dee9602</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ImageEdgeForce</name>
      <anchorfile>classmirtk_1_1ImageEdgeForce.html</anchorfile>
      <anchor>a6145242c150bc497608dc46bdd8a6fbc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CopyAttributes</name>
      <anchorfile>classmirtk_1_1ImageEdgeForce.html</anchorfile>
      <anchor>a35edb3b8640c4fcdd6dc46f8046163fd</anchor>
      <arglist>(const ImageEdgeForce &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateGradient</name>
      <anchorfile>classmirtk_1_1ImageEdgeForce.html</anchorfile>
      <anchor>ad3cb14952b89d189f0466bebd2ad630b</anchor>
      <arglist>(double *, double, double)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetWithoutPrefix</name>
      <anchorfile>classmirtk_1_1ImageEdgeForce.html</anchorfile>
      <anchor>a1b967ef2ed130b9b2965322270817a1e</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ImageFrame</name>
    <filename>classmirtk_1_1ImageFrame.html</filename>
    <templarg>TChannel</templarg>
    <base>mirtk::Object</base>
    <member kind="typedef">
      <type>TChannel</type>
      <name>ChannelType</name>
      <anchorfile>classmirtk_1_1ImageFrame.html</anchorfile>
      <anchor>aa4e58ed804117cfb4e2efeeeab42c37e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TChannel::ImageType</type>
      <name>ImageType</name>
      <anchorfile>classmirtk_1_1ImageFrame.html</anchorfile>
      <anchor>a01b20854719cb05f66011e79b923fb2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Add</name>
      <anchorfile>classmirtk_1_1ImageFrame.html</anchorfile>
      <anchor>a98176ca4d26b3605b8a85a21cc6026f7</anchor>
      <arglist>(ImageType *image, bool manage=false, bool copy=false)</arglist>
    </member>
    <member kind="function">
      <type>ImageAttributes</type>
      <name>Attributes</name>
      <anchorfile>classmirtk_1_1ImageFrame.html</anchorfile>
      <anchor>a66b01d5d222a00a4bdb8d61e120221a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ChannelType &amp;</type>
      <name>Channel</name>
      <anchorfile>classmirtk_1_1ImageFrame.html</anchorfile>
      <anchor>a14c90a822690084e167b31618bce49f5</anchor>
      <arglist>(int=0)</arglist>
    </member>
    <member kind="function">
      <type>const ChannelType &amp;</type>
      <name>Channel</name>
      <anchorfile>classmirtk_1_1ImageFrame.html</anchorfile>
      <anchor>adc7d829baf2ef21c3efca5f01f190f38</anchor>
      <arglist>(int=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classmirtk_1_1ImageFrame.html</anchorfile>
      <anchor>a34daa542828f56603cbf783249a5f113</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetPixelSize</name>
      <anchorfile>classmirtk_1_1ImageFrame.html</anchorfile>
      <anchor>ac87d07eea192294bf9c60c5cfdb85aab</anchor>
      <arglist>(double *, double *, double *) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Image</name>
      <anchorfile>classmirtk_1_1ImageFrame.html</anchorfile>
      <anchor>ac5ae1e6cffce3760bf546d8f0e982c1f</anchor>
      <arglist>(int idx, ImageType *image, bool manage=false, bool copy=false)</arglist>
    </member>
    <member kind="function">
      <type>ImageType *</type>
      <name>Image</name>
      <anchorfile>classmirtk_1_1ImageFrame.html</anchorfile>
      <anchor>ace8bf286945d966b31943f8d902deb83</anchor>
      <arglist>(int=0) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageFrame</name>
      <anchorfile>classmirtk_1_1ImageFrame.html</anchorfile>
      <anchor>ababd88faf89aaba88b2b10ad7d9dd52d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageFrame</name>
      <anchorfile>classmirtk_1_1ImageFrame.html</anchorfile>
      <anchor>ac8ac1335fbe5231778bdce99c4206a2f</anchor>
      <arglist>(const ImageFrame &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ImageToWorld</name>
      <anchorfile>classmirtk_1_1ImageFrame.html</anchorfile>
      <anchor>af4d19fb340b5da42ad3f7621794d5c5c</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NumberOfChannels</name>
      <anchorfile>classmirtk_1_1ImageFrame.html</anchorfile>
      <anchor>a7e45d42fa416cbfe970ba3e7cfca195d</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfChannels</name>
      <anchorfile>classmirtk_1_1ImageFrame.html</anchorfile>
      <anchor>aa740b1f2e01fbef091282d30e8e1e8e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfVoxels</name>
      <anchorfile>classmirtk_1_1ImageFrame.html</anchorfile>
      <anchor>a4704c46ab57a8a0daed62381ec1aadb0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ImageFrame &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1ImageFrame.html</anchorfile>
      <anchor>a13aa43b4d9a4837ed9509647c7ab806b</anchor>
      <arglist>(const ImageFrame &amp;)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Time</name>
      <anchorfile>classmirtk_1_1ImageFrame.html</anchorfile>
      <anchor>a12cbc5651b1a6e98cc0cc6f70a3364d3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WorldToImage</name>
      <anchorfile>classmirtk_1_1ImageFrame.html</anchorfile>
      <anchor>a2a44ddf62f656d3ff13ad036c1c56e4e</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>X</name>
      <anchorfile>classmirtk_1_1ImageFrame.html</anchorfile>
      <anchor>a9faa0f2009b9219693b97a403168d716</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>XSize</name>
      <anchorfile>classmirtk_1_1ImageFrame.html</anchorfile>
      <anchor>a7672af5427fc9bcaf46fd20ed53c7761</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Y</name>
      <anchorfile>classmirtk_1_1ImageFrame.html</anchorfile>
      <anchor>a4fb2bcccff27ce12010ea1eaef321028</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>YSize</name>
      <anchorfile>classmirtk_1_1ImageFrame.html</anchorfile>
      <anchor>a2c0f6631dc8d4a2cff7af62b46022987</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Z</name>
      <anchorfile>classmirtk_1_1ImageFrame.html</anchorfile>
      <anchor>a2f895e3c27604637948e516fa801bb7f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ZSize</name>
      <anchorfile>classmirtk_1_1ImageFrame.html</anchorfile>
      <anchor>a0f9167cd286ccd553d1efd2a916a46d1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ImageFrame</name>
      <anchorfile>classmirtk_1_1ImageFrame.html</anchorfile>
      <anchor>a5147a546cbae29c52db8c239f236b0c4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ImageFunction</name>
    <filename>classmirtk_1_1ImageFunction.html</filename>
    <base>mirtk::Object</base>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1ImageFunction.html</anchorfile>
      <anchor>afbc5992258510865e3d275ea9ba42fb4</anchor>
      <arglist>(double, double, double, double=0) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ImageGradientFunction</name>
    <filename>classmirtk_1_1ImageGradientFunction.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Extrapolator</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>ab5595110cc8967c8f7f099c6c8a77c0e</anchor>
      <arglist>(ExtrapolateImageFunction *, bool=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a8581e53d8d2f6f0c5e1aacd182d7b8de</anchor>
      <arglist>(bool coeff=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Input</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a720e46619c038e311e0735d68a95276f</anchor>
      <arglist>(const BaseImage *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ExtrapolateImageFunction *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1ImageGradientFunction.html</anchorfile>
      <anchor>a9c69e2b807a7ee11180a8b91441a0e66</anchor>
      <arglist>(enum ExtrapolationMode, const BaseImage *=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ImageIterator</name>
    <filename>classmirtk_1_1ImageIterator.html</filename>
    <base>mirtk::ConstImageIterator</base>
  </compound>
  <compound kind="class">
    <name>mirtk::ImageReader</name>
    <filename>classmirtk_1_1ImageReader.html</filename>
    <base protection="protected">mirtk::Cifstream</base>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>CanRead</name>
      <anchorfile>classmirtk_1_1ImageReader.html</anchorfile>
      <anchor>a0b0db2ca18973a41a4654544f16c6cc0</anchor>
      <arglist>(const char *) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>ReadHeader</name>
      <anchorfile>classmirtk_1_1ImageReader.html</anchorfile>
      <anchor>ab25830908d17b90ec8a56b36a78af8b2</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ImageReaderFactory</name>
    <filename>classmirtk_1_1ImageReaderFactory.html</filename>
    <member kind="typedef">
      <type>ImageReader *(*</type>
      <name>ImageReaderCreator</name>
      <anchorfile>classmirtk_1_1ImageReaderFactory.html</anchorfile>
      <anchor>a50270ecbe6ebda481dbba47d83f79066</anchor>
      <arglist>)()</arglist>
    </member>
    <member kind="function">
      <type>ImageReader *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1ImageReaderFactory.html</anchorfile>
      <anchor>a088e7be9f14b491afefdee2b7d1a9408</anchor>
      <arglist>(const char *fname) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Register</name>
      <anchorfile>classmirtk_1_1ImageReaderFactory.html</anchorfile>
      <anchor>a83398351dd09e797fbf1aa8f6f340b78</anchor>
      <arglist>(ImageReaderCreator creator)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ImageReaderFactory &amp;</type>
      <name>Instance</name>
      <anchorfile>classmirtk_1_1ImageReaderFactory.html</anchorfile>
      <anchor>adaed3fd34da8f6f96d00a5de0b668e44</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ImageRegion</name>
    <filename>classmirtk_1_1ImageRegion.html</filename>
    <member kind="function">
      <type>int</type>
      <name>BeginT</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a99e521df984ba1cf7ca114ee1e901516</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>BeginX</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a7d1bfaccdaf44f44084e6c572b107192</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>BeginY</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a48a148e8ab0d6dd3e916ab6fec6627c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>BeginZ</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a6ba98bad026712f4311d5a2b8a3672c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ColumnStride</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>ae2806c3ee6cfad07b1c390b73b8efe3c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>EndT</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>aa6c4389314b6b6e9c8a8764116f37a5e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>EndX</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>ae43763c073cbdcd77e22132327ace66b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>EndY</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>aa10fa7e43b05c81492bc9b9bcde65318</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>EndZ</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a64651d00f6daebad7c1abd079a0aad51</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>FrameStride</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>af344c8eea2b853c97dbec245527aecde</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>GetPointerToBegin</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>af6624899d2c1603621cdd4b0dbe04a66</anchor>
      <arglist>(const BaseImage &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>GetPointerToBegin</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a2cd011b35de4979cb94c5f931a30b323</anchor>
      <arglist>(const BaseImage *) const </arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>GetPointerToBegin</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a00fd58363dea70be0b27a50cf7463cca</anchor>
      <arglist>(const GenericImage&lt; VoxelType &gt; &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>GetPointerToBegin</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a06c685d97e6017cd63db5011ef523dc3</anchor>
      <arglist>(GenericImage&lt; VoxelType &gt; &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>GetPointerToBegin</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a7d97a0079168aebe2836bf730bb73228</anchor>
      <arglist>(const GenericImage&lt; VoxelType &gt; *) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>GetPointerToBegin</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a214117bcaa491fcec21d6764fdef745e</anchor>
      <arglist>(GenericImage&lt; VoxelType &gt; *) const </arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>GetPointerToEnd</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a03a020d31321e866e5a10593487defc3</anchor>
      <arglist>(const BaseImage &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>GetPointerToEnd</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a41ea42f138f3610700120f2278e9bc18</anchor>
      <arglist>(const BaseImage *) const </arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>GetPointerToEnd</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>ad87825bf0e23a52766174bdd81b48452</anchor>
      <arglist>(const GenericImage&lt; VoxelType &gt; &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>GetPointerToEnd</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>aa13a988b8195f3a897f3f741204963af</anchor>
      <arglist>(GenericImage&lt; VoxelType &gt; &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const VoxelType *</type>
      <name>GetPointerToEnd</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a932acefd51d60108b3c79876bd79d498</anchor>
      <arglist>(const GenericImage&lt; VoxelType &gt; *) const </arglist>
    </member>
    <member kind="function">
      <type>VoxelType *</type>
      <name>GetPointerToEnd</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a1448a402ecf3fb94791e793234a933fc</anchor>
      <arglist>(GenericImage&lt; VoxelType &gt; *) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageRegion</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a300dc70ea02d1752e2571e33285ca179</anchor>
      <arglist>(const ImageAttributes &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageRegion</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>adb1f41b2c3f6ef140f1d86ae3dac9c24</anchor>
      <arglist>(const ImageAttributes &amp;, const blocked_range2d&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageRegion</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a87afb50b77126760a7022e31202fd39b</anchor>
      <arglist>(const ImageAttributes &amp;, const blocked_range3d&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageRegion</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a6d8e47235529137d986061af767acfb1</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageRegion</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>aba880684fb3a3faf807e4b32def58b94</anchor>
      <arglist>(const BaseImage &amp;, const blocked_range2d&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageRegion</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a4900090435fc218a1f976698b8eb75ed</anchor>
      <arglist>(const BaseImage &amp;, const blocked_range3d&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageRegion</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a3d054acf7151dafeb02fe6a721d6f200</anchor>
      <arglist>(const BaseImage *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageRegion</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a0d320cd8f5a38838246e8871b196d7c8</anchor>
      <arglist>(const BaseImage *, const blocked_range2d&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageRegion</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a1d4cbb4a82aee0cc771305ee76839628</anchor>
      <arglist>(const BaseImage *, const blocked_range3d&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageRegion</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>ab8f45976231dd46bb48d7b854c80445c</anchor>
      <arglist>(const ImageRegion &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a29cbf42cfcb10aabbf6538d6bdacebf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsImageSequence</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>aec6d1323717c56b2f0b44aaf95b46fb9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsScalar</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a94ea0ca5b65269a9bdf73b3cda441e0c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsScalarImage</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a8940029f74f1cc75b275880d90288c0f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSequence</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>ace8a7b0a16d5f3c68a88722a4d11d366</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>LineStride</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a2a116e19d834358bc107d344c07a05a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MaxNumberOfChannels</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a9d61de2723a893fa22c3a5d981e2b3e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MaxNumberOfComponents</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>ac27e43245fe923f2b99b76ee129521ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MaxNumberOfFrames</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>ada1f60e88f0c8d83bf48073408516e3b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MaxNumberOfVoxels</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a0ede7933f08d27a6c2ee2ca3ae2d67be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfChannels</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>adc0048ffb34b198d63356edcc73fbc1b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfComponents</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a12e71f28500b47e7bd10a2f535d22c19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfFrames</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a7026ef4ce9cc3b5879ff78da2d2f2343</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfImageChannels</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a47b3a957a9b7e3ea5193640d6c0c367c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfImageVoxels</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a5441a1f3ec740b7d7bb61c2e450a05fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfSequenceFrames</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a285e0085141570f2a41e78d35cfcb0d1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfVectorComponents</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a9333c7c8ce1b223e9f75aca7e6e50af1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfVoxels</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a8dba8a61fa3448c1d5c7afe3082309cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ImageRegion &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a4966854e71543e55ae29a505bac3226d</anchor>
      <arglist>(const ImageRegion &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetCenter</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>afdce8027f6eeaaf631a4c57890b80f00</anchor>
      <arglist>(int, int, int=0, int=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetChannel</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a3f089442d0508b336f036c4258cdb356</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetChannel</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>abacf048578cf6f1b756036edb8e9f90e</anchor>
      <arglist>(int, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetChannel</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a4d478da06bc4f1cc29f4110f08bfb125</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetComponent</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a449cbac3493d0e26d84489afc0bfba55</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetComponent</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a871c4a5a5177de0917c7b4ab2410fa94</anchor>
      <arglist>(int, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetComponent</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a200066798375fe67b16cb2e7f85aaeb5</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFrame</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a1493347b31c8ca5ef07d9557eb05cbd8</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFrame</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a848167e8a9eb6938eba327a315a6e443</anchor>
      <arglist>(int, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFrame</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>ac985223c34b4a855e0e67174afce1ee6</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetNeighborhood</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a06ef04d5f167411d0858ef12b2671219</anchor>
      <arglist>(int, int, int, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetNeighborhood</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a4a7f0c80e9735154bbab3071898f6096</anchor>
      <arglist>(int, int, int, int, int, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetNeighborhood</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>adf9a1e98904cbfbb71cdef5dfcc5f688</anchor>
      <arglist>(int, int, int, int, int, int, int, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRadius</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>ac14d833eb64f0213495ee8e8cf4ceb3d</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRadius</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a193ed3be335a51ed08ede34522de9dd8</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRegion</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>ad0d59f7755a63632ccfab18ef1a0904a</anchor>
      <arglist>(int, int, int, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRegion</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a3892e6bbb12114f1abe9c3d7b9a8a39f</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRegion</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a23dba3c1f098b43f31eaf52aa50c7728</anchor>
      <arglist>(int, int, int, int, int, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRegion</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a86a58f88b15d0dcc036c160ac3e030ea</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRegion</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a4d17c52d93b49230d8c67d5430cf5bd7</anchor>
      <arglist>(int, int, int, int, int, int, int, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSize</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>ae41211bbd298b89f92e3cc1d5cfc66c0</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSize</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a0d773e5c88a87fd8604ab32e84a03358</anchor>
      <arglist>(int, int, int=1, int=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetStart</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>af672a60cf28d00125160fe6958628f58</anchor>
      <arglist>(int, int, int=0, int=-1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SliceStride</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a0e42351d445d578a403688a964c1096b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ImageRegion</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a07dd2dee49fa228fe00e9b8a9e6f9c28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector4D&lt; int &gt;</type>
      <name>_Begin</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>aa365e403c48d16fc06322ff9fa6243f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector4D&lt; int &gt;</type>
      <name>_DataSize</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a8af8bbbe6c01c40fc3fd29c35402fddb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector4D&lt; int &gt;</type>
      <name>_End</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>aeb1cf9b1f895a1242ca0b9e42996b0eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_FrameStride</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a9ec6b1e7a883d32b73baa9af9a9b849d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector4D&lt; int &gt;</type>
      <name>_Index</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a5a0ce43bf65edf7106eac8f21ad556f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_IsImageSequence</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a09e1a4bbecf15627fbbf99b5c491313e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_LineStride</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a2f09fe4f7c0ad04ec4489242c673a1f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector4D&lt; int &gt;</type>
      <name>_Size</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>a4ca5eed0ab455eed76427c3836133048</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_SliceStride</name>
      <anchorfile>classmirtk_1_1ImageRegion.html</anchorfile>
      <anchor>ad770cceda36ff38d860212ebf22ef4e9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ImageSequence</name>
    <filename>classmirtk_1_1ImageSequence.html</filename>
    <templarg>TFrame</templarg>
    <base>mirtk::Object</base>
    <member kind="typedef">
      <type>TFrame::ChannelType</type>
      <name>ChannelType</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>a6c92c61a71bb75ddbd11c2f2a5c7dafc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TFrame</type>
      <name>FrameType</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>aa2d58273674a6d0d329a2ac2c1b2cfb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TFrame::ImageType</type>
      <name>ImageType</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>ae6f4b815aacd44c96bf430ea521eb6f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Add</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>a73c43b12289cd0ef98422781c5ec1d81</anchor>
      <arglist>(ImageType *image, bool manage=false, bool copy=false)</arglist>
    </member>
    <member kind="function">
      <type>ImageAttributes</type>
      <name>Attributes</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>a3aa74fe9a9d5b53108da7cde59ec8d44</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ChannelType &amp;</type>
      <name>Channel</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>a2c4b76c86f9820926f9fff1a00435c98</anchor>
      <arglist>(int idx)</arglist>
    </member>
    <member kind="function">
      <type>const ChannelType &amp;</type>
      <name>Channel</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>a7c52b1265ced29692c01dcb4a0636590</anchor>
      <arglist>(int idx) const </arglist>
    </member>
    <member kind="function">
      <type>ChannelType &amp;</type>
      <name>Channel</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>a5d36a75ce84eb2e423e1741f5b56250b</anchor>
      <arglist>(int f, int c)</arglist>
    </member>
    <member kind="function">
      <type>const ChannelType &amp;</type>
      <name>Channel</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>ad1d401ef83e5a92879f5b3ee049c9de1</anchor>
      <arglist>(int f, int c) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>a374e2cc759c50238cdce67aeb469503a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FrameType &amp;</type>
      <name>Frame</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>ae2fc8968d0e670c48359c94e956249e9</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const FrameType &amp;</type>
      <name>Frame</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>ac527637559bbf55a07fb7076f80b704d</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetPixelSize</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>aaf7c09faf228aee871ce9f2df0a0e4e4</anchor>
      <arglist>(double *, double *, double *) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Image</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>a348e40304cfeda8472e87b4cfbd53abb</anchor>
      <arglist>(int f, int c, ImageType *image, bool manage, bool copy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Image</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>acf4a057458e1b991142b16487d51036c</anchor>
      <arglist>(int f, int c, const ImageType *image)</arglist>
    </member>
    <member kind="function">
      <type>ImageType *</type>
      <name>Image</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>a5b62199b8eac6586c0356d2fd9b23204</anchor>
      <arglist>(int idx) const </arglist>
    </member>
    <member kind="function">
      <type>ImageType *</type>
      <name>Image</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>ade4bf0c80759fd454e36a5d2b8e7d157</anchor>
      <arglist>(int f, int c) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageSequence</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>aa1fe71644f47f398399f3391f099681c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageSequence</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>ab48af53c9d30bf28d22717845d39a06c</anchor>
      <arglist>(const ImageSequence &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ImageToWorld</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>ae44286e046bd6590ed03df9bd3a39977</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NumberOfChannels</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>a37787080d03475ce41bac24a14f92a8c</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfChannels</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>a10d0c129d1a09059d263f00fd0955688</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NumberOfFrames</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>a4acfd63427404ab9ad004de6ce7b1a4e</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfFrames</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>ab5c5a9aa50cdeea97f7c6cd58ef40139</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfImages</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>a8b2138f76693357397795136aea8978c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfVoxels</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>ab7cc45b434144e549c899ad839ad312c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ImageSequence &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>a2ebb3d4c4746e203e563aab34c8c38c8</anchor>
      <arglist>(const ImageSequence &amp;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>T</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>ab7d746dacf64a559a94a1fb0af4cdc82</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Time</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>ab45a8fbc28d1367a9c8e2bc21fb4bc7e</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WorldToImage</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>a8f4291c6e6a2c9ba4b24469082f550f7</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>X</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>a8da78c858c0cf948185e3b6f44b9c121</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>XSize</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>a2097fa0e312b581104e711de11e8c8e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Y</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>aa97a1b4b26e8d2b13cabb51c0610d67b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>YSize</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>a3360269f4ff33c008d7a08d91b2de8ee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Z</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>a8f69663003110cd68c6bd44113fa6be7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ZSize</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>a360fab798d2f6e80478842691212932c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ImageSequence</name>
      <anchorfile>classmirtk_1_1ImageSequence.html</anchorfile>
      <anchor>ae039bb68461ad626ad5bfd0ef943e56a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ImageSimilarity</name>
    <filename>classmirtk_1_1ImageSimilarity.html</filename>
    <base>mirtk::DataFidelity</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a92caaa54d891224928ec46d71f246834</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1ImageSimilarity.html</anchorfile>
      <anchor>a69da9ade4678e865416ecca7535a62b6</anchor>
      <arglist>(bool=true)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ImageToImage</name>
    <filename>classmirtk_1_1ImageToImage.html</filename>
    <templarg>TVoxel</templarg>
    <base>mirtk::Object</base>
  </compound>
  <compound kind="class">
    <name>mirtk::ImageTransformation</name>
    <filename>classmirtk_1_1ImageTransformation.html</filename>
    <base>mirtk::Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Cache</name>
      <anchorfile>classmirtk_1_1ImageTransformation.html</anchorfile>
      <anchor>aaf8d6104f00d57d329a8a5204ea854e5</anchor>
      <arglist>(ImageTransformationCache *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageTransformation</name>
      <anchorfile>classmirtk_1_1ImageTransformation.html</anchorfile>
      <anchor>aa0378ea6a25ac541190ec5418c80e08d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Invert</name>
      <anchorfile>classmirtk_1_1ImageTransformation.html</anchorfile>
      <anchor>a87d9424c0b3873e13347d2d72cbf62b6</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1ImageTransformation.html</anchorfile>
      <anchor>ac6c7980a74eba71cceaecf54d3243ecd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Transformation</name>
      <anchorfile>classmirtk_1_1ImageTransformation.html</anchorfile>
      <anchor>a4bdd9aab60305cec1e6cb76e4b05a2af</anchor>
      <arglist>(const class Transformation *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ImageTransformation</name>
      <anchorfile>classmirtk_1_1ImageTransformation.html</anchorfile>
      <anchor>ae3b5f1e044b9f6a840851cdc3b4973af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1ImageTransformation.html</anchorfile>
      <anchor>a70526b818bc7286e3d0f2083edb3e377</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ImageTransformationCache</name>
    <filename>classmirtk_1_1ImageTransformationCache.html</filename>
    <base>mirtk::GenericImage</base>
    <member kind="function">
      <type></type>
      <name>ImageTransformationCache</name>
      <anchorfile>classmirtk_1_1ImageTransformationCache.html</anchorfile>
      <anchor>a081076ada5676c826ff01113056cfd29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ImageTransformationCache</name>
      <anchorfile>classmirtk_1_1ImageTransformationCache.html</anchorfile>
      <anchor>a0b70b75d301ad4b01f771671d083a763</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ImageWriter</name>
    <filename>classmirtk_1_1ImageWriter.html</filename>
    <base protection="protected">mirtk::Cofstream</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1ImageWriter.html</anchorfile>
      <anchor>a6002376480800af993cb751797730c34</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ImageWriterFactory</name>
    <filename>classmirtk_1_1ImageWriterFactory.html</filename>
    <member kind="typedef">
      <type>ImageWriter *(*</type>
      <name>ImageWriterCreator</name>
      <anchorfile>classmirtk_1_1ImageWriterFactory.html</anchorfile>
      <anchor>a4d04526800e55c8cd3e9ca23433b5dc2</anchor>
      <arglist>)()</arglist>
    </member>
    <member kind="function">
      <type>ImageWriter *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1ImageWriterFactory.html</anchorfile>
      <anchor>a08d7e66580d5fc8ae0e7d30a0e2c11e5</anchor>
      <arglist>(const char *fname) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Register</name>
      <anchorfile>classmirtk_1_1ImageWriterFactory.html</anchorfile>
      <anchor>af8c5b6fed9eb03c90156249e68b6ed51</anchor>
      <arglist>(const Array&lt; string &gt; &amp;exts, ImageWriterCreator creator)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ImageWriterFactory &amp;</type>
      <name>Instance</name>
      <anchorfile>classmirtk_1_1ImageWriterFactory.html</anchorfile>
      <anchor>a8bff0f6e5a4ab6076d510f79950397a5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ImplicitSurfaceDistance</name>
    <filename>classmirtk_1_1ImplicitSurfaceDistance.html</filename>
    <base>mirtk::ImplicitSurfaceForce</base>
    <member kind="function">
      <type></type>
      <name>ImplicitSurfaceDistance</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceDistance.html</anchorfile>
      <anchor>a999bf9295ada0651c4c7ef7f91a4da56</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImplicitSurfaceDistance</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceDistance.html</anchorfile>
      <anchor>af4a0ba1cfb8c0d932afa150f5194e0be</anchor>
      <arglist>(const ImplicitSurfaceDistance &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceDistance.html</anchorfile>
      <anchor>af573d01a95bac7fc568497c2037e35e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ImplicitSurfaceDistance &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceDistance.html</anchorfile>
      <anchor>ad0f1aa90b5238d1234016ea98a319d32</anchor>
      <arglist>(const ImplicitSurfaceDistance &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceDistance.html</anchorfile>
      <anchor>ae99f95b4f248dc13952976379dd99613</anchor>
      <arglist>(bool=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ImplicitSurfaceDistance</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceDistance.html</anchorfile>
      <anchor>ada7843657c59c774c93546eb8440ce8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Distance</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceForce.html</anchorfile>
      <anchor>a353bfd9252cbd405205480f217a6c040</anchor>
      <arglist>(const double p[3]) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Distance</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceForce.html</anchorfile>
      <anchor>a06313f59f90d3599ae7450d6e68e7222</anchor>
      <arglist>(const double p[3], const double n[3]) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DistanceGradient</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceForce.html</anchorfile>
      <anchor>acb5848761a88fd2f68f15e4c05c7f751</anchor>
      <arglist>(const double p[3], double g[3], bool normalize=false) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceForce.html</anchorfile>
      <anchor>a43fe1a25a170d6591e760a06adc1c884</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SelfDistance</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceForce.html</anchorfile>
      <anchor>ae2a98d16fa9466795db6460c4a06533d</anchor>
      <arglist>(const double p[3], const double n[3]) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ImplicitSurfaceForce</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceForce.html</anchorfile>
      <anchor>a09f8727c8793602da7842dddf10e44d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceDistance.html</anchorfile>
      <anchor>ab122074997626af7922b0056a26d8504</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateGradient</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceDistance.html</anchorfile>
      <anchor>a44464ef8513383868eba716e5d3ea929</anchor>
      <arglist>(double *, double, double)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>vtkDataArray *</type>
      <name>Distances</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceForce.html</anchorfile>
      <anchor>a1f2ffb307ea97af503bcb3b14db72d4c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ImplicitSurfaceForce</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceForce.html</anchorfile>
      <anchor>abf7e13b5b592aa239c48f14858711f60</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ImplicitSurfaceForce</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceForce.html</anchorfile>
      <anchor>adf55b7dcbf88e470d33f7ce7620bf00e</anchor>
      <arglist>(const ImplicitSurfaceForce &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>InitializeDistances</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceForce.html</anchorfile>
      <anchor>ad82711ce86888aabf16755d8a7b504fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>InitializeMinimumDistances</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceForce.html</anchorfile>
      <anchor>ae5b35d89fbc74d482bbb371f15496be6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>InitializeNormalDistances</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceForce.html</anchorfile>
      <anchor>abde626a9df09ddca070807266364403e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>vtkDataArray *</type>
      <name>MinimumDistances</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceForce.html</anchorfile>
      <anchor>a9a9186b5eaed868331a4cdbce38f8bd7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>vtkDataArray *</type>
      <name>NormalDistances</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceForce.html</anchorfile>
      <anchor>a46c84a5ec796f9a2fde6397d49b0ae15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ImplicitSurfaceForce &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceForce.html</anchorfile>
      <anchor>ae8cf652f839835511e7ebeea9cc7be3f</anchor>
      <arglist>(const ImplicitSurfaceForce &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetWithoutPrefix</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceForce.html</anchorfile>
      <anchor>ab80f2327223695d522e2a47f6089c9b5</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetWithPrefix</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceForce.html</anchorfile>
      <anchor>af9b20abbef15d54a31aff4ca88479d94</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UpdateDistances</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceForce.html</anchorfile>
      <anchor>a9ba76c93c1c31f0f4e5043eaf4aade39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UpdateMinimumDistances</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceForce.html</anchorfile>
      <anchor>a1fb5b9f499a375e0db0c7a316aae03ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UpdateNormalDistances</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceForce.html</anchorfile>
      <anchor>a33cc2946af2c6dc6accab868260ea78c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DistanceMeasureType</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceForce.html</anchorfile>
      <anchor>a13f2e7e79ed8292b852e1a086646a9ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DM_Minimum</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceForce.html</anchorfile>
      <anchor>a13f2e7e79ed8292b852e1a086646a9acaf696d0075ee23f1b65497fac05fb150e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DM_Normal</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceForce.html</anchorfile>
      <anchor>a13f2e7e79ed8292b852e1a086646a9aca21e796d6b2429fc773956919741a49a3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ImplicitSurfaceForce</name>
    <filename>classmirtk_1_1ImplicitSurfaceForce.html</filename>
    <base>mirtk::SurfaceForce</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceForce.html</anchorfile>
      <anchor>a3961cdf4972116f17fe21d0f154646e7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ImplicitSurfaceSpringForce</name>
    <filename>classmirtk_1_1ImplicitSurfaceSpringForce.html</filename>
    <base>mirtk::ImplicitSurfaceForce</base>
    <member kind="function">
      <type></type>
      <name>ImplicitSurfaceSpringForce</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceSpringForce.html</anchorfile>
      <anchor>a57a7a4c9830a6b3617a3e2227a287c82</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImplicitSurfaceSpringForce</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceSpringForce.html</anchorfile>
      <anchor>a46d4cec5fbba0f4b27d719913358f63d</anchor>
      <arglist>(const ImplicitSurfaceSpringForce &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceSpringForce.html</anchorfile>
      <anchor>a23a31fb332f8409a0419709ae6fc2781</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ImplicitSurfaceSpringForce &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceSpringForce.html</anchorfile>
      <anchor>ad3bcc2e604eafdbfbe411c08cabc789a</anchor>
      <arglist>(const ImplicitSurfaceSpringForce &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceSpringForce.html</anchorfile>
      <anchor>a868a59ea776dd4e0c46bc80c590d1cbd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceSpringForce.html</anchorfile>
      <anchor>a21121ea0cc6e08ccae0d40deb9db0b84</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ImplicitSurfaceSpringForce</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceSpringForce.html</anchorfile>
      <anchor>a24d60b09b9d35b6926c272f0b1101a24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceSpringForce.html</anchorfile>
      <anchor>a913a5c9fd452bf8303fabc53903652f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateGradient</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceSpringForce.html</anchorfile>
      <anchor>a571108c503c74730232cde65db8a44ca</anchor>
      <arglist>(double *, double, double)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetWithoutPrefix</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceSpringForce.html</anchorfile>
      <anchor>a503d760c4a1e239b11f8e1e784679b1c</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::Indent</name>
    <filename>classmirtk_1_1Indent.html</filename>
    <member kind="function">
      <type></type>
      <name>Indent</name>
      <anchorfile>classmirtk_1_1Indent.html</anchorfile>
      <anchor>a293a8ca03437678ad8a7b3e0a2015abc</anchor>
      <arglist>(int n=0, int s=2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Indent</name>
      <anchorfile>classmirtk_1_1Indent.html</anchorfile>
      <anchor>a11b23afaad2b591d3de2fa75dc25b45b</anchor>
      <arglist>(const Indent &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Level</name>
      <anchorfile>classmirtk_1_1Indent.html</anchorfile>
      <anchor>a820d8d8e0624a5283cc9d033a2bf6751</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Indent</type>
      <name>operator+</name>
      <anchorfile>classmirtk_1_1Indent.html</anchorfile>
      <anchor>a75c97bec554a922e40514f63bdfadfa3</anchor>
      <arglist>(const Indent &amp;indent) const </arglist>
    </member>
    <member kind="function">
      <type>Indent &amp;</type>
      <name>operator++</name>
      <anchorfile>classmirtk_1_1Indent.html</anchorfile>
      <anchor>a7bbc89c874d4dd66c0fb338ae89f5eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Indent</type>
      <name>operator++</name>
      <anchorfile>classmirtk_1_1Indent.html</anchorfile>
      <anchor>a7b917cfc1eec7a02351bb99450dd516e</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>Indent &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1Indent.html</anchorfile>
      <anchor>ae57fca7786fcf44908e402c9b5698aa7</anchor>
      <arglist>(const Indent &amp;indent)</arglist>
    </member>
    <member kind="function">
      <type>Indent</type>
      <name>operator-</name>
      <anchorfile>classmirtk_1_1Indent.html</anchorfile>
      <anchor>acad64855737438f3e82c18df75dd9b1f</anchor>
      <arglist>(const Indent &amp;indent) const </arglist>
    </member>
    <member kind="function">
      <type>Indent &amp;</type>
      <name>operator--</name>
      <anchorfile>classmirtk_1_1Indent.html</anchorfile>
      <anchor>a84c3d8592107179f0cef2f4cb3fe6a95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Indent</type>
      <name>operator--</name>
      <anchorfile>classmirtk_1_1Indent.html</anchorfile>
      <anchor>aa07523439bca2bab0aa88765e8770775</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>Indent &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1Indent.html</anchorfile>
      <anchor>a4368823bdf06457cda0386804db04e70</anchor>
      <arglist>(const Indent &amp;indent)</arglist>
    </member>
    <member kind="function">
      <type>Indent &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1Indent.html</anchorfile>
      <anchor>a7118c91cd7a444a4589aa830863e685c</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>Indent &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1Indent.html</anchorfile>
      <anchor>a114f7899cff6e83e02ff83154d178f8a</anchor>
      <arglist>(const Indent &amp;indent)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Spaces</name>
      <anchorfile>classmirtk_1_1Indent.html</anchorfile>
      <anchor>a8e040d0cf9f4ad26dfc8d906a9290a81</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SpacesPerLevel</name>
      <anchorfile>classmirtk_1_1Indent.html</anchorfile>
      <anchor>afd57de03b5895fb7525cf10072554f6a</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SpacesPerLevel</name>
      <anchorfile>classmirtk_1_1Indent.html</anchorfile>
      <anchor>a6fbb673e95711bdbe717e21f6d684d2f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_N</name>
      <anchorfile>classmirtk_1_1Indent.html</anchorfile>
      <anchor>ab8c7c5484d42b0f542ea83eec62a9b54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_NumberOfSpaces</name>
      <anchorfile>classmirtk_1_1Indent.html</anchorfile>
      <anchor>a5cf10650a49a9c10ce689908d73dc08f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::IndexExtrapolateImageFunction</name>
    <filename>classmirtk_1_1IndexExtrapolateImageFunction.html</filename>
    <templarg>TImage</templarg>
    <base>mirtk::GenericExtrapolateImageFunction</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>TransformIndex</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a278dbc99c961dd8ae71489b87b02aa05</anchor>
      <arglist>(int &amp;idx, int max) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::InexactLineSearch</name>
    <filename>classmirtk_1_1InexactLineSearch.html</filename>
    <base>mirtk::LineSearch</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1InexactLineSearch.html</anchorfile>
      <anchor>ad9ebf77542612f52ec1767eb485288c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1InexactLineSearch.html</anchorfile>
      <anchor>a64c30d8674da15e23c24db4c20c73c9c</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1LineSearch.html</anchorfile>
      <anchor>a85b4dce9f830c00fef11f036e295f696</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::InflationForce</name>
    <filename>classmirtk_1_1InflationForce.html</filename>
    <base>mirtk::SurfaceConstraint</base>
    <member kind="function">
      <type></type>
      <name>InflationForce</name>
      <anchorfile>classmirtk_1_1InflationForce.html</anchorfile>
      <anchor>a2d7a9e6a2dbc67712e2d7f1449f7babe</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InflationForce</name>
      <anchorfile>classmirtk_1_1InflationForce.html</anchorfile>
      <anchor>a77d337a4223f6527b77bd52aab530a7f</anchor>
      <arglist>(const InflationForce &amp;)</arglist>
    </member>
    <member kind="function">
      <type>InflationForce &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1InflationForce.html</anchorfile>
      <anchor>abebed65540eaeff64750ee767f2dfefc</anchor>
      <arglist>(const InflationForce &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InflationForce</name>
      <anchorfile>classmirtk_1_1InflationForce.html</anchorfile>
      <anchor>a2b0e79be7ab622963e52c8ed6bbf4919</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>adb8888b7c6f4a9291c57c37a937cd03b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1PointSetForce.html</anchorfile>
      <anchor>a9a13c4a398f35f28019583592ea028dd</anchor>
      <arglist>(bool=true)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1InflationForce.html</anchorfile>
      <anchor>af37cebec66c5708c5bbb470d13e8b0ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateGradient</name>
      <anchorfile>classmirtk_1_1InflationForce.html</anchorfile>
      <anchor>a0b3c4884f295ec3fc73c2a483fe99dd4</anchor>
      <arglist>(double *, double, double)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::InflationStoppingCriterion</name>
    <filename>classmirtk_1_1InflationStoppingCriterion.html</filename>
    <base>mirtk::StoppingCriterion</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Fulfilled</name>
      <anchorfile>classmirtk_1_1InflationStoppingCriterion.html</anchorfile>
      <anchor>a9e396e92ec16e4cd35d623ce76e994c2</anchor>
      <arglist>(int iter, double prev, double value, const double *delta)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InflationStoppingCriterion</name>
      <anchorfile>classmirtk_1_1InflationStoppingCriterion.html</anchorfile>
      <anchor>a086e4c7469d72e4f7c76882482235864</anchor>
      <arglist>(const ObjectiveFunction *=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InflationStoppingCriterion</name>
      <anchorfile>classmirtk_1_1InflationStoppingCriterion.html</anchorfile>
      <anchor>a82ea89d0d9755bcc54546988d6ce887d</anchor>
      <arglist>(const InflationStoppingCriterion &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StoppingCriterion *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1InflationStoppingCriterion.html</anchorfile>
      <anchor>aacd8f1fb553d6a9ee3d3995b12738384</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>InflationStoppingCriterion &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1InflationStoppingCriterion.html</anchorfile>
      <anchor>af579f93c90a40371fc9121dadf5002c8</anchor>
      <arglist>(const InflationStoppingCriterion &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1InflationStoppingCriterion.html</anchorfile>
      <anchor>aa3d660d4b3ac294fbfbf618cf8f85e29</anchor>
      <arglist>(ostream &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InflationStoppingCriterion</name>
      <anchorfile>classmirtk_1_1InflationStoppingCriterion.html</anchorfile>
      <anchor>a75bf682cedc8f6814adbc70f88b05508</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::IntensityCorrelationRatioXY</name>
    <filename>classmirtk_1_1IntensityCorrelationRatioXY.html</filename>
    <base>mirtk::HistogramImageSimilarity</base>
    <member kind="function">
      <type></type>
      <name>IntensityCorrelationRatioXY</name>
      <anchorfile>classmirtk_1_1IntensityCorrelationRatioXY.html</anchorfile>
      <anchor>a33628d84c6e9770c7fb3815b6503e31a</anchor>
      <arglist>(const char *=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntensityCorrelationRatioXY</name>
      <anchorfile>classmirtk_1_1IntensityCorrelationRatioXY.html</anchorfile>
      <anchor>acc404b9de0c57126e4fdba0c523601c6</anchor>
      <arglist>(const IntensityCorrelationRatioXY &amp;)</arglist>
    </member>
    <member kind="function">
      <type>IntensityCorrelationRatioXY &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1IntensityCorrelationRatioXY.html</anchorfile>
      <anchor>a35f5e82355546f7e05533b131d8093b5</anchor>
      <arglist>(const IntensityCorrelationRatioXY &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IntensityCorrelationRatioXY</name>
      <anchorfile>classmirtk_1_1IntensityCorrelationRatioXY.html</anchorfile>
      <anchor>a4a010e179251b476b2ca98895f3fa3d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1IntensityCorrelationRatioXY.html</anchorfile>
      <anchor>a2494960de1692e04ae3c6b722c260292</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::IntensityCorrelationRatioYX</name>
    <filename>classmirtk_1_1IntensityCorrelationRatioYX.html</filename>
    <base>mirtk::HistogramImageSimilarity</base>
    <member kind="function">
      <type></type>
      <name>IntensityCorrelationRatioYX</name>
      <anchorfile>classmirtk_1_1IntensityCorrelationRatioYX.html</anchorfile>
      <anchor>ab509f8a2bc02e3fcab50486fe26f751e</anchor>
      <arglist>(const char *=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntensityCorrelationRatioYX</name>
      <anchorfile>classmirtk_1_1IntensityCorrelationRatioYX.html</anchorfile>
      <anchor>a2e80ef8eefee16e26eead8c3e27a6c61</anchor>
      <arglist>(const IntensityCorrelationRatioYX &amp;)</arglist>
    </member>
    <member kind="function">
      <type>IntensityCorrelationRatioYX &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1IntensityCorrelationRatioYX.html</anchorfile>
      <anchor>a7a027b20b77102b32b40ef1797a42c4a</anchor>
      <arglist>(const IntensityCorrelationRatioYX &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IntensityCorrelationRatioYX</name>
      <anchorfile>classmirtk_1_1IntensityCorrelationRatioYX.html</anchorfile>
      <anchor>a90df6b91c05617df6d4a491524e71cf2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1IntensityCorrelationRatioYX.html</anchorfile>
      <anchor>adfc48f94558ad09f5970b9d204ebd324</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::IntensityCrossCorrelation</name>
    <filename>classmirtk_1_1IntensityCrossCorrelation.html</filename>
    <base>mirtk::ImageSimilarity</base>
    <member kind="function">
      <type></type>
      <name>IntensityCrossCorrelation</name>
      <anchorfile>classmirtk_1_1IntensityCrossCorrelation.html</anchorfile>
      <anchor>aaac602e4577bc43f857a29364ae79b93</anchor>
      <arglist>(const char *=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntensityCrossCorrelation</name>
      <anchorfile>classmirtk_1_1IntensityCrossCorrelation.html</anchorfile>
      <anchor>a276449c4d0ee4cf3e8d09999fb0f0468</anchor>
      <arglist>(const IntensityCrossCorrelation &amp;)</arglist>
    </member>
    <member kind="function">
      <type>IntensityCrossCorrelation &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1IntensityCrossCorrelation.html</anchorfile>
      <anchor>adf43ec8534673ae2cfd441d745eb9bb2</anchor>
      <arglist>(const IntensityCrossCorrelation &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IntensityCrossCorrelation</name>
      <anchorfile>classmirtk_1_1IntensityCrossCorrelation.html</anchorfile>
      <anchor>a528982c16a573b08677633f8e6ebbc49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1IntensityCrossCorrelation.html</anchorfile>
      <anchor>ad05e63d9cdb08526d8a9fa9dc0be8b00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>NonParametricGradient</name>
      <anchorfile>classmirtk_1_1IntensityCrossCorrelation.html</anchorfile>
      <anchor>a75dcae8bad730df17a5644af616a9549</anchor>
      <arglist>(const RegisteredImage *, GradientImageType *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::InternalForce</name>
    <filename>classmirtk_1_1InternalForce.html</filename>
    <base>mirtk::PointSetForce</base>
  </compound>
  <compound kind="class">
    <name>mirtk::InterpolateImageFunction</name>
    <filename>classmirtk_1_1InterpolateImageFunction.html</filename>
    <base>mirtk::ImageFunction</base>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>EvaluateInside</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a48a6dc11bdcfc33cd5cd0114d293aed1</anchor>
      <arglist>(double, double, double=0, double=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateInside</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>ae5009f5d0c7d7eafdb50ecee587d383f</anchor>
      <arglist>(double *, double, double, double=0, int=1) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>EvaluateInside</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>ac000fa0c57069139e9a6c7f5b061e705</anchor>
      <arglist>(Vector &amp;, double, double, double=0, double=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>EvaluateOutside</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a8c5eb1b3aa13979bc41514a8290bdda3</anchor>
      <arglist>(double, double, double=0, double=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateOutside</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a1b61c4b4a694ad3b516a1a338d0a2fa9</anchor>
      <arglist>(double *, double, double, double=0, int=1) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>EvaluateOutside</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a2188eb26655602a371eeee0550c77e0c</anchor>
      <arglist>(Vector &amp;, double, double, double=0, double=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>EvaluateWithPaddingInside</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a94bf7cbec872fd3dba646ea4f26babc6</anchor>
      <arglist>(double, double, double=0, double=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateWithPaddingInside</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>ae424c9f434da5ea72b9e3b45a034e828</anchor>
      <arglist>(double *, double, double, double=0, int=1) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>EvaluateWithPaddingInside</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>ab30e3bd593042d6a0222671d90d1da30</anchor>
      <arglist>(Vector &amp;, double, double, double=0, double=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>EvaluateWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a81f4f82a1780a6fe27692d4a1ec18500</anchor>
      <arglist>(double, double, double=0, double=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a87a041ef8e3654396a9cf152ef576a2a</anchor>
      <arglist>(double *, double, double, double=0, int=1) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>EvaluateWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>aa8bdf37c8365a471022c9f79e734f6f0</anchor>
      <arglist>(Vector &amp;, double, double, double=0, double=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Extrapolator</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a2bd1f8b29b30b9ea865d50e92a3fde73</anchor>
      <arglist>(ExtrapolateImageFunction *, bool=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a4f0a7c1d46740e7b37f6c62786c14c6e</anchor>
      <arglist>(bool coeff)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ExtrapolateImageFunction *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1InterpolateImageFunction.html</anchorfile>
      <anchor>a09aaccfe84af46403064d8639ef24d22</anchor>
      <arglist>(enum ExtrapolationMode, const BaseImage *=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::InverseAffineTransformation</name>
    <filename>classmirtk_1_1InverseAffineTransformation.html</filename>
    <base>mirtk::AffineTransformation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasSameDOFsAs</name>
      <anchorfile>classmirtk_1_1InverseAffineTransformation.html</anchorfile>
      <anchor>ae101a06deb8341d81984f9d7946927f3</anchor>
      <arglist>(const class Transformation *) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InverseAffineTransformation</name>
      <anchorfile>classmirtk_1_1InverseAffineTransformation.html</anchorfile>
      <anchor>a68b3273e87dcbfacdacba21d38fe3f37</anchor>
      <arglist>(AffineTransformation *=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDOFs</name>
      <anchorfile>classmirtk_1_1InverseAffineTransformation.html</anchorfile>
      <anchor>afade92aac27e3ed81927ee186c1467a1</anchor>
      <arglist>(double[3], int, double, double, double, double=0, double=1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Transformation</name>
      <anchorfile>classmirtk_1_1InverseAffineTransformation.html</anchorfile>
      <anchor>a3a7ba70f62c30d1b486133ee2beb310e</anchor>
      <arglist>(AffineTransformation *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InverseAffineTransformation</name>
      <anchorfile>classmirtk_1_1InverseAffineTransformation.html</anchorfile>
      <anchor>ac24828cfc3d1ce485982c6642c75a011</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::Iteration</name>
    <filename>structmirtk_1_1Iteration.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>_Begin</name>
      <anchorfile>structmirtk_1_1Iteration.html</anchorfile>
      <anchor>a23cf3a31eee4bbc413137f76d79ec1d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_End</name>
      <anchorfile>structmirtk_1_1Iteration.html</anchorfile>
      <anchor>afb84b07c5866458674fd9516dceea35e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Inc</name>
      <anchorfile>structmirtk_1_1Iteration.html</anchorfile>
      <anchor>ace01bdb3e225897a0b77242746ca7380</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Iter</name>
      <anchorfile>structmirtk_1_1Iteration.html</anchorfile>
      <anchor>a832750a34df849d82492005cb89e4e76</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::JacobianConstraint</name>
    <filename>classmirtk_1_1JacobianConstraint.html</filename>
    <base>mirtk::TransformationConstraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Jacobian</name>
      <anchorfile>classmirtk_1_1JacobianConstraint.html</anchorfile>
      <anchor>ab2e49c7cf5d64b4830ab2ccc989a79b8</anchor>
      <arglist>(const FreeFormTransformation *ffd, double x, double y, double z, double t, Matrix &amp;adj) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1JacobianConstraint.html</anchorfile>
      <anchor>ac21db9294241a65146cbc4e746456db0</anchor>
      <arglist>(bool=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteDataSets</name>
      <anchorfile>classmirtk_1_1JacobianConstraint.html</anchorfile>
      <anchor>a15f5c131df73e6c654e9211a9ee39d62</anchor>
      <arglist>(const char *, const char *, bool=true) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~JacobianConstraint</name>
      <anchorfile>classmirtk_1_1JacobianConstraint.html</anchorfile>
      <anchor>a1d2c186a977a5df8fb9910f6a2a9ec60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1TransformationConstraint.html</anchorfile>
      <anchor>a45d830ba67938ae06c776c171f9217f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TransformationConstraint</name>
      <anchorfile>classmirtk_1_1TransformationConstraint.html</anchorfile>
      <anchor>a0f1912bea6e622e0d66273e5955c3c77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>JacobianConstraint</name>
      <anchorfile>classmirtk_1_1JacobianConstraint.html</anchorfile>
      <anchor>a7f07f3fc4358cce4c19073eeca1a2e11</anchor>
      <arglist>(const char *=&quot;&quot;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>WriteJacobian</name>
      <anchorfile>classmirtk_1_1JacobianConstraint.html</anchorfile>
      <anchor>a631ffc10a30117e261490239c8896613</anchor>
      <arglist>(const char *, const FreeFormTransformation *, const double *) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const FreeFormTransformation *</type>
      <name>FFD</name>
      <anchorfile>classmirtk_1_1TransformationConstraint.html</anchorfile>
      <anchor>a5ef49e01ded0722b55d6a5ecdde66e53</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const MultiLevelTransformation *</type>
      <name>MFFD</name>
      <anchorfile>classmirtk_1_1TransformationConstraint.html</anchorfile>
      <anchor>ab936144a7bc409fade0c124e9ecdbf40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TransformationConstraint &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1TransformationConstraint.html</anchorfile>
      <anchor>ae9580b70435cd8d4ef1db28603002269</anchor>
      <arglist>(const TransformationConstraint &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetWithoutPrefix</name>
      <anchorfile>classmirtk_1_1TransformationConstraint.html</anchorfile>
      <anchor>ab44d2e792a957ebb62e3e499ce179fa6</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetWithPrefix</name>
      <anchorfile>classmirtk_1_1TransformationConstraint.html</anchorfile>
      <anchor>acfa3d0959731f4fb3f336f2cfe34d7ae</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const TransformationType *</type>
      <name>TransformationAs</name>
      <anchorfile>classmirtk_1_1TransformationConstraint.html</anchorfile>
      <anchor>a7c512c90effe1c03489dfe036abdc67f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TransformationConstraint</name>
      <anchorfile>classmirtk_1_1TransformationConstraint.html</anchorfile>
      <anchor>ae621959babccc17c7b1dc1257cbafe48</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TransformationConstraint</name>
      <anchorfile>classmirtk_1_1TransformationConstraint.html</anchorfile>
      <anchor>ae3f9d468ba68a50296f0587564c7c5ca</anchor>
      <arglist>(const TransformationConstraint &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix *</type>
      <name>_AdjJacobian</name>
      <anchorfile>classmirtk_1_1JacobianConstraint.html</anchorfile>
      <anchor>a90de97dd8908264dc8873607dbf151a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>_DetJacobian</name>
      <anchorfile>classmirtk_1_1JacobianConstraint.html</anchorfile>
      <anchor>a1489c22f2373d13c1207069d41e30964</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_NumberOfCPs</name>
      <anchorfile>classmirtk_1_1JacobianConstraint.html</anchorfile>
      <anchor>a9dc151d874c74403ad73ad1d1d463a45</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TransformationConstraint *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1TransformationConstraint.html</anchorfile>
      <anchor>abfb1d18ebff339ea507e83d06c4edb58</anchor>
      <arglist>(ConstraintMeasure, const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::JointImageEntropy</name>
    <filename>classmirtk_1_1JointImageEntropy.html</filename>
    <base>mirtk::HistogramImageSimilarity</base>
    <member kind="function">
      <type></type>
      <name>JointImageEntropy</name>
      <anchorfile>classmirtk_1_1JointImageEntropy.html</anchorfile>
      <anchor>a2dbf2166544a43271af7044b283156cf</anchor>
      <arglist>(const char *=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JointImageEntropy</name>
      <anchorfile>classmirtk_1_1JointImageEntropy.html</anchorfile>
      <anchor>a30875df6c84f0cfc256bb25ef4738cee</anchor>
      <arglist>(const JointImageEntropy &amp;)</arglist>
    </member>
    <member kind="function">
      <type>JointImageEntropy &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1JointImageEntropy.html</anchorfile>
      <anchor>a0e1d1fd59624321937d1c868258d0506</anchor>
      <arglist>(const JointImageEntropy &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>RawValue</name>
      <anchorfile>classmirtk_1_1JointImageEntropy.html</anchorfile>
      <anchor>a0d846ed91c2d33c5bb505567306b41fd</anchor>
      <arglist>(double) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~JointImageEntropy</name>
      <anchorfile>classmirtk_1_1JointImageEntropy.html</anchorfile>
      <anchor>ac6585cd33ba81894ba0cf87f466ad5d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1JointImageEntropy.html</anchorfile>
      <anchor>a6748761adb7e0bb3082903cb5f8c0587</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::LabelConsistency</name>
    <filename>classmirtk_1_1LabelConsistency.html</filename>
    <base>mirtk::HistogramImageSimilarity</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1LabelConsistency.html</anchorfile>
      <anchor>ad97db58f61bba19af7b503225f66ac8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LabelConsistency</name>
      <anchorfile>classmirtk_1_1LabelConsistency.html</anchorfile>
      <anchor>a6c30ce324426cbf0b26bfb4333d875a3</anchor>
      <arglist>(const char *=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LabelConsistency</name>
      <anchorfile>classmirtk_1_1LabelConsistency.html</anchorfile>
      <anchor>ad5c14e284dce9a356d721847007cc12f</anchor>
      <arglist>(const LabelConsistency &amp;)</arglist>
    </member>
    <member kind="function">
      <type>LabelConsistency &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1LabelConsistency.html</anchorfile>
      <anchor>a9e7147595768ec99188331e144542db0</anchor>
      <arglist>(const LabelConsistency &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LabelConsistency</name>
      <anchorfile>classmirtk_1_1LabelConsistency.html</anchorfile>
      <anchor>a1ebd82392133a13026ae6124624e130a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1LabelConsistency.html</anchorfile>
      <anchor>ac57f2e0097053898e341e3acd3874e07</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::LieBracketImageFilter</name>
    <filename>classmirtk_1_1LieBracketImageFilter.html</filename>
    <templarg></templarg>
    <base>mirtk::ImageToImage</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter.html</anchorfile>
      <anchor>a811e5cae68011a85f0ba05cb1ee32572</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::LieBracketImageFilter2D</name>
    <filename>classmirtk_1_1LieBracketImageFilter2D.html</filename>
    <templarg></templarg>
    <base>mirtk::LieBracketImageFilter</base>
    <member kind="typedef">
      <type>LieBracketImageFilter&lt; TVoxel &gt;</type>
      <name>Superclass</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter2D.html</anchorfile>
      <anchor>aa8468c59a8a25a817dec6810ddf5fc41</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LieBracketImageFilter2D</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter2D.html</anchorfile>
      <anchor>a97ca86b1e320867753dacd77da358037</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Output</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter2D.html</anchorfile>
      <anchor>aeb9bd2d01c3175d8252ad437c2d4a786</anchor>
      <arglist>(ImageType *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter2D.html</anchorfile>
      <anchor>a813f736401312fda07a93404536c1761</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter2D.html</anchorfile>
      <anchor>af72528dcade78e7d56597b5c6987c5ab</anchor>
      <arglist>(double[2], int, int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter2D.html</anchorfile>
      <anchor>ab343c25666bca5bf050597d347620217</anchor>
      <arglist>(int, int, int, int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LieBracketImageFilter2D</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter2D.html</anchorfile>
      <anchor>a176dd0eebf0a310bd126a4f2637b240b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter2D.html</anchorfile>
      <anchor>a3f7f1447f66b36a4a581bff410ba9f6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Jacobian</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter2D.html</anchorfile>
      <anchor>a48754022f4f18caec7c082281743e717</anchor>
      <arglist>(Matrix &amp;, const ImageType &amp;, int, int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::LieBracketImageFilter3D</name>
    <filename>classmirtk_1_1LieBracketImageFilter3D.html</filename>
    <templarg></templarg>
    <base>mirtk::LieBracketImageFilter</base>
    <member kind="typedef">
      <type>LieBracketImageFilter&lt; TVoxel &gt;</type>
      <name>Superclass</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter3D.html</anchorfile>
      <anchor>a09ca38733f9ea2a671b25a0fa60f00f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LieBracketImageFilter3D</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter3D.html</anchorfile>
      <anchor>ab7b10c079ec612bcf93b26a3c3b8b08c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Output</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter3D.html</anchorfile>
      <anchor>a7ecb161c3214ccf84f59afb97bfd144c</anchor>
      <arglist>(ImageType *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter3D.html</anchorfile>
      <anchor>a65a83895851d1daf7eefbc887dd0da2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter3D.html</anchorfile>
      <anchor>ab528516924afa84ad164f5b4a853f79d</anchor>
      <arglist>(double[3], int, int, int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter3D.html</anchorfile>
      <anchor>a0008b590a3ebd11ba9aaac2f457010bc</anchor>
      <arglist>(int, int, int, int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LieBracketImageFilter3D</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter3D.html</anchorfile>
      <anchor>afb442643f2bf2917305a6d3e6e994359</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter3D.html</anchorfile>
      <anchor>ae24c39af436336f598e1c0cfa2e68fa1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Jacobian</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter3D.html</anchorfile>
      <anchor>a9ed23849954109bd3bf75a8c03714b98</anchor>
      <arglist>(Matrix &amp;, const ImageType &amp;, int, int, int)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix</type>
      <name>_MatW2I</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter3D.html</anchorfile>
      <anchor>a292e74d44d514162bafe96afffe75dbd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::LimitedMemoryBFGSDescent</name>
    <filename>classmirtk_1_1LimitedMemoryBFGSDescent.html</filename>
    <base>mirtk::LocalOptimizer</base>
    <member kind="function">
      <type></type>
      <name>LimitedMemoryBFGSDescent</name>
      <anchorfile>classmirtk_1_1LimitedMemoryBFGSDescent.html</anchorfile>
      <anchor>ae452d5ecaa1898287ab348f27eb6c2af</anchor>
      <arglist>(ObjectiveFunction *=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LimitedMemoryBFGSDescent</name>
      <anchorfile>classmirtk_1_1LimitedMemoryBFGSDescent.html</anchorfile>
      <anchor>ad0ba6d06dc436a3accaf59c0c551211c</anchor>
      <arglist>(const LimitedMemoryBFGSDescent &amp;)</arglist>
    </member>
    <member kind="function">
      <type>LimitedMemoryBFGSDescent &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1LimitedMemoryBFGSDescent.html</anchorfile>
      <anchor>adcb5ac6691621509d492913b77b9bcea</anchor>
      <arglist>(const LimitedMemoryBFGSDescent &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1LimitedMemoryBFGSDescent.html</anchorfile>
      <anchor>a3efb8a0ea3d1575282dc836ca7cf1b77</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1LimitedMemoryBFGSDescent.html</anchorfile>
      <anchor>a5e65acf7c949d783ddf25b25f141f196</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1LimitedMemoryBFGSDescent.html</anchorfile>
      <anchor>adbb66b8b4fcfd61a242926f11bbee1c2</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LimitedMemoryBFGSDescent</name>
      <anchorfile>classmirtk_1_1LimitedMemoryBFGSDescent.html</anchorfile>
      <anchor>a6ff08560f3504a23f0301d0d1e656c5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>LineSearchStep</type>
      <name>_CurrentStep</name>
      <anchorfile>classmirtk_1_1LimitedMemoryBFGSDescent.html</anchorfile>
      <anchor>ac8c2fd19816b50f23cc6ae0f5b9d31bb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::LinearFreeFormTransformation3D</name>
    <filename>classmirtk_1_1LinearFreeFormTransformation3D.html</filename>
    <base>mirtk::FreeFormTransformation3D</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateDOFs</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation3D.html</anchorfile>
      <anchor>ab2502bbfd5da6d4bbe81d1e1742c4551</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, const double *, int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateDOFsGradient</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation3D.html</anchorfile>
      <anchor>a1b0674cebfe529c68d92cfa6e7e58c68</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, const double *, int, double *, double=1.0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>BendingEnergy</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation3D.html</anchorfile>
      <anchor>ac4e0aae0e0e3513fbf814c9e474141a6</anchor>
      <arglist>(bool=false, bool=true) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BendingEnergyGradient</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation3D.html</anchorfile>
      <anchor>ad8638fa1ea6bfac0468b11c1cf1eb432</anchor>
      <arglist>(double *, double=1, bool=false, bool=true) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation3D.html</anchorfile>
      <anchor>aa6f41bfce45bd63f64e393ac01159028</anchor>
      <arglist>(int, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>CanRead</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation3D.html</anchorfile>
      <anchor>a6c8377557300bfc502bb05ba097d713a</anchor>
      <arglist>(TransformationType) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Compose</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation3D.html</anchorfile>
      <anchor>aa41ec1f532b21ec2b32f24bc745b1765</anchor>
      <arglist>(const Transformation *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation3D.html</anchorfile>
      <anchor>ab3361fc1e9d77d36eb05c5151696197a</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, int, int, int) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation3D.html</anchorfile>
      <anchor>a1c1f30ead03496153fe693a7f7f59393</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateJacobian</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation3D.html</anchorfile>
      <anchor>abe3e23d7c60002f9e35e9d65efd633c3</anchor>
      <arglist>(Matrix &amp;, double, double, double) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Interpolate</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation3D.html</anchorfile>
      <anchor>a0e7ae10f586823f50930a61b68aaa6e7</anchor>
      <arglist>(const double *, const double *, const double *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDOFs</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation3D.html</anchorfile>
      <anchor>a7c452f6e16e73ae364e59f8ec6de5e90</anchor>
      <arglist>(double[3], int, int, int, double, double, double) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>KernelSize</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation3D.html</anchorfile>
      <anchor>af5c562aee9a2a78d04c3a5b4b24336fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearFreeFormTransformation3D</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation3D.html</anchorfile>
      <anchor>a0501bae0da70ea0273d3ee13b5a20105</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearFreeFormTransformation3D</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation3D.html</anchorfile>
      <anchor>a907af8c3f6d3ab9c5ea8e872c90646f4</anchor>
      <arglist>(double, double, double, double, double, double, double, double, double, double *, double *, double *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearFreeFormTransformation3D</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation3D.html</anchorfile>
      <anchor>a2f4af407f388e8c513f8831fe67dffe7</anchor>
      <arglist>(const ImageAttributes &amp;, double=-1, double=-1, double=-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearFreeFormTransformation3D</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation3D.html</anchorfile>
      <anchor>a29d56efa288aac8af1ca33c7ec665900</anchor>
      <arglist>(const BaseImage &amp;, double, double, double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearFreeFormTransformation3D</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation3D.html</anchorfile>
      <anchor>ac0db61f2bdc46f505b9dfe9bfc08b3b6</anchor>
      <arglist>(const GenericImage&lt; double &gt; &amp;, bool=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearFreeFormTransformation3D</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation3D.html</anchorfile>
      <anchor>af7d159a4c46ce72efe9a436e3a4d812e</anchor>
      <arglist>(const BSplineFreeFormTransformation3D &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearFreeFormTransformation3D</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation3D.html</anchorfile>
      <anchor>a100c7c1957801c79713d7010d4efe43a</anchor>
      <arglist>(const LinearFreeFormTransformation3D &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>LocalInverse</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation3D.html</anchorfile>
      <anchor>a6ac57a92aa2f30850870e7a94f37ff25</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalJacobian</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation3D.html</anchorfile>
      <anchor>a729b82d85e08d5b21694034ddc077be8</anchor>
      <arglist>(Matrix &amp;, double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalTransform</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation3D.html</anchorfile>
      <anchor>a64a7a873a979e7fc48bd4c392e4cf2a3</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation3D.html</anchorfile>
      <anchor>af31dcfb2fb5b080bdb3435e44cee2440</anchor>
      <arglist>(Indent=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LinearFreeFormTransformation3D</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation3D.html</anchorfile>
      <anchor>a5ea9bf8a308c75d25365260b4c0e57b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>BendingEnergy</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation3D.html</anchorfile>
      <anchor>ad9622669e40e37cc6e930772fd68321e</anchor>
      <arglist>(int i, int j, int k) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Interpolator</type>
      <name>_FFD</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation3D.html</anchorfile>
      <anchor>a0e48aa252b7941f731fc1628a0626ca0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::LinearFreeFormTransformation4D</name>
    <filename>classmirtk_1_1LinearFreeFormTransformation4D.html</filename>
    <base>mirtk::FreeFormTransformation4D</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateDOFs</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation4D.html</anchorfile>
      <anchor>a2e8c8d20465fcd554356f59067f28fe3</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, const double *, int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateDOFsGradient</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation4D.html</anchorfile>
      <anchor>a9168d0aa70b3c5e6ce142ddff92369d5</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, const double *, int, double *, double=1.0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>BendingEnergy</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation4D.html</anchorfile>
      <anchor>af0060dc5b9a791d7c12322f7a2fcebad</anchor>
      <arglist>(bool=false, bool=true) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BendingEnergyGradient</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation4D.html</anchorfile>
      <anchor>a420d48f424ff45e824446c85ad7080b5</anchor>
      <arglist>(double *, double=-1, bool=false, bool=true) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation4D.html</anchorfile>
      <anchor>af0c0cbccb6335b914555e87570c835c0</anchor>
      <arglist>(int, double &amp;, double &amp;, double=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation4D.html</anchorfile>
      <anchor>a6dd3ace68f98d538a7748ad35a2750e8</anchor>
      <arglist>(int, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation4D.html</anchorfile>
      <anchor>a89c2dab6c6cfb19413e48cedb23d06ba</anchor>
      <arglist>(int, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double &amp;, double=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>CanRead</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation4D.html</anchorfile>
      <anchor>ac34262050602df0ed08885ab541268fd</anchor>
      <arglist>(TransformationType) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation4D.html</anchorfile>
      <anchor>a778a5890ad4d174106ab18a87b530360</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateInside</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation4D.html</anchorfile>
      <anchor>a6eab03c010f5dcaa335cf6a9d8f5c677</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EvaluateJacobian</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation4D.html</anchorfile>
      <anchor>a6991508073c66ada2cdfcc62aaed8b3e</anchor>
      <arglist>(Matrix &amp;, double, double, double, double) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Interpolate</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation4D.html</anchorfile>
      <anchor>aaac5dfe81545980e6e80feabcfe4f759</anchor>
      <arglist>(const double *, const double *, const double *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDOFs</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation4D.html</anchorfile>
      <anchor>a1e341df14f01f84efed1080195fecb03</anchor>
      <arglist>(double[3], int, int, int, int, double, double, double, double) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>KernelSize</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation4D.html</anchorfile>
      <anchor>a4be3b6985dc7cdcd81767fb04a38854e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearFreeFormTransformation4D</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation4D.html</anchorfile>
      <anchor>a71aa1b427f280df43f1ddde84aea562f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearFreeFormTransformation4D</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation4D.html</anchorfile>
      <anchor>a76df9119c77ad44d42acc581b4265e43</anchor>
      <arglist>(double, double, double, double, double, double, double, double, double, double, double, double, double *, double *, double *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearFreeFormTransformation4D</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation4D.html</anchorfile>
      <anchor>a3fc512e93eb97a4483df80f7e4151442</anchor>
      <arglist>(const ImageAttributes &amp;, double=-1, double=-1, double=-1, double=-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearFreeFormTransformation4D</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation4D.html</anchorfile>
      <anchor>a6b946660d86944aeaff8b97475b51319</anchor>
      <arglist>(const BaseImage &amp;, double, double, double, double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearFreeFormTransformation4D</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation4D.html</anchorfile>
      <anchor>a9f1b88b86d7b04d2ecb202078e7a2cbf</anchor>
      <arglist>(const BSplineFreeFormTransformation4D &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearFreeFormTransformation4D</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation4D.html</anchorfile>
      <anchor>ac579b2ba8e132faae0db1aabc9e8c6f6</anchor>
      <arglist>(const LinearFreeFormTransformation4D &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>LocalInverse</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation4D.html</anchorfile>
      <anchor>ab6b802b69a82d7844f27f5485e881c2d</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double, double=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalJacobian</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation4D.html</anchorfile>
      <anchor>a7c263347c5e04ad319cb4c42afa0df0e</anchor>
      <arglist>(Matrix &amp;, double, double, double, double, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalTransform</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation4D.html</anchorfile>
      <anchor>ae5f383d404f90586086e679c189de701</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double, double=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation4D.html</anchorfile>
      <anchor>aaa5211eef6229625afb521305fe03361</anchor>
      <arglist>(Indent=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LinearFreeFormTransformation4D</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation4D.html</anchorfile>
      <anchor>a776e152dd0425f627af39be3c156ff94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>BendingEnergy</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation4D.html</anchorfile>
      <anchor>a0a0e58a7228add088ede197737e64cb1</anchor>
      <arglist>(int i, int j, int k, int l) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Interpolator</type>
      <name>_FFD</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformation4D.html</anchorfile>
      <anchor>a37ed50f6f25ddb96e6170827f982e6fa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::LinearFreeFormTransformationTD</name>
    <filename>classmirtk_1_1LinearFreeFormTransformationTD.html</filename>
    <base>mirtk::LinearFreeFormTransformation4D</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApproximateAsNew</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformationTD.html</anchorfile>
      <anchor>a4c61b69e04d34cc3fcd75015eff835a8</anchor>
      <arglist>(GenericImage&lt; double &gt; **, const double *, const double *, int, bool=false, int=3, int=8)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateDOFs</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformationTD.html</anchorfile>
      <anchor>a4d5ca62c6f373232abed7218629ac995</anchor>
      <arglist>(const GenericImage&lt; double &gt; *const *, const double *, const double *, int, bool=false, int=3, int=8)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateDOFs</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformationTD.html</anchorfile>
      <anchor>aa768980d3d57f131c0a3e62a7954dbd3</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, const double *, int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateDOFsGradient</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformationTD.html</anchorfile>
      <anchor>a28b50efd2d3455efdd8da7149404940e</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, const double *, int, double *, double=1.0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>CanRead</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformationTD.html</anchorfile>
      <anchor>ad40b9df4d22da6eb14b428886727148c</anchor>
      <arglist>(TransformationType) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Interpolate</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformationTD.html</anchorfile>
      <anchor>a849f15e47bdaed2e52ad9b64323203ee</anchor>
      <arglist>(const double *, const double *, const double *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearFreeFormTransformationTD</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformationTD.html</anchorfile>
      <anchor>a13ee6de8e778d336a4cdaa9359dd3ec0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearFreeFormTransformationTD</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformationTD.html</anchorfile>
      <anchor>a8e7b369481ba897daa061b6836300836</anchor>
      <arglist>(const ImageAttributes &amp;, double, double, double, double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearFreeFormTransformationTD</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformationTD.html</anchorfile>
      <anchor>aac1d5bed38105b2f11770d5a5d192124</anchor>
      <arglist>(const BaseImage &amp;, double, double, double, double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearFreeFormTransformationTD</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformationTD.html</anchorfile>
      <anchor>a85f014eb55301cd5b3264fcabcd9ef33</anchor>
      <arglist>(const BSplineFreeFormTransformationTD &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearFreeFormTransformationTD</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformationTD.html</anchorfile>
      <anchor>a07d930099ab204e90fab71e4484d71a3</anchor>
      <arglist>(const LinearFreeFormTransformationTD &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>LocalInverse</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformationTD.html</anchorfile>
      <anchor>a66f389b58df8893760c86d3103b24aea</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double, double) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalTransform</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformationTD.html</anchorfile>
      <anchor>af65d7f5e84a8103b99bbcd28796b8406</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double, double) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformationTD.html</anchorfile>
      <anchor>aacf1591a6356b35061ce82252a6a2115</anchor>
      <arglist>(Indent=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LinearFreeFormTransformationTD</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformationTD.html</anchorfile>
      <anchor>ac17901172d1d514b1d07e454c984ea29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Cifstream &amp;</type>
      <name>ReadDOFs</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformationTD.html</anchorfile>
      <anchor>a8fac9847508e7501653c5eca163207ae</anchor>
      <arglist>(Cifstream &amp;, TransformationType)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Cofstream &amp;</type>
      <name>WriteDOFs</name>
      <anchorfile>classmirtk_1_1LinearFreeFormTransformationTD.html</anchorfile>
      <anchor>a52d82519e995d787b174ed9cc2c60406</anchor>
      <arglist>(Cofstream &amp;) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::LinearImageGradientFunction</name>
    <filename>classmirtk_1_1LinearImageGradientFunction.html</filename>
    <base>GenericLinearImageGradientFunction&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>LinearImageGradientFunction</name>
      <anchorfile>classmirtk_1_1LinearImageGradientFunction.html</anchorfile>
      <anchor>ab7de8a3ed4b473617eee9c97cb299a4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingInterval</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction.html</anchorfile>
      <anchor>a03911f5e6195371e631283ee38a24f18</anchor>
      <arglist>(double, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericLinearImageGradientFunction</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction.html</anchorfile>
      <anchor>a5b25b05a8fa9ebe7833689e98c5b0e2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction.html</anchorfile>
      <anchor>a2874e38c5c8a365284afd3ef1fd78adb</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetInside2D</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction.html</anchorfile>
      <anchor>a60b49f4d84dcebc59e13db7ede1b45ce</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetInside3D</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction.html</anchorfile>
      <anchor>a0d7441ab252794a7f1eb46132d0ab24f</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction.html</anchorfile>
      <anchor>af54140a988367be826a4df9d3784deef</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction.html</anchorfile>
      <anchor>ac9b2dc2e8e34c0ded13d5f125e11407c</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPaddingInside2D</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction.html</anchorfile>
      <anchor>abf4c1954bad5d79232ffa687d865092d</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>GradientType</type>
      <name>GetWithPaddingInside3D</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction.html</anchorfile>
      <anchor>a7aa087406ff098fb5a032122c162840e</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction.html</anchorfile>
      <anchor>ab46acc5ecf8236ec105342345013f5d9</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction.html</anchorfile>
      <anchor>ac93a33233b516c9b612634fd3bf6b606</anchor>
      <arglist>(bool=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericLinearImageGradientFunction</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction.html</anchorfile>
      <anchor>ad3024865da4ad1e0af5df242663a19b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GenericLinearInterpolateImageFunction&lt; BaseImage &gt;</type>
      <name>_ContinuousImage</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction.html</anchorfile>
      <anchor>aef382e80d52c3e4d44516831bc00e7ed</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::LinearImageGradientFunction2D</name>
    <filename>classmirtk_1_1LinearImageGradientFunction2D.html</filename>
    <base>GenericLinearImageGradientFunction2D&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>LinearImageGradientFunction2D</name>
      <anchorfile>classmirtk_1_1LinearImageGradientFunction2D.html</anchorfile>
      <anchor>a9de15923a68d21c19f62d09b6997b77c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericLinearImageGradientFunction2D</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction2D.html</anchorfile>
      <anchor>ae7cc605b5f6a6c62a67981d06380ad6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction2D.html</anchorfile>
      <anchor>a4769ab2531381292570f84ad70e223f9</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction2D.html</anchorfile>
      <anchor>a97e9e9b686340d916fb9d20fe4a59640</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::LinearImageGradientFunction3D</name>
    <filename>classmirtk_1_1LinearImageGradientFunction3D.html</filename>
    <base>GenericLinearImageGradientFunction3D&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>LinearImageGradientFunction3D</name>
      <anchorfile>classmirtk_1_1LinearImageGradientFunction3D.html</anchorfile>
      <anchor>a782df1420aff669697d6ecbaebe6755b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericLinearImageGradientFunction3D</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction3D.html</anchorfile>
      <anchor>a8451afee2dc3333956fadc36c8a1b1de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction3D.html</anchorfile>
      <anchor>add151e42f26b8ffd17dc55415de50be1</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GradientType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericLinearImageGradientFunction3D.html</anchorfile>
      <anchor>adcf6a15ddd845fd612411b99f9c8fc03</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::LinearInterpolateImageFunction</name>
    <filename>classmirtk_1_1LinearInterpolateImageFunction.html</filename>
    <base>GenericLinearInterpolateImageFunction&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>LinearInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1LinearInterpolateImageFunction.html</anchorfile>
      <anchor>a2bc417c99c76a37310b37ee787cf3cc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingInterval</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>af93dfa12a33f7bc66fe507aaef0aa6c5</anchor>
      <arglist>(double, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericLinearInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a5040a98cdd16e4fcb27b35649cda99d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a6ddb29881a99a84715895a75da8e7f33</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a11f3616e9db52101df15d41c1dd03735</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a28c3d04ca451f67a4ebd9e832aa47930</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a08f5efc877d71e08e2f94be03a28e156</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a73e5599e347924701f646533131a88b7</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a30a197c832965e5edea8c06f4fae84f7</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>ad2fa0ac8a8e8d00c6469060dca20f37c</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>ad0a93bf0aa8043f182ab7f5fce7d2724</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>af578884bf41870cd42a22b7365b1bd5b</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside2D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>aa9168da3d11e0c3b7042367e39f01030</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside3D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>ac14568e5ce580cb3e01fe54925a0db75</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside4D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a6d7eaf8efde7026071dc1dc57289e070</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a648e0bef0ca94751a75b174b2d2da79e</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>abf909c206c534a9fc3fc56e7c62029a1</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>aee6fcfe804fff7d29f0c4dd290fa76f2</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a5d3fa2a873aaca11c3e697779f385439</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a51e55034c449d1a28ef5b9116b449b17</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a6889990e2182c0e99eea63a6a8ce1b6f</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a2afc8e7275d0ea0c35b0b9c9b3f943a2</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a3794ac708d52b20ab9ce22e14dcd91ae</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>acba77a74c0ff0d63f78c5798171c49d8</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>ad6e16827903f04cf453a78e544e1e20b</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a0df5c59420960694e9cce4b5b5913bf6</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>a15df003416197ba2c4a2410a8ad237e3</anchor>
      <arglist>(bool=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericLinearInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction.html</anchorfile>
      <anchor>afe0463e1f4324ce69b5387a81d038a2c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::LinearInterpolateImageFunction2D</name>
    <filename>classmirtk_1_1LinearInterpolateImageFunction2D.html</filename>
    <base>GenericLinearInterpolateImageFunction2D&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>LinearInterpolateImageFunction2D</name>
      <anchorfile>classmirtk_1_1LinearInterpolateImageFunction2D.html</anchorfile>
      <anchor>ac8b5a3436293c176101cd58cc13d0b73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericLinearInterpolateImageFunction2D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction2D.html</anchorfile>
      <anchor>a144bcd54f3d26b27d7a0ac5782c5c237</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction2D.html</anchorfile>
      <anchor>afd05407040eb7c905b121937ed472e60</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction2D.html</anchorfile>
      <anchor>aac0bb9e672f8d3edc1958cc4ed833e0b</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction2D.html</anchorfile>
      <anchor>a31c7f8077b0e854db159cbadbf0cbc4d</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction2D.html</anchorfile>
      <anchor>a72941a37c25b1d7bea5098329ae5425a</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction2D.html</anchorfile>
      <anchor>ace9b49192f377ce38f679eeba1c8182f</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction2D.html</anchorfile>
      <anchor>aad65ef604782cc0b3e1dae4bd64bbb37</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction2D.html</anchorfile>
      <anchor>a9b3e13ea4355828c001fa873b1a7ea3e</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction2D.html</anchorfile>
      <anchor>a80e1e1a5992bf77fbb24f2af3521a20c</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::LinearInterpolateImageFunction3D</name>
    <filename>classmirtk_1_1LinearInterpolateImageFunction3D.html</filename>
    <base>GenericLinearInterpolateImageFunction3D&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>LinearInterpolateImageFunction3D</name>
      <anchorfile>classmirtk_1_1LinearInterpolateImageFunction3D.html</anchorfile>
      <anchor>ad1e0c236f34e83d3d43f7d33bb2314e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericLinearInterpolateImageFunction3D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction3D.html</anchorfile>
      <anchor>ad201627be31bb02600b103ee568c439b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction3D.html</anchorfile>
      <anchor>a75b900baf5ee4e8475b2dce1e4ff6504</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction3D.html</anchorfile>
      <anchor>afe84ee19e84a604b9df8e8750d045355</anchor>
      <arglist>(const TOtherImage *, double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction3D.html</anchorfile>
      <anchor>aa8a99c4d75ac4d681e9f376f3a8cf277</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction3D.html</anchorfile>
      <anchor>ae16a7ca87fc7103c5962643e28754d58</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction3D.html</anchorfile>
      <anchor>a64a9348ca18707a37150d45a03699be2</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction3D.html</anchorfile>
      <anchor>a8f39e7974ab5da40cc08540932dd19b1</anchor>
      <arglist>(const TOtherImage *, double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction3D.html</anchorfile>
      <anchor>a28884681f5db1f03008012ebfb517df6</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction3D.html</anchorfile>
      <anchor>af1f42f2aacd7ba553cd6034ef3ab8a50</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::LinearInterpolateImageFunction4D</name>
    <filename>classmirtk_1_1LinearInterpolateImageFunction4D.html</filename>
    <base>GenericLinearInterpolateImageFunction4D&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>LinearInterpolateImageFunction4D</name>
      <anchorfile>classmirtk_1_1LinearInterpolateImageFunction4D.html</anchorfile>
      <anchor>a87dcdfe6a72ed314436b9101b0602d65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericLinearInterpolateImageFunction4D</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction4D.html</anchorfile>
      <anchor>a836755ecfa0b515c9962e5694cb934b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction4D.html</anchorfile>
      <anchor>aed1bbf2a3383f132d7835c751eb97c66</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction4D.html</anchorfile>
      <anchor>a945cf6188399c345138d261aaebaec62</anchor>
      <arglist>(const TOtherImage *, double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction4D.html</anchorfile>
      <anchor>a1e0e5706055811977a6ceeef49aab5af</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction4D.html</anchorfile>
      <anchor>a8a31623cd8833a140769eaf4a2253147</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction4D.html</anchorfile>
      <anchor>a51f99c8972493ad484acf4967fb6bdcc</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction4D.html</anchorfile>
      <anchor>a6beb35c28b7246c12a279ac8b2f591f6</anchor>
      <arglist>(const TOtherImage *, double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction4D.html</anchorfile>
      <anchor>ac7ed789506e00ad70f09775eb4b0e115</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericLinearInterpolateImageFunction4D.html</anchorfile>
      <anchor>a2bfc8f367fdfe5f296e3c2396a0497d4</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::LinearTetrahedralVolumeParameterizer</name>
    <filename>classmirtk_1_1LinearTetrahedralVolumeParameterizer.html</filename>
    <base>mirtk::TetrahedralVolumeParameterizer</base>
    <member kind="function" virtualness="pure">
      <type>virtual Matrix3x3</type>
      <name>GetWeight</name>
      <anchorfile>classmirtk_1_1LinearTetrahedralVolumeParameterizer.html</anchorfile>
      <anchor>a9e7dba8f28222046c9a4cafa69fddf3c</anchor>
      <arglist>(vtkIdType cellId, const double v0[3], const double v1[3], const double v2[3], const double v3[3], double volume) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::LineSearch</name>
    <filename>classmirtk_1_1LineSearch.html</filename>
    <base>mirtk::LocalOptimizer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1LineSearch.html</anchorfile>
      <anchor>a7020388fbe63a7536f67d5b62a9f2aaa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1LineSearch.html</anchorfile>
      <anchor>a72524d22a50d217644c9dcb6cc6cfd43</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::LineSearchStep</name>
    <filename>structmirtk_1_1LineSearchStep.html</filename>
    <member kind="variable">
      <type>double</type>
      <name>_Current</name>
      <anchorfile>structmirtk_1_1LineSearchStep.html</anchorfile>
      <anchor>a14fec566c2a8b2deaa9da18b9608d108</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_Delta</name>
      <anchorfile>structmirtk_1_1LineSearchStep.html</anchorfile>
      <anchor>a48b4d208078b95f357718c766f110dc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double *</type>
      <name>_Direction</name>
      <anchorfile>structmirtk_1_1LineSearchStep.html</anchorfile>
      <anchor>a65c55abd4ac37438d73f8f33ebd7ea41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>_Info</name>
      <anchorfile>structmirtk_1_1LineSearchStep.html</anchorfile>
      <anchor>a3d77674b9d0402b35fbb78a12a2c1daf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_Length</name>
      <anchorfile>structmirtk_1_1LineSearchStep.html</anchorfile>
      <anchor>a33769872c41178d3040c8354942be806</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_MaxLength</name>
      <anchorfile>structmirtk_1_1LineSearchStep.html</anchorfile>
      <anchor>a2bb7dcdd3f372b646ea4c406f460f44b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_MinLength</name>
      <anchorfile>structmirtk_1_1LineSearchStep.html</anchorfile>
      <anchor>a90119221f6b58ea4e6eb4edbb318f6a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_TotalLength</name>
      <anchorfile>structmirtk_1_1LineSearchStep.html</anchorfile>
      <anchor>a562ca7480533ac486b8c2baa3a35ea3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_Unit</name>
      <anchorfile>structmirtk_1_1LineSearchStep.html</anchorfile>
      <anchor>a9c62cd83783fe182405ba605dc8d0b06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_Value</name>
      <anchorfile>structmirtk_1_1LineSearchStep.html</anchorfile>
      <anchor>a10962d3af9a3b3dfdda4074d43a44fe5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::LocalOptimizer</name>
    <filename>classmirtk_1_1LocalOptimizer.html</filename>
    <base>mirtk::Observable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1LocalOptimizer.html</anchorfile>
      <anchor>a78900353998cea4e4805a7cd6f40bb4b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1LocalOptimizer.html</anchorfile>
      <anchor>a506eb38f1310bc2c63ae8d15e5a4018a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1LocalOptimizer.html</anchorfile>
      <anchor>a58805bb5515965c01545641b807e8ffe</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::LogJacobianConstraint</name>
    <filename>classmirtk_1_1LogJacobianConstraint.html</filename>
    <base>mirtk::JacobianConstraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Jacobian</name>
      <anchorfile>classmirtk_1_1LogJacobianConstraint.html</anchorfile>
      <anchor>ad9922704190950886bacd0346044c497</anchor>
      <arglist>(const FreeFormTransformation *ffd, double x, double y, double z, double t, Matrix &amp;adj) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogJacobianConstraint</name>
      <anchorfile>classmirtk_1_1LogJacobianConstraint.html</anchorfile>
      <anchor>acb4f0e938d067414bd52eb117ec5b41f</anchor>
      <arglist>(const char *=&quot;&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LogJacobianConstraint</name>
      <anchorfile>classmirtk_1_1LogJacobianConstraint.html</anchorfile>
      <anchor>a8cdc8b359d86b4f5c54022d7478a7260</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1LogJacobianConstraint.html</anchorfile>
      <anchor>ae1f0b6fc2def50580e7c130cfcb769ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateGradient</name>
      <anchorfile>classmirtk_1_1LogJacobianConstraint.html</anchorfile>
      <anchor>a30312b18f35d239eae0723fafb0aed5c</anchor>
      <arglist>(double *, double, double)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::Matlab</name>
    <filename>classmirtk_1_1Matlab.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1Matlab.html</anchorfile>
      <anchor>aa1e68ab4215da3489321b9d1fea242ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>InitializeApplication</name>
      <anchorfile>classmirtk_1_1Matlab.html</anchorfile>
      <anchor>a7c6fa1a939361f13320110dd79df961a</anchor>
      <arglist>(const char **options, int count)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matlab &amp;</type>
      <name>Instance</name>
      <anchorfile>classmirtk_1_1Matlab.html</anchorfile>
      <anchor>a476d968ae7ea68f7cd8d5c7a7c13c0be</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::Matrix</name>
    <filename>classmirtk_1_1Matrix.html</filename>
    <base>mirtk::Object</base>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>AddToCol</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a9a2a3f5c8213dce30224a54df6d36466</anchor>
      <arglist>(int, double)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>AddToRow</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a5369401b57282d060f8634a9889ca4cc</anchor>
      <arglist>(int, double)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>Adjugate</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>ab3c79e966433b6fbda8ac1aca844261e</anchor>
      <arglist>(double &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a19d96eee7c17817cf5721bd0f5986a4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ColIndex</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>abe53fb5cfe90968d4927ca09c90797c3</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ColMax</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>abccf0e252a317ee8caf7e14bf9680fff</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ColMean</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>aeae56fd3e852b5ab3c08a3feb0e39899</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ColMin</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a4dd0caeaeda128a344ae90fabfb210c0</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ColRange</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>ab4a7536dadc7eed1d783e6c5f9de7d79</anchor>
      <arglist>(int, double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Cols</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a5b043e13dff85d068d9daf9ca904c4a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ColStd</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>ad03914a14f206313d3422a1c6c8f3eb7</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ColSum</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>afe35fe3031d4bb599983a44833c5ef57</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ColVar</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a632d0e18c549a4484e1fc643327036d2</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Det</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>aeef85e521d050c69146ccdcd4df4ce04</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Det3x3</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a9803b58267bb0f04144f83c663da2d6e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Eigenvalues</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a1036b9d48a20e81fa7722486f796c942</anchor>
      <arglist>(Matrix &amp;, Vector &amp;, Matrix &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>Exp</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>acd80a1b0448f4da710b3e516ad7b635f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a370d5c847aab90c967069ad75bfadba6</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a0e2e1463fdb2d7ec0b8c239e78b9ae3c</anchor>
      <arglist>(int, int) const </arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>GetPointerToElements</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a0902b5d643c6b1537c8c9bad9d107c70</anchor>
      <arglist>(int r=0, int c=0)</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>GetPointerToElements</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a3a30174dc35bee135634109b24ee33e2</anchor>
      <arglist>(int r=0, int c=0) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>Ident</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a4aa863132b24495abaae231d9c1d2f06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Import</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a83465e033cf9fb8db499377bd9c2eca5</anchor>
      <arglist>(const char *, int, int)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Index</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>ad8acb9c461d5a7e4b4cb9df6747f30f3</anchor>
      <arglist>(int, int) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a236e5759e02324e2f51bda03ef37ef6a</anchor>
      <arglist>(int, int=-1, double *=NULL)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>Inverse</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a247dcb72c405058a3e4d85968b7335cc</anchor>
      <arglist>(bool use_svd_if_singular=true) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>Invert</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a80c21f88a2f466a07d55e73f621f3cf0</anchor>
      <arglist>(bool use_svd_if_singular=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsDiagonalizable</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>ab23b655b02fa0328a071eaee92d2a703</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsIdentity</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a74f447603293ff927692fccfd6a60469</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSquare</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a63b6ec7adcabde57c9c01e219e43d4b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSymmetric</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a6a6510e746c1851cf524d2b325aa242e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>LeastSquaresFit</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>af6e86938d5933719e5c78937b78867b3</anchor>
      <arglist>(const Vector &amp;, Vector &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>Log</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>af03fcb54188fb2b77375587947c60472</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>LU</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a4e8115b63e25c8099480e0f1deaf42f3</anchor>
      <arglist>(Matrix &amp;, Matrix &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MakeSymmetric</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a87d274e96a50b91139ae0fc8f4f65b88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a5ad40e4a1e409d4af6efb49e55d19100</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a8d0d7daf3d627206cedd8cc7a24deeae</anchor>
      <arglist>(int, int=-1, double *=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a8f1abe1dfbf26a63f0f5557da5c942d2</anchor>
      <arglist>(const Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>ab0e39b381e484f62c8b6839b2a99c3c3</anchor>
      <arglist>(const PointSet &amp;, bool twoD=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a725aa92939456f577f31bc21355c1118</anchor>
      <arglist>(const Matrix &amp;)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Norm</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>aa198fe0f796cb3446385266e609de7bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfElements</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>af156ab0eb4a1073aedeb64945bacd10b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>operator!</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a0eb93e9c697abdbae6aa7f0c26b39f6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>aacc8fbe3c5cdbc51991cf38fc41b6613</anchor>
      <arglist>(const Matrix &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>operator!=</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a0bc431ba479cd4db0f5896c4be2956d4</anchor>
      <arglist>(double) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a5f19f5f06950f607bfe36667aae68b17</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>ad44c980278712ad492d63bae13dae889</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a3a74bd76c5d5238c69de737885f58073</anchor>
      <arglist>(int, int)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>ad968c9d8bc29cde1c4dfe757970364c2</anchor>
      <arglist>(int, int) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a03323a7c61a7e7a223ed4fd9a73e4031</anchor>
      <arglist>(int, int, int, int) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a53003da583e478e70428377f5003464e</anchor>
      <arglist>(Matrix &amp;, int, int)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a472ab47f650f4d0f38eadce3d4f0b0f0</anchor>
      <arglist>(const double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a9a436803e2ff5a9f466e34d184716175</anchor>
      <arglist>(const Vector &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a60c827355e5086a3c83cbfbf36d90506</anchor>
      <arglist>(const Matrix &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a7448e9ddf6b4a9e0e829fe9876f28f98</anchor>
      <arglist>(const double &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a55274ccc16566d8a34e64e5f90e11b17</anchor>
      <arglist>(const Matrix &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>operator+</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a0944b908d4e5254dccd95be12a2710c6</anchor>
      <arglist>(const double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>operator+</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a65bed2af647b77a07e697a8c095bb11d</anchor>
      <arglist>(const Matrix &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a4428f18a5a6170e14b5fe1b7f7debdcf</anchor>
      <arglist>(const double &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a323a1075b382409409019d3e2ea2e030</anchor>
      <arglist>(const Matrix &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>operator-</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>ad3f47bdfaea0476250608a321686e8a4</anchor>
      <arglist>(const double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>operator-</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a4971a5be77bcd3f9403001ae9f3283be</anchor>
      <arglist>(const Matrix &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a753b8d77497dd64db616a4db30bbd165</anchor>
      <arglist>(const double &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>ac8509e80fa5b4662fcc9015b3820e211</anchor>
      <arglist>(const Matrix &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>operator/</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>af97c0f7899b7b8d76e01a7669ab483b6</anchor>
      <arglist>(const double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a03cd86215c8d0c5f524a4ebc91c8b2c4</anchor>
      <arglist>(const double &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>operator&lt;</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a6fa2f5193f2b6ea0274d091048f2894c</anchor>
      <arglist>(double) const </arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>operator&lt;=</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>ae2255fbc0e44a5c095ed43a6b8dbb676</anchor>
      <arglist>(double) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>aad7107883575397172f4eef416ef35aa</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a5f8156e109580ceebabd730dde2a9548</anchor>
      <arglist>(const Matrix &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a78c6eb1d1c8c30e5f44b4aea389dba9b</anchor>
      <arglist>(const double &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a85c260e73f387ca58809e0416660b7e2</anchor>
      <arglist>(const Matrix &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>operator==</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>ac2f1e80c259ef9631f0eb02946d1476a</anchor>
      <arglist>(double) const </arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>operator&gt;</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a74a262f3edb55f87c844b15732df0fa9</anchor>
      <arglist>(double) const </arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>operator&gt;=</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>addd0f8d6ae6f94ec56c5a5ab2d193839</anchor>
      <arglist>(double) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>operator~</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a47166ef325d75a89c58b496c5387be34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>PermuteCols</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a7a78451eb36a61ed4d9ddbe77db8da18</anchor>
      <arglist>(Array&lt; int &gt;)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>PermuteRows</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a28410a0825de156febd2172c23d7e6e5</anchor>
      <arglist>(Array&lt; int &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a7c7294120fbb7cdb63c7d8d83892ccf8</anchor>
      <arglist>(Indent=0) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>PseudoInverse</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a281d9cb3a596969919ff470075474aeb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>PseudoInvert</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a4328945194c022af6805475796a1ceec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>add86d8091cbc94f64b0e7345ba05de7c</anchor>
      <arglist>(int, double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>adb95dbfe02012a5a700fc8e842b8b98e</anchor>
      <arglist>(int, int, double)</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>RawPointer</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>af31415a4bc51832f61801df2b14d205e</anchor>
      <arglist>(int r=0, int c=0)</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>RawPointer</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a2a4c16691905e282192f064145ec2dbb</anchor>
      <arglist>(int r=0, int c=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>af85bc56a86e0e73e47ecd8779a92eb9e</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Resize</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>aea9ac684d6f96a9c71adf4f460f3a792</anchor>
      <arglist>(int, int=-1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>RowIndex</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a2f0a32463aed58a385ab3483ed50362e</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RowMax</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>ad6364a7c8aee7c766dcc6f9d8dd7d206</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RowMean</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a0d72da0098b530696152275fd038b961</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RowMin</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a7d17df43f89643e48b51a0c5c6c9faa6</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RowRange</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a7998cd606462d8e22cdcf5e7a8975e23</anchor>
      <arglist>(int, double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Rows</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a0965aa7b3b6f3691371ca889003b749c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RowStd</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>ad34e2388dd07803486c92857129b1439</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RowSum</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a7682d49b10eff7ef5873da2877d9b7f2</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RowVar</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a653db0c8b409b54fc1da01a7f2ce561f</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>ScaleCol</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a98e5f2044291bf61d7087f8fd6852202</anchor>
      <arglist>(int, double)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>ScaleRow</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a03993657eb17e367a4d8606a84c0785b</anchor>
      <arglist>(int, double)</arglist>
    </member>
    <member kind="function">
      <type>Pair&lt; int, int &gt;</type>
      <name>Size</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>ae6335c8cb76721af8bceea36b5bf07a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>Sqrt</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>aa1d1cea953e3108c2edc752d2b94fa4a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SubIndex</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a94e80094a21df164d8e8ca528a006fab</anchor>
      <arglist>(int, int &amp;, int &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Pair&lt; int, int &gt;</type>
      <name>SubIndex</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>ac064d4aa38d64b59a057a1aa336b4b80</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SVD</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>afeef5f0e815a9d2a1492d02317e21a27</anchor>
      <arglist>(Matrix &amp;, Vector &amp;, Matrix &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>SVDInverse</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>ab5ee81d2924080a12f351b96c0f4aa9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>SVDInvert</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a2d7f28fce77be600f165a3d879158ad3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SymmetricEigen</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a4b690c7df6b5e4be5323593323a9f67a</anchor>
      <arglist>(Matrix &amp;, Vector &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Trace</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a18a65419ac9c2903878785dcdad06283</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>Transpose</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>abfc05000891edb7422a04fcb7a2a0c88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>Transposed</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>adff8d78b311f380024c81a2b52a9ae21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a3c26f2c5320dc944df1be2692c455ea9</anchor>
      <arglist>(const char *) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteMAT</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a3d1d3e9cb681ffbda37fb1ecdee3aeef</anchor>
      <arglist>(const char *, const char *=&quot;A&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Zero</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a6de0073685a9a94e19fc2a1e8d3a973d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Matrix</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>ad66bed92aea3494e44378811f4271014</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_cols</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>abac6b69cdd21059d5003c1b3385d7b1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double **</type>
      <name>_matrix</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a4d81da91f7b46e540b2d2a9209bda586</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_owner</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>ac80a999297174c96602ea8f15f1a1ea5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_rows</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a82abc2494d7e5589e8f8bbdf3384b7c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a2f42038170939f5026438222e10d48a8</anchor>
      <arglist>(ostream &amp;, const Matrix &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend Cofstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>a447021117dc27a7c0887303b6b453c03</anchor>
      <arglist>(Cofstream &amp;, const Matrix &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>ac93b3623c6195dcb8289a3a9ff68b5f1</anchor>
      <arglist>(istream &amp;, Matrix &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend Cifstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classmirtk_1_1Matrix.html</anchorfile>
      <anchor>ac631a9fb9772ed7d7e137b4ebd7e8f65</anchor>
      <arglist>(Cifstream &amp;, Matrix &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::MaxStepLineSearch</name>
    <filename>classmirtk_1_1MaxStepLineSearch.html</filename>
    <base>mirtk::InexactLineSearch</base>
    <member kind="function">
      <type></type>
      <name>MaxStepLineSearch</name>
      <anchorfile>classmirtk_1_1MaxStepLineSearch.html</anchorfile>
      <anchor>ae4b1d2f96b1479537da22b02c03f5304</anchor>
      <arglist>(ObjectiveFunction *=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MaxStepLineSearch</name>
      <anchorfile>classmirtk_1_1MaxStepLineSearch.html</anchorfile>
      <anchor>a5845d73a39b3a045f2edf8c3c7da1d84</anchor>
      <arglist>(const MaxStepLineSearch &amp;)</arglist>
    </member>
    <member kind="function">
      <type>MaxStepLineSearch &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1MaxStepLineSearch.html</anchorfile>
      <anchor>ab596cbcbeafe3990b650d2133e37f5b5</anchor>
      <arglist>(const MaxStepLineSearch &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1MaxStepLineSearch.html</anchorfile>
      <anchor>a939909359accf3fdcb323d2856901e4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MaxStepLineSearch</name>
      <anchorfile>classmirtk_1_1MaxStepLineSearch.html</anchorfile>
      <anchor>a026f654c411e1610637aa5c385acee3d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::MetricDistortion</name>
    <filename>classmirtk_1_1MetricDistortion.html</filename>
    <base>mirtk::SurfaceConstraint</base>
    <member kind="typedef">
      <type>Array&lt; NodeDistances &gt;</type>
      <name>DistancesArray</name>
      <anchorfile>classmirtk_1_1MetricDistortion.html</anchorfile>
      <anchor>a24f4d35fd66e7b7d9321fb8879fe25d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyAttributes</name>
      <anchorfile>classmirtk_1_1MetricDistortion.html</anchorfile>
      <anchor>a010cb57ecb3157c74e483edeb15c12d8</anchor>
      <arglist>(const MetricDistortion &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1MetricDistortion.html</anchorfile>
      <anchor>a2283e3f45038feb1f827b4b010c93c79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MetricDistortion</name>
      <anchorfile>classmirtk_1_1MetricDistortion.html</anchorfile>
      <anchor>ab551774ccb6ddc325e30b65ee360a2ac</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MetricDistortion</name>
      <anchorfile>classmirtk_1_1MetricDistortion.html</anchorfile>
      <anchor>a82415a8094d9dc018ecc0bcad6d7205b</anchor>
      <arglist>(const MetricDistortion &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1MetricDistortion.html</anchorfile>
      <anchor>a3f57ac4f35f52f9e1f085385b4e57bb2</anchor>
      <arglist>(double, InitialArea)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1MetricDistortion.html</anchorfile>
      <anchor>a69e7447b5ef4e67caa766d2872faccde</anchor>
      <arglist>(Array&lt; DistancesArray &gt;, Distances)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1MetricDistortion.html</anchorfile>
      <anchor>aad9d4588899d4304a08a874ddabbc11c</anchor>
      <arglist>(int, Radius)</arglist>
    </member>
    <member kind="function">
      <type>MetricDistortion &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1MetricDistortion.html</anchorfile>
      <anchor>a3b57eda74948ba76f1655399971820b7</anchor>
      <arglist>(const MetricDistortion &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1MetricDistortion.html</anchorfile>
      <anchor>a9894bea8c2096402660ac01246855234</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Reinitialize</name>
      <anchorfile>classmirtk_1_1MetricDistortion.html</anchorfile>
      <anchor>a717b713f4c56a46d7f617d1dfc426882</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1MetricDistortion.html</anchorfile>
      <anchor>ac1951988dbb2bea8c1ba1acce46fff2b</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MetricDistortion</name>
      <anchorfile>classmirtk_1_1MetricDistortion.html</anchorfile>
      <anchor>acf257e03befb41d1985f9f3f30b9966e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1MetricDistortion.html</anchorfile>
      <anchor>a7c3ccaf50322c8841b7928f70e3d3ec8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateGradient</name>
      <anchorfile>classmirtk_1_1MetricDistortion.html</anchorfile>
      <anchor>a02d976e537c2e559b41b766ed68dd1a1</anchor>
      <arglist>(double *, double, double)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Init</name>
      <anchorfile>classmirtk_1_1MetricDistortion.html</anchorfile>
      <anchor>aca3c1297fa426cfa5e9870385cae8532</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetWithoutPrefix</name>
      <anchorfile>classmirtk_1_1MetricDistortion.html</anchorfile>
      <anchor>ac1bba26401f24dcbd99be40936306858</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::MinActiveStoppingCriterion</name>
    <filename>classmirtk_1_1MinActiveStoppingCriterion.html</filename>
    <base>mirtk::StoppingCriterion</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Fulfilled</name>
      <anchorfile>classmirtk_1_1MinActiveStoppingCriterion.html</anchorfile>
      <anchor>a4169478d90763712e020def4fb87e013</anchor>
      <arglist>(int iter, double prev, double value, const double *delta)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1MinActiveStoppingCriterion.html</anchorfile>
      <anchor>a2dcd951a3961457cf09d112752666087</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MinActiveStoppingCriterion</name>
      <anchorfile>classmirtk_1_1MinActiveStoppingCriterion.html</anchorfile>
      <anchor>aad18e2dfe1cbab4cf5bc39fd03cf6427</anchor>
      <arglist>(const ObjectiveFunction *=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MinActiveStoppingCriterion</name>
      <anchorfile>classmirtk_1_1MinActiveStoppingCriterion.html</anchorfile>
      <anchor>aa18a6474b0ec2ff66bda6b3e4809cba3</anchor>
      <arglist>(const MinActiveStoppingCriterion &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StoppingCriterion *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1MinActiveStoppingCriterion.html</anchorfile>
      <anchor>acdd38ddd53c886e1376152bb208d5b0d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MinActiveStoppingCriterion &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1MinActiveStoppingCriterion.html</anchorfile>
      <anchor>aaec5b802008ec8584ed5ff5cbe35bd94</anchor>
      <arglist>(const MinActiveStoppingCriterion &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1MinActiveStoppingCriterion.html</anchorfile>
      <anchor>adc9120f4481d9dcd1e3cd897e2b3a18e</anchor>
      <arglist>(ostream &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MinActiveStoppingCriterion</name>
      <anchorfile>classmirtk_1_1MinActiveStoppingCriterion.html</anchorfile>
      <anchor>a9922ecab5bd556a04b983d8189b56782</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::MinJacobianConstraint</name>
    <filename>classmirtk_1_1MinJacobianConstraint.html</filename>
    <base>mirtk::JacobianConstraint</base>
    <member kind="function">
      <type></type>
      <name>MinJacobianConstraint</name>
      <anchorfile>classmirtk_1_1MinJacobianConstraint.html</anchorfile>
      <anchor>ada79f4134a975e465a73ff6b754cbf07</anchor>
      <arglist>(const char *=&quot;&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1MinJacobianConstraint.html</anchorfile>
      <anchor>ac6582edcf2fb829d3a6988f54780476a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MinJacobianConstraint</name>
      <anchorfile>classmirtk_1_1MinJacobianConstraint.html</anchorfile>
      <anchor>a17b5e4445522e44e2380b96f56e03bbf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1MinJacobianConstraint.html</anchorfile>
      <anchor>aa1ab9faa4c3866b215a1b378e2c68228</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateGradient</name>
      <anchorfile>classmirtk_1_1MinJacobianConstraint.html</anchorfile>
      <anchor>aad9bdc6355ba7eb968bd27e442efd4a5</anchor>
      <arglist>(double *, double, double)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetWithoutPrefix</name>
      <anchorfile>classmirtk_1_1MinJacobianConstraint.html</anchorfile>
      <anchor>a20886d9d63521df84afd067cd104e908</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::MirrorExtrapolateImageFunction</name>
    <filename>classmirtk_1_1MirrorExtrapolateImageFunction.html</filename>
    <base>GenericMirrorExtrapolateImageFunction&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>MirrorExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1MirrorExtrapolateImageFunction.html</anchorfile>
      <anchor>affb970cc7c358c3449b0c9423afe608f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MirrorExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1MirrorExtrapolateImageFunction.html</anchorfile>
      <anchor>a2c3c5c06d5826d74c4b895e294b8ec48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericMirrorExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericMirrorExtrapolateImageFunction.html</anchorfile>
      <anchor>ae57d891938041c93ba532e6bcba03ac9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>TransformIndex</name>
      <anchorfile>classmirtk_1_1GenericMirrorExtrapolateImageFunction.html</anchorfile>
      <anchor>a285e136381d8f0ed3ecb5c5ad51ae8c5</anchor>
      <arglist>(int &amp;index, int max) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericMirrorExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericMirrorExtrapolateImageFunction.html</anchorfile>
      <anchor>af18263a6b0fe90a8afcba48219537485</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a58718aba89f6b534eb7dcec0428ffb17</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>ae8aacac9b05741b0e0aa1e17e1903e70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsForeground</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a710ffd07690440611527e950f90e64f0</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Transform</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a994f47f20686636e472b507c4ec6d266</anchor>
      <arglist>(int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Transform</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a723968f24927bfc1d198e0894b6f248d</anchor>
      <arglist>(int &amp;, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Transform</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a3114e8641541e355eae750e255366c64</anchor>
      <arglist>(int &amp;, int &amp;, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>TransformT</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>adcae5962f85d5d1d232a80bf16e8a563</anchor>
      <arglist>(int &amp;l) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>TransformT</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a278496ea349ef2c12120938c04ee1472</anchor>
      <arglist>(int &amp;l, int c) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TransformX</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>aa6436d31ba8f32a4d7cee4adcdadae0a</anchor>
      <arglist>(int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TransformX</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a3b6cfcf14d8ab306143c0f06ee826e73</anchor>
      <arglist>(int &amp;, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TransformY</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a26e7e917badec85b78fa864bbd1b5b33</anchor>
      <arglist>(int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TransformY</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a13fc05469115fa1e2d103e3cfad14f2f</anchor>
      <arglist>(int &amp;, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TransformZ</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a6c806288dc11f892a14a6d89a1cbf833</anchor>
      <arglist>(int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TransformZ</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a6dcc9f60087b314c93bece04b945f056</anchor>
      <arglist>(int &amp;, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IndexExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a26674588f01f2a3b9f80114a0d2d6b3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>BaseImage</type>
      <name>ImageType</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a1868c1fea95c1243173b429e891a232f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImageType::RealType</type>
      <name>RealType</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a138ca258a1a77f09baf39d4e02751b7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImageType::VoxelType</type>
      <name>VoxelType</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a2cc6d24e4ab60fa2f2c99e13a6b52a72</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Apply</name>
      <anchorfile>classmirtk_1_1GenericMirrorExtrapolateImageFunction.html</anchorfile>
      <anchor>afc91b084028ef7b4b40fe02c8b02095f</anchor>
      <arglist>(int &amp;index, int max)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IndexExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>ad436529ab7a2a53fefa652bcb6d7669a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_tmax</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a98c67188327d04f09a7f9d334a04024b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_xmax</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>aa138da4590f6d6c6a35d0907c1f97efd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_ymax</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a1f6705775ba8ae4b8342bb155b239474</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_zmax</name>
      <anchorfile>classmirtk_1_1IndexExtrapolateImageFunction.html</anchorfile>
      <anchor>a95b991eb6c2c5e1dd29e82a8b0caa7cd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::MultiLevelFreeFormTransformation</name>
    <filename>classmirtk_1_1MultiLevelFreeFormTransformation.html</filename>
    <base>mirtk::MultiLevelTransformation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Approximate</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>a8040c3444817cc15885d73b2af5a38eb</anchor>
      <arglist>(const ImageAttributes &amp;, double *, double *, double *, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Approximate</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>a0f7a5e293d85bb37d13ab7b2bce4b8e1</anchor>
      <arglist>(const double *, const double *, const double *, double *, double *, double *, int, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Approximate</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>aa2937cf736911941a8ad6a4bc64eecbe</anchor>
      <arglist>(const double *, const double *, const double *, const double *, double *, double *, double *, int, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApproximateAsNew</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>abdb0f137a592ca29a0a6b5890bab2ca3</anchor>
      <arglist>(const ImageAttributes &amp;, double *, double *, double *, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApproximateAsNew</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>ae4cbfd7940ecf3fed4c8169447caf32a</anchor>
      <arglist>(const double *, const double *, const double *, double *, double *, double *, int, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApproximateAsNew</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>a9df08d3966ea04995581cdefbc3fef8a</anchor>
      <arglist>(const double *, const double *, const double *, const double *, double *, double *, double *, int, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateDOFs</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>ae3852d5e3431b6ab865f25c930d44a7a</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, const double *, int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateDOFsGradient</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>a70742ef2cbbce84a66b2b911d2e4c222</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, const double *, int, double *, double=1.0) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Bending</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>aca380cb4d1268da05c5db27e8a1bfa89</anchor>
      <arglist>(double, double, double) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>CanModifyDisplacement</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>ae09ec38266e3bd9fb6742e8f8608a683</anchor>
      <arglist>(int=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>CombineLocalTransformation</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>ab70887eff89c74f3589ed48d6ced56d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DeriveJacobianWrtDOF</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>a3039757db7694201b51ef4db04798617</anchor>
      <arglist>(Matrix &amp;, int, double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Displacement</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>a3301ce04b0c4fb5a505aa2eb9e2eb89c</anchor>
      <arglist>(int, int, GenericImage&lt; double &gt; &amp;, double, double=-1, const WorldCoordsImage *=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Displacement</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>a3ef58a1998c787a88817aad653e82492</anchor>
      <arglist>(int, int, GenericImage&lt; float &gt; &amp;, double, double=-1, const WorldCoordsImage *=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DisplacementAfterDOFChange</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>a4eb5d34ab421876be1e60a96e329de2d</anchor>
      <arglist>(int dof, double dv, GenericImage&lt; double &gt; &amp;dx, double t, double t0=-1, const WorldCoordsImage *i2w=NULL) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DOFBoundingBox</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>a45907e056cc129a0548de2b27c3ea381</anchor>
      <arglist>(const Image *, int, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, int &amp;, double=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Hessian</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>aa9633c5c209d0e1238fec42c843215a6</anchor>
      <arglist>(int, int, Matrix[3], double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InverseDisplacement</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>aecb9833a09956bb02057b596c3b118ce</anchor>
      <arglist>(int, int, GenericImage&lt; double &gt; &amp;, double, double=-1, const WorldCoordsImage *=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InverseDisplacement</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>a473e97495e4270a63c9857ab52c0fbc1</anchor>
      <arglist>(int, int, GenericImage&lt; float &gt; &amp;, double, double=-1, const WorldCoordsImage *=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Jacobian</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>a0afb755c93b74e6ce172848037e55907</anchor>
      <arglist>(int, int, Matrix &amp;, double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalTransform</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>a6a9cd372c5c74f26bd3f38a14d33cb7d</anchor>
      <arglist>(int, int, double &amp;, double &amp;, double &amp;, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>MergeGlobalIntoLocalDisplacement</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>ae520b325690f43e1521801697a0d0b06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiLevelFreeFormTransformation</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>aa08d9e777e067d0a01b1ae40ec6f99d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiLevelFreeFormTransformation</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>a52dc11360a457ca5bb1d1a0509be03f0</anchor>
      <arglist>(const RigidTransformation &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiLevelFreeFormTransformation</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>afdeddcd52a2701c686ea1582372d3b14</anchor>
      <arglist>(const AffineTransformation &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiLevelFreeFormTransformation</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>ae0aec3a849686806715497f561e12dbc</anchor>
      <arglist>(const MultiLevelFreeFormTransformation &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>afaa57521b69191dcf7d2ce7a8875d8b0</anchor>
      <arglist>(const GenericImage&lt; double &gt; *, double *, const WorldCoordsImage *=NULL, const WorldCoordsImage *=NULL, double=-1, double=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>af5bef8ff1040480e2141b4e10da1c463</anchor>
      <arglist>(const PointSet &amp;, const Vector3D&lt; double &gt; *, double *, double=0, double=-1, double=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>ab845fd26e0c5b360d0c2114ebac13e8f</anchor>
      <arglist>(Indent=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Transform</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>a46a789ac4be4254b1079100ed8c596c6</anchor>
      <arglist>(int, int, double &amp;, double &amp;, double &amp;, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MultiLevelFreeFormTransformation</name>
      <anchorfile>classmirtk_1_1MultiLevelFreeFormTransformation.html</anchorfile>
      <anchor>a1b702978faa7b52301a648643e06c237</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Clear</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a0e97afed882d18fbf5ca75075cba1cbb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>acf1a2381037802992c9b8bfba73d801b</anchor>
      <arglist>(const Transformation *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Inverse</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a483988c0f0d2ba947766a5c2b33bba44</anchor>
      <arglist>(int, int, double &amp;, double &amp;, double &amp;, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsIdentity</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a1a26ee11b99c0edd64b0ab32500efc62</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Reset</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a215db9805de6c4079be717f15c0023eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>CheckTransformation</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>ac0cc26868afd1cdebc4d27e634442130</anchor>
      <arglist>(FreeFormTransformation *) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Cifstream &amp;</type>
      <name>ReadDOFs</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a69b861e60f570c4f2035a194099ed97a</anchor>
      <arglist>(Cifstream &amp;, TransformationType)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Cofstream &amp;</type>
      <name>WriteDOFs</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>ae57c3361b7326b0608a47bd7e44d088c</anchor>
      <arglist>(Cofstream &amp;) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::MultiLevelStationaryVelocityTransformation</name>
    <filename>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</filename>
    <base>mirtk::MultiLevelTransformation</base>
    <member kind="function">
      <type>BSplineFreeFormTransformationSV *</type>
      <name>ActiveSVFFD</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a11704f35c22c9f1147f19ee815baa476</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BSplineFreeFormTransformationSV *</type>
      <name>ActiveSVFFD</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a90c4e9f56c8c6692ccae1f14fb4fe087</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Add</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>acdbac73d89d22d0bc65da8ef851925f8</anchor>
      <arglist>(const DOFValue *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>CombineLocalTransformation</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>ab4afbeb478738987297265c2ce84ff1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Displacement</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>ae5dc0d9d59d0c4d18675d9a59a40496d</anchor>
      <arglist>(int, int, GenericImage&lt; double &gt; &amp;, double, double=1, const WorldCoordsImage *=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Displacement</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>ac3037b88212b143b4188af85ba7d882e</anchor>
      <arglist>(int, int, GenericImage&lt; float &gt; &amp;, double, double=1, const WorldCoordsImage *=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>DOFGradientNorm</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>aa552fa244f57a116a888ee8d48a8a2d1</anchor>
      <arglist>(const double *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a94c95f857d3a462d2f510edf61556a3c</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a3b2aa2dd52e02be2b1f2479d4ac9867d</anchor>
      <arglist>(DOFValue *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DOFStatus</type>
      <name>GetStatus</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a3533b94eb467377b357aa682514a8058</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Inverse</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a43d58d4df85d31dc66a78e7066af7971</anchor>
      <arglist>(int, int, double &amp;, double &amp;, double &amp;, double=0, double=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InverseDisplacement</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a6054c3f00360c54e3bdc290f703f7a53</anchor>
      <arglist>(int, int, GenericImage&lt; double &gt; &amp;, double, double=1, const WorldCoordsImage *=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InverseDisplacement</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a3303cfde96d666fde94bd1f8fcc2ac9a</anchor>
      <arglist>(int, int, GenericImage&lt; float &gt; &amp;, double, double=1, const WorldCoordsImage *=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Invert</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a1f61c2b1642eb922bfe8c703b7ec50ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>MergeGlobalIntoLocalDisplacement</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a24f00cdf9574157db04d59be879c1e51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiLevelStationaryVelocityTransformation</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>ac2050a88c1abfe843b2c8a238cf03d6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiLevelStationaryVelocityTransformation</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a1b1324c1470e719f7d7dccf73498efb0</anchor>
      <arglist>(const RigidTransformation &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiLevelStationaryVelocityTransformation</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>af5763f3573655042ded77cdbfed4f66d</anchor>
      <arglist>(const AffineTransformation &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiLevelStationaryVelocityTransformation</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a5318b6f18d438e8f90999c7e14e6d8eb</anchor>
      <arglist>(const MultiLevelStationaryVelocityTransformation &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumberOfDOFs</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>ad29bdbd29aaa3d4836516d509bd9b42e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>ab7253fe32b0282bd648357f9f17f173d</anchor>
      <arglist>(const GenericImage&lt; double &gt; *, double *, const WorldCoordsImage *, const WorldCoordsImage *, double=1, double=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a8479db713bbb552fa28a741b3d7cc54d</anchor>
      <arglist>(Indent=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a715c73ad19a963c8acfbec520a91b9dc</anchor>
      <arglist>(int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a7da25ee1de9fcdbed8beff45c7b1b777</anchor>
      <arglist>(const DOFValue *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutStatus</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>aa2691d480751a84a4197c00b9d9e54b0</anchor>
      <arglist>(int, DOFStatus)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>RequiresCachingOfDisplacements</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>aabcb1f638242ad5a0183255d454912b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BSplineFreeFormTransformationSV *</type>
      <name>SVFFD</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a9130fc8cecbcf5b36b8a92720460c032</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>const BSplineFreeFormTransformationSV *</type>
      <name>SVFFD</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a1d6047683d699945d9a658982f0d353e</anchor>
      <arglist>(int n) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Transform</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a9c7e59bf4cdb5ad345e427259bc54cd0</anchor>
      <arglist>(int, int, double &amp;, double &amp;, double &amp;, double=0, double=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>afee9ee1bc80bac9c04b63d04552adbd5</anchor>
      <arglist>(const DOFValue *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MultiLevelStationaryVelocityTransformation</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a022f540ae39fc9587070b7ace84d5341</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Approximate</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a6301764e9c0fbbca85fb694fa32c2445</anchor>
      <arglist>(const ImageAttributes &amp;, double *, double *, double *, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Approximate</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a3e700c0266765b78c176eccf2060e399</anchor>
      <arglist>(const double *, const double *, const double *, double *, double *, double *, int, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Approximate</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>adb6c1090b28a3a4ebc1eb7be7ec5f7f4</anchor>
      <arglist>(const double *, const double *, const double *, const double *, double *, double *, double *, int, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApproximateAsNew</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a408c59a15cd83ef778be454b29de2065</anchor>
      <arglist>(const ImageAttributes &amp;, double *, double *, double *, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApproximateAsNew</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a52641990db313096d611e9a355485652</anchor>
      <arglist>(const double *, const double *, const double *, double *, double *, double *, int, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>ApproximateAsNew</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a2ff8d699334a6ebceefccba13168be44</anchor>
      <arglist>(const double *, const double *, const double *, const double *, double *, double *, double *, int, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateDOFs</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a21532f06ba3297eafd344223c907d604</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, const double *, int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateDOFsGradient</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a688ebd42889519d2111bb286b9f13fa9</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, const double *, int, double *, double=1.0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Hessian</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a4e88be552c5666e337eaaaf163762eb2</anchor>
      <arglist>(int, int, Matrix[3], double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Jacobian</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a021a1fc9c0c8446ef89acaff8c7b3d2a</anchor>
      <arglist>(int, int, Matrix &amp;, double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>CanUseScalingAndSquaring</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>aba9c400498342702cc35d8af8433b88e</anchor>
      <arglist>(const GenericImage&lt; VoxelType &gt; &amp;) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>FastScalingAndSquaring</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>af53528f9ce48f93758c8ac04809ca3bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>MaxScaledVelocity</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a872623595a0c04ea28ce8cc6ab1a37dc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a7e3ea33a82616b1dfb384dd22f918a99</anchor>
      <arglist>(Matrix, LogA)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>NumberOfStepsForIntervalLength</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>adb734555104651daf6324a67c1fdbffa</anchor>
      <arglist>(double) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>NumberOfStepsForIntervalLength</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a9479b6fbbdb9359fce19596747015ee3</anchor>
      <arglist>(double, int) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a3a8556cbe5991f0f8ab89a3f2a113000</anchor>
      <arglist>(const GenericImage&lt; double &gt; *, double *, const WorldCoordsImage *, const WorldCoordsImage *, double, double, double) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>RKE1</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a7c9f57bef22d3a1345d2726e770ec309</anchor>
      <arglist>(int, int, double &amp;x, double &amp;y, double &amp;z, double t) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ScalingAndSquaring</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a238c9427366b27181aa64054d21ec265</anchor>
      <arglist>(int, int, GenericImage&lt; VoxelType &gt; &amp;, double, const WorldCoordsImage *=NULL) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UpdateLogMatrix</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>ae2a932b4c24ffa25f4b5c15db0a8702f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>UpperIntegrationLimit</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a173449255eaeff414b9910ac821ec030</anchor>
      <arglist>(double t, double t0) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>UseScalingAndSquaring</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>aa11039008d4e372da9cca898d7d639b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Velocity</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>adddc157170d04529300f1907493051c1</anchor>
      <arglist>(int, int, GenericImage&lt; VoxelType &gt; &amp;, bool=false) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>VelocityComponents</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a6319f4ae483b7c3cef17a603c213581b</anchor>
      <arglist>(int, int, GenericImage&lt; ScalarType &gt; &amp;, bool=false) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EventDelegate</type>
      <name>_GlobalTransformationObserver</name>
      <anchorfile>classmirtk_1_1MultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>ad5ef401385ccf299785df6b9cba72186</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::MultiLevelTransformation</name>
    <filename>classmirtk_1_1MultiLevelTransformation.html</filename>
    <base>mirtk::Transformation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>CombineLocalTransformation</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a44d9433e28324398d3ab5e88c829ded8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Displacement</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>ac8d45ce98a5e6c543452040bdc0205bf</anchor>
      <arglist>(int, int, GenericImage&lt; double &gt; &amp;, double, double=-1, const WorldCoordsImage *=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Displacement</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a20591a40499ec3dad4d6f1eec50d6f09</anchor>
      <arglist>(int, int, GenericImage&lt; float &gt; &amp;, double, double=-1, const WorldCoordsImage *=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InverseDisplacement</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a35fd7e5ec8e51fd8f8c7ee225634760b</anchor>
      <arglist>(int, int, GenericImage&lt; double &gt; &amp;, double, double=-1, const WorldCoordsImage *=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InverseDisplacement</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a594fbc486686be54f6c8cd72d1b95699</anchor>
      <arglist>(int, int, GenericImage&lt; float &gt; &amp;, double, double=-1, const WorldCoordsImage *=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>MergeGlobalIntoLocalDisplacement</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a82373eca2a27f9b0c18a06dfc3822da0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>ac6ba2f40d369900c315b5eec405ed2d3</anchor>
      <arglist>(Indent=0) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Transform</name>
      <anchorfile>classmirtk_1_1MultiLevelTransformation.html</anchorfile>
      <anchor>a993863e6d4e1f845d99a09b23ee8dfa3</anchor>
      <arglist>(int, int, double &amp;, double &amp;, double &amp;, double=0, double=-1) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::MutualImageInformation</name>
    <filename>classmirtk_1_1MutualImageInformation.html</filename>
    <base>mirtk::HistogramImageSimilarity</base>
    <member kind="function">
      <type></type>
      <name>MutualImageInformation</name>
      <anchorfile>classmirtk_1_1MutualImageInformation.html</anchorfile>
      <anchor>a9eea92620dbb31f1836db65ae4ac278f</anchor>
      <arglist>(const char *=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MutualImageInformation</name>
      <anchorfile>classmirtk_1_1MutualImageInformation.html</anchorfile>
      <anchor>ad1dd073e82837e97c3c44ea4a1f2a48f</anchor>
      <arglist>(const MutualImageInformation &amp;)</arglist>
    </member>
    <member kind="function">
      <type>MutualImageInformation &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1MutualImageInformation.html</anchorfile>
      <anchor>a7f23f715b50da32752fb173da993c838</anchor>
      <arglist>(const MutualImageInformation &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>RawValue</name>
      <anchorfile>classmirtk_1_1MutualImageInformation.html</anchorfile>
      <anchor>a9d395d919d9b7564d466c09e31a3b889</anchor>
      <arglist>(double) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MutualImageInformation</name>
      <anchorfile>classmirtk_1_1MutualImageInformation.html</anchorfile>
      <anchor>a4046b93d82058cfed3990c8699b52c86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1MutualImageInformation.html</anchorfile>
      <anchor>a023c7d76814fc7bcf662507386393818</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::NearestNeighborExtrapolateImageFunction</name>
    <filename>classmirtk_1_1NearestNeighborExtrapolateImageFunction.html</filename>
    <base>GenericNearestNeighborExtrapolateImageFunction&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>NearestNeighborExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1NearestNeighborExtrapolateImageFunction.html</anchorfile>
      <anchor>ad45201c09dedc7ed833dad07b48e5f7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NearestNeighborExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1NearestNeighborExtrapolateImageFunction.html</anchorfile>
      <anchor>aa09b7305e79bec24775e4170a8e488d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericNearestNeighborExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericNearestNeighborExtrapolateImageFunction.html</anchorfile>
      <anchor>aabae47b07144c71ce8af1f81f386140a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>TransformIndex</name>
      <anchorfile>classmirtk_1_1GenericNearestNeighborExtrapolateImageFunction.html</anchorfile>
      <anchor>a9c5a5cae527a9b870d982ae2d2493adc</anchor>
      <arglist>(int &amp;index, int max) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericNearestNeighborExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericNearestNeighborExtrapolateImageFunction.html</anchorfile>
      <anchor>ab81109984812efd0910ae4719d9e36ed</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::NearestNeighborInterpolateImageFunction</name>
    <filename>classmirtk_1_1NearestNeighborInterpolateImageFunction.html</filename>
    <base>GenericNearestNeighborInterpolateImageFunction&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>NearestNeighborInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1NearestNeighborInterpolateImageFunction.html</anchorfile>
      <anchor>afd5fe186aa2ccde2e239023b262a13a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingInterval</name>
      <anchorfile>classmirtk_1_1GenericNearestNeighborInterpolateImageFunction.html</anchorfile>
      <anchor>aa5f792c50aef37e4f16610cf2491cb65</anchor>
      <arglist>(double, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericNearestNeighborInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericNearestNeighborInterpolateImageFunction.html</anchorfile>
      <anchor>a20d73d2c0de3cf89e5c37daca66052af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericNearestNeighborInterpolateImageFunction.html</anchorfile>
      <anchor>adc3fd3512c969cf277a68211d71352b2</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericNearestNeighborInterpolateImageFunction.html</anchorfile>
      <anchor>afd2c61672668117e6c3d29590df6cd22</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericNearestNeighborInterpolateImageFunction.html</anchorfile>
      <anchor>a792bdcdf71f42744bebd3272e9c0acd3</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericNearestNeighborInterpolateImageFunction.html</anchorfile>
      <anchor>acbdd50d99d5c663b740bce7e9f8317b3</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericNearestNeighborInterpolateImageFunction.html</anchorfile>
      <anchor>a97723ad7fe4716ffa6849f9e05d826a8</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericNearestNeighborInterpolateImageFunction.html</anchorfile>
      <anchor>a533cf6a6789badb3f37b90bde1b99bd5</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericNearestNeighborInterpolateImageFunction.html</anchorfile>
      <anchor>a160be4de44cc14dc5b5c339893c53baa</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericNearestNeighborInterpolateImageFunction.html</anchorfile>
      <anchor>a8b3b46e2ef860dbeaff80f995c2dc827</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericNearestNeighborInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericNearestNeighborInterpolateImageFunction.html</anchorfile>
      <anchor>a1174ebadd9becd4195cbaefb302a5670</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericInterpolateImageFunction.html</anchorfile>
      <anchor>a1bb8a15511bea147030867fb0beb90cc</anchor>
      <arglist>(bool coeff=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::NeighborhoodOffsets</name>
    <filename>classmirtk_1_1NeighborhoodOffsets.html</filename>
    <base>mirtk::Object</base>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1NeighborhoodOffsets.html</anchorfile>
      <anchor>a5e166a78a744555a490b7520bf212abc</anchor>
      <arglist>(const BaseImage *, ConnectivityType=CONNECTIVITY_26)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1NeighborhoodOffsets.html</anchorfile>
      <anchor>afde9eb8cdc453ef220379c4a645969ee</anchor>
      <arglist>(int, int, ConnectivityType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NeighborhoodOffsets</name>
      <anchorfile>classmirtk_1_1NeighborhoodOffsets.html</anchorfile>
      <anchor>a99b50eb8e7ec47667d4a0455e023ba7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NeighborhoodOffsets</name>
      <anchorfile>classmirtk_1_1NeighborhoodOffsets.html</anchorfile>
      <anchor>a0a3f7815b2ec67490f09ea652f4407de</anchor>
      <arglist>(const BaseImage *, ConnectivityType=CONNECTIVITY_26)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1NeighborhoodOffsets.html</anchorfile>
      <anchor>a7578f07224cfd5327c62a6be7ee6c458</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NeighborhoodOffsets</name>
      <anchorfile>classmirtk_1_1NeighborhoodOffsets.html</anchorfile>
      <anchor>ae05cf7ed6c94f0599476fa8e6c77377d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::NiftiImage</name>
    <filename>classmirtk_1_1NiftiImage.html</filename>
    <member kind="function">
      <type></type>
      <name>NiftiImage</name>
      <anchorfile>classmirtk_1_1NiftiImage.html</anchorfile>
      <anchor>a26e607c6c91a0480b9bbffd41f8ffb89</anchor>
      <arglist>(const char *fname=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1NiftiImage.html</anchorfile>
      <anchor>af8524079d9334c8d639235709414e16d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1NiftiImage.html</anchorfile>
      <anchor>a25f201c4d5362eeaf8e134ab8d8c2859</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NiftiImage</name>
      <anchorfile>classmirtk_1_1NiftiImage.html</anchorfile>
      <anchor>a1d231b0c09f52e61c60c6b0d6a184a83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>nifti_image *</type>
      <name>nim</name>
      <anchorfile>classmirtk_1_1NiftiImage.html</anchorfile>
      <anchor>ae4ffb50504bfbbb3d19e810b3f002346</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::NiftiImageInfo</name>
    <filename>structmirtk_1_1NiftiImageInfo.html</filename>
    <member kind="function">
      <type></type>
      <name>NiftiImageInfo</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a98ffe61f0c169cc6107ebe6c1685a0b3</anchor>
      <arglist>(const char *=nullptr)</arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>aux_file</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a5b7276acd6eafa4469cd3fc0d203b979</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>byteorder</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>adcb7b005d8e7fed668003eae58e6b4b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>cal_max</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>acc0b99497338c8c7643da676d072e977</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>cal_min</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a63c1fed27bc32b2f039a1f237b9b43c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>datatype</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a6fe351e19568bb5e8e7ea1de42ad0585</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>descrip</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a142db038d8e0c731ae7e9c962f2bdb25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>dt</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a368f4a0c4d66ce0d374c79b2f8ddda1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>du</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a4687268a796f48a5d83143497b75bad8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>dv</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>aaafe944747f5611b6387eb873298d373</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>dw</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a5f927c107af63b3d2ec62d484850a5da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>dx</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a693a267f0507b40d17545dfc6d11ebfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>dy</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a4743ad60f97cacf080d6a552f7d59d98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>dz</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a39acec43ac43eda20ae285fe6b7ae7ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>fname</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a070a96c57e67f92d4467b82475606850</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>iname</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a83e4dc4b21176b1ecd1de6ec3abd2e75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>iname_offset</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>ab8926b73c262cf7229fc60d718fc00a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>intent_code</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a8dd8326508dd5a557afdcf261bcc9f86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>intent_name</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>ab92343ea4fb78e31f4f9a78fc197e18b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>intent_p1</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>ad6411476b41994d2ffc74dd8aac8b51f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>intent_p2</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a891cb2820183b8c1f47ae8a8620cf173</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>intent_p3</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a3046cd89852188a9280172b59147a792</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nbyper</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a03102459955121d97a5d0b96ccd6f2b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ndim</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>abb376be28f9003b6672d4736bd17d619</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nifti_type</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a8dca7d21e3f10d30ee0ca706ccb5a9ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nt</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a0f7adc3916c8223d203d1fc613eb2c32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nu</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a83ce84241b4304ea53edd2b4a90140d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nv</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a9d94bc05a622194c4dc85cd1f406d67a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>nvox</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>aca454dabd164a3f44d2170ea17bb43d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nw</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a16d7448aad9ee6f8c750fb26c54b7adb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nx</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>af1900c248bcbfe1e3d7446c2b3fa0f88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ny</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a4945f03840c147a6df8d2fc252f204b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nz</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>ad45599fa6271cce6aa674150648c3bba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>qform_code</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a5ff48e17bf9f2691e20ac6d921721833</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix</type>
      <name>qto_ijk</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a90fa3fa582ed18f96520ac2acdb56e38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix</type>
      <name>qto_xyz</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a571fa2e817ff7b7032f772c72760e124</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>scl_inter</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>aaefe699a301b128ee352d56545b5024c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>scl_slope</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a9b7116535acb79ada200d87b76104014</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>sform_code</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a00fbca555752755c8cc0fcbe0a8a77f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>slice_code</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>ac684e1c456bf3b96735556003dd3a43f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>slice_duration</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a6a1c26d757e5f0953cd73bdc4d55a2ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>slice_end</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>aab49d955cf0b9c4c5af1b8c20477d2e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>slice_start</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a9287067212e8480266db3e6b751d397d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix</type>
      <name>sto_ijk</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>aae77cae4530b8770c69b88f6a850a2ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix</type>
      <name>sto_xyz</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a79a500699cfcdcd08a92baa6a75c1fab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>swapsize</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>aae7cf38bd1131bf5546b36e29113434a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>time_units</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a1bfbcb5195778745a149c888892abd68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>toffset</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>a36be5f496ed3fde470a89eb9886e7eec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>xyz_units</name>
      <anchorfile>structmirtk_1_1NiftiImageInfo.html</anchorfile>
      <anchor>aaa59622c20befbd711fb7bae73ed6562</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::NiftiImageReader</name>
    <filename>classmirtk_1_1NiftiImageReader.html</filename>
    <base>mirtk::ImageReader</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>CanRead</name>
      <anchorfile>classmirtk_1_1NiftiImageReader.html</anchorfile>
      <anchor>a88e0f03bc4c81c4dbbb689db616b8afe</anchor>
      <arglist>(const char *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1NiftiImageReader.html</anchorfile>
      <anchor>a9cc70b2954826ac1e98c9c4cc8fd9919</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NiftiImageReader</name>
      <anchorfile>classmirtk_1_1NiftiImageReader.html</anchorfile>
      <anchor>a586e19e57e517e7b2e9549c2210e0133</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1NiftiImageReader.html</anchorfile>
      <anchor>aecfb3f674f721d85d9a42c85ef799436</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NiftiImageReader</name>
      <anchorfile>classmirtk_1_1NiftiImageReader.html</anchorfile>
      <anchor>ab7dd47349a4410a8b092804fb302f27a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>CheckHeader</name>
      <anchorfile>classmirtk_1_1NiftiImageReader.html</anchorfile>
      <anchor>a95bcaf93abeaf8741cedfa93a50600b4</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>ReadHeader</name>
      <anchorfile>classmirtk_1_1NiftiImageReader.html</anchorfile>
      <anchor>a4c672ac4d78e39a8ac68ae9ee54e56e1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::NiftiImageWriter</name>
    <filename>classmirtk_1_1NiftiImageWriter.html</filename>
    <base>mirtk::ImageWriter</base>
    <member kind="function">
      <type></type>
      <name>NiftiImageWriter</name>
      <anchorfile>classmirtk_1_1NiftiImageWriter.html</anchorfile>
      <anchor>a3eb6456ce9fe661756bd3330fdd9aa7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1NiftiImageWriter.html</anchorfile>
      <anchor>ab7720d0f7e536d7aa7013b1cd1bb1d9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NiftiImageWriter</name>
      <anchorfile>classmirtk_1_1NiftiImageWriter.html</anchorfile>
      <anchor>aa98ed8533f9a9cde6f43898a862b8492</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Array&lt; string &gt;</type>
      <name>Extensions</name>
      <anchorfile>classmirtk_1_1NiftiImageWriter.html</anchorfile>
      <anchor>aaf840cc1f18402239cc6c050c3215ed0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Finalize</name>
      <anchorfile>classmirtk_1_1NiftiImageWriter.html</anchorfile>
      <anchor>aa0578a8f46d4f7cc2ce7b5ac655d35c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1NiftiImageWriter.html</anchorfile>
      <anchor>a6dacbead08927323131e9e7a205e37e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::NonaryForEachVoxelBody</name>
    <filename>structmirtk_1_1NonaryForEachVoxelBody.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelBody</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody.html</anchorfile>
      <anchor>ad7080366c09c3111b56002fcc6376d70</anchor>
      <arglist>(GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, GenericImage&lt; T9 &gt; &amp;im9, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelBody</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody.html</anchorfile>
      <anchor>a8cd118c026c57ab50b4fc46c6c680bbe</anchor>
      <arglist>(const NonaryForEachVoxelBody &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelBody</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody.html</anchorfile>
      <anchor>a7c5d8622dad0a743e7c0acab979f9550</anchor>
      <arglist>(NonaryForEachVoxelBody &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody.html</anchorfile>
      <anchor>a1e991a5f23a10757034ebac03097f5d9</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody.html</anchorfile>
      <anchor>a21a13d5db29ef5d47912a8c670e5cd5e</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody.html</anchorfile>
      <anchor>a3cf0ef89ff7d451fe6e504eecdc7b82e</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody.html</anchorfile>
      <anchor>a32669735ca0982bca50f7aaea785d6f0</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::NonaryForEachVoxelBody_1Const</name>
    <filename>structmirtk_1_1NonaryForEachVoxelBody__1Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelBody_1Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a3ae1096eb79001e14c80c56ad62963fe</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, GenericImage&lt; T9 &gt; &amp;im9, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelBody_1Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a8a0b6374c725c8b5a27638d0baeb72b4</anchor>
      <arglist>(const NonaryForEachVoxelBody_1Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelBody_1Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a5f9976a76db9172d96cc64142d330814</anchor>
      <arglist>(NonaryForEachVoxelBody_1Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a0e2ff49e011f063c22e9aecd844e8bc0</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a88e6c4a7d3a1e56a0708a993d472150b</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>ade391c5dcb9051488ac06ab2a56c5b13</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a4ac610fd4d10ea4e9fd176078d23b8ec</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::NonaryForEachVoxelBody_2Const</name>
    <filename>structmirtk_1_1NonaryForEachVoxelBody__2Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelBody_2Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a900228136afaaf9b5c40988f9a63ca35</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, GenericImage&lt; T9 &gt; &amp;im9, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelBody_2Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>aeada51d598605731dec4a7b8be6ba1a9</anchor>
      <arglist>(const NonaryForEachVoxelBody_2Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelBody_2Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>af1d191af0f632cc26bdf49dd7857ed49</anchor>
      <arglist>(NonaryForEachVoxelBody_2Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a1dc5866b2e3e5cbf1c1d7121141cf84f</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>ab54327197a3e8620a218ead33b8a6836</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>ac544b657cd4799fcde40b19e56310700</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a140da20b3b5432fe163f10283180319f</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::NonaryForEachVoxelBody_3Const</name>
    <filename>structmirtk_1_1NonaryForEachVoxelBody__3Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelBody_3Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>a2c8e755dda7ebc3c8efef1bb548eb8b1</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, GenericImage&lt; T9 &gt; &amp;im9, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelBody_3Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>ae3e2c4f3b93f801614b05680d3a884fc</anchor>
      <arglist>(const NonaryForEachVoxelBody_3Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelBody_3Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>a06468366a169a2d1b2423f86945b4a73</anchor>
      <arglist>(NonaryForEachVoxelBody_3Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>a6b858074d4a0b8979581c9eaaa3eedd0</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>a4bb9c6e654a7726ac2c73c851aac8946</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>a961d096a8c999cafa85b44f493dee533</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>a42c352e725209b7744c5e2b883466d26</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::NonaryForEachVoxelBody_4Const</name>
    <filename>structmirtk_1_1NonaryForEachVoxelBody__4Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelBody_4Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>a3d3e833786c6dfa236fac91abab4b2ca</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, GenericImage&lt; T9 &gt; &amp;im9, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelBody_4Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>a4d7afa3130f951d5fc5d53a714f4caab</anchor>
      <arglist>(const NonaryForEachVoxelBody_4Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelBody_4Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>a0c541a383350b634896aced7690178b7</anchor>
      <arglist>(NonaryForEachVoxelBody_4Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>a13a1789ef26c924ee7330bed492ebda6</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>ab7013b9bf44d302d6aa8c6ee7addbd9a</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>a56bd1ccbcafddc703f96db7aeda547fe</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>a26f25ad4f55c9b12d7dbed17ff55921e</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::NonaryForEachVoxelBody_5Const</name>
    <filename>structmirtk_1_1NonaryForEachVoxelBody__5Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelBody_5Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__5Const.html</anchorfile>
      <anchor>a8fe2973fcf140e721149ea7764c4b524</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, const GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, GenericImage&lt; T9 &gt; &amp;im9, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelBody_5Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__5Const.html</anchorfile>
      <anchor>a44d66902760bab5693759f82c8db835c</anchor>
      <arglist>(const NonaryForEachVoxelBody_5Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelBody_5Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__5Const.html</anchorfile>
      <anchor>a235ded3e31ce2c4e03a826ddbb3571d7</anchor>
      <arglist>(NonaryForEachVoxelBody_5Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__5Const.html</anchorfile>
      <anchor>aacb97bceab67dfc7c793bb28f5b5d197</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__5Const.html</anchorfile>
      <anchor>ac589c30ba4342b733ffd7f380d1b9d9a</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__5Const.html</anchorfile>
      <anchor>aaf72ae4f40302258b03a74e0aaa27706</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__5Const.html</anchorfile>
      <anchor>a862121bb8e7ca237fb2f684de9e5f813</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::NonaryForEachVoxelBody_6Const</name>
    <filename>structmirtk_1_1NonaryForEachVoxelBody__6Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelBody_6Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__6Const.html</anchorfile>
      <anchor>ada45bee15536e7264c61f2de74841730</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, const GenericImage&lt; T5 &gt; &amp;im5, const GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, GenericImage&lt; T9 &gt; &amp;im9, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelBody_6Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__6Const.html</anchorfile>
      <anchor>a9052f5dd6edae4a4a9665a24a67f8e6a</anchor>
      <arglist>(const NonaryForEachVoxelBody_6Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelBody_6Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__6Const.html</anchorfile>
      <anchor>a5641b95b6d58a68cf3951d5bf6b2a77b</anchor>
      <arglist>(NonaryForEachVoxelBody_6Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__6Const.html</anchorfile>
      <anchor>a278a195d391c2399669aa2f777b74470</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__6Const.html</anchorfile>
      <anchor>aed8678e7aa9bcd22ab9e3445a5382e43</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__6Const.html</anchorfile>
      <anchor>acd7fd986c135f531e3efd2c48aa74080</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__6Const.html</anchorfile>
      <anchor>aff82d1456ac47a177a27118fefa3621f</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::NonaryForEachVoxelBody_7Const</name>
    <filename>structmirtk_1_1NonaryForEachVoxelBody__7Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelBody_7Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__7Const.html</anchorfile>
      <anchor>a5fbb8a260c1db2c6bf0fa0646087e279</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, const GenericImage&lt; T5 &gt; &amp;im5, const GenericImage&lt; T6 &gt; &amp;im6, const GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, GenericImage&lt; T9 &gt; &amp;im9, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelBody_7Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__7Const.html</anchorfile>
      <anchor>a7378bd2bb1fef5782627bf530b786d1a</anchor>
      <arglist>(const NonaryForEachVoxelBody_7Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelBody_7Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__7Const.html</anchorfile>
      <anchor>ad682940b37faabb79965eb7afb936870</anchor>
      <arglist>(NonaryForEachVoxelBody_7Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__7Const.html</anchorfile>
      <anchor>a75b5a54100ec44fa17c0aef628c75e92</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__7Const.html</anchorfile>
      <anchor>aa0605700049bee87a9f4e97a2a66ee85</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__7Const.html</anchorfile>
      <anchor>af1511b19a5d9dbbac3f37cdda047cb5b</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__7Const.html</anchorfile>
      <anchor>a514b39647154cd344c243583990b60b6</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::NonaryForEachVoxelBody_8Const</name>
    <filename>structmirtk_1_1NonaryForEachVoxelBody__8Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelBody_8Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__8Const.html</anchorfile>
      <anchor>aabf0641bf2c8d286735c61124845568a</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, const GenericImage&lt; T5 &gt; &amp;im5, const GenericImage&lt; T6 &gt; &amp;im6, const GenericImage&lt; T7 &gt; &amp;im7, const GenericImage&lt; T8 &gt; &amp;im8, GenericImage&lt; T9 &gt; &amp;im9, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelBody_8Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__8Const.html</anchorfile>
      <anchor>a959509920da40408f89fb80a7e54ecab</anchor>
      <arglist>(const NonaryForEachVoxelBody_8Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelBody_8Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__8Const.html</anchorfile>
      <anchor>a742c667bb6fb11e9eee6a9a4901ca2a5</anchor>
      <arglist>(NonaryForEachVoxelBody_8Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__8Const.html</anchorfile>
      <anchor>a4308e2847d38f2935e48064c00518689</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__8Const.html</anchorfile>
      <anchor>ae3a36f70b51bfabf979a800bf24f586a</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__8Const.html</anchorfile>
      <anchor>a3ef29dcb2cb08d2a6416469a54e8e692</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__8Const.html</anchorfile>
      <anchor>a20036173f7772ee13be3be03cd2e5909</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::NonaryForEachVoxelBody_Const</name>
    <filename>structmirtk_1_1NonaryForEachVoxelBody__Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelBody_Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a1e1b20ac22ae04f7b640925da6218bb9</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, const GenericImage&lt; T5 &gt; &amp;im5, const GenericImage&lt; T6 &gt; &amp;im6, const GenericImage&lt; T7 &gt; &amp;im7, const GenericImage&lt; T8 &gt; &amp;im8, const GenericImage&lt; T9 &gt; &amp;im9, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelBody_Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a22c569321d966fe0d6f6cf21a9211160</anchor>
      <arglist>(const NonaryForEachVoxelBody_Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelBody_Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>ab05eaa3880f27986a19c527278eedf96</anchor>
      <arglist>(NonaryForEachVoxelBody_Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>ade13d3ecf0109d41b5037854270147bc</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a16d71babdce82d95c88e6ccf6710c285</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a405cea47e97eac2ce35a01663485f13e</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>ae3530a89906f39176b701cdd7c5aa8cf</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::NonaryForEachVoxelIfBody</name>
    <filename>structmirtk_1_1NonaryForEachVoxelIfBody.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelIfBody</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody.html</anchorfile>
      <anchor>adea82e4df601dfae2783f379da962d71</anchor>
      <arglist>(GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, GenericImage&lt; T9 &gt; &amp;im9, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelIfBody</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a60e2e4ccebc5e576f37266b60445dc1a</anchor>
      <arglist>(const NonaryForEachVoxelIfBody &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelIfBody</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a3d5cb8d170970c8fe6bed9ab871309cd</anchor>
      <arglist>(NonaryForEachVoxelIfBody &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody.html</anchorfile>
      <anchor>afd4eb17ee39cd7185be6ba883e0243f7</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody.html</anchorfile>
      <anchor>ab9c3bf4f458bec25683b5222b79953ec</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a044c099bd2c414c647317aefd4d5661c</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a656c89b4a71b517ebca8c40fdf00d4aa</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::NonaryForEachVoxelIfBody_1Const</name>
    <filename>structmirtk_1_1NonaryForEachVoxelIfBody__1Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelIfBody_1Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a5dbf5f1724797765c72afcce2a1d9366</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, GenericImage&lt; T9 &gt; &amp;im9, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelIfBody_1Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a85533fb3dd6ee87b37ebac10cc705ee4</anchor>
      <arglist>(const NonaryForEachVoxelIfBody_1Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelIfBody_1Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>ad2cee6f7141260cb3527e274a3a63374</anchor>
      <arglist>(NonaryForEachVoxelIfBody_1Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>ab6c1e542b9bc64c4351bc169bc93453b</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a3646114c4ea7347e187b9501794edca1</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a384591408df7837f3229ee2844789492</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a285c54366eb8fcb7481758325aafebaf</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::NonaryForEachVoxelIfBody_2Const</name>
    <filename>structmirtk_1_1NonaryForEachVoxelIfBody__2Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelIfBody_2Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>a342ab7b0e866f3382ad14566a3f0a7fe</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, GenericImage&lt; T9 &gt; &amp;im9, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelIfBody_2Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>a2b60b24a9bd7f8f930abfc838ba6418c</anchor>
      <arglist>(const NonaryForEachVoxelIfBody_2Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelIfBody_2Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>a0f027c7d4e26139e1d85e25bb34b5e1f</anchor>
      <arglist>(NonaryForEachVoxelIfBody_2Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>a7f022f74ef89d978edb64c44ce556dc3</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>ac08f9f5b046c9292b98193b899ab0a52</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>aebef689b97b4fbe640fe4badac527474</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>a6079c3d2591bb3a38cec38bf35887e41</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::NonaryForEachVoxelIfBody_3Const</name>
    <filename>structmirtk_1_1NonaryForEachVoxelIfBody__3Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelIfBody_3Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>a51f2ac15334f81db0494638d6c35a303</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, GenericImage&lt; T9 &gt; &amp;im9, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelIfBody_3Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>a1e8ba192756e1d6acfd3a0ca0f3904b8</anchor>
      <arglist>(const NonaryForEachVoxelIfBody_3Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelIfBody_3Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>a1c002e7b7666de500b672c2f0e57e50c</anchor>
      <arglist>(NonaryForEachVoxelIfBody_3Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>ada9275beb599eaa13bcf76781f0d162b</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>a6259901f0192d088632f0acd9a1dfa35</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>addca237273e32c71263f0def0ebc2392</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>a5079af7a934fd35a74ad454b92a74ee7</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::NonaryForEachVoxelIfBody_4Const</name>
    <filename>structmirtk_1_1NonaryForEachVoxelIfBody__4Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelIfBody_4Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>ae0fa07970e92fff5a54fca4476cf92a7</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, GenericImage&lt; T9 &gt; &amp;im9, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelIfBody_4Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>a8b4257f03f00f9cbe5b5b9de1dfd1a99</anchor>
      <arglist>(const NonaryForEachVoxelIfBody_4Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelIfBody_4Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>adc8f923bba59811b54c20aa21228bd83</anchor>
      <arglist>(NonaryForEachVoxelIfBody_4Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>ad5caea9fae9abd9f55820a5385ce529a</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>aea75fcb423573b1d6ba73f86a8d65abd</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>abc613ce5c338d7740b0542ae2d73eeff</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>a0f2c993c004e6674dc52456351c393d3</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::NonaryForEachVoxelIfBody_5Const</name>
    <filename>structmirtk_1_1NonaryForEachVoxelIfBody__5Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelIfBody_5Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__5Const.html</anchorfile>
      <anchor>a3502fba0c6116897172ee621495e8648</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, const GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, GenericImage&lt; T9 &gt; &amp;im9, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelIfBody_5Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__5Const.html</anchorfile>
      <anchor>a939ff495897fc2a0f7b96e5393052bcb</anchor>
      <arglist>(const NonaryForEachVoxelIfBody_5Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelIfBody_5Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__5Const.html</anchorfile>
      <anchor>ae3d7fbef97160c1768f7c980abd1b015</anchor>
      <arglist>(NonaryForEachVoxelIfBody_5Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__5Const.html</anchorfile>
      <anchor>a9c2644d3d1bc7798934e3d3b37f4e8f6</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__5Const.html</anchorfile>
      <anchor>a0486530159f976db523bf0622be440f9</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__5Const.html</anchorfile>
      <anchor>ab8803970ea2b4a70e46461b29ba048be</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__5Const.html</anchorfile>
      <anchor>aa4a73ec9905b2733a522c3e22d74b5a4</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::NonaryForEachVoxelIfBody_6Const</name>
    <filename>structmirtk_1_1NonaryForEachVoxelIfBody__6Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelIfBody_6Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__6Const.html</anchorfile>
      <anchor>a537553215dce9afb80fdad3d097dd499</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, const GenericImage&lt; T5 &gt; &amp;im5, const GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, GenericImage&lt; T9 &gt; &amp;im9, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelIfBody_6Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__6Const.html</anchorfile>
      <anchor>a4dbef5083404e0d3c09986c75e152da1</anchor>
      <arglist>(const NonaryForEachVoxelIfBody_6Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelIfBody_6Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__6Const.html</anchorfile>
      <anchor>a5e11c232dde85cbb56000a4e57e87aff</anchor>
      <arglist>(NonaryForEachVoxelIfBody_6Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__6Const.html</anchorfile>
      <anchor>a25f426e85a2184249223cadf7932ecb8</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__6Const.html</anchorfile>
      <anchor>a76c33817ef04ec29fb12ba2f4af5b87b</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__6Const.html</anchorfile>
      <anchor>a2116a62e4cf89eb746a11c52a8646d45</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__6Const.html</anchorfile>
      <anchor>af4865899f67264149d49000a8c8c36c6</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::NonaryForEachVoxelIfBody_7Const</name>
    <filename>structmirtk_1_1NonaryForEachVoxelIfBody__7Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelIfBody_7Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__7Const.html</anchorfile>
      <anchor>a23fb5682ff89e1cf64248aea964073a3</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, const GenericImage&lt; T5 &gt; &amp;im5, const GenericImage&lt; T6 &gt; &amp;im6, const GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, GenericImage&lt; T9 &gt; &amp;im9, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelIfBody_7Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__7Const.html</anchorfile>
      <anchor>ab365f689f650b13fa8cbc0fff7acd2c4</anchor>
      <arglist>(const NonaryForEachVoxelIfBody_7Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelIfBody_7Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__7Const.html</anchorfile>
      <anchor>aaaabd98a746b3609773b7cb4e0a69427</anchor>
      <arglist>(NonaryForEachVoxelIfBody_7Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__7Const.html</anchorfile>
      <anchor>a23243d8f137b1314da420fd2b7b8de09</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__7Const.html</anchorfile>
      <anchor>a126da78d3da37ae42372aaf0e175db2f</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__7Const.html</anchorfile>
      <anchor>a659b7196d264918dcbc845ab6017ffa2</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__7Const.html</anchorfile>
      <anchor>a5aa8693434c71017b820a78a677f7a4a</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::NonaryForEachVoxelIfBody_8Const</name>
    <filename>structmirtk_1_1NonaryForEachVoxelIfBody__8Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelIfBody_8Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__8Const.html</anchorfile>
      <anchor>a562b2fc089dffb76fafaa3d4abbbf663</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, const GenericImage&lt; T5 &gt; &amp;im5, const GenericImage&lt; T6 &gt; &amp;im6, const GenericImage&lt; T7 &gt; &amp;im7, const GenericImage&lt; T8 &gt; &amp;im8, GenericImage&lt; T9 &gt; &amp;im9, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelIfBody_8Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__8Const.html</anchorfile>
      <anchor>a98ec6e1642926f650891c4d5262fca15</anchor>
      <arglist>(const NonaryForEachVoxelIfBody_8Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelIfBody_8Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__8Const.html</anchorfile>
      <anchor>a435483c434df0246df9d9b031a23d7bb</anchor>
      <arglist>(NonaryForEachVoxelIfBody_8Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__8Const.html</anchorfile>
      <anchor>af525d714dfa45d1d5d2195a5247d6448</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__8Const.html</anchorfile>
      <anchor>a6a7cae231d8101ccd033ee30aa4c609d</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__8Const.html</anchorfile>
      <anchor>acb1e4a58545737ef5467248823f0f6f1</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__8Const.html</anchorfile>
      <anchor>a36d9e3855f8a1bfa3ff430c9d06c5882</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::NonaryForEachVoxelIfBody_Const</name>
    <filename>structmirtk_1_1NonaryForEachVoxelIfBody__Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelIfBody_Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>ad511537721454466ffb9d041aca4b6a0</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, const GenericImage&lt; T5 &gt; &amp;im5, const GenericImage&lt; T6 &gt; &amp;im6, const GenericImage&lt; T7 &gt; &amp;im7, const GenericImage&lt; T8 &gt; &amp;im8, const GenericImage&lt; T9 &gt; &amp;im9, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelIfBody_Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a9b010a03a762d25cc6c0f3a39bb0cc53</anchor>
      <arglist>(const NonaryForEachVoxelIfBody_Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonaryForEachVoxelIfBody_Const</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>ac2e74a6b4fddac5a8cee3cbed4c54a72</anchor>
      <arglist>(NonaryForEachVoxelIfBody_Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a82ef9758ba7cd490546cc25c4a478e43</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>ab99ad8e508c1d2c095ebd2ab259afbbf</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a0fadc9b82a38518e701fa9c921b987be</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NonaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a0a72920d4982d783f3267b1bf82eac17</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::NonSelfIntersectionConstraint</name>
    <filename>classmirtk_1_1NonSelfIntersectionConstraint.html</filename>
    <base>mirtk::SurfaceConstraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1NonSelfIntersectionConstraint.html</anchorfile>
      <anchor>a8f7a1f0fc9962d35487bd64c48c1ade2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonSelfIntersectionConstraint</name>
      <anchorfile>classmirtk_1_1NonSelfIntersectionConstraint.html</anchorfile>
      <anchor>a7118fc5d7f114d23a95edba7eff3441f</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonSelfIntersectionConstraint</name>
      <anchorfile>classmirtk_1_1NonSelfIntersectionConstraint.html</anchorfile>
      <anchor>ada91c335b6329cb2e0ea6a3adf8dea79</anchor>
      <arglist>(const NonSelfIntersectionConstraint &amp;)</arglist>
    </member>
    <member kind="function">
      <type>NonSelfIntersectionConstraint &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1NonSelfIntersectionConstraint.html</anchorfile>
      <anchor>ab07bb3fe3b31bf43c5b9fdf437763fc4</anchor>
      <arglist>(const NonSelfIntersectionConstraint &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1NonSelfIntersectionConstraint.html</anchorfile>
      <anchor>a743f34101c15c55a29686c8cdd325018</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Reinitialize</name>
      <anchorfile>classmirtk_1_1NonSelfIntersectionConstraint.html</anchorfile>
      <anchor>aa658fcec862cf1eca070972dbc107a6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1NonSelfIntersectionConstraint.html</anchorfile>
      <anchor>af53e5d6683ebb0cf22cdaee44c419a8d</anchor>
      <arglist>(bool=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteDataSets</name>
      <anchorfile>classmirtk_1_1NonSelfIntersectionConstraint.html</anchorfile>
      <anchor>a4d7c3f6f83340f29a57d8106e8d129da</anchor>
      <arglist>(const char *, const char *, bool=true) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NonSelfIntersectionConstraint</name>
      <anchorfile>classmirtk_1_1NonSelfIntersectionConstraint.html</anchorfile>
      <anchor>a8794dc8df36a71e8c933a4fa0e7ff07d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CopyAttributes</name>
      <anchorfile>classmirtk_1_1NonSelfIntersectionConstraint.html</anchorfile>
      <anchor>a2ce6dcd5e44d7b15a11069a7399f1421</anchor>
      <arglist>(const NonSelfIntersectionConstraint &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1NonSelfIntersectionConstraint.html</anchorfile>
      <anchor>a5fc8697dd845708031d7042a89233c02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateGradient</name>
      <anchorfile>classmirtk_1_1NonSelfIntersectionConstraint.html</anchorfile>
      <anchor>acf670dc44c345ff85ce08efa99d5ea7a</anchor>
      <arglist>(double *, double, double)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Init</name>
      <anchorfile>classmirtk_1_1NonSelfIntersectionConstraint.html</anchorfile>
      <anchor>a2a3115ccad5d3b48697d969c191ee0af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1NonSelfIntersectionConstraint.html</anchorfile>
      <anchor>aa7e99298ff846cabcbcd9b28c5d86c9e</anchor>
      <arglist>(SurfaceCollisions::CollisionsArray, Collisions)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1NonSelfIntersectionConstraint.html</anchorfile>
      <anchor>aac23ad034d22e466db17c898c9a21e21</anchor>
      <arglist>(double, MinDistance)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1NonSelfIntersectionConstraint.html</anchorfile>
      <anchor>ad6cbae03f49f808460d1ea9dfb1fc923</anchor>
      <arglist>(int, NumberOfCollisions)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetWithoutPrefix</name>
      <anchorfile>classmirtk_1_1NonSelfIntersectionConstraint.html</anchorfile>
      <anchor>aa20843a3b55f68a96b680100a29497b5</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::NormalizedGradientFieldSimilarity</name>
    <filename>classmirtk_1_1NormalizedGradientFieldSimilarity.html</filename>
    <base>mirtk::GradientFieldSimilarity</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1NormalizedGradientFieldSimilarity.html</anchorfile>
      <anchor>a7b481114b9d3b453c4035fffe9a6edf9</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::NormalizedIntensityCrossCorrelation</name>
    <filename>classmirtk_1_1NormalizedIntensityCrossCorrelation.html</filename>
    <base>mirtk::ImageSimilarity</base>
    <member kind="enumeration">
      <type></type>
      <name>Units</name>
      <anchorfile>classmirtk_1_1NormalizedIntensityCrossCorrelation.html</anchorfile>
      <anchor>a451d4e62574b18e313960eedf1044b65</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Exclude</name>
      <anchorfile>classmirtk_1_1NormalizedIntensityCrossCorrelation.html</anchorfile>
      <anchor>ac134d8031bc5319c60a2261235b3904f</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Include</name>
      <anchorfile>classmirtk_1_1NormalizedIntensityCrossCorrelation.html</anchorfile>
      <anchor>af6b4c85742ea67d74618be11277a6ded</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1NormalizedIntensityCrossCorrelation.html</anchorfile>
      <anchor>a26fe064648134a719599cc12f3f42f89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NormalizedIntensityCrossCorrelation</name>
      <anchorfile>classmirtk_1_1NormalizedIntensityCrossCorrelation.html</anchorfile>
      <anchor>a859d0f8be161e615d7c7c1b097c5fc24</anchor>
      <arglist>(const char *=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NormalizedIntensityCrossCorrelation</name>
      <anchorfile>classmirtk_1_1NormalizedIntensityCrossCorrelation.html</anchorfile>
      <anchor>a83f2cbe04c3a1c087b8d733bb637e653</anchor>
      <arglist>(const NormalizedIntensityCrossCorrelation &amp;)</arglist>
    </member>
    <member kind="function">
      <type>NormalizedIntensityCrossCorrelation &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1NormalizedIntensityCrossCorrelation.html</anchorfile>
      <anchor>a47e5b5fe5ec857387c798144d2aa516e</anchor>
      <arglist>(const NormalizedIntensityCrossCorrelation &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1NormalizedIntensityCrossCorrelation.html</anchorfile>
      <anchor>af80431955e0492da81c3da82d4aa8262</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1NormalizedIntensityCrossCorrelation.html</anchorfile>
      <anchor>a4bb4f5e0a5ba919a3e6c7d4069ebc3a6</anchor>
      <arglist>(Indent=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>RawValue</name>
      <anchorfile>classmirtk_1_1NormalizedIntensityCrossCorrelation.html</anchorfile>
      <anchor>ae97ec35a5dcc4a73534da48169c8e3e2</anchor>
      <arglist>(double) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetKernelToBoxWindow</name>
      <anchorfile>classmirtk_1_1NormalizedIntensityCrossCorrelation.html</anchorfile>
      <anchor>a208c1ce9995882479f391fcb8ed5f004</anchor>
      <arglist>(double, double=-1, double=-1, Units=UNITS_MM)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetKernelToGaussian</name>
      <anchorfile>classmirtk_1_1NormalizedIntensityCrossCorrelation.html</anchorfile>
      <anchor>af18de4c4b44d0ade4ab5ee0c34b3709f</anchor>
      <arglist>(double, double=-1, double=-1, Units=UNITS_MM)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1NormalizedIntensityCrossCorrelation.html</anchorfile>
      <anchor>a5193ba7e57da8fa98d1ccf93272a3833</anchor>
      <arglist>(bool=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteDataSets</name>
      <anchorfile>classmirtk_1_1NormalizedIntensityCrossCorrelation.html</anchorfile>
      <anchor>a1d2f7802471513d98b5b1872690821a4</anchor>
      <arglist>(const char *, const char *, bool=true) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NormalizedIntensityCrossCorrelation</name>
      <anchorfile>classmirtk_1_1NormalizedIntensityCrossCorrelation.html</anchorfile>
      <anchor>a19a7e04db692ce235ee98e5acda57029</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>ComputeStatistics</name>
      <anchorfile>classmirtk_1_1NormalizedIntensityCrossCorrelation.html</anchorfile>
      <anchor>a675c9698100ba07b068dad4ec28170d5</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;, const RegisteredImage *, RealImage *, RealImage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>ComputeWeightedAverage</name>
      <anchorfile>classmirtk_1_1NormalizedIntensityCrossCorrelation.html</anchorfile>
      <anchor>ac8975747ba87c670359bf7bafab6a1bb</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;, RealImage *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1NormalizedIntensityCrossCorrelation.html</anchorfile>
      <anchor>a7409deeeb81b93016723d8d0da1b3cc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>NonParametricGradient</name>
      <anchorfile>classmirtk_1_1NormalizedIntensityCrossCorrelation.html</anchorfile>
      <anchor>afde5597601c9adb8b3b709cd1697a8f4</anchor>
      <arglist>(const RegisteredImage *, GradientImageType *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetWithPrefix</name>
      <anchorfile>classmirtk_1_1NormalizedIntensityCrossCorrelation.html</anchorfile>
      <anchor>af24d37a3590c412062dfe09d6dbe042f</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::NormalizedMutualImageInformation</name>
    <filename>classmirtk_1_1NormalizedMutualImageInformation.html</filename>
    <base>mirtk::HistogramImageSimilarity</base>
    <member kind="function">
      <type></type>
      <name>NormalizedMutualImageInformation</name>
      <anchorfile>classmirtk_1_1NormalizedMutualImageInformation.html</anchorfile>
      <anchor>abf8f83b121a87699d8f3f21fa85a2c4f</anchor>
      <arglist>(const char *=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NormalizedMutualImageInformation</name>
      <anchorfile>classmirtk_1_1NormalizedMutualImageInformation.html</anchorfile>
      <anchor>a228f7dac83df44d6f6e3baeb70dc22ac</anchor>
      <arglist>(const NormalizedMutualImageInformation &amp;)</arglist>
    </member>
    <member kind="function">
      <type>NormalizedMutualImageInformation &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1NormalizedMutualImageInformation.html</anchorfile>
      <anchor>ae53d469ca43a0fb987ae1d708e084008</anchor>
      <arglist>(const NormalizedMutualImageInformation &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>RawValue</name>
      <anchorfile>classmirtk_1_1NormalizedMutualImageInformation.html</anchorfile>
      <anchor>a3ef1c962cd5c20ef9bde7b2f35d7ebd3</anchor>
      <arglist>(double) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NormalizedMutualImageInformation</name>
      <anchorfile>classmirtk_1_1NormalizedMutualImageInformation.html</anchorfile>
      <anchor>aee03f23ce91e691650c399b39e084a20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1NormalizedMutualImageInformation.html</anchorfile>
      <anchor>aedfe8af5aabbbc9ab4f784c398f358b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>NonParametricGradient</name>
      <anchorfile>classmirtk_1_1NormalizedMutualImageInformation.html</anchorfile>
      <anchor>ae7fd55df220a06c84544f5d476aa7ad4</anchor>
      <arglist>(const RegisteredImage *, GradientImageType *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::Object</name>
    <filename>classmirtk_1_1Object.html</filename>
  </compound>
  <compound kind="class">
    <name>mirtk::ObjectFactory</name>
    <filename>classmirtk_1_1ObjectFactory.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Interface *(*</type>
      <name>Creator</name>
      <anchorfile>classmirtk_1_1ObjectFactory.html</anchorfile>
      <anchor>af205be8cff3f1fb33b65f039eefb2b1d</anchor>
      <arglist>)()</arglist>
    </member>
    <member kind="typedef">
      <type>TId</type>
      <name>Id</name>
      <anchorfile>classmirtk_1_1ObjectFactory.html</anchorfile>
      <anchor>a104bce05191da4c0f58a540d9788c8f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ObjectFactory&lt; Id, Interface &gt;</type>
      <name>InstanceType</name>
      <anchorfile>classmirtk_1_1ObjectFactory.html</anchorfile>
      <anchor>ac6aab1bd501442386b9bed80779145bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TInterface</type>
      <name>Interface</name>
      <anchorfile>classmirtk_1_1ObjectFactory.html</anchorfile>
      <anchor>a130a5211876c03a4b6b319d7dc0330c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Interface *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1ObjectFactory.html</anchorfile>
      <anchor>aabca7a3fe30128e2f9385f0bc9c3e5e2</anchor>
      <arglist>(Id type_id) const </arglist>
    </member>
    <member kind="function">
      <type>Interface *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1ObjectFactory.html</anchorfile>
      <anchor>a8b365d299e2dae8eda89487ab9ba188a</anchor>
      <arglist>(const char *type_name) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Register</name>
      <anchorfile>classmirtk_1_1ObjectFactory.html</anchorfile>
      <anchor>a72996725bde135643145153f7875ad5d</anchor>
      <arglist>(Id type_id, const char *type_name, Creator creator)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ObjectFactory</name>
      <anchorfile>classmirtk_1_1ObjectFactory.html</anchorfile>
      <anchor>a1713bf053e6938dce0be5564618b66b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ObjectFactory</name>
      <anchorfile>classmirtk_1_1ObjectFactory.html</anchorfile>
      <anchor>ad060b5438d57cecdbc7f3225afcf2d76</anchor>
      <arglist>(const ObjectFactory &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1ObjectFactory.html</anchorfile>
      <anchor>a9916ab3dfc3a81be642c5319d51703a3</anchor>
      <arglist>(const ObjectFactory &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~ObjectFactory</name>
      <anchorfile>classmirtk_1_1ObjectFactory.html</anchorfile>
      <anchor>ac03ceff2bc78d51341816c8683153c8c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ObjectiveFunction</name>
    <filename>classmirtk_1_1ObjectiveFunction.html</filename>
    <base>mirtk::Observable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1ObjectiveFunction.html</anchorfile>
      <anchor>ae5b20b998ba45d393644c06558d13ed7</anchor>
      <arglist>(double *dx=NULL, double step=.0, bool *sgn_chg=NULL)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1ObjectiveFunction.html</anchorfile>
      <anchor>a764048edaff0a3374475b90e98e1b71d</anchor>
      <arglist>(int i) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1ObjectiveFunction.html</anchorfile>
      <anchor>aedfd70021668d45eec7afbe6caf7a61c</anchor>
      <arglist>(double *x) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Gradient</name>
      <anchorfile>classmirtk_1_1ObjectiveFunction.html</anchorfile>
      <anchor>a889bfe8d16eabfde268e78d898f4ec5d</anchor>
      <arglist>(double *dx, double step=.0, bool *sgn_chg=NULL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>GradientNorm</name>
      <anchorfile>classmirtk_1_1ObjectiveFunction.html</anchorfile>
      <anchor>a7b5a56fd95a9fa063276d2ef09897454</anchor>
      <arglist>(const double *dx) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GradientStep</name>
      <anchorfile>classmirtk_1_1ObjectiveFunction.html</anchorfile>
      <anchor>aeac8396e96a0ec048ccb5c9a8d4025be</anchor>
      <arglist>(const double *dx, double &amp;min, double &amp;max) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>NumberOfDOFs</name>
      <anchorfile>classmirtk_1_1ObjectiveFunction.html</anchorfile>
      <anchor>ac06563f438eac319d050f8430f421864</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1ObjectiveFunction.html</anchorfile>
      <anchor>a4fb9402ffeb10ead4bbbab568280bf6b</anchor>
      <arglist>(const double *x)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>Step</name>
      <anchorfile>classmirtk_1_1ObjectiveFunction.html</anchorfile>
      <anchor>a483021ecccded5b3d6a06f6df3780011</anchor>
      <arglist>(double *dx)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1ObjectiveFunction.html</anchorfile>
      <anchor>a20a7199ae3c3554a5ae2385f7976d6f6</anchor>
      <arglist>(bool gradient=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Upgrade</name>
      <anchorfile>classmirtk_1_1ObjectiveFunction.html</anchorfile>
      <anchor>af5cd22f38f93b741b6cd1f05f95dcaf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>Value</name>
      <anchorfile>classmirtk_1_1ObjectiveFunction.html</anchorfile>
      <anchor>a494735e2a6e5c041a11dfb791445f26c</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::Observable</name>
    <filename>classmirtk_1_1Observable.html</filename>
    <base>mirtk::Object</base>
  </compound>
  <compound kind="class">
    <name>mirtk::Observer</name>
    <filename>classmirtk_1_1Observer.html</filename>
    <base>mirtk::Object</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>HandleEvent</name>
      <anchorfile>classmirtk_1_1Observer.html</anchorfile>
      <anchor>a14885af022697525f174ce262b347570</anchor>
      <arglist>(Observable *, Event, const void *=NULL)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::OctaryForEachVoxelBody</name>
    <filename>structmirtk_1_1OctaryForEachVoxelBody.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelBody</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody.html</anchorfile>
      <anchor>aed7bad87da4823efb37b0edde531169d</anchor>
      <arglist>(GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelBody</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody.html</anchorfile>
      <anchor>a69e13490f7cda83f01264753f49f1e52</anchor>
      <arglist>(const OctaryForEachVoxelBody &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelBody</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody.html</anchorfile>
      <anchor>a9f7fe783eb437f05a181878c928ae299</anchor>
      <arglist>(OctaryForEachVoxelBody &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody.html</anchorfile>
      <anchor>a55a1a635509019b04014622058a33c93</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody.html</anchorfile>
      <anchor>a9292e2101f68c8e15057212807c49a3f</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody.html</anchorfile>
      <anchor>a18e8c03ee93076f02e5b64f1dfc491e3</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody.html</anchorfile>
      <anchor>a1539aa89d9313fdde34fc2c02f5030ee</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::OctaryForEachVoxelBody_1Const</name>
    <filename>structmirtk_1_1OctaryForEachVoxelBody__1Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelBody_1Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a3c1b3408ee167feb9a9920f686e49d51</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelBody_1Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>ac4b3d0b00598346ce3d63906f31786c5</anchor>
      <arglist>(const OctaryForEachVoxelBody_1Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelBody_1Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a4ccc83319cd5dd23bc48fa35000457ea</anchor>
      <arglist>(OctaryForEachVoxelBody_1Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a98214e2f58a37094771dd7661aa7d49a</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a3e993bcfcd75aa97e297e81341a87c2c</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a9ef6e9cab12e92a9cb33d8e7f668ae4f</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a5139df489d6f896edaef0110166ee76a</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::OctaryForEachVoxelBody_2Const</name>
    <filename>structmirtk_1_1OctaryForEachVoxelBody__2Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelBody_2Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>ac7f85bb386cfe30f7304923280d66cdb</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelBody_2Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a9e8de496b03434748aa6df98d8c584df</anchor>
      <arglist>(const OctaryForEachVoxelBody_2Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelBody_2Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>ac19e517c051409654546d37929526ae9</anchor>
      <arglist>(OctaryForEachVoxelBody_2Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>ab60b8b9d1d7505164e92a5022ee396b1</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>ad87354f4c20b9c27ce19c7fbbf2373ca</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a7572af5043e7f0ae32e741d03112fa87</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a2d11a411365d836b1a00f60218bda1dc</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::OctaryForEachVoxelBody_3Const</name>
    <filename>structmirtk_1_1OctaryForEachVoxelBody__3Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelBody_3Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>ab41a3ae09e32987436d64a2ee12e325e</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelBody_3Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>af8b479ef48d61e6cda3f75cbb7e77db7</anchor>
      <arglist>(const OctaryForEachVoxelBody_3Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelBody_3Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>ae5e6a888e617330d83aed31e1f648b36</anchor>
      <arglist>(OctaryForEachVoxelBody_3Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>af50ba9b7a8d8e925d983db0460677293</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>aeafce319acb9450dc0d717c4c4364d56</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>af6446e498f72cb0eca5237cb55d32943</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>a1f9c679da7123ff194350895b2fda511</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::OctaryForEachVoxelBody_4Const</name>
    <filename>structmirtk_1_1OctaryForEachVoxelBody__4Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelBody_4Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>ab17c89370b2ff8a4f5f68729b555630d</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelBody_4Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>a4269e753109ea0c6cc0c561aa72f7703</anchor>
      <arglist>(const OctaryForEachVoxelBody_4Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelBody_4Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>a0d473a689648e7d2ab06d1b15bb529af</anchor>
      <arglist>(OctaryForEachVoxelBody_4Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>a8265d4779b3642656942a539ce982129</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>a75b028fb0ee174a2bd3a694ac2f5e4af</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>a1267114e6db42a6960237718b64c2e85</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>ae0e0ee4a85307d621de11cc039ad04ed</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::OctaryForEachVoxelBody_5Const</name>
    <filename>structmirtk_1_1OctaryForEachVoxelBody__5Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelBody_5Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__5Const.html</anchorfile>
      <anchor>a54dcd655cbf37581ac0a1bfbff3768d3</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, const GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelBody_5Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__5Const.html</anchorfile>
      <anchor>a5882612354e920402013e48a76c8bafc</anchor>
      <arglist>(const OctaryForEachVoxelBody_5Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelBody_5Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__5Const.html</anchorfile>
      <anchor>a2c78d82ef2f4abaa3597561092a6824a</anchor>
      <arglist>(OctaryForEachVoxelBody_5Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__5Const.html</anchorfile>
      <anchor>a6e72d81641aefb39ba7ff008d02f299a</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__5Const.html</anchorfile>
      <anchor>ad652483bae6623155fdcc8415fcc72fb</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__5Const.html</anchorfile>
      <anchor>a76ac8b5ea779882a0485c0500870561b</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__5Const.html</anchorfile>
      <anchor>a9fa9f045719a4b3bc6f0610de80c4590</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::OctaryForEachVoxelBody_6Const</name>
    <filename>structmirtk_1_1OctaryForEachVoxelBody__6Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelBody_6Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__6Const.html</anchorfile>
      <anchor>abb3551904d9c04b58281f9e4c8d53a75</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, const GenericImage&lt; T5 &gt; &amp;im5, const GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelBody_6Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__6Const.html</anchorfile>
      <anchor>ac2aa8da57f3def1e4faec0f7f80cf500</anchor>
      <arglist>(const OctaryForEachVoxelBody_6Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelBody_6Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__6Const.html</anchorfile>
      <anchor>a7a861d9fc599b02c6fa34e076549b4df</anchor>
      <arglist>(OctaryForEachVoxelBody_6Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__6Const.html</anchorfile>
      <anchor>a14cd0722567432e5995c6ff04b6d1d11</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__6Const.html</anchorfile>
      <anchor>a9d56d11db29c618c06ef534b937dc1fc</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__6Const.html</anchorfile>
      <anchor>ade5279afdd93e31496cf507789170c32</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__6Const.html</anchorfile>
      <anchor>a5fdbbf4b54a7ad1efa74999fda4dafa5</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::OctaryForEachVoxelBody_7Const</name>
    <filename>structmirtk_1_1OctaryForEachVoxelBody__7Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelBody_7Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__7Const.html</anchorfile>
      <anchor>a9428e2c565bb225592cc156527278516</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, const GenericImage&lt; T5 &gt; &amp;im5, const GenericImage&lt; T6 &gt; &amp;im6, const GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelBody_7Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__7Const.html</anchorfile>
      <anchor>a85020fa785f869290fb275640db06fc0</anchor>
      <arglist>(const OctaryForEachVoxelBody_7Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelBody_7Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__7Const.html</anchorfile>
      <anchor>a451ffb257a8ee1d274797a04dffb5b5e</anchor>
      <arglist>(OctaryForEachVoxelBody_7Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__7Const.html</anchorfile>
      <anchor>a79e2f4d506d089f1df85424482f8f9b9</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__7Const.html</anchorfile>
      <anchor>a8d117876c08613dbb8d1d802030bc83c</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__7Const.html</anchorfile>
      <anchor>a3812eba68833ab30241440f7a1c36bb8</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__7Const.html</anchorfile>
      <anchor>aca1a662f5b2d47d18d1478dbbad912ac</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::OctaryForEachVoxelBody_Const</name>
    <filename>structmirtk_1_1OctaryForEachVoxelBody__Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelBody_Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a7f5222cc37d9a0cbb7938bc66ad8bd42</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, const GenericImage&lt; T5 &gt; &amp;im5, const GenericImage&lt; T6 &gt; &amp;im6, const GenericImage&lt; T7 &gt; &amp;im7, const GenericImage&lt; T8 &gt; &amp;im8, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelBody_Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>ab1ffc07fbec4ef15dac2078845db13d5</anchor>
      <arglist>(const OctaryForEachVoxelBody_Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelBody_Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a5c892c2cfdad3a0bd63d2ad2bbb51b26</anchor>
      <arglist>(OctaryForEachVoxelBody_Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a6d216fb2004902e6029a4f27091e0113</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a5e76e91e13fe133aa36fc5931cd9ef68</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a5434fc8858356a301dee13ea6eb747cd</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>acfe2fe12fc05496f7328eb3b3df52a1e</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::OctaryForEachVoxelIfBody</name>
    <filename>structmirtk_1_1OctaryForEachVoxelIfBody.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelIfBody</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a1779e6947ae939977c1e57aa3b507cb6</anchor>
      <arglist>(GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelIfBody</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a564d73d6f398bce92c4b0cac9e423ea6</anchor>
      <arglist>(const OctaryForEachVoxelIfBody &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelIfBody</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a2a4edba1ab7908444842e509b77d17a9</anchor>
      <arglist>(OctaryForEachVoxelIfBody &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a74d02386d42a5e6fb75ffae9f81d8ee5</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a15c2015ca2e22f4aa690204175237247</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody.html</anchorfile>
      <anchor>ad727873fd28cddac854e3e7c27e536b2</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a247df46c431febab8c2422a5e9a78813</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::OctaryForEachVoxelIfBody_1Const</name>
    <filename>structmirtk_1_1OctaryForEachVoxelIfBody__1Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelIfBody_1Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a3120b274bf5864acb5a9731a5e5a9fb9</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelIfBody_1Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a3f998ffd3a4ac61cd61e17beb8ca8166</anchor>
      <arglist>(const OctaryForEachVoxelIfBody_1Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelIfBody_1Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a0552708d7617dcc58a9404236fe233cc</anchor>
      <arglist>(OctaryForEachVoxelIfBody_1Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>af159bcb0c51fd01532066be21ab9dab1</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>ac2c6e613571625217df0d800a4051e4b</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a640c8ce6c5454802b99ef636bfecd19a</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>afdf92f48fbe5bfa54ccfa6a50b0f0715</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::OctaryForEachVoxelIfBody_2Const</name>
    <filename>structmirtk_1_1OctaryForEachVoxelIfBody__2Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelIfBody_2Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>ada20fbe0caa7d09052154cc4c5370940</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelIfBody_2Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>af049f296e0d27c2da9566a4f0abd55fa</anchor>
      <arglist>(const OctaryForEachVoxelIfBody_2Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelIfBody_2Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>a612371bc6ad6486d933a8ea9b21252bd</anchor>
      <arglist>(OctaryForEachVoxelIfBody_2Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>afe4c538042ce9806097b1b560f38b0be</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>ad1558bcc2783b591e630c96bc3175368</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>aab3cc832574dd39a8bb59074154bca29</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>aa80575d23ec021dc004c15711cd5774b</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::OctaryForEachVoxelIfBody_3Const</name>
    <filename>structmirtk_1_1OctaryForEachVoxelIfBody__3Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelIfBody_3Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>ad7d9c8a205b3111e47fe5c3e9cc33d2d</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelIfBody_3Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>a6c1474c8417e9b0ac6c6713329f88e14</anchor>
      <arglist>(const OctaryForEachVoxelIfBody_3Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelIfBody_3Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>a60fb608a02c98fd6ee3a6e31ac577fd8</anchor>
      <arglist>(OctaryForEachVoxelIfBody_3Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>a5926866f07aa9ea8bdfc2a73285f6402</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>aaf110ed84f06fcbaff179c9407bae627</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>a2a976f5cc1c54f266cfa95fd8f5e22f2</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>a5da889ec163a05615b685ad21f81382e</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::OctaryForEachVoxelIfBody_4Const</name>
    <filename>structmirtk_1_1OctaryForEachVoxelIfBody__4Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelIfBody_4Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>ae525a5053b1683a7350af7ff75532804</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelIfBody_4Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>a0e2eb2df02bca8c08f9a8d28c1efb541</anchor>
      <arglist>(const OctaryForEachVoxelIfBody_4Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelIfBody_4Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>a9a60374f1ae068dd2c22a8a7d9ef21b2</anchor>
      <arglist>(OctaryForEachVoxelIfBody_4Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>aff635b4ce91a51320079294584104478</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>a1dc3ccc13b92a7ce896db791c6243afb</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>a2da0f9f4f519c13c8c44a0050d3bc3fd</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>ae0f4f8c4367a989641dd54fa01040204</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::OctaryForEachVoxelIfBody_5Const</name>
    <filename>structmirtk_1_1OctaryForEachVoxelIfBody__5Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelIfBody_5Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__5Const.html</anchorfile>
      <anchor>a1b8d3f5ad49546a2642724b50fb2a8b6</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, const GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelIfBody_5Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__5Const.html</anchorfile>
      <anchor>a37af4c67e6f907724560ea481cf28f79</anchor>
      <arglist>(const OctaryForEachVoxelIfBody_5Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelIfBody_5Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__5Const.html</anchorfile>
      <anchor>a55c89b05a25aa2cd00a2e8a5d6167884</anchor>
      <arglist>(OctaryForEachVoxelIfBody_5Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__5Const.html</anchorfile>
      <anchor>a12324646eced4f7b2aaf43329923df46</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__5Const.html</anchorfile>
      <anchor>ac844e208154ffa16747c6843d69f232e</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__5Const.html</anchorfile>
      <anchor>a37da66bca6abc4ebb29f0052495b7135</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__5Const.html</anchorfile>
      <anchor>a66bd5bf9b926d350beabb5cc5d1171e8</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::OctaryForEachVoxelIfBody_6Const</name>
    <filename>structmirtk_1_1OctaryForEachVoxelIfBody__6Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelIfBody_6Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__6Const.html</anchorfile>
      <anchor>a93b345d81429a0dff87fa7595f9dd97a</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, const GenericImage&lt; T5 &gt; &amp;im5, const GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelIfBody_6Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__6Const.html</anchorfile>
      <anchor>ad03a98eb309122247f680def80b8e17a</anchor>
      <arglist>(const OctaryForEachVoxelIfBody_6Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelIfBody_6Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__6Const.html</anchorfile>
      <anchor>acfedd3e773fbff542c3d57838c17ff31</anchor>
      <arglist>(OctaryForEachVoxelIfBody_6Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__6Const.html</anchorfile>
      <anchor>acdcfc4017495cbdb455ab2345ee1029f</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__6Const.html</anchorfile>
      <anchor>a74055946ec50bc6c0029514299d670f8</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__6Const.html</anchorfile>
      <anchor>a9c06b5bb4065a9143f8c0682a2606e3f</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__6Const.html</anchorfile>
      <anchor>a61aa1bb3d32916381fd2da1898d0c5a5</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::OctaryForEachVoxelIfBody_7Const</name>
    <filename>structmirtk_1_1OctaryForEachVoxelIfBody__7Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelIfBody_7Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__7Const.html</anchorfile>
      <anchor>ab38c7323249671caa8349cb2e2631c42</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, const GenericImage&lt; T5 &gt; &amp;im5, const GenericImage&lt; T6 &gt; &amp;im6, const GenericImage&lt; T7 &gt; &amp;im7, GenericImage&lt; T8 &gt; &amp;im8, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelIfBody_7Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__7Const.html</anchorfile>
      <anchor>a8661588beb9be1051ce48f9a6cd4b7e9</anchor>
      <arglist>(const OctaryForEachVoxelIfBody_7Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelIfBody_7Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__7Const.html</anchorfile>
      <anchor>afddac99742773bda643e430f23c6f8c7</anchor>
      <arglist>(OctaryForEachVoxelIfBody_7Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__7Const.html</anchorfile>
      <anchor>a2e6f25ec2dba856695f1eaa2b1b632e8</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__7Const.html</anchorfile>
      <anchor>afa2dd5372f0218b18341970c93810bf1</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__7Const.html</anchorfile>
      <anchor>a607ce7bb1a0da1b37ebe3aff94baabd4</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__7Const.html</anchorfile>
      <anchor>a369efb8556c6c40120738903535230e6</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::OctaryForEachVoxelIfBody_Const</name>
    <filename>structmirtk_1_1OctaryForEachVoxelIfBody__Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelIfBody_Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>aaf79f8fe5b35793bb4d481de307475d2</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, const GenericImage&lt; T5 &gt; &amp;im5, const GenericImage&lt; T6 &gt; &amp;im6, const GenericImage&lt; T7 &gt; &amp;im7, const GenericImage&lt; T8 &gt; &amp;im8, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelIfBody_Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a0a59b73c3e777f81570936a4997958ea</anchor>
      <arglist>(const OctaryForEachVoxelIfBody_Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OctaryForEachVoxelIfBody_Const</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a93ce03b99a6e6c73dea5ec6b1b3d7912</anchor>
      <arglist>(OctaryForEachVoxelIfBody_Const &amp;o, split s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a3af56fef40e28de5ca6ee2691e4e2aaf</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>aa85c6f89b15bef7764052880efe4d835</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>ab73c51f300ad33d5ea5f2ed42bf39b91</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1OctaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a5995692b96884502fe12ecefd961433c</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::PartialAffineTransformation</name>
    <filename>classmirtk_1_1PartialAffineTransformation.html</filename>
    <base>mirtk::AffineTransformation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasSameDOFsAs</name>
      <anchorfile>classmirtk_1_1PartialAffineTransformation.html</anchorfile>
      <anchor>a1fbdc49ed0b23f9e0f78e5977609b0cc</anchor>
      <arglist>(const class Transformation *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1PartialAffineTransformation.html</anchorfile>
      <anchor>a7a5e55085a781447c5aa48243b3526d4</anchor>
      <arglist>(const GenericImage&lt; double &gt; *, double *, const WorldCoordsImage *=NULL, const WorldCoordsImage *=NULL, double=0, double=1) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PartialAffineTransformation</name>
      <anchorfile>classmirtk_1_1PartialAffineTransformation.html</anchorfile>
      <anchor>acb0d64949b6116e0371ab724f1ff132a</anchor>
      <arglist>(HomogeneousTransformation *=NULL, double=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Transformation</name>
      <anchorfile>classmirtk_1_1PartialAffineTransformation.html</anchorfile>
      <anchor>ae4d1c97b78a8f775ba1134711789e1ff</anchor>
      <arglist>(HomogeneousTransformation *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PartialAffineTransformation</name>
      <anchorfile>classmirtk_1_1PartialAffineTransformation.html</anchorfile>
      <anchor>a59f5a669365bc3760c949997a9852ee8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::PartialBSplineFreeFormTransformationSV</name>
    <filename>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</filename>
    <base>mirtk::Transformation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Add</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>ab13aa85df8fe37eef9ad51d8b170e8f5</anchor>
      <arglist>(const DOFValue *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a4a315f8454e1276b75cc21a550f16bde</anchor>
      <arglist>(const class Transformation *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Displacement</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a112a0c9997a8463184c5230f694c39d0</anchor>
      <arglist>(GenericImage&lt; double &gt; &amp;, double, double=1, const WorldCoordsImage *=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Displacement</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>ac600eb8ad072c68c3e5e67a10a46ef38</anchor>
      <arglist>(GenericImage&lt; float &gt; &amp;, double, double=1, const WorldCoordsImage *=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>afbc717b18d705ee75cf88d3e348af363</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>ac3b2417eb45f60f826a09f8d212053ac</anchor>
      <arglist>(DOFValue *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DOFStatus</type>
      <name>GetStatus</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a7348ee58ed758cabc994ec3335ff6dd9</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GlobalHessian</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a954a5234ea4f8000c7850a4f43344bed</anchor>
      <arglist>(Matrix[3], double, double, double, double=0, double=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GlobalInverse</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>ad8964f12715bd53f0ebcc71b1bdff54f</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GlobalJacobian</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a9c6365b12e733613896517a24fc5c8d2</anchor>
      <arglist>(Matrix &amp;, double, double, double, double=0, double=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GlobalTransform</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a30c064ae90da86886af16df524daed15</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasSameDOFsAs</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a5741275f15722da84eda6ed3d1c03f67</anchor>
      <arglist>(const class Transformation *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Hessian</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a33d9d68089e633f2db9b317d8382a03a</anchor>
      <arglist>(Matrix[3], double, double, double, double=0, double=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Inverse</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>ac089dc9c3a4c4bcf92b2f18e50f2ede5</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InverseDisplacement</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a6871cc60bb2bd77c07aa6efb9207e159</anchor>
      <arglist>(GenericImage&lt; double &gt; &amp;, double, double=1, const WorldCoordsImage *=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InverseDisplacement</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a4394b2aab50ece9c3170514315c8eb76</anchor>
      <arglist>(GenericImage&lt; float &gt; &amp;, double, double=1, const WorldCoordsImage *=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsIdentity</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a0486acc56d9e4c37599d260323aa3721</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Jacobian</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a757ba0beb82cc61cc7e0aef92a6286f5</anchor>
      <arglist>(Matrix &amp;, double, double, double, double=0, double=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDOFs</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a56c0311f60e6d3e172efe268414364c2</anchor>
      <arglist>(double[3], int, double, double, double, double=0, double=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalHessian</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a3812e8c3e910c7cedfa3ff9d18856803</anchor>
      <arglist>(Matrix[3], double, double, double, double=0, double=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>LocalInverse</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>ae3f4c5cfa85db350406d248028b32b72</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalJacobian</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a7b699897bab64db7b877bcbd61be4dc9</anchor>
      <arglist>(Matrix &amp;, double, double, double, double=0, double=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalTransform</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a5491884866a834e66ca60d935d2faf7c</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumberOfDOFs</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a24a165716ff6b0178a0744132940d2b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a47a77fc1d076f2e51efdab4004b360de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a16500a92564c0f69bce6ad893284b165</anchor>
      <arglist>(const GenericImage&lt; double &gt; *, double *, const WorldCoordsImage *, const WorldCoordsImage *, double=1, double=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>ac66bc5c8655383da5a257db0ddc6037b</anchor>
      <arglist>(const GenericImage&lt; double &gt; **, int, double *, const WorldCoordsImage *, const WorldCoordsImage *, const double *=NULL, double=1) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PartialBSplineFreeFormTransformationSV</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>acdf86745b62f8ad552729870debbec4d</anchor>
      <arglist>(BSplineFreeFormTransformationSV *=NULL, double=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PartialBSplineFreeFormTransformationSV</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>aa690ea157afc2838379c843fbae6b40e</anchor>
      <arglist>(const PartialBSplineFreeFormTransformationSV &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a194fb4bbbf4990b0d16d9d0b2f32965c</anchor>
      <arglist>(Indent=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>aa3989fbd157b18de105bd4ceb2a2287a</anchor>
      <arglist>(int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a6564855df948f2441232b09f65f88b54</anchor>
      <arglist>(const DOFValue *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutStatus</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>aa2a67f6d001ce4536274a5ef98124cf2</anchor>
      <arglist>(int, DOFStatus)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cifstream &amp;</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a37a5b26ef4ba0d1029224753ff483243</anchor>
      <arglist>(Cifstream &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>RequiresCachingOfDisplacements</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>afaa490903a4f382cd4130887149a0d25</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a43778442f98c3aeef4caac84d9907e98</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Transform</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a69dfa1363ed558e23679e32931129ebf</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>ace5c71d162c4e8e3018baa1714c156c1</anchor>
      <arglist>(const DOFValue *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cofstream &amp;</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>aadc4bd9f8907b9685d4922f83ef427d7</anchor>
      <arglist>(Cofstream &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PartialBSplineFreeFormTransformationSV</name>
      <anchorfile>classmirtk_1_1PartialBSplineFreeFormTransformationSV.html</anchorfile>
      <anchor>a53b685f79aecdef29971b126dac191a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Approximate</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>ac70c9601928872b9095d914cbeeebe59</anchor>
      <arglist>(const ImageAttributes &amp;, double *, double *, double *, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Approximate</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>aaf8ee02555c540a38dc3e4586172669b</anchor>
      <arglist>(const double *, const double *, const double *, double *, double *, double *, int, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Approximate</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>afad6e52d0029d1d6ea02bfb0f922e1b7</anchor>
      <arglist>(const double *, const double *, const double *, const double *, double *, double *, double *, int, int=1, double=.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a1e338f6b6aebd93225f04bb3ceb44cc7</anchor>
      <arglist>(const Transformation *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::PartialMultiLevelStationaryVelocityTransformation</name>
    <filename>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</filename>
    <base>mirtk::MultiLevelTransformation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Add</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a64653c19cfc7efa8b9873891dbacc35d</anchor>
      <arglist>(const DOFValue *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>CombineLocalTransformation</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a4be23cd7ff409cd6773b7e877d0cdf02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a3d79393ec266498191c3bf57077ee145</anchor>
      <arglist>(const class Transformation *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Displacement</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a63654c210dcb09faef2c0d9dfa40b5d4</anchor>
      <arglist>(int, int, GenericImage&lt; double &gt; &amp;, double, double=1, const WorldCoordsImage *=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Displacement</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a0f46fd93d80b770f6e74f630b7fbba31</anchor>
      <arglist>(int, int, GenericImage&lt; float &gt; &amp;, double, double=1, const WorldCoordsImage *=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a00c3135dfb5a2c8a583aeaa5c8283ff6</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>abdc8c0e184050694c623eb8fff2f30a3</anchor>
      <arglist>(DOFValue *) const </arglist>
    </member>
    <member kind="function">
      <type>AffineTransformation *</type>
      <name>GetGlobalTransformation</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a210158961bcc60f1a261bdd8941ba734</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const AffineTransformation *</type>
      <name>GetGlobalTransformation</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a8be6b0aa17b4e97700b55600bd257ce3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FreeFormTransformation *</type>
      <name>GetLocalTransformation</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a56690290b1c9e081dfd3a8589f6c929b</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const FreeFormTransformation *</type>
      <name>GetLocalTransformation</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a82fef0e675219cb0a0d2f67871f0574c</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DOFStatus</type>
      <name>GetStatus</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>ac8362ad89613b2150a29abb744a2a2e6</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GlobalInverse</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>ae6ea531c9b16c65a5ec6da229fc80d6e</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GlobalTransform</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a2903609a6b39a5f04cb8c9d5eda5c4ff</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>HasSameDOFsAs</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a5b50a970ecfcbded894a44fafc911d91</anchor>
      <arglist>(const class Transformation *) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InsertLocalTransformation</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a717d56002e6a03b36096e1e08123b94f</anchor>
      <arglist>(FreeFormTransformation *, int=0, bool=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Inverse</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>aa0f9ef8e58dc0452b91f2aea5583d178</anchor>
      <arglist>(int, int, double &amp;, double &amp;, double &amp;, double=0, double=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InverseDisplacement</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a3df612493ea5c1375e7c60c6dddb45a0</anchor>
      <arglist>(int, int, GenericImage&lt; double &gt; &amp;, double, double=1, const WorldCoordsImage *=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>InverseDisplacement</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a0f1761373741b93cad8e67a7f24eec8f</anchor>
      <arglist>(int, int, GenericImage&lt; float &gt; &amp;, double, double=1, const WorldCoordsImage *=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsIdentity</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a8e05d85d9835206a0aead11dbcb5eb5a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>LocalInverse</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>afc42ccf366a92e8b2ed9a9a953a58c37</anchor>
      <arglist>(int, int, double &amp;, double &amp;, double &amp;, double=0, double=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LocalTransform</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a0ba3513a1fdfaf67b3ae6672edb38da7</anchor>
      <arglist>(int, int, double &amp;, double &amp;, double &amp;, double=0, double=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>MergeGlobalIntoLocalDisplacement</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a1f3b67991228945e2ce663747ef7f0ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumberOfDOFs</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>af104a3a3ff4bae706cdf31a6a8f296d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfLevels</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>afa5b8433568b8e61a93c63bc8a5e46be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>af70ea4e173199ec0fc6d0f49f7dc6310</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>ad9f197f07bd00de57f692ffbd9cea8fd</anchor>
      <arglist>(const GenericImage&lt; double &gt; *, double *, const WorldCoordsImage *, const WorldCoordsImage *, double=1, double=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a61d30505c1583618a5f52a86aedcdf26</anchor>
      <arglist>(const GenericImage&lt; double &gt; **, int, double *, const WorldCoordsImage *, const WorldCoordsImage *, const double *=NULL, double=1) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PartialMultiLevelStationaryVelocityTransformation</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>ad3c109462afe3e281059a93f3492ada5</anchor>
      <arglist>(MultiLevelStationaryVelocityTransformation *=NULL, double=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PartialMultiLevelStationaryVelocityTransformation</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>ac9da933b6a217911114acdb7c136b4ca</anchor>
      <arglist>(const PartialMultiLevelStationaryVelocityTransformation &amp;)</arglist>
    </member>
    <member kind="function">
      <type>FreeFormTransformation *</type>
      <name>PopLocalTransformation</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a17b02da59224507d85be653f97536e3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>aa42afeb1fb71500d52e62d99aa7c9afe</anchor>
      <arglist>(Indent=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PushLocalTransformation</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>ab10826028e977b1e4762deb5742d6c9d</anchor>
      <arglist>(FreeFormTransformation *, bool=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>acbdb4c33d8098e05dbbfc940493f3647</anchor>
      <arglist>(int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a376f806f640653f9c492ab8a9fcfd5e6</anchor>
      <arglist>(const DOFValue *)</arglist>
    </member>
    <member kind="function">
      <type>FreeFormTransformation *</type>
      <name>PutLocalTransformation</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a08c22e07b66ff82b6a2e28e8bb20a24f</anchor>
      <arglist>(FreeFormTransformation *, int, bool=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutStatus</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>aba5bdacde8c4458cf2109880e4d3d35d</anchor>
      <arglist>(int, DOFStatus)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cifstream &amp;</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>aa947eefe3b3a444d120240ba966cfae0</anchor>
      <arglist>(Cifstream &amp;)</arglist>
    </member>
    <member kind="function">
      <type>FreeFormTransformation *</type>
      <name>RemoveLocalTransformation</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a62218b14d25854c20b89b12b6ea1d26a</anchor>
      <arglist>(int=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>RequiresCachingOfDisplacements</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>aa58478e1cf11268c0779c6c46ab9e4f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a81512f9813e1b59d40b9cb42686509c2</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Transform</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a51b8b0b0ee1b1bd1a201956a7ca729cf</anchor>
      <arglist>(int, int, double &amp;, double &amp;, double &amp;, double=0, double=1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a965d69d66947e3d252d77eee64d91356</anchor>
      <arglist>(const DOFValue *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cofstream &amp;</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a7ad72ac57af0115796384c6bd7aed702</anchor>
      <arglist>(Cofstream &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PartialMultiLevelStationaryVelocityTransformation</name>
      <anchorfile>classmirtk_1_1PartialMultiLevelStationaryVelocityTransformation.html</anchorfile>
      <anchor>a562f87dca37384e3e4995fe5624dd7cd</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::PeakSignalToNoiseRatio</name>
    <filename>classmirtk_1_1PeakSignalToNoiseRatio.html</filename>
    <base>mirtk::SumOfSquaredIntensityDifferences</base>
    <member kind="function">
      <type>PeakSignalToNoiseRatio &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1PeakSignalToNoiseRatio.html</anchorfile>
      <anchor>a7f2c352ee21f761069a0aff54a32efe5</anchor>
      <arglist>(const PeakSignalToNoiseRatio &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PeakSignalToNoiseRatio</name>
      <anchorfile>classmirtk_1_1PeakSignalToNoiseRatio.html</anchorfile>
      <anchor>a99f20d48a2e9ee66eaa7eb325f14a86d</anchor>
      <arglist>(const char *=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PeakSignalToNoiseRatio</name>
      <anchorfile>classmirtk_1_1PeakSignalToNoiseRatio.html</anchorfile>
      <anchor>a76adb421fe4c719a61cc917a2149fdb3</anchor>
      <arglist>(const PeakSignalToNoiseRatio &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>RawValue</name>
      <anchorfile>classmirtk_1_1PeakSignalToNoiseRatio.html</anchorfile>
      <anchor>abd216d4e0e3e55eb1e944fcda2f70cd6</anchor>
      <arglist>(double) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PeakSignalToNoiseRatio</name>
      <anchorfile>classmirtk_1_1PeakSignalToNoiseRatio.html</anchorfile>
      <anchor>a197c2d1e4967209aa611de8eb0dc597c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1SumOfSquaredIntensityDifferences.html</anchorfile>
      <anchor>a8b537a2b00933a7c5c8efd4b4bdb1a81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SumOfSquaredIntensityDifferences &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1SumOfSquaredIntensityDifferences.html</anchorfile>
      <anchor>a0a594c2bae2486f83c1172ae3056f6d0</anchor>
      <arglist>(const SumOfSquaredIntensityDifferences &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SumOfSquaredIntensityDifferences</name>
      <anchorfile>classmirtk_1_1SumOfSquaredIntensityDifferences.html</anchorfile>
      <anchor>aadc60d41dec942a1ca95c92f4c503365</anchor>
      <arglist>(const char *=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SumOfSquaredIntensityDifferences</name>
      <anchorfile>classmirtk_1_1SumOfSquaredIntensityDifferences.html</anchorfile>
      <anchor>aa38be5c27482b0eb46735f9aacfe9c13</anchor>
      <arglist>(const SumOfSquaredIntensityDifferences &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1SumOfSquaredIntensityDifferences.html</anchorfile>
      <anchor>a9c8f060fa97cd8151d0f40b7d4ca34ad</anchor>
      <arglist>(bool=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SumOfSquaredIntensityDifferences</name>
      <anchorfile>classmirtk_1_1SumOfSquaredIntensityDifferences.html</anchorfile>
      <anchor>ab560061eb438290f0024001f4a889226</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1PeakSignalToNoiseRatio.html</anchorfile>
      <anchor>ada42e251e8ffac0f0f261de9a48b9489</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Exclude</name>
      <anchorfile>classmirtk_1_1SumOfSquaredIntensityDifferences.html</anchorfile>
      <anchor>aa20da1fb9029d44432d00d9f2e845a62</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Include</name>
      <anchorfile>classmirtk_1_1SumOfSquaredIntensityDifferences.html</anchorfile>
      <anchor>a23dd0c53d822d1ca29e5b449671f519b</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>NonParametricGradient</name>
      <anchorfile>classmirtk_1_1SumOfSquaredIntensityDifferences.html</anchorfile>
      <anchor>a7c001b53bc160de157de35711f784f62</anchor>
      <arglist>(const RegisteredImage *, GradientImageType *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::PeronaMalikErrorFunction</name>
    <filename>classmirtk_1_1PeronaMalikErrorFunction.html</filename>
    <base>mirtk::RadialErrorFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Derivative</name>
      <anchorfile>classmirtk_1_1PeronaMalikErrorFunction.html</anchorfile>
      <anchor>a4483235a954f89a93aeca9ec3b0fff4f</anchor>
      <arglist>(double d) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RadialErrorFunction *</type>
      <name>NewInstance</name>
      <anchorfile>classmirtk_1_1PeronaMalikErrorFunction.html</anchorfile>
      <anchor>aabd0ee9d971a727d5afe11da7b3b1bad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1PeronaMalikErrorFunction.html</anchorfile>
      <anchor>aae9633d6890bd912f9d337ee8a31a885</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PeronaMalikErrorFunction</name>
      <anchorfile>classmirtk_1_1PeronaMalikErrorFunction.html</anchorfile>
      <anchor>ade3fba0dc835782a3e582a6c88f8d15f</anchor>
      <arglist>(double threshold=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PeronaMalikErrorFunction</name>
      <anchorfile>classmirtk_1_1PeronaMalikErrorFunction.html</anchorfile>
      <anchor>ac999d699536df8bf9d28f21a832b9b1e</anchor>
      <arglist>(const PeronaMalikErrorFunction &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1PeronaMalikErrorFunction.html</anchorfile>
      <anchor>a170eb354b51997493d9e5d0169b5d9d2</anchor>
      <arglist>(const char *name, const char *value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TypeId</type>
      <name>Type</name>
      <anchorfile>classmirtk_1_1PeronaMalikErrorFunction.html</anchorfile>
      <anchor>a63868b03b41257abe8c952b595e4e2b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Value</name>
      <anchorfile>classmirtk_1_1PeronaMalikErrorFunction.html</anchorfile>
      <anchor>a72ebb9d7bb8f19a563c220be9c49ae63</anchor>
      <arglist>(double d) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PeronaMalikErrorFunction</name>
      <anchorfile>classmirtk_1_1PeronaMalikErrorFunction.html</anchorfile>
      <anchor>a18eac5827c0c16ddc6566f620b051e9e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::PGMImageReader</name>
    <filename>classmirtk_1_1PGMImageReader.html</filename>
    <base>mirtk::ImageReader</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>CanRead</name>
      <anchorfile>classmirtk_1_1PGMImageReader.html</anchorfile>
      <anchor>a3688d353c1e303c70eb1cf7bde7c383b</anchor>
      <arglist>(const char *) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>CheckHeader</name>
      <anchorfile>classmirtk_1_1PGMImageReader.html</anchorfile>
      <anchor>a6acce254991c897ef5ce597fc7cf0e1f</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>ReadHeader</name>
      <anchorfile>classmirtk_1_1PGMImageReader.html</anchorfile>
      <anchor>a4bc31d0001ce2e82aac1655cde336fd8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::PGMImageWriter</name>
    <filename>classmirtk_1_1PGMImageWriter.html</filename>
    <base>mirtk::ImageWriter</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1PGMImageWriter.html</anchorfile>
      <anchor>a6e12c9e6db4e66af215197e1d269f7bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Array&lt; string &gt;</type>
      <name>Extensions</name>
      <anchorfile>classmirtk_1_1PGMImageWriter.html</anchorfile>
      <anchor>a9d812d2fcec7f58989b0e441a45892a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1PGMImageWriter.html</anchorfile>
      <anchor>a08aaaee5aea7cfca9f55403c1e7614e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::Plane</name>
    <filename>classmirtk_1_1Plane.html</filename>
    <base>mirtk::Object</base>
    <member kind="function">
      <type>double</type>
      <name>Distance</name>
      <anchorfile>classmirtk_1_1Plane.html</anchorfile>
      <anchor>a0ab6e65af50b487aabfe2807ad54ccee</anchor>
      <arglist>(const Point &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Distance</name>
      <anchorfile>classmirtk_1_1Plane.html</anchorfile>
      <anchor>a488039f206ae7940e89e612935b74efb</anchor>
      <arglist>(const double p[3]) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Distance</name>
      <anchorfile>classmirtk_1_1Plane.html</anchorfile>
      <anchor>ad684fe2878dfd0baa44aae5052d0d480</anchor>
      <arglist>(double x, double y, double z) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1Plane.html</anchorfile>
      <anchor>a7863718211d376bd19bf624d7c5cb176</anchor>
      <arglist>(const Point &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1Plane.html</anchorfile>
      <anchor>ae4ad7a7e03c2c9d3a3ab7a0babbbb356</anchor>
      <arglist>(const double p[3]) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1Plane.html</anchorfile>
      <anchor>abe279afc55a05bee4dcf1c16216d81ab</anchor>
      <arglist>(double x, double y, double z) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Fit</name>
      <anchorfile>classmirtk_1_1Plane.html</anchorfile>
      <anchor>a6beffc3d1b0bd8f86b7088cf1e660323</anchor>
      <arglist>(const PointSet &amp;points)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Normal</name>
      <anchorfile>classmirtk_1_1Plane.html</anchorfile>
      <anchor>a492a709d19137d124f1cfae44c5f1375</anchor>
      <arglist>(const Vector3 &amp;n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Normal</name>
      <anchorfile>classmirtk_1_1Plane.html</anchorfile>
      <anchor>a196ceff7ff5457b8108c95f21c10f33d</anchor>
      <arglist>(double n[3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Normal</name>
      <anchorfile>classmirtk_1_1Plane.html</anchorfile>
      <anchor>a7b54d079eca45fe15aaafdd15a24620f</anchor>
      <arglist>(double nx, double ny, double nz)</arglist>
    </member>
    <member kind="function">
      <type>Plane &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1Plane.html</anchorfile>
      <anchor>a39362ff65cbc8004bba5e9eb8ab67edd</anchor>
      <arglist>(const Plane &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Plane</name>
      <anchorfile>classmirtk_1_1Plane.html</anchorfile>
      <anchor>ac25f07a2566d2608a65327a74a9c7652</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Plane</name>
      <anchorfile>classmirtk_1_1Plane.html</anchorfile>
      <anchor>a556d9668165b19cd234213871bb3b273</anchor>
      <arglist>(const Vector3 &amp;n, double b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Plane</name>
      <anchorfile>classmirtk_1_1Plane.html</anchorfile>
      <anchor>acd3e1079f38bca6949c37607aa5241ba</anchor>
      <arglist>(double n[3], double b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Plane</name>
      <anchorfile>classmirtk_1_1Plane.html</anchorfile>
      <anchor>ab808c72bf5ef02a8487c87ea5548c41e</anchor>
      <arglist>(double nx, double ny, double nz, double b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Plane</name>
      <anchorfile>classmirtk_1_1Plane.html</anchorfile>
      <anchor>a883e29ad91e32c2d831fc75293423b19</anchor>
      <arglist>(const Plane &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1Plane.html</anchorfile>
      <anchor>ae19cd96cbb5e2e96eca07983fcc22031</anchor>
      <arglist>(ostream &amp;os, Indent=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1Plane.html</anchorfile>
      <anchor>a621870929c925c99f9ba7e9aca38a8c7</anchor>
      <arglist>(Indent=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Project</name>
      <anchorfile>classmirtk_1_1Plane.html</anchorfile>
      <anchor>a22f73c49ddc262634d834b033de7c84c</anchor>
      <arglist>(const Point &amp;p, double &amp;u, double &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Project</name>
      <anchorfile>classmirtk_1_1Plane.html</anchorfile>
      <anchor>a4655a26624aad96c8c0f1a0e998f17b2</anchor>
      <arglist>(const double p[3], double &amp;u, double &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Project</name>
      <anchorfile>classmirtk_1_1Plane.html</anchorfile>
      <anchor>a41a02c1ed756139f53f8eb6b56f5bf8a</anchor>
      <arglist>(double x, double y, double z, double &amp;u, double &amp;v) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Plane</name>
      <anchorfile>classmirtk_1_1Plane.html</anchorfile>
      <anchor>a74e26ee34f35dda20903afd5e3aff2ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UpdateOrigin</name>
      <anchorfile>classmirtk_1_1Plane.html</anchorfile>
      <anchor>a0ce0704f0472c8b76e16797882b485fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>UpdateTangents</name>
      <anchorfile>classmirtk_1_1Plane.html</anchorfile>
      <anchor>ad0cd10d3fa0cc313a958bc0fdcfffa65</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::PNGImageWriter</name>
    <filename>classmirtk_1_1PNGImageWriter.html</filename>
    <base>mirtk::ImageWriter</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1PNGImageWriter.html</anchorfile>
      <anchor>a0a027e7642f26901a006205bb7735ec7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Array&lt; string &gt;</type>
      <name>Extensions</name>
      <anchorfile>classmirtk_1_1PNGImageWriter.html</anchorfile>
      <anchor>a1a23194207ec5d826cd77f31b7a20e4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1PNGImageWriter.html</anchorfile>
      <anchor>afb718b841395a9d3e05ebcacb828c30c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::Point</name>
    <filename>classmirtk_1_1Point.html</filename>
    <base>mirtk::Object</base>
  </compound>
  <compound kind="class">
    <name>mirtk::PointCorrespondence</name>
    <filename>classmirtk_1_1PointCorrespondence.html</filename>
    <base>mirtk::Observable</base>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>GetInputSourcePoint</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a5a3e426d37b4d675fe9e473d0f64db9b</anchor>
      <arglist>(int, Point &amp;) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>GetInputTargetPoint</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a0cee1cfde66245e33058c1269f2e393d</anchor>
      <arglist>(int, Point &amp;) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>GetSourcePoint</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a42887ced4ce8803fef0d75a7dbab5416</anchor>
      <arglist>(int, Point &amp;) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>GetTargetPoint</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>aa11e32b4db746fe6299bb81574ab577c</anchor>
      <arglist>(int, Point &amp;) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a2a2b1f108b3e11182b11ffc67b42c694</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>a6024897780ffcb66436fa66c68d9e2eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1PointCorrespondence.html</anchorfile>
      <anchor>aafc233d7021c33e8f868e06b6da985ea</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::PointCorrespondenceDistance</name>
    <filename>classmirtk_1_1PointCorrespondenceDistance.html</filename>
    <base>mirtk::PointSetDistance</base>
  </compound>
  <compound kind="class">
    <name>mirtk::PointLocator</name>
    <filename>classmirtk_1_1PointLocator.html</filename>
    <base>mirtk::Object</base>
    <class kind="struct">mirtk::PointLocator::FeatureInfo</class>
    <member kind="typedef">
      <type>Array&lt; FeatureInfo &gt;</type>
      <name>FeatureList</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>a223bc2b679c824e8e74a4be5511842a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>FindClosestNPoints</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>aac4422bf71bf00fa65135377a750766f</anchor>
      <arglist>(int k, double *point, Array&lt; double &gt; *dist2=NULL)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>FindClosestNPoints</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>a5cc6810978d3bdb4fa91133c0bf4406b</anchor>
      <arglist>(int k, vtkPointSet *dataset, const Array&lt; int &gt; *sample, int index, const FeatureList *features, Array&lt; double &gt; *dist2=NULL)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>FindClosestNPoints</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>a98d4104a9a66ffca238644c36e309f1f</anchor>
      <arglist>(int k, vtkPointSet *dataset, const Array&lt; int &gt; *sample, int index, Array&lt; double &gt; *dist2=NULL)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>FindClosestNPoints</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>aeb3e3b361a1a8f8cf77fb04156585b8b</anchor>
      <arglist>(int k, vtkPointSet *dataset, int index, const FeatureList *features, Array&lt; double &gt; *dist2=NULL)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>FindClosestNPoints</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>af77e556807eae7e97a974730fffb6ee0</anchor>
      <arglist>(int k, vtkPointSet *dataset, int index, Array&lt; double &gt; *dist2=NULL)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; Array&lt; int &gt; &gt;</type>
      <name>FindClosestNPoints</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>a6db98773ac0a0c4611cef5efddc0a86c</anchor>
      <arglist>(int k, vtkPointSet *dataset, const Array&lt; int &gt; *sample, const FeatureList *features, Array&lt; Array&lt; double &gt; &gt; *dist2=NULL)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; Array&lt; int &gt; &gt;</type>
      <name>FindClosestNPoints</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>a87484ae58426bfbf383410c2ec6a744e</anchor>
      <arglist>(int k, vtkPointSet *dataset, const Array&lt; int &gt; *sample, Array&lt; Array&lt; double &gt; &gt; *dist2=NULL)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; Array&lt; int &gt; &gt;</type>
      <name>FindClosestNPoints</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>a67c79b754ba371ee8ed74bb9b309c92d</anchor>
      <arglist>(int k, vtkPointSet *dataset, const FeatureList *features, Array&lt; Array&lt; double &gt; &gt; *dist2=NULL)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; Array&lt; int &gt; &gt;</type>
      <name>FindClosestNPoints</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>a6868f9113f906ff8fbc6d3ef797622d4</anchor>
      <arglist>(int k, vtkPointSet *dataset, Array&lt; Array&lt; double &gt; &gt; *dist2=NULL)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>FindClosestPoint</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>aa59af4402463080f30d11d09b5430ddb</anchor>
      <arglist>(double *point, double *dist2=NULL)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>FindClosestPoint</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>ab953f81b32a4aef5f6b1e26a527ad3e4</anchor>
      <arglist>(vtkPointSet *dataset, const Array&lt; int &gt; *sample, int index, const FeatureList *features, double *dist2=NULL)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>FindClosestPoint</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>a6a4527788b9d6c2aa99b403e7f306c79</anchor>
      <arglist>(vtkPointSet *dataset, int index, const FeatureList *features, double *dist2=NULL)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>FindClosestPoint</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>a5801f00855d7db4dd55dabf6194836ec</anchor>
      <arglist>(vtkPointSet *dataset, const Array&lt; int &gt; *sample, int index, double *dist2=NULL)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>FindClosestPoint</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>a71263b5c8df684810a0851b1c0195b4b</anchor>
      <arglist>(vtkPointSet *dataset, int index, double *dist2=NULL)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>FindClosestPoint</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>abeba3f9b00276733f645a65af938ff1e</anchor>
      <arglist>(vtkPointSet *dataset, const Array&lt; int &gt; *sample, const FeatureList *features, Array&lt; double &gt; *dist2=NULL)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>FindClosestPoint</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>aa4a62e8914d0f897509cdb9474b67043</anchor>
      <arglist>(vtkPointSet *dataset, const FeatureList *features, Array&lt; double &gt; *dist2=NULL)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>FindClosestPoint</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>a0e2e4a8f6b291330763c8ca1656f4fab</anchor>
      <arglist>(vtkPointSet *dataset, const Array&lt; int &gt; *sample, Array&lt; double &gt; *dist2=NULL)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>FindClosestPoint</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>a225b192018f65ca1c49cbd150aca90db</anchor>
      <arglist>(vtkPointSet *dataset, Array&lt; double &gt; *dist2=NULL)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>FindPointsWithinRadius</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>a4e7f2bf7ef97ef302a283e860957340b</anchor>
      <arglist>(double radius, double *point, Array&lt; double &gt; *dist2=NULL)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>FindPointsWithinRadius</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>abe088743fe4b42e6805794da5bf38b29</anchor>
      <arglist>(double radius, vtkPointSet *dataset, const Array&lt; int &gt; *sample, int index, const FeatureList *features, Array&lt; double &gt; *dist2=NULL)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>FindPointsWithinRadius</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>a3ff1f8f4564010f6e84c406f3ccbfba4</anchor>
      <arglist>(double radius, vtkPointSet *dataset, const Array&lt; int &gt; *sample, int index, Array&lt; double &gt; *dist2=NULL)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>FindPointsWithinRadius</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>a6bd2c30e628b36104e5a148852d47af3</anchor>
      <arglist>(double radius, vtkPointSet *dataset, int index, const FeatureList *features, Array&lt; double &gt; *dist2=NULL)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int &gt;</type>
      <name>FindPointsWithinRadius</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>aa62f8e7ddd9bb3568c907012c8700de4</anchor>
      <arglist>(double radius, vtkPointSet *dataset, int index, Array&lt; double &gt; *dist2=NULL)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; Array&lt; int &gt; &gt;</type>
      <name>FindPointsWithinRadius</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>af77b0b33c60ba22c5f7471f04d9c7b0b</anchor>
      <arglist>(double radius, vtkPointSet *dataset, const Array&lt; int &gt; *sample, const FeatureList *features, Array&lt; Array&lt; double &gt; &gt; *dist2=NULL)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; Array&lt; int &gt; &gt;</type>
      <name>FindPointsWithinRadius</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>a5038db85ec476d83986feea97034dea2</anchor>
      <arglist>(double radius, vtkPointSet *dataset, const Array&lt; int &gt; *sample, Array&lt; Array&lt; double &gt; &gt; *dist2=NULL)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; Array&lt; int &gt; &gt;</type>
      <name>FindPointsWithinRadius</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>a61300fddf5bc39510f5472b750f8b5df</anchor>
      <arglist>(double radius, vtkPointSet *dataset, const FeatureList *features, Array&lt; Array&lt; double &gt; &gt; *dist2=NULL)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; Array&lt; int &gt; &gt;</type>
      <name>FindPointsWithinRadius</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>abbfed432d0303ee3046735efc8d1c5a4</anchor>
      <arglist>(double radius, vtkPointSet *dataset, Array&lt; Array&lt; double &gt; &gt; *dist2=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAggregateMacro</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>af02cc5cd3320550b6fae22c3011c34bb</anchor>
      <arglist>(vtkPointSet, DataSet)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAggregateMacro</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>ac53c47cf93b9183fdf999b4540b5116e</anchor>
      <arglist>(const Array&lt; int &gt;, Sample)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>ab6a953a44b7c2f96e2be106e0a49e695</anchor>
      <arglist>(FeatureList, Features)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>aaa48085675db9992ee099252f00a904e</anchor>
      <arglist>(int, NumberOfPoints)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>a654f94bd06ff49e5c8500242651eb172</anchor>
      <arglist>(int, PointDimension)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PointLocator</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>a673e705decc9177c6c349bc99134282c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>Distance2BetweenPoints</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>a1cb192914abd1eb7ba9a1124bd02aa91</anchor>
      <arglist>(const double *a, const double *b, int d=3)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Array&lt; Array&lt; int &gt; &gt;</type>
      <name>FindClosestNPoints</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>a35d8b4f813a315cf3be858f2248ba3ae</anchor>
      <arglist>(int k, vtkPointSet *dataset1, const Array&lt; int &gt; *sample1, const FeatureList *features1, vtkPointSet *dataset2, const Array&lt; int &gt; *sample2, const FeatureList *features2, Array&lt; Array&lt; double &gt; &gt; *dist2=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Array&lt; int &gt;</type>
      <name>FindClosestPoint</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>a32c1be96ce6a429d7d637af53e6fc037</anchor>
      <arglist>(vtkPointSet *dataset1, const Array&lt; int &gt; *sample1, const FeatureList *features1, vtkPointSet *dataset2, const Array&lt; int &gt; *sample2, const FeatureList *features2, Array&lt; double &gt; *dist2=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Array&lt; Array&lt; int &gt; &gt;</type>
      <name>FindPointsWithinRadius</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>a204f2aca704e1bb8b6b828913fe69a5b</anchor>
      <arglist>(double radius, vtkPointSet *dataset1, const Array&lt; int &gt; *sample1, const FeatureList *features1, vtkPointSet *dataset2, const Array&lt; int &gt; *sample2, const FeatureList *features2, Array&lt; Array&lt; double &gt; &gt; *dist2=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static vtkDataArray *</type>
      <name>GetDataArray</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>a561299988588afa210051d49d1c2ee6f</anchor>
      <arglist>(vtkPointSet *dataset, const FeatureInfo &amp;feature)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>GetNumberOfPoints</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>a6803325cdf02b1c3343b2b3d1c6997e1</anchor>
      <arglist>(vtkPointSet *dataset, const Array&lt; int &gt; *sample=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GetPoint</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>a5d5ccd5ec5662f067aa5b3af1b76e12b</anchor>
      <arglist>(Point &amp;point, vtkPointSet *dataset, const Array&lt; int &gt; *sample, int index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GetPoint</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>ad5a2807aa59e4a997e68cb7a119198f6</anchor>
      <arglist>(double *point, vtkPointSet *dataset, const Array&lt; int &gt; *sample, int index, const FeatureList *feature=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>GetPoint</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>a56a50500abe1063f256a765b43ce7411</anchor>
      <arglist>(double *point, vtkPointSet *dataset, int index, const FeatureList *feature=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>GetPointDimension</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>a370995fc7a96287b3401aaf039f53088</anchor>
      <arglist>(vtkPointSet *dataset, const FeatureList *feature)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>GetPointIndex</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>addc75e2abaee9241f52e09f5448240fe</anchor>
      <arglist>(vtkPointSet *dataset, const Array&lt; int &gt; *sample, int index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PointLocator *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>aab222f2ab8c6788677bf6f62b03793d2</anchor>
      <arglist>(vtkPointSet *dataset, const Array&lt; int &gt; *sample=NULL, const FeatureList *feature=NULL)</arglist>
    </member>
    <member kind="variable">
      <type>FlannPointLocator *</type>
      <name>_FlannLocator</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>a5fe3cc79dea398d36d5e33377fd7402b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vtkSmartPointer&lt; vtkOctreePointLocator &gt;</type>
      <name>_VtkLocator</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>ab956b592e88e66c54694a8597f90a0c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>a65b56d4cdda9f2afcf164e597eb4fb2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PointLocator</name>
      <anchorfile>classmirtk_1_1PointLocator.html</anchorfile>
      <anchor>ad1ad6053c98da1fe8f881cd42927f109</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::PointLocator::FeatureInfo</name>
    <filename>structmirtk_1_1PointLocator_1_1FeatureInfo.html</filename>
    <member kind="function">
      <type></type>
      <name>FeatureInfo</name>
      <anchorfile>structmirtk_1_1PointLocator_1_1FeatureInfo.html</anchorfile>
      <anchor>a113f3bce0c25dfa7a268ef3e870a1df2</anchor>
      <arglist>(int index=-2, double weight=1.0, double slope=1.0, double intercept=.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FeatureInfo</name>
      <anchorfile>structmirtk_1_1PointLocator_1_1FeatureInfo.html</anchorfile>
      <anchor>a2bef9df8136b0b202e555611a6fe97cc</anchor>
      <arglist>(const char *name, double weight=1.0, double slope=1.0, double intercept=.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FeatureInfo</name>
      <anchorfile>structmirtk_1_1PointLocator_1_1FeatureInfo.html</anchorfile>
      <anchor>a88411d3310d5370441edb6a52a6a62d3</anchor>
      <arglist>(const string &amp;name, double weight=1.0, double slope=1.0, double intercept=.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FeatureInfo</name>
      <anchorfile>structmirtk_1_1PointLocator_1_1FeatureInfo.html</anchorfile>
      <anchor>a31d45cc5368840f01a9b7b3324864572</anchor>
      <arglist>(const char *name, int index, double weight=1.0, double slope=1.0, double intercept=.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FeatureInfo</name>
      <anchorfile>structmirtk_1_1PointLocator_1_1FeatureInfo.html</anchorfile>
      <anchor>a6478c28987fd49b185a731a177e98372</anchor>
      <arglist>(const string &amp;name, int index, double weight=1.0, double slope=1.0, double intercept=.0)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Index</name>
      <anchorfile>structmirtk_1_1PointLocator_1_1FeatureInfo.html</anchorfile>
      <anchor>a18ca5ef7dcee8db9a4e8cd03e7de4627</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_Intercept</name>
      <anchorfile>structmirtk_1_1PointLocator_1_1FeatureInfo.html</anchorfile>
      <anchor>a738e0358046641db2903b5fe03255783</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>_Name</name>
      <anchorfile>structmirtk_1_1PointLocator_1_1FeatureInfo.html</anchorfile>
      <anchor>ad39f60a85adb8fb73dc4cf3f1ad524f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_Slope</name>
      <anchorfile>structmirtk_1_1PointLocator_1_1FeatureInfo.html</anchorfile>
      <anchor>a6e3067f16f1940337b25199998445521</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_Weight</name>
      <anchorfile>structmirtk_1_1PointLocator_1_1FeatureInfo.html</anchorfile>
      <anchor>a01258c406526ff5187ef0b2249e6bbb8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::PointSamples</name>
    <filename>classmirtk_1_1PointSamples.html</filename>
    <base>mirtk::PointSet</base>
    <member kind="function">
      <type></type>
      <name>PointSamples</name>
      <anchorfile>classmirtk_1_1PointSamples.html</anchorfile>
      <anchor>aed836e586cff0bf024fbdbd3ee89fd65</anchor>
      <arglist>(int n=0, int seed=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SampleGaussian</name>
      <anchorfile>classmirtk_1_1PointSamples.html</anchorfile>
      <anchor>adef59332f63a623c81d49084c81291e6</anchor>
      <arglist>(double s=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SampleGaussian</name>
      <anchorfile>classmirtk_1_1PointSamples.html</anchorfile>
      <anchor>af8d595129d718e81abe4aec4c08f129d</anchor>
      <arglist>(double m, double s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SampleGaussian</name>
      <anchorfile>classmirtk_1_1PointSamples.html</anchorfile>
      <anchor>aab9d2b381d0a96be8699d3867cfdfa22</anchor>
      <arglist>(double mx, double my, double mz, double s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SampleGaussian</name>
      <anchorfile>classmirtk_1_1PointSamples.html</anchorfile>
      <anchor>a666c8da6b4725701b58d48d3b15bf218</anchor>
      <arglist>(const Point &amp;m, double s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SampleGaussian</name>
      <anchorfile>classmirtk_1_1PointSamples.html</anchorfile>
      <anchor>a0fe39b64344a01418761ba3145449600</anchor>
      <arglist>(const Point &amp;m, double sx, double sy, double sz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SampleGaussian</name>
      <anchorfile>classmirtk_1_1PointSamples.html</anchorfile>
      <anchor>a5e67321ffc05fccab4c9aa97264aec7a</anchor>
      <arglist>(double mx, double my, double mz, double sx, double sy, double sz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SampleGrid</name>
      <anchorfile>classmirtk_1_1PointSamples.html</anchorfile>
      <anchor>ad27f81aa2b68390b1cffa195a73efbcf</anchor>
      <arglist>(const Point &amp;p1, const Point &amp;p2, int nx, int ny, int nz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SampleGrid</name>
      <anchorfile>classmirtk_1_1PointSamples.html</anchorfile>
      <anchor>a84b56e6ad3097e3385ea478789f63459</anchor>
      <arglist>(const Point &amp;p1, const Point &amp;p2, double dx, double dy, double dz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SampleGrid</name>
      <anchorfile>classmirtk_1_1PointSamples.html</anchorfile>
      <anchor>aa4d125b48f379fe597c9f397b6dc1170</anchor>
      <arglist>(double x1, double y1, double z1, double x2, double y2, double z2, int nx, int ny, int nz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SampleGrid</name>
      <anchorfile>classmirtk_1_1PointSamples.html</anchorfile>
      <anchor>a52441010e373107999062ecf9452b6df</anchor>
      <arglist>(double x1, double y1, double z1, double x2, double y2, double z2, double dx, double dy, double dz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SampleRegularHalfSphere</name>
      <anchorfile>classmirtk_1_1PointSamples.html</anchorfile>
      <anchor>a1366d6bbb6f901f392890cc33f00e2a4</anchor>
      <arglist>(double r=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SampleRegularHalfSphere</name>
      <anchorfile>classmirtk_1_1PointSamples.html</anchorfile>
      <anchor>abb95381ad335ad40d8a2a756c91f1aba</anchor>
      <arglist>(double c, double r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SampleRegularHalfSphere</name>
      <anchorfile>classmirtk_1_1PointSamples.html</anchorfile>
      <anchor>a394b3bb36b4895d7145ba7e2e5c2ff03</anchor>
      <arglist>(const Point &amp;c, double r=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SampleRegularHalfSphere</name>
      <anchorfile>classmirtk_1_1PointSamples.html</anchorfile>
      <anchor>ab890fd66152a20a6edf03806a5d80207</anchor>
      <arglist>(const Point &amp;c, double rx, double ry, double rz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SampleRegularHalfSphere</name>
      <anchorfile>classmirtk_1_1PointSamples.html</anchorfile>
      <anchor>a2f106dfcd6bf68d83b92f63cbfcc019b</anchor>
      <arglist>(double cx, double cy, double cz, double r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SampleRegularHalfSphere</name>
      <anchorfile>classmirtk_1_1PointSamples.html</anchorfile>
      <anchor>afa0adb127924168062da0b18e28816f3</anchor>
      <arglist>(double cx, double cy, double cz, double rx, double ry, double rz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SampleRegularSphere</name>
      <anchorfile>classmirtk_1_1PointSamples.html</anchorfile>
      <anchor>a1ccaa754ab5b6ef15a247274b8adaa6f</anchor>
      <arglist>(double r=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SampleRegularSphere</name>
      <anchorfile>classmirtk_1_1PointSamples.html</anchorfile>
      <anchor>acb6493467b7896effbea64e4c98e9a89</anchor>
      <arglist>(double c, double r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SampleRegularSphere</name>
      <anchorfile>classmirtk_1_1PointSamples.html</anchorfile>
      <anchor>ab18df2023f90c927fe0f5225a7e80d81</anchor>
      <arglist>(const Point &amp;c, double r=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SampleRegularSphere</name>
      <anchorfile>classmirtk_1_1PointSamples.html</anchorfile>
      <anchor>ae5629f56362038605a0a89c4596ee2ba</anchor>
      <arglist>(const Point &amp;c, double rx, double ry, double rz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SampleRegularSphere</name>
      <anchorfile>classmirtk_1_1PointSamples.html</anchorfile>
      <anchor>a00628f575911c76a4a2abfb4afb0bd2d</anchor>
      <arglist>(double cx, double cy, double cz, double r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SampleRegularSphere</name>
      <anchorfile>classmirtk_1_1PointSamples.html</anchorfile>
      <anchor>a24a6315f191d4f67d67558d536153a3d</anchor>
      <arglist>(double cx, double cy, double cz, double rx, double ry, double rz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SampleSphere</name>
      <anchorfile>classmirtk_1_1PointSamples.html</anchorfile>
      <anchor>abe8421d8c964d0c7092e6de68668ac7f</anchor>
      <arglist>(double r=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SampleSphere</name>
      <anchorfile>classmirtk_1_1PointSamples.html</anchorfile>
      <anchor>a14454af6cddc887a5397b4427d2ceab9</anchor>
      <arglist>(double c, double r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SampleSphere</name>
      <anchorfile>classmirtk_1_1PointSamples.html</anchorfile>
      <anchor>a160660928f78335d38dcddcd09e0d000</anchor>
      <arglist>(const Point &amp;c, double r=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SampleSphere</name>
      <anchorfile>classmirtk_1_1PointSamples.html</anchorfile>
      <anchor>a8429da8727984b1c340091d7d250b0be</anchor>
      <arglist>(const Point &amp;c, double rx, double ry, double rz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SampleSphere</name>
      <anchorfile>classmirtk_1_1PointSamples.html</anchorfile>
      <anchor>a51d2f165563ef14fc59d2e90d6583081</anchor>
      <arglist>(double cx, double cy, double cz, double r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SampleSphere</name>
      <anchorfile>classmirtk_1_1PointSamples.html</anchorfile>
      <anchor>ad48f26324aa81c3e3b23d8fb3ed715f2</anchor>
      <arglist>(double cx, double cy, double cz, double rx, double ry, double rz)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PointSamples</name>
      <anchorfile>classmirtk_1_1PointSamples.html</anchorfile>
      <anchor>ac41ca1ab3941556f4e906cd958c27160</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Add</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a3e1b8b6915105b06a093cda61a7af8d5</anchor>
      <arglist>(const Point &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Add</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a5671db168d14f020ebb53b267d593f6f</anchor>
      <arglist>(const PointSet &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Add</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>ada02d0b63cbdb05e88e9b84730e0236b</anchor>
      <arglist>(double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddVTK</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>ac2f1a6b45359a38bba10e571679524ea</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>abed8c998e6cb34b70eab0acf00ed0ce4</anchor>
      <arglist>(Point &amp;, Point &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Capacity</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>ae46df6cdfa0b7743bec98899e495a466</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Point</type>
      <name>CenterOfGravity</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>ab8a4d22a8b206dbb4c9d06eea32f8341</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a4c5ce5c6f875f213faf9c76e319b46ba</anchor>
      <arglist>(bool deallocate=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Point</type>
      <name>ClosestPoint</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a1534d118d6a688e21d25a40dda7a66bc</anchor>
      <arglist>(Point &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Del</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a047088059e3e51170ad0338af5aae53f</anchor>
      <arglist>(const Point &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Del</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a0454c0207c330ae10a69a53f6bd79b51</anchor>
      <arglist>(const PointSet &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Del</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>ac07a0d176d38a297e8f9c709e4645dad</anchor>
      <arglist>(double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Del</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>ac1a89dcc17bc9072855ed34fa6572372</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Point &amp;</type>
      <name>GetPoint</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a242f50212ffd8d1476fb1bb2c8de01dc</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const Point &amp;</type>
      <name>GetPoint</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a61f600fccd106867afda21b7dd34ef33</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetPoint</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a5999760a524735c04d7c8f7ad54378a6</anchor>
      <arglist>(int, Point &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetPoint</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a641074f0b21d8bd17bd372232d1fa132</anchor>
      <arglist>(int, double[3]) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>IsInside</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a19d15289978d7d1984a90a141b473a1a</anchor>
      <arglist>(double, double) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>ab1601c03941c5b04a62414e6d3d7fe6d</anchor>
      <arglist>(const PointSet &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Point &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>acf4fd5f40a02a546574605d69c52319f</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const Point &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a5a710ae620821bd1c1a5be1e4594b40c</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>PointSet</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a987697c6c829cc6f138eb508ef7a0f4c</anchor>
      <arglist>(int, int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a04b6f5c87ff9e4243982809d9d60598e</anchor>
      <arglist>(const PointSet &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>PointDistance</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>ac15404b1a2c75c8394fbd354583527f5</anchor>
      <arglist>(Point &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PointSet</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a6e99b2f3ec864825970a3cb76c8795ad</anchor>
      <arglist>(int=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PointSet</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a152862b297dbf807225fb7b462b8be0d</anchor>
      <arglist>(const PointSet &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PointSet</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a251f3103e7d5a16c6457879dbd66b97a</anchor>
      <arglist>(const PointSet &amp;, const Array&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PointSet</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>aca5ce22371b81742363b13995b79b275</anchor>
      <arglist>(const PointSet &amp;, const OrderedSet&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a781842ad73126a88e7a10c559d76edde</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ReadVTK</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>ad5a2c757c2d3e3d7b96218b21fa6e001</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reserve</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a828b91245963f47e29b9cc1eb0a6c3c0</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Resize</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a505fb3c1c4c9e29c1326d627ecd00bc2</anchor>
      <arglist>(int, const Point &amp;=Point())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPoint</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a559a7c20d7a9e47d73dd071d34852864</anchor>
      <arglist>(int, const Point &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPoint</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>ad9f8066510dc5189892f6e5b275d61d4</anchor>
      <arglist>(int, const double[3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ShrinkToFit</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a678cdcf02d7c8e4363b47f071606c7f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Size</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a3b5869e1a036adbbc6dcdc94ac81ab92</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a11ac014b0811823b18b3ce69f8a34eb1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>StandardDeviationEllipsoid</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a7b6aa7d4ed85ab9f7f50eb1af2beae51</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a9b20721382e9c0eaa25b5b0de1f9d29c</anchor>
      <arglist>(const char *) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WriteVTK</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a3f0e33d22cf0d0d7a85bea7a346733ee</anchor>
      <arglist>(const char *, vtkAbstractArray *=NULL) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PointSet</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>af232d843ed1201e09f374b46ee0f0e91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Point *</type>
      <name>_data</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a950bb461b9e0160329a20ffa1a331518</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_m</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a53064828897ed0189dadf17577ee2e93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_n</name>
      <anchorfile>classmirtk_1_1PointSet.html</anchorfile>
      <anchor>a588571960833f696873f3e51b6242c10</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::PointSet</name>
    <filename>classmirtk_1_1PointSet.html</filename>
    <base>mirtk::Object</base>
  </compound>
  <compound kind="class">
    <name>mirtk::PointSetDistance</name>
    <filename>classmirtk_1_1PointSetDistance.html</filename>
    <base>mirtk::DataFidelity</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1PointSetDistance.html</anchorfile>
      <anchor>a3e15dbf4d65cc0097a9e5c7483529d9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Reinitialize</name>
      <anchorfile>classmirtk_1_1PointSetDistance.html</anchorfile>
      <anchor>a026f65bb47a0a5eadf285af124ed17b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1PointSetDistance.html</anchorfile>
      <anchor>ab4dc3331bbd4720f13a387cac47145fd</anchor>
      <arglist>(bool=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteDataSets</name>
      <anchorfile>classmirtk_1_1PointSetDistance.html</anchorfile>
      <anchor>ab747722c59565123c970ff05eac4a7b6</anchor>
      <arglist>(const char *, const char *, bool=true) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>NonParametricGradient</name>
      <anchorfile>classmirtk_1_1PointSetDistance.html</anchorfile>
      <anchor>a25f07ee21c190633397e9962f3c6db5a</anchor>
      <arglist>(const RegisteredPointSet *target, GradientType *gradient)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::PointSetForce</name>
    <filename>classmirtk_1_1PointSetForce.html</filename>
    <base>mirtk::EnergyTerm</base>
  </compound>
  <compound kind="class">
    <name>mirtk::PolyDataCurvature</name>
    <filename>classmirtk_1_1PolyDataCurvature.html</filename>
    <base>mirtk::PolyDataFilter</base>
    <member kind="enumeration">
      <type></type>
      <name>TensorIndex</name>
      <anchorfile>classmirtk_1_1PolyDataCurvature.html</anchorfile>
      <anchor>a8e25eb1e7af7840091d24993848da61b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>classmirtk_1_1PolyDataCurvature.html</anchorfile>
      <anchor>aef9441a27ec523be4153d9c7346a06d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Minimum</name>
      <anchorfile>classmirtk_1_1PolyDataCurvature.html</anchorfile>
      <anchor>aef9441a27ec523be4153d9c7346a06d8a1149b2e43505db65e1c6a63bc667e4ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Maximum</name>
      <anchorfile>classmirtk_1_1PolyDataCurvature.html</anchorfile>
      <anchor>aef9441a27ec523be4153d9c7346a06d8ac1d3197a8b541e6db3d20be7bad9cdfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Mean</name>
      <anchorfile>classmirtk_1_1PolyDataCurvature.html</anchorfile>
      <anchor>aef9441a27ec523be4153d9c7346a06d8a4a42f1e9996b79292d855335b9393e18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Gauss</name>
      <anchorfile>classmirtk_1_1PolyDataCurvature.html</anchorfile>
      <anchor>aef9441a27ec523be4153d9c7346a06d8a21330c9d80321a0058cbe8d1ff76ca45</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Curvedness</name>
      <anchorfile>classmirtk_1_1PolyDataCurvature.html</anchorfile>
      <anchor>aef9441a27ec523be4153d9c7346a06d8a1ecf80130ea41d988715c3d4d974a2aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Normal</name>
      <anchorfile>classmirtk_1_1PolyDataCurvature.html</anchorfile>
      <anchor>aef9441a27ec523be4153d9c7346a06d8ae19307db1074165870af2301b8041572</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MinimumDirection</name>
      <anchorfile>classmirtk_1_1PolyDataCurvature.html</anchorfile>
      <anchor>aef9441a27ec523be4153d9c7346a06d8aab7fe5a94ffef24009bac07c7a238316</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MaximumDirection</name>
      <anchorfile>classmirtk_1_1PolyDataCurvature.html</anchorfile>
      <anchor>aef9441a27ec523be4153d9c7346a06d8ac19fee5cbcb415f70ad87b7014534b6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Tensor</name>
      <anchorfile>classmirtk_1_1PolyDataCurvature.html</anchorfile>
      <anchor>aef9441a27ec523be4153d9c7346a06d8a7189b35964177d071e2865c3bc1b4bab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>InverseTensor</name>
      <anchorfile>classmirtk_1_1PolyDataCurvature.html</anchorfile>
      <anchor>aef9441a27ec523be4153d9c7346a06d8a44ff1912c77abe9954231c8dc4e819cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>vtkDataArray *</type>
      <name>GetCurvedness</name>
      <anchorfile>classmirtk_1_1PolyDataCurvature.html</anchorfile>
      <anchor>a6ef8c57c784e6887e43e3a9fb4111ca8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>vtkDataArray *</type>
      <name>GetGaussCurvature</name>
      <anchorfile>classmirtk_1_1PolyDataCurvature.html</anchorfile>
      <anchor>a103a4d550098c3532dcd950e30529379</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>vtkDataArray *</type>
      <name>GetMaximumCurvature</name>
      <anchorfile>classmirtk_1_1PolyDataCurvature.html</anchorfile>
      <anchor>a76c89f602e06c11874c35eb3c6be8d81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>vtkDataArray *</type>
      <name>GetMeanCurvature</name>
      <anchorfile>classmirtk_1_1PolyDataCurvature.html</anchorfile>
      <anchor>a6dd4b3f3da34dff77ad2596fad9fd003</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>vtkDataArray *</type>
      <name>GetMinimumCurvature</name>
      <anchorfile>classmirtk_1_1PolyDataCurvature.html</anchorfile>
      <anchor>a1eec77d557358fd9de839ddafc1e95ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1PolyDataCurvature.html</anchorfile>
      <anchor>a88998eb20c680805c9e7b417c4fdaae9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkGetMacro</name>
      <anchorfile>classmirtk_1_1PolyDataCurvature.html</anchorfile>
      <anchor>a1e5f2f4fee116f3dd5b7f0589e973f6f</anchor>
      <arglist>(CurvatureType, int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkGetMacro</name>
      <anchorfile>classmirtk_1_1PolyDataCurvature.html</anchorfile>
      <anchor>aecc229ab48da79291d7a5ba87a532ffd</anchor>
      <arglist>(TensorAveraging, int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkOnOffMacro</name>
      <anchorfile>classmirtk_1_1PolyDataCurvature.html</anchorfile>
      <anchor>a61096465c216cb85365901923c3b34e7</anchor>
      <arglist>(VtkCurvatures)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkOnOffMacro</name>
      <anchorfile>classmirtk_1_1PolyDataCurvature.html</anchorfile>
      <anchor>a7007cd697780a8e870a449995dc89021</anchor>
      <arglist>(Normalize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkSetMacro</name>
      <anchorfile>classmirtk_1_1PolyDataCurvature.html</anchorfile>
      <anchor>abe240a03294e9961fbc95fa5599408ab</anchor>
      <arglist>(CurvatureType, int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkSetMacro</name>
      <anchorfile>classmirtk_1_1PolyDataCurvature.html</anchorfile>
      <anchor>a37544bfbfe8bfbc665e6afec26c740ba</anchor>
      <arglist>(TensorAveraging, int)</arglist>
    </member>
    <member kind="function">
      <type>PolyDataCurvature &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1PolyDataCurvature.html</anchorfile>
      <anchor>a05d64b6d1417bb0457d2c802c8e55fdb</anchor>
      <arglist>(const PolyDataCurvature &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolyDataCurvature</name>
      <anchorfile>classmirtk_1_1PolyDataCurvature.html</anchorfile>
      <anchor>adfb98b933790c3aace643aa122a45b36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolyDataCurvature</name>
      <anchorfile>classmirtk_1_1PolyDataCurvature.html</anchorfile>
      <anchor>aa89906956fe8d8febb447a4e66068f87</anchor>
      <arglist>(const PolyDataCurvature &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PolyDataCurvature</name>
      <anchorfile>classmirtk_1_1PolyDataCurvature.html</anchorfile>
      <anchor>ae1aa4fd5f669969a672ee62b52168931</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>vtkPolyData *</type>
      <name>GetOutput</name>
      <anchorfile>classmirtk_1_1PolyDataFilter.html</anchorfile>
      <anchor>a64b4e3e8fb2d603e56c489bbd67c60a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkOnOffMacro</name>
      <anchorfile>classmirtk_1_1PolyDataFilter.html</anchorfile>
      <anchor>ac2e23ecbb3362622d1f35716b436e232</anchor>
      <arglist>(DoublePrecision)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1PolyDataFilter.html</anchorfile>
      <anchor>a493307bef364bc9d2256524ddb54ba1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetInput</name>
      <anchorfile>classmirtk_1_1PolyDataFilter.html</anchorfile>
      <anchor>ad6569ecf9668238c151ffc5c15488fda</anchor>
      <arglist>(vtkPolyData *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetInputData</name>
      <anchorfile>classmirtk_1_1PolyDataFilter.html</anchorfile>
      <anchor>a22b6603a567dc24d6ea1febda79c2844</anchor>
      <arglist>(vtkPolyData *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1PolyDataFilter.html</anchorfile>
      <anchor>aab3e755a781d99cc4795895890cd10f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MIRTK_PointSet_EXPORT const char *</type>
      <name>CURVEDNESS</name>
      <anchorfile>classmirtk_1_1PolyDataCurvature.html</anchorfile>
      <anchor>a88da0fd9b4c9a98d147776ab6c08f1d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MIRTK_PointSet_EXPORT const char *</type>
      <name>GAUSS</name>
      <anchorfile>classmirtk_1_1PolyDataCurvature.html</anchorfile>
      <anchor>a837f100e9c212ea5cbb88dc6b8e120f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MIRTK_PointSet_EXPORT const char *</type>
      <name>INVERSE_TENSOR</name>
      <anchorfile>classmirtk_1_1PolyDataCurvature.html</anchorfile>
      <anchor>a1035b75696cea9e04b5ea766faf26766</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MIRTK_PointSet_EXPORT const char *</type>
      <name>MAXIMUM</name>
      <anchorfile>classmirtk_1_1PolyDataCurvature.html</anchorfile>
      <anchor>a5d7eecaf9373bbab0b6a3da0ce7e91f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MIRTK_PointSet_EXPORT const char *</type>
      <name>MAXIMUM_DIRECTION</name>
      <anchorfile>classmirtk_1_1PolyDataCurvature.html</anchorfile>
      <anchor>af2557cb272ff26977f0f8beb695d5476</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MIRTK_PointSet_EXPORT const char *</type>
      <name>MEAN</name>
      <anchorfile>classmirtk_1_1PolyDataCurvature.html</anchorfile>
      <anchor>a6b4214f6043c510e16bbc84632a37bbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MIRTK_PointSet_EXPORT const char *</type>
      <name>MINIMUM</name>
      <anchorfile>classmirtk_1_1PolyDataCurvature.html</anchorfile>
      <anchor>a32631bb1ed6fe5a6fa653efed95fb6e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MIRTK_PointSet_EXPORT const char *</type>
      <name>MINIMUM_DIRECTION</name>
      <anchorfile>classmirtk_1_1PolyDataCurvature.html</anchorfile>
      <anchor>a7241503b7268269df87fe3e7c22d82da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MIRTK_PointSet_EXPORT const char *</type>
      <name>NORMALS</name>
      <anchorfile>classmirtk_1_1PolyDataCurvature.html</anchorfile>
      <anchor>a5ca2959236f54fd3b7da8467169bd421</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MIRTK_PointSet_EXPORT const char *</type>
      <name>TENSOR</name>
      <anchorfile>classmirtk_1_1PolyDataCurvature.html</anchorfile>
      <anchor>a5b686f09495fbe0fff6869137f922faf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ComputeCurvedness</name>
      <anchorfile>classmirtk_1_1PolyDataCurvature.html</anchorfile>
      <anchor>acdc910e453bd909051f2ec79c40e482b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ComputeGaussCurvature</name>
      <anchorfile>classmirtk_1_1PolyDataCurvature.html</anchorfile>
      <anchor>a1d3eb5461cbc3493e7ae0542adb13cf4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ComputeMeanCurvature</name>
      <anchorfile>classmirtk_1_1PolyDataCurvature.html</anchorfile>
      <anchor>ac0cec3e8509cc2c55d222c61c9601989</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ComputeMinMaxCurvature</name>
      <anchorfile>classmirtk_1_1PolyDataCurvature.html</anchorfile>
      <anchor>a3e25c6fb423dd5075e00daeac6dd87e7</anchor>
      <arglist>(bool, bool)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ComputeTensorField</name>
      <anchorfile>classmirtk_1_1PolyDataCurvature.html</anchorfile>
      <anchor>a49e20b058bb2fe56201d593eef948207</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CopyAttributes</name>
      <anchorfile>classmirtk_1_1PolyDataCurvature.html</anchorfile>
      <anchor>a0b37a0346883461dc88b87f40ab72abe</anchor>
      <arglist>(const PolyDataCurvature &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>DecomposeTensorField</name>
      <anchorfile>classmirtk_1_1PolyDataCurvature.html</anchorfile>
      <anchor>a9c37187ddb1bf872ee059b4a20e8412e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Execute</name>
      <anchorfile>classmirtk_1_1PolyDataCurvature.html</anchorfile>
      <anchor>a5b41355542cf8048de0c3ee4042d24b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Finalize</name>
      <anchorfile>classmirtk_1_1PolyDataCurvature.html</anchorfile>
      <anchor>a48afc7057bef71fe53a0d720e9594579</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PolyDataCurvature.html</anchorfile>
      <anchor>adf86245fb20bbfacafd299032a5cf3d4</anchor>
      <arglist>(int, CurvatureType)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PolyDataCurvature.html</anchorfile>
      <anchor>a8607f3d865dc85d3ba6cfd13de624a7a</anchor>
      <arglist>(bool, VtkCurvatures)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PolyDataCurvature.html</anchorfile>
      <anchor>a2ebce139eec936650ae066c277e10486</anchor>
      <arglist>(int, TensorAveraging)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PolyDataCurvature.html</anchorfile>
      <anchor>a334468321cc1ab3a0f736d070c754ade</anchor>
      <arglist>(bool, Normalize)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1PolyDataCurvature.html</anchorfile>
      <anchor>a88e0417ae21b29b6ef7b6f5781c57773</anchor>
      <arglist>(double, Volume)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1PolyDataCurvature.html</anchorfile>
      <anchor>a6a68b3ffa863c3ca6a48de018582a889</anchor>
      <arglist>(double, Radius)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>InitializeEdgeTable</name>
      <anchorfile>classmirtk_1_1PolyDataFilter.html</anchorfile>
      <anchor>a508584e5bd7db466ee81ff91c6cc0966</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PolyDataFilter &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1PolyDataFilter.html</anchorfile>
      <anchor>adc09be18e9858870747eec9a834a2794</anchor>
      <arglist>(const PolyDataFilter &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PolyDataFilter</name>
      <anchorfile>classmirtk_1_1PolyDataFilter.html</anchorfile>
      <anchor>a6a583c8eb92dd5bcd838461d5c7c64e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PolyDataFilter</name>
      <anchorfile>classmirtk_1_1PolyDataFilter.html</anchorfile>
      <anchor>adca61bae55100302df42dc46c48a091a</anchor>
      <arglist>(const PolyDataFilter &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PolyDataFilter</name>
      <anchorfile>classmirtk_1_1PolyDataFilter.html</anchorfile>
      <anchor>a6770e1f7cbab604a9fdca62070c47d90</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::PolyDataFilter</name>
    <filename>classmirtk_1_1PolyDataFilter.html</filename>
    <base>mirtk::Object</base>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>Execute</name>
      <anchorfile>classmirtk_1_1PolyDataFilter.html</anchorfile>
      <anchor>a2ba21874df3887a327d01f02c522cd6a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Finalize</name>
      <anchorfile>classmirtk_1_1PolyDataFilter.html</anchorfile>
      <anchor>af0854c8c764be60e9e5137bcc66bf2b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1PolyDataFilter.html</anchorfile>
      <anchor>a7e8f99ba438c57b5957339b953dff464</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::PolyDataRemeshing</name>
    <filename>classmirtk_1_1PolyDataRemeshing.html</filename>
    <base>mirtk::PolyDataFilter</base>
    <member kind="enumeration">
      <type></type>
      <name>Order</name>
      <anchorfile>classmirtk_1_1PolyDataRemeshing.html</anchorfile>
      <anchor>a4c01955dc5dcfe6321754270e576f3c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>INDEX</name>
      <anchorfile>classmirtk_1_1PolyDataRemeshing.html</anchorfile>
      <anchor>a4c01955dc5dcfe6321754270e576f3c2ad3889fa288217628950a317cc6624f31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>AREA</name>
      <anchorfile>classmirtk_1_1PolyDataRemeshing.html</anchorfile>
      <anchor>a4c01955dc5dcfe6321754270e576f3c2a047b3d7b104a4125bf30f6b04e5181bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SHORTEST_EDGE</name>
      <anchorfile>classmirtk_1_1PolyDataRemeshing.html</anchorfile>
      <anchor>a4c01955dc5dcfe6321754270e576f3c2aafc270a3fca2f6a667b6817d9c6a3952</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkOnOffMacro</name>
      <anchorfile>classmirtk_1_1PolyDataRemeshing.html</anchorfile>
      <anchor>a20a5c860acc28ffedaea58d96faa97b8</anchor>
      <arglist>(MeltNodes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkOnOffMacro</name>
      <anchorfile>classmirtk_1_1PolyDataRemeshing.html</anchorfile>
      <anchor>a93eed04076a1db2c0b51ddc965ac1702</anchor>
      <arglist>(MeltTriangles)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkOnOffMacro</name>
      <anchorfile>classmirtk_1_1PolyDataRemeshing.html</anchorfile>
      <anchor>aa8d4eaea0b0360f236edf29538dc95a5</anchor>
      <arglist>(InvertTrianglesSharingOneLongEdge)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkOnOffMacro</name>
      <anchorfile>classmirtk_1_1PolyDataRemeshing.html</anchorfile>
      <anchor>af183e1e25769ffb8e97d46babbc5413e</anchor>
      <arglist>(InvertTrianglesToIncreaseMinHeight)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfChanges</name>
      <anchorfile>classmirtk_1_1PolyDataRemeshing.html</anchorfile>
      <anchor>a47b0ccc6761146e4d1b1b13956b048d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfMeltings</name>
      <anchorfile>classmirtk_1_1PolyDataRemeshing.html</anchorfile>
      <anchor>ac486119a76dbf54cd46867734833a585</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfSubdivisions</name>
      <anchorfile>classmirtk_1_1PolyDataRemeshing.html</anchorfile>
      <anchor>a049ca672d0519eea2a5ca67dbbf98548</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>PolyDataRemeshing &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1PolyDataRemeshing.html</anchorfile>
      <anchor>a8921a14f45083c3e59e9d46a9b401562</anchor>
      <arglist>(const PolyDataRemeshing &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolyDataRemeshing</name>
      <anchorfile>classmirtk_1_1PolyDataRemeshing.html</anchorfile>
      <anchor>a762ba0f00a2604b9ed2ddf511f60e889</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolyDataRemeshing</name>
      <anchorfile>classmirtk_1_1PolyDataRemeshing.html</anchorfile>
      <anchor>a1b6fc75adc222b6d2c9ef87a9d78eded</anchor>
      <arglist>(const PolyDataRemeshing &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PolyDataRemeshing</name>
      <anchorfile>classmirtk_1_1PolyDataRemeshing.html</anchorfile>
      <anchor>a4a1645a2d222e1fd2bfbe0165c061e80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Bisect</name>
      <anchorfile>classmirtk_1_1PolyDataRemeshing.html</anchorfile>
      <anchor>a568e96664fb21ec860574ebe040d354e</anchor>
      <arglist>(vtkIdType, vtkIdType, vtkIdType, vtkIdType, vtkPoints *, vtkCellArray *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CopyAttributes</name>
      <anchorfile>classmirtk_1_1PolyDataRemeshing.html</anchorfile>
      <anchor>a6542e898613515f52a81a26aacfb0bcd</anchor>
      <arglist>(const PolyDataRemeshing &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Execute</name>
      <anchorfile>classmirtk_1_1PolyDataRemeshing.html</anchorfile>
      <anchor>a427fb6c7d99d40f0d091aaa2bce10b68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Finalize</name>
      <anchorfile>classmirtk_1_1PolyDataRemeshing.html</anchorfile>
      <anchor>ae175db3d498b14413894380033011563</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1PolyDataRemeshing.html</anchorfile>
      <anchor>a594a6e6a85ebbc27765722e014ac061e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>InitializeEdgeLengthRange</name>
      <anchorfile>classmirtk_1_1PolyDataRemeshing.html</anchorfile>
      <anchor>a68e43f044a03734749e6a9e2a49f5a58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Inversion</name>
      <anchorfile>classmirtk_1_1PolyDataRemeshing.html</anchorfile>
      <anchor>aa36a72af94de43f97bfb88295fc201f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>InversionOfTrianglesSharingOneLongEdge</name>
      <anchorfile>classmirtk_1_1PolyDataRemeshing.html</anchorfile>
      <anchor>ada38e445162a79cf3fa1bf32cb0689df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>InversionOfTrianglesToIncreaseMinHeight</name>
      <anchorfile>classmirtk_1_1PolyDataRemeshing.html</anchorfile>
      <anchor>aeb6eeae517314f72d473ac6895345507</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MeltEdge</name>
      <anchorfile>classmirtk_1_1PolyDataRemeshing.html</anchorfile>
      <anchor>a8a1a9e8717c6d9029db6c5ecc076d3b7</anchor>
      <arglist>(vtkIdType, vtkIdType, vtkIdType, vtkIdList *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Melting</name>
      <anchorfile>classmirtk_1_1PolyDataRemeshing.html</anchorfile>
      <anchor>a07ab30d74323effa4abcfafa8039ba67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>MeltingOfCells</name>
      <anchorfile>classmirtk_1_1PolyDataRemeshing.html</anchorfile>
      <anchor>aac1af127c06b5d4a36307bb187827af5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>MeltingOfNodes</name>
      <anchorfile>classmirtk_1_1PolyDataRemeshing.html</anchorfile>
      <anchor>a6163f8275c9493c5607956523d274292</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>MeltTriangle</name>
      <anchorfile>classmirtk_1_1PolyDataRemeshing.html</anchorfile>
      <anchor>a0c8b6b0f04b2d9aa3067b2039d32431f</anchor>
      <arglist>(vtkIdType, vtkIdList *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1PolyDataRemeshing.html</anchorfile>
      <anchor>a2027006a18d532ce1abc540efd4d9a03</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPolyData &gt;, TriangulatedInput)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1PolyDataRemeshing.html</anchorfile>
      <anchor>a40dd438dd0b7177d95668964346df75d</anchor>
      <arglist>(vtkSmartPointer&lt; vtkDataArray &gt;, OutputPointLabels)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1PolyDataRemeshing.html</anchorfile>
      <anchor>ab9c11d2f5e9824b62a65622c634d101f</anchor>
      <arglist>(vtkSmartPointer&lt; vtkDataArray &gt;, MinEdgeLengthArray)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1PolyDataRemeshing.html</anchorfile>
      <anchor>a614f967a6c53e3321f9b7b9054904061</anchor>
      <arglist>(vtkSmartPointer&lt; vtkDataArray &gt;, MaxEdgeLengthArray)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1PolyDataRemeshing.html</anchorfile>
      <anchor>ab0162d0845889ab6e685b57ede0adc30</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPriorityQueue &gt;, MeltingQueue)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAggregateMacro</name>
      <anchorfile>classmirtk_1_1PolyDataRemeshing.html</anchorfile>
      <anchor>a58e86287c13b63028736cc3515d54a9b</anchor>
      <arglist>(const class Transformation, Transformation)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PolyDataRemeshing.html</anchorfile>
      <anchor>a24e8b1bf64071f02aee8cde12288845f</anchor>
      <arglist>(double, MinFeatureAngle)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PolyDataRemeshing.html</anchorfile>
      <anchor>ab69caa979cb2be6a28a09f56cc5ddf01</anchor>
      <arglist>(double, MaxFeatureAngle)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PolyDataRemeshing.html</anchorfile>
      <anchor>a14a365ded7502c1e1f62ca5f3277612f</anchor>
      <arglist>(double, MinEdgeLength)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PolyDataRemeshing.html</anchorfile>
      <anchor>ac32681276e6d5b07e259e04fdde2d301</anchor>
      <arglist>(double, MaxEdgeLength)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PolyDataRemeshing.html</anchorfile>
      <anchor>a077897ab93ad7828201d7d26f82b0239</anchor>
      <arglist>(vtkSmartPointer&lt; vtkDataArray &gt;, AdaptiveEdgeLengthArray)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PolyDataRemeshing.html</anchorfile>
      <anchor>a5eb529808c0b009447091e487854d515</anchor>
      <arglist>(vtkSmartPointer&lt; vtkDataArray &gt;, MinCellEdgeLengthArray)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PolyDataRemeshing.html</anchorfile>
      <anchor>a5604ec111b0d4c75bcd85c89fbf5c67d</anchor>
      <arglist>(vtkSmartPointer&lt; vtkDataArray &gt;, MaxCellEdgeLengthArray)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PolyDataRemeshing.html</anchorfile>
      <anchor>a5daf7d877ba34dd9dd109d4052ceb1a5</anchor>
      <arglist>(Order, MeltingOrder)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PolyDataRemeshing.html</anchorfile>
      <anchor>a8957bcbcf25669e9bcfca0f2724eda03</anchor>
      <arglist>(bool, MeltNodes)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PolyDataRemeshing.html</anchorfile>
      <anchor>ab5eb5258373acf3129df06024a8ae7ea</anchor>
      <arglist>(bool, MeltTriangles)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PolyDataRemeshing.html</anchorfile>
      <anchor>adfd224d90e0f79e2f3410001b8a3881e</anchor>
      <arglist>(bool, InvertTrianglesSharingOneLongEdge)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PolyDataRemeshing.html</anchorfile>
      <anchor>affa512a0090a92681e7a1d48562333c3</anchor>
      <arglist>(bool, InvertTrianglesToIncreaseMinHeight)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1PolyDataRemeshing.html</anchorfile>
      <anchor>a3d46615d602a050f1151fc5af4068a5d</anchor>
      <arglist>(int, NumberOfMeltedNodes)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1PolyDataRemeshing.html</anchorfile>
      <anchor>a7fa4cc5d1054b4b164e0bf8db675b2c6</anchor>
      <arglist>(int, NumberOfMeltedEdges)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1PolyDataRemeshing.html</anchorfile>
      <anchor>a4752db05a474b85e387e80f99222875d</anchor>
      <arglist>(int, NumberOfMeltedCells)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1PolyDataRemeshing.html</anchorfile>
      <anchor>aaf6febb0f2526aa34e17d6407b1d86f7</anchor>
      <arglist>(int, NumberOfInversions)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1PolyDataRemeshing.html</anchorfile>
      <anchor>a013b563b9071d5785fbae0ff447b8c84</anchor>
      <arglist>(int, NumberOfBisections)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1PolyDataRemeshing.html</anchorfile>
      <anchor>a0f1f4b7664227701ccffe2135dfbc6d5</anchor>
      <arglist>(int, NumberOfTrisections)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1PolyDataRemeshing.html</anchorfile>
      <anchor>af5fdb88dc5ece03c4568d5c971f79635</anchor>
      <arglist>(int, NumberOfQuadsections)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Quadsect</name>
      <anchorfile>classmirtk_1_1PolyDataRemeshing.html</anchorfile>
      <anchor>a69daf1487627c5d3a70e7a2ab67a5c0b</anchor>
      <arglist>(vtkIdType, vtkIdType, vtkIdType, vtkIdType, vtkPoints *, vtkCellArray *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Subdivision</name>
      <anchorfile>classmirtk_1_1PolyDataRemeshing.html</anchorfile>
      <anchor>adc9066f81f4163b55d8e86cd4b5def57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Trisect</name>
      <anchorfile>classmirtk_1_1PolyDataRemeshing.html</anchorfile>
      <anchor>aefa92952dc1b0ac4d5cbce2ebcc5290f</anchor>
      <arglist>(vtkIdType, vtkIdType, vtkIdType, vtkIdType, vtkPoints *, vtkCellArray *)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_MaxFeatureAngleCos</name>
      <anchorfile>classmirtk_1_1PolyDataRemeshing.html</anchorfile>
      <anchor>a66930346553b381059bd4c254b76ccd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_MinFeatureAngleCos</name>
      <anchorfile>classmirtk_1_1PolyDataRemeshing.html</anchorfile>
      <anchor>a57398f316db3eddbfd8beabd2384cddf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::PolyDataSmoothing</name>
    <filename>classmirtk_1_1PolyDataSmoothing.html</filename>
    <base>mirtk::PolyDataFilter</base>
    <member kind="typedef">
      <type>Array&lt; string &gt;</type>
      <name>ArrayNames</name>
      <anchorfile>classmirtk_1_1PolyDataSmoothing.html</anchorfile>
      <anchor>aad89c6e354b6eb7645a7645596762f4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Array&lt; vtkSmartPointer&lt; vtkDataArray &gt; &gt;</type>
      <name>DataArrays</name>
      <anchorfile>classmirtk_1_1PolyDataSmoothing.html</anchorfile>
      <anchor>aea0f1c0e7002ac9d4c42b26e190b7b8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>WeightFunction</name>
      <anchorfile>classmirtk_1_1PolyDataSmoothing.html</anchorfile>
      <anchor>a63838958853f5e17df478d0bb85e7eae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Default</name>
      <anchorfile>classmirtk_1_1PolyDataSmoothing.html</anchorfile>
      <anchor>a63838958853f5e17df478d0bb85e7eaeae3206dec4eca13a6b1772dabd1814db8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Combinatorial</name>
      <anchorfile>classmirtk_1_1PolyDataSmoothing.html</anchorfile>
      <anchor>a63838958853f5e17df478d0bb85e7eaeac82c4aadc0276686eaeb20fb1632487f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>InverseDistance</name>
      <anchorfile>classmirtk_1_1PolyDataSmoothing.html</anchorfile>
      <anchor>a63838958853f5e17df478d0bb85e7eaea792ec7956133a92f08546b6c6c7b87fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Gaussian</name>
      <anchorfile>classmirtk_1_1PolyDataSmoothing.html</anchorfile>
      <anchor>a63838958853f5e17df478d0bb85e7eaea3749ae4a81a585a6509500dffef00e2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>AnisotropicGaussian</name>
      <anchorfile>classmirtk_1_1PolyDataSmoothing.html</anchorfile>
      <anchor>a63838958853f5e17df478d0bb85e7eaea87860fdf9e0b3adb75158a7783a78a80</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkGetMacro</name>
      <anchorfile>classmirtk_1_1PolyDataSmoothing.html</anchorfile>
      <anchor>a5a609194e01c7b10ee686ee41670799c</anchor>
      <arglist>(NumberOfIterations, int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkGetMacro</name>
      <anchorfile>classmirtk_1_1PolyDataSmoothing.html</anchorfile>
      <anchor>a5f280043f650f0b1a64e6fe6ccb74f68</anchor>
      <arglist>(Lambda, double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkGetMacro</name>
      <anchorfile>classmirtk_1_1PolyDataSmoothing.html</anchorfile>
      <anchor>a4ba3b809c647ed7d61bfac76bf09c085</anchor>
      <arglist>(Sigma, double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkGetMacro</name>
      <anchorfile>classmirtk_1_1PolyDataSmoothing.html</anchorfile>
      <anchor>ad2f64d49f0febe6e8143c98627005e0c</anchor>
      <arglist>(MaximumDirectionSigma, double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkOnOffMacro</name>
      <anchorfile>classmirtk_1_1PolyDataSmoothing.html</anchorfile>
      <anchor>a7f98f0cc8e620917f3ef72819fd04dd0</anchor>
      <arglist>(AdjacentValuesOnly)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkOnOffMacro</name>
      <anchorfile>classmirtk_1_1PolyDataSmoothing.html</anchorfile>
      <anchor>a2a12c978352e859c91556c58251aee6c</anchor>
      <arglist>(SmoothPoints)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkSetMacro</name>
      <anchorfile>classmirtk_1_1PolyDataSmoothing.html</anchorfile>
      <anchor>a8565803bdb0ac1b4669d857347f1a378</anchor>
      <arglist>(NumberOfIterations, int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkSetMacro</name>
      <anchorfile>classmirtk_1_1PolyDataSmoothing.html</anchorfile>
      <anchor>af6722370cd1718b42e37c9c24f66046c</anchor>
      <arglist>(Lambda, double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkSetMacro</name>
      <anchorfile>classmirtk_1_1PolyDataSmoothing.html</anchorfile>
      <anchor>a777835d4d7f88e2209c5aaa3eeb3dcbf</anchor>
      <arglist>(Sigma, double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkSetMacro</name>
      <anchorfile>classmirtk_1_1PolyDataSmoothing.html</anchorfile>
      <anchor>a9160223dd7ad4c160fb865fbd926f559</anchor>
      <arglist>(MaximumDirectionSigma, double)</arglist>
    </member>
    <member kind="function">
      <type>PolyDataSmoothing &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1PolyDataSmoothing.html</anchorfile>
      <anchor>a11133907c07f266fcf86c759f6597afa</anchor>
      <arglist>(const PolyDataSmoothing &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolyDataSmoothing</name>
      <anchorfile>classmirtk_1_1PolyDataSmoothing.html</anchorfile>
      <anchor>a8ba2fc28f360e154c1c66fd0ba109776</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolyDataSmoothing</name>
      <anchorfile>classmirtk_1_1PolyDataSmoothing.html</anchorfile>
      <anchor>aed873594b2dec308f12e341d4ef5c251</anchor>
      <arglist>(const PolyDataSmoothing &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SmoothArray</name>
      <anchorfile>classmirtk_1_1PolyDataSmoothing.html</anchorfile>
      <anchor>a63b50dc1b09bded90d9acb935f4c897b</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PolyDataSmoothing</name>
      <anchorfile>classmirtk_1_1PolyDataSmoothing.html</anchorfile>
      <anchor>aada9619a653fe010ec54b97fcad3eb8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CopyAttributes</name>
      <anchorfile>classmirtk_1_1PolyDataSmoothing.html</anchorfile>
      <anchor>a62aab673638280a084dc89ab2f72bb03</anchor>
      <arglist>(const PolyDataSmoothing &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Execute</name>
      <anchorfile>classmirtk_1_1PolyDataSmoothing.html</anchorfile>
      <anchor>a0657b2be2ba270c68fc960afbb4381bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Finalize</name>
      <anchorfile>classmirtk_1_1PolyDataSmoothing.html</anchorfile>
      <anchor>ae3212826860beef07d9d8acd04fff7be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1PolyDataSmoothing.html</anchorfile>
      <anchor>a052d658e3c92a2205f92ccee4f4b89e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1PolyDataSmoothing.html</anchorfile>
      <anchor>ae01fd84bb4e01060ab1945012d874eb9</anchor>
      <arglist>(DataArrays, InputArrays)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1PolyDataSmoothing.html</anchorfile>
      <anchor>a323d00816c3fbe31c26bd85c80316172</anchor>
      <arglist>(DataArrays, OutputArrays)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PolyDataSmoothing.html</anchorfile>
      <anchor>a92e86f3f03b8cbd9bacfb0d838f04738</anchor>
      <arglist>(vtkSmartPointer&lt; vtkDataArray &gt;, Mask)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PolyDataSmoothing.html</anchorfile>
      <anchor>a2b2d5b4c77f04337fd9fb248cdfc2e0b</anchor>
      <arglist>(int, NumberOfIterations)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PolyDataSmoothing.html</anchorfile>
      <anchor>a9dbc3ad3c3e4dd0eab2bf3d6fabae1e0</anchor>
      <arglist>(double, Lambda)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PolyDataSmoothing.html</anchorfile>
      <anchor>a1f5b94ba01073253800c0547590bcf28</anchor>
      <arglist>(double, Mu)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PolyDataSmoothing.html</anchorfile>
      <anchor>ab232702394aba78dcfc70bbaec432a4c</anchor>
      <arglist>(double, Sigma)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PolyDataSmoothing.html</anchorfile>
      <anchor>ab9e4be5fec737ab3c70ca561a547ae95</anchor>
      <arglist>(double, MaximumDirectionSigma)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PolyDataSmoothing.html</anchorfile>
      <anchor>affbe9c2b885a037c8bae55cf1bd9285c</anchor>
      <arglist>(WeightFunction, Weighting)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PolyDataSmoothing.html</anchorfile>
      <anchor>a73c34e5e43defffe63c3f9753dd1d150</anchor>
      <arglist>(string, GeometryTensorName)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PolyDataSmoothing.html</anchorfile>
      <anchor>a45da93ce60511040e5a802328aebdcd6</anchor>
      <arglist>(string, MinimumDirectionName)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PolyDataSmoothing.html</anchorfile>
      <anchor>a696a545f002fedf48d724111d873ea25</anchor>
      <arglist>(string, MaximumDirectionName)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PolyDataSmoothing.html</anchorfile>
      <anchor>ab993f419ccd2ce47855401c70e708afd</anchor>
      <arglist>(bool, AdjacentValuesOnly)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PolyDataSmoothing.html</anchorfile>
      <anchor>a6409a3eadebd283aa25cc74bf2317afc</anchor>
      <arglist>(bool, SmoothPoints)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PolyDataSmoothing.html</anchorfile>
      <anchor>a704f4fc34c1f81080e99b708ceec3d2d</anchor>
      <arglist>(bool, SmoothMagnitude)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PolyDataSmoothing.html</anchorfile>
      <anchor>a919eaf724e8bb5d67b248100aaaf34ce</anchor>
      <arglist>(bool, SignedSmoothing)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PolyDataSmoothing.html</anchorfile>
      <anchor>a1ccf65b3a5f308a1c6b23b5edbfd65a9</anchor>
      <arglist>(ArrayNames, SmoothArrays)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1PolyDataSmoothing.html</anchorfile>
      <anchor>ace8f76fc030dcf7fd4e17a62461f69d4</anchor>
      <arglist>(int, Verbose)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::Polyhedron</name>
    <filename>classmirtk_1_1Polyhedron.html</filename>
    <base>mirtk::Object</base>
    <member kind="function">
      <type>void</type>
      <name>GetPoint</name>
      <anchorfile>classmirtk_1_1Polyhedron.html</anchorfile>
      <anchor>a615ad4d8b2c107ebbdb3034b20bfcaf8</anchor>
      <arglist>(int, double &amp;, double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetPoint</name>
      <anchorfile>classmirtk_1_1Polyhedron.html</anchorfile>
      <anchor>a14d9355a153fc73c3c20e01002b57640</anchor>
      <arglist>(int, double[3]) const </arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>GetPoint</name>
      <anchorfile>classmirtk_1_1Polyhedron.html</anchorfile>
      <anchor>afa0233f6b83f509988cd8a2f13479046</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInside</name>
      <anchorfile>classmirtk_1_1Polyhedron.html</anchorfile>
      <anchor>aff819dd151bb1eb646a369bbee26ffdd</anchor>
      <arglist>(double, double, double) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInside</name>
      <anchorfile>classmirtk_1_1Polyhedron.html</anchorfile>
      <anchor>a41142eb293ddfe686804b391e083f5e4</anchor>
      <arglist>(double[3]) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInside</name>
      <anchorfile>classmirtk_1_1Polyhedron.html</anchorfile>
      <anchor>a22c2dcfc586277e1b12d399ab0178cec</anchor>
      <arglist>(const Point &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfPoints</name>
      <anchorfile>classmirtk_1_1Polyhedron.html</anchorfile>
      <anchor>ac2c7a0372332b9534f510532979abde2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Polyhedron &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1Polyhedron.html</anchorfile>
      <anchor>aa597f2201cd351be00d29be38bec63f8</anchor>
      <arglist>(const Polyhedron &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Polyhedron</name>
      <anchorfile>classmirtk_1_1Polyhedron.html</anchorfile>
      <anchor>abf5a11e1c03f251e6a62626c3c574231</anchor>
      <arglist>(vtkPolyData *=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Polyhedron</name>
      <anchorfile>classmirtk_1_1Polyhedron.html</anchorfile>
      <anchor>a36c555ca4e110f69a7ec1bd4b76db4cd</anchor>
      <arglist>(const Polyhedron &amp;)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Volume</name>
      <anchorfile>classmirtk_1_1Polyhedron.html</anchorfile>
      <anchor>aa3907ddf25b2e98e22b6baf34edd8232</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>WindingNumber</name>
      <anchorfile>classmirtk_1_1Polyhedron.html</anchorfile>
      <anchor>a051fe4b28ad2b5bc0a0f845dd6da4b57</anchor>
      <arglist>(double, double, double) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>WindingNumber</name>
      <anchorfile>classmirtk_1_1Polyhedron.html</anchorfile>
      <anchor>a84aa6327b3f818c6e502303ec6f13e46</anchor>
      <arglist>(double[3]) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>WindingNumber</name>
      <anchorfile>classmirtk_1_1Polyhedron.html</anchorfile>
      <anchor>a4ed28af7fb46f157bd268cdf4111bc71</anchor>
      <arglist>(const Point &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Polyhedron</name>
      <anchorfile>classmirtk_1_1Polyhedron.html</anchorfile>
      <anchor>a850d2abb8938d97371fb1dd732abefa4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>IsInside</name>
      <anchorfile>classmirtk_1_1Polyhedron.html</anchorfile>
      <anchor>a93ed2ffc89f5acce4582b4b080e9ade7</anchor>
      <arglist>(vtkPolyData *, double, double, double)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>IsInside</name>
      <anchorfile>classmirtk_1_1Polyhedron.html</anchorfile>
      <anchor>ae4564139f5091bd8a4e63b587035fd6b</anchor>
      <arglist>(vtkPolyData *, double[3])</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>IsInside</name>
      <anchorfile>classmirtk_1_1Polyhedron.html</anchorfile>
      <anchor>a43ed3e9a052053f1f2eb0394d78cfe46</anchor>
      <arglist>(vtkPolyData *, const Point &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>Volume</name>
      <anchorfile>classmirtk_1_1Polyhedron.html</anchorfile>
      <anchor>acbfd743c1d73dfee7ebf49a0f56fbf9d</anchor>
      <arglist>(vtkPolyData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>WindingNumber</name>
      <anchorfile>classmirtk_1_1Polyhedron.html</anchorfile>
      <anchor>a4bfbe5692ad2538bbc9d2423c1e65853</anchor>
      <arglist>(vtkPolyData *, double, double, double)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>WindingNumber</name>
      <anchorfile>classmirtk_1_1Polyhedron.html</anchorfile>
      <anchor>aef561916d95710fec6972dcfb4ee08b7</anchor>
      <arglist>(vtkPolyData *, double[3])</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>WindingNumber</name>
      <anchorfile>classmirtk_1_1Polyhedron.html</anchorfile>
      <anchor>a699643bd89bc5347a3bec11a91f7a573</anchor>
      <arglist>(vtkPolyData *, const Point &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::Polynomial</name>
    <filename>classmirtk_1_1Polynomial.html</filename>
    <base>mirtk::Object</base>
    <member kind="function">
      <type>void</type>
      <name>Coefficient</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>aa1885886c79a75ef9ac904d3bb22f675</anchor>
      <arglist>(int i, double c)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Coefficient</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a25c09bf19651809a84dea143a99ec9b5</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Coefficients</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a81245b459835602c025807a6952f87bf</anchor>
      <arglist>(const Vector &amp;coeff)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a2c972148dde6fff232dc7a280d0bc543</anchor>
      <arglist>(const Matrix &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a159269af3f34a529cdd8448b1fb0492d</anchor>
      <arglist>(const PointSet &amp;x, bool twoD=false) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>afbc4322d5790d7c4141c664b6268ce9c</anchor>
      <arglist>(const Vector &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>aa0b2d1a62d67375594e6c953bdf3effe</anchor>
      <arglist>(const Point &amp;x, bool twoD=false) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a4a85c3650b2928150f44bad94c99d721</anchor>
      <arglist>(double x, double y, double z) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>affcf20ff28919dba5f24bc9f94e72b1f</anchor>
      <arglist>(double x, double y) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>adc8c436f024185aa531cdda05702ef49</anchor>
      <arglist>(double x) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>Evaluate1stOrderDerivative</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a14c00d77770b4e495095deed0182d686</anchor>
      <arglist>(int j, const Matrix &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>Evaluate1stOrderDerivative</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a21a43f1b7f9df0a3cfe4fa7e94dc5b3c</anchor>
      <arglist>(int j, const PointSet &amp;x, bool twoD=false) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>Evaluate1stOrderDerivative</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a997d0c5ebff3ac0ff475f4cd6be45de0</anchor>
      <arglist>(int j, const Vector &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Evaluate1stOrderDerivative</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a6ff0e13d09c75b1278355a9b37ecdefe</anchor>
      <arglist>(int j, const Point &amp;x, bool twoD=false) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Evaluate1stOrderDerivative</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>ab1f59eaed82a98df0e61af60b3852ceb</anchor>
      <arglist>(int j, double x) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>Evaluate2ndOrderDerivative</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a5a08196858e3aa66237f1924b0add1c5</anchor>
      <arglist>(int j1, int j2, const Matrix &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>Evaluate2ndOrderDerivative</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a89a2f700a144c256607923a1aedfe7cd</anchor>
      <arglist>(int j1, int j2, const PointSet &amp;x, bool twoD=false) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>Evaluate2ndOrderDerivative</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a1f317eed1d6c4d892128752c6ccfdaec</anchor>
      <arglist>(int j1, int j2, const Vector &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Evaluate2ndOrderDerivative</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a23169f1f8e026b2f02628915d5f1f043</anchor>
      <arglist>(int j1, int j2, const Point &amp;x, bool twoD=false) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Evaluate2ndOrderDerivative</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>aa365e671a8c4065ba6d93569e41e4ec5</anchor>
      <arglist>(int j1, int j2, double x) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>EvaluateGaussianCurvature</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a1e3522c066ba5c3045ad8b2be5262c18</anchor>
      <arglist>(const Point &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>EvaluateGradient</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>aa60733b7a5b55bba30e1ce7ba1f5a355</anchor>
      <arglist>(const Point &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix3x3</type>
      <name>EvaluateHessian</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a18b3da9664549cb9c94deb50829cb828</anchor>
      <arglist>(const Point &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>EvaluateMeanCurvature</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a379603ae12b7408bd9f97ed7a3fe9ad0</anchor>
      <arglist>(const Point &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>EvaluateTaubinDistance</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a4764ec77b3420c24317d923c7645c6f2</anchor>
      <arglist>(const Point &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Exponent</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a899955b99d436295babe33c3d3b453d1</anchor>
      <arglist>(int i, int j=0) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Fit</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a3cac136a15a3875060392cfa124616ac</anchor>
      <arglist>(const Matrix &amp;x, const Vector &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Fit</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a0c426296734a1fe73842b67db6883733</anchor>
      <arglist>(const Matrix &amp;x, const Vector &amp;y, const Array&lt; int &gt; &amp;subset)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Fit</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>ad9c6908b9d8147f73eeea4b076ff44a3</anchor>
      <arglist>(const Matrix &amp;x, const Vector &amp;y, const OrderedSet&lt; int &gt; &amp;subset)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Fit</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a70edbd5f595f7c8ebf6ddbf3f6d18b22</anchor>
      <arglist>(const PointSet &amp;x, const Vector &amp;y, bool twoD=false)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Fit</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a13e9d0b6154decc76a0b700b3ccf211b</anchor>
      <arglist>(const Vector &amp;x, const Vector &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>FitSurface</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a6e968ba8d415557e8ca6777f86d15b0c</anchor>
      <arglist>(const PointSet &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>FitSurface</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>adeb685594a0a976edebabcd05b97d570</anchor>
      <arglist>(const PointSet &amp;x, const Array&lt; int &gt; &amp;subset)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>FitSurface</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a243d5c4c867be9946414568c51486a42</anchor>
      <arglist>(const PointSet &amp;x, const OrderedSet&lt; int &gt; &amp;subset)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>FitSurface</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>af0d77963551066b98c5720adba973fc8</anchor>
      <arglist>(const PointSet &amp;x, const PointSet &amp;n, double c=1.0)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>FitSurface</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a6cd0f8e51b6e5847271c3e6ac97c9615</anchor>
      <arglist>(const PointSet &amp;x, const PointSet &amp;n, const Array&lt; int &gt; &amp;subset, double c=1.0)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>FitSurface</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a718b493b34e8d6921f32279ca1d2cf9d</anchor>
      <arglist>(const PointSet &amp;x, const PointSet &amp;n, const OrderedSet&lt; int &gt; &amp;subset, double c=1.0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a7d821d51edece5704a6a3e647e8d5926</anchor>
      <arglist>(int p, int order=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsConstant</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>aaa7c76bd1118b027dba9a988cf7b70c8</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfActiveTerms</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a05574675e3d827bd7852ae6741f0aa14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfPassiveTerms</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>ad510e69d9ef9eae9904ff6bfe78bf86c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfTerms</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a168865e7dc6ebb660d6ea056594bca1b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Polynomial &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a021856d86f28bbf288ccf07fa5a3465c</anchor>
      <arglist>(const Polynomial &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Polynomial</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>afca11134127d8592645c2f0f9234af60</anchor>
      <arglist>(int order=2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Polynomial</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a1a1241dd9f98cb7fe9260c19cf64d60c</anchor>
      <arglist>(int p, int order, const Vector &amp;coeff=Vector())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Polynomial</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>ae06c2b11337f72ec82610dd9713e432e</anchor>
      <arglist>(const Polynomial &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>a9659bda355da35c155f43ceaca2c42fd</anchor>
      <arglist>(ostream &amp;os, Indent=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>adb1e4e176483edf80baf10196fb01a80</anchor>
      <arglist>(Indent=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetCoefficientsToZero</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>adb0fcea09a78d43913ffba1789c926de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetConstantCoefficient</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>ae43aaef7568384bf53392d2a30a1ae1b</anchor>
      <arglist>(double value, enum Status status=Passive)</arglist>
    </member>
    <member kind="function">
      <type>enum Status</type>
      <name>Status</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>aabf4114d7575ed2b75b4397c1548db9d</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Status</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>abf930146254a1492496edd5641accdea</anchor>
      <arglist>(int i, enum Status s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Polynomial</name>
      <anchorfile>classmirtk_1_1Polynomial.html</anchorfile>
      <anchor>aa1cde6d1770cebe2d75413f147bb632d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::QuadraticCurvatureConstraint</name>
    <filename>classmirtk_1_1QuadraticCurvatureConstraint.html</filename>
    <base>mirtk::SurfaceConstraint</base>
    <member kind="function">
      <type>QuadraticCurvatureConstraint &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1QuadraticCurvatureConstraint.html</anchorfile>
      <anchor>afcda3eb134fd388eba421036a1486da0</anchor>
      <arglist>(const QuadraticCurvatureConstraint &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuadraticCurvatureConstraint</name>
      <anchorfile>classmirtk_1_1QuadraticCurvatureConstraint.html</anchorfile>
      <anchor>abce53d0e722282ffde6dee9092aa6846</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuadraticCurvatureConstraint</name>
      <anchorfile>classmirtk_1_1QuadraticCurvatureConstraint.html</anchorfile>
      <anchor>ac468f2537626a7895260794602eab811</anchor>
      <arglist>(const QuadraticCurvatureConstraint &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1QuadraticCurvatureConstraint.html</anchorfile>
      <anchor>ac581bbf33d9355feb504c39ed29aee3d</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~QuadraticCurvatureConstraint</name>
      <anchorfile>classmirtk_1_1QuadraticCurvatureConstraint.html</anchorfile>
      <anchor>a4d823a7e623fd537e41596ca84df033e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1QuadraticCurvatureConstraint.html</anchorfile>
      <anchor>a03dffa808ae927a5460386d1699c32b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateGradient</name>
      <anchorfile>classmirtk_1_1QuadraticCurvatureConstraint.html</anchorfile>
      <anchor>a6988253ae55d025221d5d6fc223564f3</anchor>
      <arglist>(double *, double, double)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::QuaternaryForEachVoxelBody</name>
    <filename>structmirtk_1_1QuaternaryForEachVoxelBody.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody.html</anchorfile>
      <anchor>aa00561a5acc5d55b3af5e386dc2026ea</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody.html</anchorfile>
      <anchor>ae32fd971e22cd2eb8c8254f37b0c2061</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody.html</anchorfile>
      <anchor>a0bb4e18df6c0f54fc9d1ce02b2b47923</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody.html</anchorfile>
      <anchor>aff056dbe590cba69e59cab734df38b49</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternaryForEachVoxelBody</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody.html</anchorfile>
      <anchor>a4b9ac6b947c672bcdba7c99dec8586b9</anchor>
      <arglist>(GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternaryForEachVoxelBody</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody.html</anchorfile>
      <anchor>a8ace30e0014eedfad18c389f43cdfa2a</anchor>
      <arglist>(const QuaternaryForEachVoxelBody &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternaryForEachVoxelBody</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody.html</anchorfile>
      <anchor>aad0984fa5cde3ce27de4359d7223a165</anchor>
      <arglist>(QuaternaryForEachVoxelBody &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::QuaternaryForEachVoxelBody_1Const</name>
    <filename>structmirtk_1_1QuaternaryForEachVoxelBody__1Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a976ab17ce6fdba4fbba7cc95bcca4521</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a04545a7bfa087d216a8f30ba7c720edc</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>acabf3174ea0076f8d16b90b3497cbcf1</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a537e65146fbb8986171284a44ab36042</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternaryForEachVoxelBody_1Const</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>aa0d3dc7540cfc86eae606c0eed9ed0a5</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternaryForEachVoxelBody_1Const</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a877e32e58fa24ddd4f691d4719b506f6</anchor>
      <arglist>(const QuaternaryForEachVoxelBody_1Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternaryForEachVoxelBody_1Const</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a0aee4ad31433bbbe758a24fce6798797</anchor>
      <arglist>(QuaternaryForEachVoxelBody_1Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::QuaternaryForEachVoxelBody_2Const</name>
    <filename>structmirtk_1_1QuaternaryForEachVoxelBody__2Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a76ab9f8056870fcddfa6c80e468ed94e</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>aa58e34eca779bd373cc3fb3dfabfa623</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a239fffcb7857c0af360846885146cd91</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>ade60c725d5384a4c35411babb6d39b5c</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternaryForEachVoxelBody_2Const</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>ab2701b20a21d3e6eff74e2e107a52a87</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternaryForEachVoxelBody_2Const</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a61cfe20f86434be0a6d16989311156d0</anchor>
      <arglist>(const QuaternaryForEachVoxelBody_2Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternaryForEachVoxelBody_2Const</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a8b1238766910d83a9ff51d653ad55960</anchor>
      <arglist>(QuaternaryForEachVoxelBody_2Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::QuaternaryForEachVoxelBody_3Const</name>
    <filename>structmirtk_1_1QuaternaryForEachVoxelBody__3Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>a848be6d8a6beab81b73d6e6ddc2fe019</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>ae4a36e0e760ae9900aadd869a37374cc</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>ad437b51cc36b5cea71df4d9d5df5a4ad</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>a9a4a6aae32d1de0d9decfba4ac71897f</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternaryForEachVoxelBody_3Const</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>a15c4b0cb3a390ef4ae2ece437a616194</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternaryForEachVoxelBody_3Const</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>acc7fc3213edd0283ed1aeff85c25ea99</anchor>
      <arglist>(const QuaternaryForEachVoxelBody_3Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternaryForEachVoxelBody_3Const</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>aa45a0b391779a885d66237b1235d5a5f</anchor>
      <arglist>(QuaternaryForEachVoxelBody_3Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::QuaternaryForEachVoxelBody_Const</name>
    <filename>structmirtk_1_1QuaternaryForEachVoxelBody__Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a478bc62cdbd07e27e1c8d47c445a2f22</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a030c807efafbda5f6f8c52b0f9ad1f9a</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a2a17169f7e71cf67218385823891b90f</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a49602dc6babf441b01f78e2329051427</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternaryForEachVoxelBody_Const</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a8c2a3884639ae5cd0656220e0e4f7252</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternaryForEachVoxelBody_Const</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a81671d1a949eb42e385167e0043f4396</anchor>
      <arglist>(const QuaternaryForEachVoxelBody_Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternaryForEachVoxelBody_Const</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>ad7a7a5a9316b0e9c20bdb6bf8fb7d99d</anchor>
      <arglist>(QuaternaryForEachVoxelBody_Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::QuaternaryForEachVoxelIfBody</name>
    <filename>structmirtk_1_1QuaternaryForEachVoxelIfBody.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a5910e15a8a42bc8f905e8921c9963cae</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a7fe08e435b0ddaa6403e0fff4e3c3e85</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a50df9639f5125947fd64f76996274c3c</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody.html</anchorfile>
      <anchor>acf159a9d30d264c42b4937b23e2dafed</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternaryForEachVoxelIfBody</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody.html</anchorfile>
      <anchor>ad0debaaecab91bfb92becd8465874fcf</anchor>
      <arglist>(GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternaryForEachVoxelIfBody</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a10dda6fba82ab794d6dba4a8d1c55810</anchor>
      <arglist>(const QuaternaryForEachVoxelIfBody &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternaryForEachVoxelIfBody</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a3b7a17de119d6aace3d918fa0f26788f</anchor>
      <arglist>(QuaternaryForEachVoxelIfBody &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::QuaternaryForEachVoxelIfBody_1Const</name>
    <filename>structmirtk_1_1QuaternaryForEachVoxelIfBody__1Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>ac1b0d7d9fde464942cecda3dc97c00ad</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a3d48671ea68ad8798b8a0fb441a92ef2</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a4ddc6e0d7b9352c564cc47fa6fd520a5</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a35a5cab2c596aff6bd1281be9774308d</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternaryForEachVoxelIfBody_1Const</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>ae6aed0a36ac70abc2ed21ba479157acb</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternaryForEachVoxelIfBody_1Const</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a5f980dec4f494d1bc40ebb75d4d7d48b</anchor>
      <arglist>(const QuaternaryForEachVoxelIfBody_1Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternaryForEachVoxelIfBody_1Const</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>ad311fcdc185fa56675894a0b6d94d570</anchor>
      <arglist>(QuaternaryForEachVoxelIfBody_1Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::QuaternaryForEachVoxelIfBody_2Const</name>
    <filename>structmirtk_1_1QuaternaryForEachVoxelIfBody__2Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>ae93b9b765d475f097b59d47bb2ada7ee</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>a42c64078a2a22c6c165478d7d4acd1aa</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>afabeb42919ece55096e33dab72a6fe6d</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>a20fbb065a4fb12c244d1ee09caac9893</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternaryForEachVoxelIfBody_2Const</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>a7bb1965cb2d9c2f48f8a11283bffca0a</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternaryForEachVoxelIfBody_2Const</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>ae49497d8fe512e84e70c34ae94840549</anchor>
      <arglist>(const QuaternaryForEachVoxelIfBody_2Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternaryForEachVoxelIfBody_2Const</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>a765665c91ecc02967d2630373ff125bd</anchor>
      <arglist>(QuaternaryForEachVoxelIfBody_2Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::QuaternaryForEachVoxelIfBody_3Const</name>
    <filename>structmirtk_1_1QuaternaryForEachVoxelIfBody__3Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>a216908a58bf75332ada4a27746201b73</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>a6dc5430f558c08a5b4cc572339d6b824</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>ae4305707318c2f068d57676f4ac84e99</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>aba136a6cf8cfe967652167d9f51d5d7f</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternaryForEachVoxelIfBody_3Const</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>aa00955acafe68a4eaaa74408901d6200</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternaryForEachVoxelIfBody_3Const</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>abb6a83e2ee92d2193a06674d5c52329b</anchor>
      <arglist>(const QuaternaryForEachVoxelIfBody_3Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternaryForEachVoxelIfBody_3Const</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>ad9c083e126f7919888451084a7b179b9</anchor>
      <arglist>(QuaternaryForEachVoxelIfBody_3Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::QuaternaryForEachVoxelIfBody_Const</name>
    <filename>structmirtk_1_1QuaternaryForEachVoxelIfBody__Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a84f962933f55f40feb52fb07e5d6ab2e</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>ab76a64b798d2d2689f8dcf6a43e0f351</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a2087c77903205e7820ecc7ac4bbdd937</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a64c0176ed891dd125ce6e6b5126b62d3</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternaryForEachVoxelIfBody_Const</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a48b51fb6051038f33ae2b1e1a335c5d3</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternaryForEachVoxelIfBody_Const</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a34373acf1c96d51532103daffeaa9156</anchor>
      <arglist>(const QuaternaryForEachVoxelIfBody_Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternaryForEachVoxelIfBody_Const</name>
      <anchorfile>structmirtk_1_1QuaternaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>afd705a3af4792a6543d9ac1e738241fb</anchor>
      <arglist>(QuaternaryForEachVoxelIfBody_Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::QuinaryForEachVoxelBody</name>
    <filename>structmirtk_1_1QuinaryForEachVoxelBody.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody.html</anchorfile>
      <anchor>ad146b31eabe62f675536e2ab0ce377b6</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody.html</anchorfile>
      <anchor>a5358bc8fdf23012e05297b9eb68c6e34</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody.html</anchorfile>
      <anchor>a388d8b79523c782709517fc896fac6be</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody.html</anchorfile>
      <anchor>a100eda733bca13bdde71cc1d6d5d9725</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelBody</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody.html</anchorfile>
      <anchor>a419a2d290d5f007187eadb7287acc97f</anchor>
      <arglist>(GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelBody</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody.html</anchorfile>
      <anchor>a330b97c80035a2aec986189bc23d2eeb</anchor>
      <arglist>(const QuinaryForEachVoxelBody &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelBody</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody.html</anchorfile>
      <anchor>afe35b1b52cb48dd02822a332eb0fb9c5</anchor>
      <arglist>(QuinaryForEachVoxelBody &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::QuinaryForEachVoxelBody_1Const</name>
    <filename>structmirtk_1_1QuinaryForEachVoxelBody__1Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a6e982461ff8f3685a25bec0c422bafcc</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a70b6a85665cc78c5cc570e3e4e77066a</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>ad1d88a6249cd86b9bac81bfc53440833</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a96f1c35514f5a6f3ff203230f2fea44e</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelBody_1Const</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a949ced0e48d0b66d8024549c1b0e0a42</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelBody_1Const</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a81750a399d3fdda0f9a058d38d920b89</anchor>
      <arglist>(const QuinaryForEachVoxelBody_1Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelBody_1Const</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>abd614b5338d49640050a1b7c45d5b27a</anchor>
      <arglist>(QuinaryForEachVoxelBody_1Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::QuinaryForEachVoxelBody_2Const</name>
    <filename>structmirtk_1_1QuinaryForEachVoxelBody__2Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>af79c383dddc6a52ae6edf74a3022d912</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a8feec4bd367af24c98bea7b533549641</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a380f2745ae229ad09a8f732e20e9879c</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>af04ebfd2fc31846bbbf6b68f49fc6c1d</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelBody_2Const</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a2a01f372b76c5978cd6c2853182c6671</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelBody_2Const</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a52ac3695433e2da5f08de255b03ea76f</anchor>
      <arglist>(const QuinaryForEachVoxelBody_2Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelBody_2Const</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a0a1e2d313c338254eb1b32be8bb702c9</anchor>
      <arglist>(QuinaryForEachVoxelBody_2Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::QuinaryForEachVoxelBody_3Const</name>
    <filename>structmirtk_1_1QuinaryForEachVoxelBody__3Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>ac42d14d3a60b7717ac1ad838b42bcae9</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>a1fb819bfe8cfb2c2e42848009b810d55</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>a6981fc0f128304497b807b70164b1f37</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>a61b79fcd71ae806b8946e2b17e45567a</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelBody_3Const</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>a64adca48711b92833ba6d05ee1698bfb</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelBody_3Const</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>a482a019e905bf065b68f2d0be223f476</anchor>
      <arglist>(const QuinaryForEachVoxelBody_3Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelBody_3Const</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>ad4df02f15e17d424e5fd1e9b61a5455c</anchor>
      <arglist>(QuinaryForEachVoxelBody_3Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::QuinaryForEachVoxelBody_4Const</name>
    <filename>structmirtk_1_1QuinaryForEachVoxelBody__4Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>abe129851aff785bef2ee921c2ad26052</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>a24c41b923bb14f7e6ffe1c97de0ef187</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>ac8df64f70bf0b4aed0b6494a15bd6e92</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>af055a2abeee95f389a5a9a1b2a0eb437</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelBody_4Const</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>af9ac7ee7723999c3cf926554d94a2ec0</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelBody_4Const</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>ac82deb5ceac1cf2526e657c9e60e9fd7</anchor>
      <arglist>(const QuinaryForEachVoxelBody_4Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelBody_4Const</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>aedf5ddebd2e6790dea58dcc160e2cf59</anchor>
      <arglist>(QuinaryForEachVoxelBody_4Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::QuinaryForEachVoxelBody_Const</name>
    <filename>structmirtk_1_1QuinaryForEachVoxelBody__Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a46d0b2a98d565b6ffccba7eb2f698d25</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a662a949097f9835dc24c5ced8230021a</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a6393a2f06c940785946f422b141c2b4f</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a74c0d7d9ee23d00c4f1d3728db5d31ec</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelBody_Const</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a0d9d9f3c02372a5920416ebb0715ea74</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, const GenericImage&lt; T5 &gt; &amp;im5, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelBody_Const</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a80be0c01b5a70dfc0e1c1d838df55805</anchor>
      <arglist>(const QuinaryForEachVoxelBody_Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelBody_Const</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a0546277e2a14b70dbe8025248dea349d</anchor>
      <arglist>(QuinaryForEachVoxelBody_Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::QuinaryForEachVoxelIfBody</name>
    <filename>structmirtk_1_1QuinaryForEachVoxelIfBody.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a865ae97bf322a8bfc6d363ed9baea4b8</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody.html</anchorfile>
      <anchor>aed98d0edd8bba7d62de35b7e35c8dd42</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a5552d6ac43c21f3dd8aa00cd370554b1</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody.html</anchorfile>
      <anchor>ad9fcff7a104f84dc135af1117af3c474</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelIfBody</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody.html</anchorfile>
      <anchor>ad40bedf57c2816d1124e45204e6f41f4</anchor>
      <arglist>(GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelIfBody</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody.html</anchorfile>
      <anchor>aaa977862a567c53010cf3b0fd2b7fbef</anchor>
      <arglist>(const QuinaryForEachVoxelIfBody &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelIfBody</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a052fc0e797f590cd5421506de958a52b</anchor>
      <arglist>(QuinaryForEachVoxelIfBody &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::QuinaryForEachVoxelIfBody_1Const</name>
    <filename>structmirtk_1_1QuinaryForEachVoxelIfBody__1Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a89374bfdf78d79c7b9e5b883632e6aa3</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>afb4187cbea93cff4e5904e801ae25da8</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>af66b4d3927186454e8df4ef4d7bda0d8</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a498209a8bb928b8cdbf963365b6277ee</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelIfBody_1Const</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a009a3370b65c98a3d4350b4fbfb07eb3</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelIfBody_1Const</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a8afe98606117475fac2ab7c82d190dc6</anchor>
      <arglist>(const QuinaryForEachVoxelIfBody_1Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelIfBody_1Const</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a4fd766ebe38834843f3815851f315a0a</anchor>
      <arglist>(QuinaryForEachVoxelIfBody_1Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::QuinaryForEachVoxelIfBody_2Const</name>
    <filename>structmirtk_1_1QuinaryForEachVoxelIfBody__2Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>aeefaf2ef085b3bdfb2f6af395b91acaf</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>ae4cfbb80b57ebaf30556e0dd31ac96d0</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>a6dbc955a6bb5dd94c5e87dc8b1040426</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>a6824474c67b2fc7f1f354c3f23c17935</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelIfBody_2Const</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>adcf0f9d0c4a367e46066a747b15150f1</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelIfBody_2Const</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>a0b0ba46337354b9b3ef91a6b71cfde3c</anchor>
      <arglist>(const QuinaryForEachVoxelIfBody_2Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelIfBody_2Const</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>a8d43b9cadf3f989ed64d06c9afc7380b</anchor>
      <arglist>(QuinaryForEachVoxelIfBody_2Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::QuinaryForEachVoxelIfBody_3Const</name>
    <filename>structmirtk_1_1QuinaryForEachVoxelIfBody__3Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>aff72c1bfd6f0a48c8b71b512f485e03b</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>a9fefa5acddcbd6a4bf4155e4da12884b</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>aa842342eb0d67504f46739e622264713</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>a45c1a5fdf228cf77df3ad37aaec8a233</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelIfBody_3Const</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>a8377f44542ab3afd023eab9d769cad6e</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelIfBody_3Const</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>af715ba64fcafee15f13bd69887b9ed89</anchor>
      <arglist>(const QuinaryForEachVoxelIfBody_3Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelIfBody_3Const</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>a8f13d32af0abe9afb9b4a0424d6b8ac8</anchor>
      <arglist>(QuinaryForEachVoxelIfBody_3Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::QuinaryForEachVoxelIfBody_4Const</name>
    <filename>structmirtk_1_1QuinaryForEachVoxelIfBody__4Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>a043581fafd74934eba98b4ced245d4c9</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>acc78c573cf5b613eab7bab10cb603b25</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>a5cc6ba824dfc78b3c36560df056e9174</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>a4e7ef28ec82223ed61db193e0436888b</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelIfBody_4Const</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>a03d6892303b7925368c06cc2b0ffa5d9</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelIfBody_4Const</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>aa7cb95d7c84af2885008f55b8402d351</anchor>
      <arglist>(const QuinaryForEachVoxelIfBody_4Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelIfBody_4Const</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>ab884a34e9fa930d3a639364fbf6e8a2d</anchor>
      <arglist>(QuinaryForEachVoxelIfBody_4Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::QuinaryForEachVoxelIfBody_Const</name>
    <filename>structmirtk_1_1QuinaryForEachVoxelIfBody__Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>adb3cd986cde4449e91e3de60fa8dce3d</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>aec3e64be06b91301e9fbb65d523aee85</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>af60e3e15930565aa7217b5c8be357119</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a406ec1ce7bf5b763fb43e0047d726df9</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelIfBody_Const</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a90075ace44177814a2bec7af20829bdb</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, const GenericImage&lt; T5 &gt; &amp;im5, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelIfBody_Const</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a1edb26b601e248d847f1cbc5fd10313d</anchor>
      <arglist>(const QuinaryForEachVoxelIfBody_Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuinaryForEachVoxelIfBody_Const</name>
      <anchorfile>structmirtk_1_1QuinaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a4c1f77d25b3e5f6fa355ba732a793e64</anchor>
      <arglist>(QuinaryForEachVoxelIfBody_Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::RadialErrorFunction</name>
    <filename>classmirtk_1_1RadialErrorFunction.html</filename>
    <base>mirtk::Object</base>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>Derivative</name>
      <anchorfile>classmirtk_1_1RadialErrorFunction.html</anchorfile>
      <anchor>a992df9d3a9d940683226bc7a63cc4f8c</anchor>
      <arglist>(double d) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual RadialErrorFunction *</type>
      <name>NewInstance</name>
      <anchorfile>classmirtk_1_1RadialErrorFunction.html</anchorfile>
      <anchor>aa8243a59319b0457558cbafc455d8545</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TypeId</type>
      <name>Type</name>
      <anchorfile>classmirtk_1_1RadialErrorFunction.html</anchorfile>
      <anchor>a15d7e4ecda35be2c670d1114663510c8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>Value</name>
      <anchorfile>classmirtk_1_1RadialErrorFunction.html</anchorfile>
      <anchor>ada9ff5c4920ef6e6a19cdfaa6cbd29fa</anchor>
      <arglist>(double d) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::RegisteredImage</name>
    <filename>classmirtk_1_1RegisteredImage.html</filename>
    <base>GenericImage&lt; double &gt;</base>
    <member kind="enumeration">
      <type></type>
      <name>Channel</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>abb33060de7bcee413f23d324b7fd74b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericImage&lt; double &gt;</type>
      <name>DisplacementImageType</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>ab6ba35d7a5e01bc34f4dd87dfbe6952c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericImage&lt; double &gt;</type>
      <name>GradientImageType</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>a57747f00ae1697b670e6594f9fe9e52d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericImage&lt; double &gt;</type>
      <name>HessianImageType</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>a3928bcf593538f4bae7126eff7a66183</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericImage&lt; double &gt;</type>
      <name>InputImageType</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>a67294616d3b52244b1b840b225f4f144</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>voxel_info&lt; ScalarType &gt;::RealType</type>
      <name>RealScalarType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a79137ddf636c95f596e39b0c6b9b6a83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>voxel_info&lt; double &gt;::RealType</type>
      <name>RealType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa99b2a5e620031bb7afe5263a25f81f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>voxel_info&lt; double &gt;::ScalarType</type>
      <name>ScalarType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9d5f6dda2a94510c9d91155404594238</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TVoxel</type>
      <name>VoxelType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac9ca2966d74eca854694dc31ce3add94</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>aab25f56dc4e5b10ffa743e09f0a5a850</anchor>
      <arglist>(const ImageAttributes &amp;, int=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkComponentMacro</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>a5b1fdd4a26a23abbdbc1cc8df5254895</anchor>
      <arglist>(DisplacementImageType, FixedDisplacement)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkComponentMacro</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>ab4dc19076a37883b7474d7189df707eb</anchor>
      <arglist>(DisplacementImageType, Displacement)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAggregateMacro</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>ab6c7d445567baa56f73791bf5643b8fc</anchor>
      <arglist>(InputImageType, InputImage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAggregateMacro</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>a81d465cb261564d15f2a8fee4361090b</anchor>
      <arglist>(const class Transformation, Transformation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAggregateMacro</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>a450d384516409ec72970ce44ef5f04e8</anchor>
      <arglist>(WorldCoordsImage, WorldCoordinates)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAggregateMacro</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>a47c2047aeb42b284533a78c7b0243406</anchor>
      <arglist>(DisplacementImageType, ExternalDisplacement)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>a5bd453140b7150f00f847f801602622b</anchor>
      <arglist>(enum InterpolationMode, InterpolationMode)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>a2c80063487b8980d848ccdd23b50b7a1</anchor>
      <arglist>(enum ExtrapolationMode, ExtrapolationMode)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>a51acbd711e502990fec2cced6e31b5bc</anchor>
      <arglist>(bool, CacheWorldCoordinates)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>af066353579d5ea15c648141e603b57f0</anchor>
      <arglist>(bool, CacheFixedDisplacement)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>a77e55fd97ff4e906108e953552a9fa2d</anchor>
      <arglist>(bool, CacheDisplacement)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>a518e6a32ce711ab87d5af50dbf0167d7</anchor>
      <arglist>(bool, SelfUpdate)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>ae124ae19bba5c4194ee462a1740bec2d</anchor>
      <arglist>(double, MinIntensity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>abd744061c9a4ae4fefb5a99aa8689324</anchor>
      <arglist>(double, MaxIntensity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>afe5cf5e0d8ed700451677960e923cdb2</anchor>
      <arglist>(double, GradientSigma)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>a458a04d775291663a4980815d8748441</anchor>
      <arglist>(double, HessianSigma)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>a5b0b433c1c4e0110efba84eff8ab1835</anchor>
      <arglist>(bool, PrecomputeDerivatives)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicComponentMacro</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>aaf53ca68ef17125e53c3e9b0fefe7ce8</anchor>
      <arglist>(GradientImageType, InputGradient)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicComponentMacro</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>af12c9864de507341d0c35f5b48ce22dc</anchor>
      <arglist>(HessianImageType, InputHessian)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicComponentMacro</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>ac6cb6cfa4c613e956dbb77042900a41b</anchor>
      <arglist>(WorldCoordsImage, ImageToWorld)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfChannels</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>ae01fb03f7db29e015373599d0e228212</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfVoxels</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>a90b6c1dc28a7bfa6ed9ff26258a33fe5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Offset</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>a7d7808450c9e673662844c050b8262ec</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>RegisteredImage &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>a39b4059e0f20fc3eed861e8de6e0fcf6</anchor>
      <arglist>(const RegisteredImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Recompute</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>a591b922314b2f4422df42662a16c6820</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;region)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Recompute</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>a64e1e59fc49ebc31b3afcf412d668194</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RegisteredImage</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>a5a93bddc7e1a7506396a81b8a040a589</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RegisteredImage</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>af1446f0f6d88923113cbcfc843d66fba</anchor>
      <arglist>(const RegisteredImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>aa15d395c3526c231e42e4d161dffa04a</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;region, bool intensity=true, bool gradient=false, bool hessian=false, bool force=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>a82c1e2a3d6313f573d8f19e357fb76c8</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;region, const DisplacementImageType *disp, bool intensity=true, bool gradient=false, bool hessian=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>a0398dcdd016f3d5ca8d1307586697ef6</anchor>
      <arglist>(bool intensity=true, bool gradient=false, bool hessian=false, bool force=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RegisteredImage</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>a5459cdaf1e53e2b64a905695d2c11609</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6e792ba0aabc434af936adade0ed5791</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BaseImage *</type>
      <name>Copy</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a274b0dd592d075a24b79fb1103ecae32</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9e0bf930fb5efa14fd69fecce8220e0b</anchor>
      <arglist>(const double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afa17d6e4d9fb69ab7e0b6d3a5da73d00</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae4af0759dcf4e4cd3013cbe165021366</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>CropPad</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ad9252baff8d79f81822098b77fdb007c</anchor>
      <arglist>(int margin=0)</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa10e4d965a0037827cbc692cee7282d1</anchor>
      <arglist>(int=0)</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afbd0a3b1f357f43e019823e1090b93f4</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a51f7ca5415621dc8b1be3ae94464992a</anchor>
      <arglist>(int=0) const</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>Data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a04129fbfd9bfbe78e9adb068703a001a</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ad1326c2e86894919bc9d02b44867c455</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ad149740f9839223d7096eb08f6291ec3</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipXZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a1b4066f860bfc18fc24561e3a08bf271</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipYT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aaf315650e241f9fdfcba160f4bac373a</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipYZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a1e4bf3b9d56ebe49bccb6dcf1cb49dda</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>FlipZT</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a2e32a37adb7ffc8ac3a57deae538698b</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a00c0ebcb1dcbd3c36954265d34d768dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ad6ca57574a54a3fd51e608b641d3fb48</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a76ffb2d003e871acd11af22364bd5f42</anchor>
      <arglist>(int, int, int=1, int=1, double *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae053507fa68cb6bd1e6b3c8723bd2d75</anchor>
      <arglist>(int, int, int, int, int, double *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a60b153ca95c7f13b54af31b3252d6a07</anchor>
      <arglist>(const ImageAttributes &amp;, double *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa37ceaa717fcbc3136bdab13d39b3b38</anchor>
      <arglist>(const ImageAttributes &amp;, int, double *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a911a78170253dec52f40ab2981dad112</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ad6b48148b9e002572fa64aaa9326e6a5</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afb0dc37758d03599aa773ba128e4a0f4</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a74b5edc480e16cba4aad4a8c9b3e7700</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a88de6cd3ed6212be1e49ac34e3f0eed9</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af1573070e7d06775159caf27395ba6d6</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0e7dc76c82f36bc10fe6bae68fcf4c8b</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8f288ce3534a3260654e4b97042a66b2</anchor>
      <arglist>(Vector &amp;, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af607713dfe9d429d936dd57d19e4c2d0</anchor>
      <arglist>(Vector &amp;, int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a803262c011d7f8997fa6daa3b7c33951</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>GetAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5f128aa0fab53377db01eab5a6203b7d</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>GetAverage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a87d7573f0fcecfe9fb0c95be2edd92ad</anchor>
      <arglist>(int=1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>abf9e71af9c077932c75f6d019e8e40bb</anchor>
      <arglist>(int=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a85563faa61c5ae710bf279709bfd5776</anchor>
      <arglist>(int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a44f27382851f5e12c7b27de8d7e91c06</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const void *</type>
      <name>GetDataPointer</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ac66d9d2ef4b46f726aa83c029ae5d726</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetDataType</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a2cfdb2025a1b820bdca42c900766762b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetDataTypeMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>adf2d6be075f40e73c7e38e8cd6cd3894</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetDataTypeMin</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4a0da7ecbc3afecaa2ff4bfbfa7e8bc6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>GetDataTypeSize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aabeb99350636041b00d2c74ca513539e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a31d04e9c69a72ddb3ccc72c46e2f6116</anchor>
      <arglist>(int, int=-1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ada9c1f867f851e8cf20e777a53289407</anchor>
      <arglist>(GenericImage &amp;, int, int=-1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetFrame</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a922d1b487eee194d509671c0975778b3</anchor>
      <arglist>(BaseImage *&amp;, int, int=-1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMaxPosition</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a77c1be916d9e0be47486f34cbec85cb8</anchor>
      <arglist>(Point &amp;, int=1, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae12800f47714efb75c0bdc1733cefb70</anchor>
      <arglist>(double &amp;, double &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a15263dab40602aec9d8023aaf84af48b</anchor>
      <arglist>(double &amp;, double &amp;, double) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a44b48fad850b52bf004cb8fb8097a16b</anchor>
      <arglist>(double *, double *) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5626ece18826ef8f4010932f597c3809</anchor>
      <arglist>(double *, double *, double) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetMinMaxPad</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a651e8b4818bd611d462ec054a2e5d3b0</anchor>
      <arglist>(double *, double *, double) const</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>GetPointerToVoxels</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a104db5b6f2ee2f4084a04872c8573e8b</anchor>
      <arglist>(int=0, int=0, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>GetPointerToVoxels</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ab0724f27ead65f0d9cdf0a404291d2d0</anchor>
      <arglist>(int=0, int=0, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a61ca2d3e3916c118f530da48c858eaab</anchor>
      <arglist>(int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a4af6e7a51ca7cd933f5b3197a47aea0e</anchor>
      <arglist>(GenericImage &amp;, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a879449b483a06edad3cb64ffbc18f019</anchor>
      <arglist>(BaseImage *&amp;, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a1267a620961f3b6bdd22ebab6bcd879a</anchor>
      <arglist>(int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6e7a7aed1369b2157b8c8686af1f02eb</anchor>
      <arglist>(GenericImage &amp;, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afb54adef8ee18bbe5ed59036bfd8ffd4</anchor>
      <arglist>(BaseImage *&amp;, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a3f0e5d51e5e95cf21af4705282708f44</anchor>
      <arglist>(int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a7566bdb15030b20c2f9716134bc09a92</anchor>
      <arglist>(GenericImage &amp;, int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetRegion</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ab87c3076d3989fcaafca9887b0fd91a1</anchor>
      <arglist>(BaseImage *&amp;, int, int, int, int, int, int, int, int) const</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>GetSD</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>afe7cde6be587aace5441e122813fa5c6</anchor>
      <arglist>(int=1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GravityCenter</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ab5cd3e2562c532c04c7dfd8e8392e56e</anchor>
      <arglist>(Point &amp;, int=1, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a29f8246cfc3ca2d142d45a912e80eec7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6d71fae8b82b452cccf5f73aa3cf43df</anchor>
      <arglist>(const ImageAttributes &amp;, int, double *data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ab3c46a3d5c964239937f1b5f196b7cfc</anchor>
      <arglist>(const ImageAttributes &amp;, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9226ad6eb70185f55ba3ec7fd3c684be</anchor>
      <arglist>(const ImageAttributes &amp;, double *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a72b8acd576763f9074d835ef3fd00cbc</anchor>
      <arglist>(int, int, int, int, int, double *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a94d68fbfbacfdd2259251da15f21e7c8</anchor>
      <arglist>(int, int, int=1, int=1, double *data=NULL)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>N</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a445e2db97c1ae66f68e1f48569330b68</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a3428e228cdb894c0dd7324790dd2fed2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BinaryImage</type>
      <name>operator!=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae422faafb5cc503c46dbe41b0093c29b</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa7cb99b55c3a646c2ebdcf7917cde637</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a122db8601ed785cb68adb08f320614a2</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a827c9b59c984acac4e022dc0106a934a</anchor>
      <arglist>(int, int, int=0, int=0)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a479f251be3669f28a7333907d3748da4</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a71bb6d4ef78403253e440a4ce6c705fc</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a51f7b830215b4f252eb34f584889e8bd</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af658a43114c97e6cf8552f56dedad641</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a1b4e3f69c7ddc6f9c9cbd59065f19e40</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator+</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aca4421c7c2375ae1e3c245da76dfd8db</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator+</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a2e8e71cb6c2fe72c3be209b987b7678c</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a1b8435bb3e3b5ce3aa0a83c6362c11ed</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a14176eec6168fc7059a18f4d172da0d3</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator-</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ae1a02597a15208b78e0af6f0f2e38870</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator-</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9ae585108889b1690b7aa3b980b676a8</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a799ed6963ffbb16de13bb2f757f17ff4</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ab4f127dd60e91fab02e646ddaae175d9</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator/</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acaff6d1ecf0c9e9335f0ed54f80c2689</anchor>
      <arglist>(const GenericImage &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator/</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acb8efc62e28bfd30668e1dd047f30fa4</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a60ee792b41491abe18443f6aa40c29ba</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa8c8aa9880c80db8fc6f1d20393eda2d</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator&lt;</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ab0455ca592ff61bc22c1b6c5d2ce3c48</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator&lt;=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5e5b9564082bcdbccad02c6050d4cf1f</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a93da69d85925c07f70c94a227c8f3456</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; double &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a64fef6b77d016c234d7cc889a07d04e6</anchor>
      <arglist>(const BaseImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; double &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>affd2de5bc09206775827494da46cac9c</anchor>
      <arglist>(const GenericImage &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GenericImage&lt; double &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a3abe9f2c0d22d3d52e5baa9321bf9549</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ab61c006928ab86d3bcb67a362a0693bb</anchor>
      <arglist>(const GenericImage&lt; TVoxel2 &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage</type>
      <name>operator&gt;</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acbef9322452f03ad957f632323d30237</anchor>
      <arglist>(double) const</arglist>
    </member>
    <member kind="function">
      <type>GenericImage &amp;</type>
      <name>operator&gt;=</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8b285f2ce505e8e70308cb8a1eeed088</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acca310957bfc1080c170ee74ded4d2f4</anchor>
      <arglist>(int, double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>acd494c7039d4e01ebb50f28174ace41b</anchor>
      <arglist>(int, int, double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a6d7409f3810cf37d28f1a6d54da389ad</anchor>
      <arglist>(int, int, int, double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a83bebf9102ff90bbe9909d3eea4f0203</anchor>
      <arglist>(int, int, int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a954e524a435eb076d754c25ec35ff70c</anchor>
      <arglist>(int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a39d1b7a776221fe6194c09cccb0cf046</anchor>
      <arglist>(int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a95a1963f21b8cf5ce3ef8d522a2c9d97</anchor>
      <arglist>(int, int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a1ae9c02fea5c78cb0b08c70c09007b3a</anchor>
      <arglist>(int, int, int, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aca43b3b19e9cae2713e75f77b79bc057</anchor>
      <arglist>(int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9850de321e58f0f5e7fad19a525d4a19</anchor>
      <arglist>(int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0a6b96f01802ce4979080a760349ad43</anchor>
      <arglist>(int, int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutAsVector</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a8e3e7e98e2125e6d67c863d0e0b885a8</anchor>
      <arglist>(int, int, int, int, const Vector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutBackgroundValueAsDouble</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aeb37b40f030833e6327b802fba4c92b8</anchor>
      <arglist>(double, bool)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutMinMax</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a51f10a3e6e7174681d1a9add3a41fbaf</anchor>
      <arglist>(double, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a37121c72a2d5de789c508ba745ac91de</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectX</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a9eac61cdd0d85facd067d53bed782fe2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectY</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a08490c13ad5e08c297e62097bcd59fa6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ReflectZ</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a0cbfd8cbd35c86cc48a2d454bb46d797</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>VoxelToIndex</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a69ac06b74d6f1980656a87ec57153fa8</anchor>
      <arglist>(int, int, int=0, int=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a2a1604267a70e8e28e1f53bc94659065</anchor>
      <arglist>(const char *) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GenericImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a5cddf673a05dac2cf1d481054b8b9e21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ComputeInputGradient</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>a43d21503daefbcaab892a43a43fdb8ba</anchor>
      <arglist>(double sigma)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ComputeInputHessian</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>a7c446dbac893cd238c8e560428bd0cae</anchor>
      <arglist>(double sigma)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>AllocateImage</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>ad9661642e2461734f3439ef58cb0a748</anchor>
      <arglist>(double *=NULL)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_NumberOfActiveLevels</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>a95db76b8a0540ae54359aa0d4e7d1e8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_NumberOfPassiveLevels</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>ad8be2db3847d2e7f91d044f453a09050</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_Offset</name>
      <anchorfile>classmirtk_1_1RegisteredImage.html</anchorfile>
      <anchor>ae0989ea6922fb1e1c5e119ade2cdba63</anchor>
      <arglist>[13]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>_data</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>af2309882e10f1427d5facaac6597d204</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_dataOwner</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>aa2284d63fc7615ac07a0b9265f484897</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double ****</type>
      <name>_matrix</name>
      <anchorfile>classmirtk_1_1GenericImage.html</anchorfile>
      <anchor>a79b3bd6a8fd9957ed24eb0bb8458345c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::RegisteredPointSet</name>
    <filename>classmirtk_1_1RegisteredPointSet.html</filename>
    <base>mirtk::Object</base>
    <class kind="struct">mirtk::RegisteredPointSet::ScalingFunction</class>
    <member kind="typedef">
      <type>mirtk::EdgeTable</type>
      <name>EdgeTable</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a6146fe3b457808b7ce82bd9f075ee9a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EdgeConnectivity</type>
      <name>NodeNeighbors</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>ad8a3f4a4d4152bf1abe027e6a7cb3163</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Array&lt; ScalingFunction &gt;</type>
      <name>ScalingFunctions</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>aec21313110030f4b11d996b874317301</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BuildEdgeTables</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a89d261713ae52055ed5983438287480a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BuildLocators</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a2c377c00ad8c921cb637d163e1eff2de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BuildNeighborhoodTables</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>ada2d4af0f6edb69a9cf663690c6d83af</anchor>
      <arglist>(int n=-1)</arglist>
    </member>
    <member kind="function">
      <type>vtkAbstractCellLocator *</type>
      <name>CellLocator</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a29bb8bb2366ba4950a0ce6fac0ca5f43</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>DefaultExtension</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a1723f747d63465b80ad9f749aa5862e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const EdgeTable *</type>
      <name>Edges</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a7b69ef939e7ca95211deb9e666f51be9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetInputPoint</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>ae83a96cfc5306179704a63b4cd1fb7a1</anchor>
      <arglist>(int, double &amp;, double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetInputPoint</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a291920c7c764d81abe3be8cbb50c1d58</anchor>
      <arglist>(int, double *) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetInputPoint</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a8c4eae618a945a6f23314a366ef35e1c</anchor>
      <arglist>(int, Point &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetInputPoints</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a10ce683f847176852c944af9020d0061</anchor>
      <arglist>(class PointSet &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetInputSurfacePoint</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a9cabfcde034d25ff02573a55e8124753</anchor>
      <arglist>(int, double &amp;, double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetInputSurfacePoint</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>af1f8b1d68a1a636b431ee3e58e488341</anchor>
      <arglist>(int, double *) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetInputSurfacePoint</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a2f0dafa949c88987e697fca807b912a8</anchor>
      <arglist>(int, Point &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetInputSurfacePoints</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a96cef10f3d0e34b874abca1732f2f18a</anchor>
      <arglist>(class PointSet &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetPoint</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>ad0cbc2446ec812173c004c032e5c9826</anchor>
      <arglist>(int, double &amp;, double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetPoint</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a4bd6f4c48496b4b2267cacc2b685cc54</anchor>
      <arglist>(int, double *) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetPoint</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a760868f58609dc4569c46024904828ab</anchor>
      <arglist>(int, Point &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetPoints</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a08f7f7bc3a280df07e0de841f0862d21</anchor>
      <arglist>(class PointSet &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetSurfacePoint</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>abacba6fd1023b8e5513a577caec6ac5e</anchor>
      <arglist>(int, double &amp;, double &amp;, double &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetSurfacePoint</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>aedcfcbd4b360745f52ed1e5683cc87a1</anchor>
      <arglist>(int, double *) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetSurfacePoint</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>acd193897cb19b315ba044799016905af</anchor>
      <arglist>(int, Point &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetSurfacePoints</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a0529dc0c9be9fe9c24d45855c3ee3c77</anchor>
      <arglist>(class PointSet &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a4d0af240f9c0c27ccb3c9088b51bd10a</anchor>
      <arglist>(bool deep_copy_points=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InputPointsChanged</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a8c8b02499555b8332ef302fa6e4ca052</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>InputSurfaceArea</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>aca8cac9764f4c0ddfaa6db58dec946b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const class PointSet &amp;</type>
      <name>InputSurfacePoints</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a240d880d5d07ab7163a05a1cbda92164</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSurface</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a1bb28507fa1eb3722e305db848521861</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const NodeNeighbors *</type>
      <name>Neighbors</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>abc85d6e8c492497c57ecddfdfd0a1de3</anchor>
      <arglist>(int=-1) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfCells</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a995c02d3e02b3c1aebaf5ff19a6c7d9f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfEdges</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a220800ddaf55337a402cc90b91dab754</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfPoints</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a6c473342c9b2b00b6ddb07516778d9cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfSurfaceCells</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a1d08cb9d4735ca021f22c239c643c212</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfSurfaceEdges</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a192d2f66033a5a05c8b115cc424cb0c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfSurfacePoints</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>ad1666f1b68c53c920c7e203d000e898e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator vtkDataSet *</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a649b1169cd65a06ad2339c698b84688e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator vtkPointSet *</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>aff97ba91e8c1875e27899041615960e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RegisteredPointSet &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>aac7919cf7417bd735abe3106efcbc487</anchor>
      <arglist>(const RegisteredPointSet &amp;)</arglist>
    </member>
    <member kind="function">
      <type>vtkIdTypeArray *</type>
      <name>OriginalSurfaceCellIds</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a429dc84a2e2d0753857baebfaf1df19e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>vtkIdTypeArray *</type>
      <name>OriginalSurfacePointIds</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a5ba35df85dd148fdfd3e383588e1f176</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>vtkAbstractPointLocator *</type>
      <name>PointLocator</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a6a0009c7d082b21a5c1199c8a2f42380</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>vtkPoints *</type>
      <name>Points</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a219fc52820797365e467322877d09e0b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PointsChanged</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>ab0cbdd400b5600ed8758a7d040dc7f50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>vtkPointSet *</type>
      <name>PointSet</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a4ba70263be3660f1558e27b740f6fa79</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RegisteredPointSet</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>ad47ff3618b9bcd438ee192a6f324c2f9</anchor>
      <arglist>(vtkPointSet *=NULL, const class Transformation *=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RegisteredPointSet</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>aafba1a59bcdd703ca74373c790024bbb</anchor>
      <arglist>(const RegisteredPointSet &amp;)</arglist>
    </member>
    <member kind="function">
      <type>vtkDataArray *</type>
      <name>Status</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a3e5dd4692785a4875a0374e2425a72e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>vtkPolyData *</type>
      <name>Surface</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a4ec28dca8df3bc154b762238cd169141</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SurfaceArea</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>ac987f3075ab02b20de40e64a63bbb511</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>vtkAbstractCellLocator *</type>
      <name>SurfaceCellLocator</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>aa07599e577794cdc69d0d338c8198d18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const EdgeTable *</type>
      <name>SurfaceEdges</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a0172710042a786e4f31d953d0710985f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>vtkDataArray *</type>
      <name>SurfaceFaceNormals</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a7adf5100e1f992ce564db87f317d06b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const NodeNeighbors *</type>
      <name>SurfaceNeighbors</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a9c82d9a8031756dadd599fe251fe35d9</anchor>
      <arglist>(int=-1) const </arglist>
    </member>
    <member kind="function">
      <type>vtkDataArray *</type>
      <name>SurfaceNormals</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a872563d82e3ef4176f3cf456aea52517</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>vtkAbstractPointLocator *</type>
      <name>SurfacePointLocator</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a6f2fd69e975f4a0d5a0f87e6635ec5d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>vtkPoints *</type>
      <name>SurfacePoints</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a0ec1b60de6f3c2c1dd5eb4f58ba45cd6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>vtkDataArray *</type>
      <name>SurfaceStatus</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a2be1bbc2652833b4ce934b70d3953028</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a126444ac6571083e191e7922ddfbf96a</anchor>
      <arglist>(bool force=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a978fbad0d3a6bb14ad32de22886aec4c</anchor>
      <arglist>(const char *, vtkAbstractArray *=NULL, vtkAbstractArray *=NULL) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a98c0d3b993b63eb574032ad9025113b1</anchor>
      <arglist>(const char *, vtkAbstractArray **, int, vtkAbstractArray **=NULL, int=0) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RegisteredPointSet</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a4c126a55f84fa828eb818cebb2660c5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CopyAttributes</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>afddd7b4a01fa46099ecf2e0cf61b1aba</anchor>
      <arglist>(const RegisteredPointSet &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkComponentMacro</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>acf9ed3dab6c36b2878a26edd8c55462e</anchor>
      <arglist>(GenericImage&lt; double &gt;, Displacement)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAggregateMacro</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>ad6597ddf104eece0da189fc34ca9fa5d</anchor>
      <arglist>(const class Transformation, Transformation)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAggregateMacro</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a11c33dc7917ded92e8092a5bbd2b243b</anchor>
      <arglist>(GenericImage&lt; double &gt;, ExternalDisplacement)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a24aa8af178679c5198c0246596160e2e</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPointSet &gt;, InputPointSet)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a4722c57a025a284a3933438c8b2b383b</anchor>
      <arglist>(double, InputTime)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>aad52e293e8e077e241a8ed65c151b4c0</anchor>
      <arglist>(double, Time)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a8bf5675bd88a6c1d29ae0028ba09c300</anchor>
      <arglist>(ScalingFunctions, PointDataToCopy)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a9dac4a6b4e063eb8338b22c9b0db9bdf</anchor>
      <arglist>(bool, CopyAll)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>afdec3ac3ddc2d0b7836ddb62e202fa03</anchor>
      <arglist>(int, NeighborhoodRadius)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a92b8e69f98317441aab72fa119bc7d52</anchor>
      <arglist>(bool, SelfUpdate)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a05da7ea6ec47c7e544a94cf36d41da23</anchor>
      <arglist>(bool, UpdateSurfaceNormals)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>ac7493af4340bc4e48e63213b769f4868</anchor>
      <arglist>(bool, UpdateSurfaceFaceNormals)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a68ee4a525b606b7459447d18b2bd01cb</anchor>
      <arglist>(ImageAttributes, Domain)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a0f98366d9f17890095b2dca885b53bca</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPolyData &gt;, InputSurface)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>aee46c7d0c2222a391003b28680130433</anchor>
      <arglist>(bool, IsSurfaceMesh)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>afa7a9bb82b2c4441f50a14e4f1055d47</anchor>
      <arglist>(class PointSet, InputPoints)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a9f0b5c22321da0c68f5529937c32cd25</anchor>
      <arglist>(double, AverageInputEdgeLength)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>ad616ee2a79ba789aee0de68d9bfbb229</anchor>
      <arglist>(double, AverageInputSurfaceEdgeLength)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a579f91c4a01e269e6836e21e367e1724</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPointSet &gt;, OutputPointSet)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>aa2f3529d279962c03ecd3356daf7aeef</anchor>
      <arglist>(vtkSmartPointer&lt; vtkPolyData &gt;, OutputSurface)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a4eb8d5048aa01ee124ae76a9e58713e6</anchor>
      <arglist>(double, InputDiameter)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkReadOnlyAttributeMacro</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a6c2a1fe5bb85324602b7be80a0462480</anchor>
      <arglist>(double, Diameter)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vtkSmartPointer&lt; vtkAbstractCellLocator &gt;</type>
      <name>_CellLocator</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a763b34c9673c6c7ca8414e780b1708b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeTable</type>
      <name>_EdgeTable</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>ae10bc735e54cbb70d14eae021a547bf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_InputSurfaceArea</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a9d77aba4d0aab1064925504563c2e67b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>class PointSet *</type>
      <name>_InputSurfacePoints</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a6cf57ec5cacc1841abd281aff47267b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeNeighbors</type>
      <name>_NodeNeighbors</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a7cd6d82ed70f90f87c1a02c694cab889</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vtkSmartPointer&lt; vtkAbstractPointLocator &gt;</type>
      <name>_PointLocator</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a3e151ddff3a04d10239d04caa1343d80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_SurfaceArea</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a223ae12bd7a3e67a079d1c2dfe8515ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vtkSmartPointer&lt; vtkAbstractCellLocator &gt;</type>
      <name>_SurfaceCellLocator</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>ab9097debd4bbbb4e7257c6669908b2d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeTable</type>
      <name>_SurfaceEdgeTable</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>ade6222b00706f8dee6fed65e985fcccb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeNeighbors</type>
      <name>_SurfaceNodeNeighbors</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a41b83cec6228a19d93507ca13eb16766</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vtkSmartPointer&lt; vtkAbstractPointLocator &gt;</type>
      <name>_SurfacePointLocator</name>
      <anchorfile>classmirtk_1_1RegisteredPointSet.html</anchorfile>
      <anchor>a66247f6796b46bc0ebc06ebd8d221952</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::RegisteredPointSet::ScalingFunction</name>
    <filename>structmirtk_1_1RegisteredPointSet_1_1ScalingFunction.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>_InputIndex</name>
      <anchorfile>structmirtk_1_1RegisteredPointSet_1_1ScalingFunction.html</anchorfile>
      <anchor>a6a6d157ef2be667ecfcbaad6d34cb093</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_Intercept</name>
      <anchorfile>structmirtk_1_1RegisteredPointSet_1_1ScalingFunction.html</anchorfile>
      <anchor>a97a34ef6d314fe0667a6706aa52f22b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_OutputIndex</name>
      <anchorfile>structmirtk_1_1RegisteredPointSet_1_1ScalingFunction.html</anchorfile>
      <anchor>a1bc7d69df96d4e2f542d662ba4f49e93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_Slope</name>
      <anchorfile>structmirtk_1_1RegisteredPointSet_1_1ScalingFunction.html</anchorfile>
      <anchor>a4a2df87cee70ec1ed06e8f50a2c8cf3f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::RegisteredSurface</name>
    <filename>classmirtk_1_1RegisteredSurface.html</filename>
    <base>mirtk::RegisteredPointSet</base>
    <member kind="function">
      <type>void</type>
      <name>GetCellPoints</name>
      <anchorfile>classmirtk_1_1RegisteredSurface.html</anchorfile>
      <anchor>a69776262d91fbac9adf25895fa07efd1</anchor>
      <arglist>(int, vtkIdType &amp;, const vtkIdType *&amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1RegisteredSurface.html</anchorfile>
      <anchor>a13dd979b0d34667c21973ff06283c45b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InputSurface</name>
      <anchorfile>classmirtk_1_1RegisteredSurface.html</anchorfile>
      <anchor>ac2478be7ec3e680fd741ed022aa47a9d</anchor>
      <arglist>(vtkPolyData *)</arglist>
    </member>
    <member kind="function">
      <type>vtkCellArray *</type>
      <name>Lines</name>
      <anchorfile>classmirtk_1_1RegisteredSurface.html</anchorfile>
      <anchor>a7c4796f90faf5a9f80128a4d109ed377</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfLines</name>
      <anchorfile>classmirtk_1_1RegisteredSurface.html</anchorfile>
      <anchor>aac5e0b1b086d39b26cc8072712cdb10f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfPolys</name>
      <anchorfile>classmirtk_1_1RegisteredSurface.html</anchorfile>
      <anchor>aadbe37b8680821cc7a8612ca6c1cc636</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfStrips</name>
      <anchorfile>classmirtk_1_1RegisteredSurface.html</anchorfile>
      <anchor>a8938b40497fb4fba8feda0aa46fd75f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfVerts</name>
      <anchorfile>classmirtk_1_1RegisteredSurface.html</anchorfile>
      <anchor>a1921664229daf7c22e944f85fd5369f9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RegisteredSurface &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1RegisteredSurface.html</anchorfile>
      <anchor>aa92a9e250a90492211841e02978b808a</anchor>
      <arglist>(const RegisteredSurface &amp;)</arglist>
    </member>
    <member kind="function">
      <type>vtkPolyData *</type>
      <name>PolyData</name>
      <anchorfile>classmirtk_1_1RegisteredSurface.html</anchorfile>
      <anchor>ad540c4288ab4c839df7bcdee409aa756</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>vtkCellArray *</type>
      <name>Polys</name>
      <anchorfile>classmirtk_1_1RegisteredSurface.html</anchorfile>
      <anchor>ae9466a06a16eaf675dd4710991e69293</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RegisteredSurface</name>
      <anchorfile>classmirtk_1_1RegisteredSurface.html</anchorfile>
      <anchor>a24a1c02e738798c8e8e97afdf0431647</anchor>
      <arglist>(vtkPolyData *=NULL, const class Transformation *=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RegisteredSurface</name>
      <anchorfile>classmirtk_1_1RegisteredSurface.html</anchorfile>
      <anchor>a5a6f8e5b1e675472520ca25ab045cefd</anchor>
      <arglist>(const RegisteredSurface &amp;)</arglist>
    </member>
    <member kind="function">
      <type>vtkCellArray *</type>
      <name>Strips</name>
      <anchorfile>classmirtk_1_1RegisteredSurface.html</anchorfile>
      <anchor>ace0c035159379fc520411fa7d97c23a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>vtkCellArray *</type>
      <name>Verts</name>
      <anchorfile>classmirtk_1_1RegisteredSurface.html</anchorfile>
      <anchor>ade464a91837c559b543d69c0f72b910b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RegisteredSurface</name>
      <anchorfile>classmirtk_1_1RegisteredSurface.html</anchorfile>
      <anchor>ab2a6556ed0a5054e54cead8bf0d50025</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::RegistrationEnergy</name>
    <filename>classmirtk_1_1RegistrationEnergy.html</filename>
    <base>mirtk::ObjectiveFunction</base>
    <member kind="typedef">
      <type>FastDelegate1&lt; bool &gt;</type>
      <name>PreUpdateFunctionType</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>ae6eb68d776a6588036cafad85837478e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Add</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>a71d2e666e3b4d6ad60e0ae02969cc9d3</anchor>
      <arglist>(EnergyTerm *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>a8329d6c83cf141b73051b82d23df30de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Empty</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>ac160898c75da51446a7221266be97f65</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>afe0f36a880e35fd5723a2769597ff9a9</anchor>
      <arglist>(double *dx=NULL, double step=.0, bool *sgn_chg=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>a4f0aabcfaf649595b7c84b308839a707</anchor>
      <arglist>(double *x) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>a816b922186d6c0cea6f7e3b7a962f627</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Gradient</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>abc4700e384d4d5196460d498bcf97861</anchor>
      <arglist>(double *dx, double step=.0, bool *sgn_chg=NULL)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>GradientNorm</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>a59a7a6a93377e707d75e66a3bca82207</anchor>
      <arglist>(const double *) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GradientStep</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>ac6bb66e7ec49929cdc2c97db0861f06d</anchor>
      <arglist>(const double *dx, double &amp;min, double &amp;max) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>a298b48a67772e34ce0224a9a02ef64b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>InitialValue</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>af0c3840473d343074db0ccf2d74247ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>InitialValue</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>a4cb77ba912c3f5c0f9ba20add7c6aa21</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NormalizeGradient</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>a2a1fdd723a2ab954a99d75db80f46965</anchor>
      <arglist>(double *dx)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfActiveTerms</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>a6bacc7bddd04df993b1ff8ea4e002c25</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumberOfDOFs</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>a2b8e30ae295114ff95641c76fd93bdc0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfTerms</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>a817d8570f1831f6e9b4ec7b9977ae335</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>a2b7e26d6a005bb06689828ae879dc346</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>ad11f1850b6c3be4a960c2b0a2be8cbfb</anchor>
      <arglist>(const double *x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RawValue</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>ab6ba65f95ac32cc74eb50aa0f3b21b60</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RegistrationEnergy</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>a3d02262c93fa7e1f5b5edd560f8a10ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>ac8a0de26054702f1099fc67bbb49d2b9</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Step</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>a0b422cb0f285df394b31ebcb692712f6</anchor>
      <arglist>(double *dx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Sub</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>ad6e0b6bb35ed5ae712cc13e584a8382f</anchor>
      <arglist>(EnergyTerm *)</arglist>
    </member>
    <member kind="function">
      <type>EnergyTerm *</type>
      <name>Term</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>a09bdd6c30e328394999748bc216a1a4b</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>afcf02966c91c9846cb7b1c7286da852d</anchor>
      <arglist>(bool=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Upgrade</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>a0ab528eb9fa8f440a5bc26cb31cec842</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Value</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>ab29c5fd49e7d22fddfc1d59688c55e0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Value</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>a0d58be4d877a32bf7ca88c637892b51a</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteDataSets</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>ab1e031e57eaa5ecd7b5b1d2e34569414</anchor>
      <arglist>(const char *, const char *, bool=true) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteGradient</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>a78bfe9279c7d2f7c9474b5976b76e02d</anchor>
      <arglist>(const char *, const char *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RegistrationEnergy</name>
      <anchorfile>classmirtk_1_1RegistrationEnergy.html</anchorfile>
      <anchor>ac8f323300a3e8b49b8a4dcfef806d52d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::RegistrationEnergyParser</name>
    <filename>classmirtk_1_1RegistrationEnergyParser.html</filename>
    <member kind="function">
      <type>void</type>
      <name>ParseEnergyFormula</name>
      <anchorfile>classmirtk_1_1RegistrationEnergyParser.html</anchorfile>
      <anchor>a07701409ef672216abaf1288bae22fe4</anchor>
      <arglist>(const string &amp;energy_formula, int nimages=-1, int npsets=-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RegistrationEnergyParser</name>
      <anchorfile>classmirtk_1_1RegistrationEnergyParser.html</anchorfile>
      <anchor>a80450874d412ec05deebbe8d69dcad05</anchor>
      <arglist>(GenericRegistrationFilter *filter)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static string</type>
      <name>Substitute</name>
      <anchorfile>classmirtk_1_1RegistrationEnergyParser.html</anchorfile>
      <anchor>a70927545245b88ea17c4785841819328</anchor>
      <arglist>(const string &amp;s, const char *var, T value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ParseEnergyTerm</name>
      <anchorfile>classmirtk_1_1RegistrationEnergyParser.html</anchorfile>
      <anchor>a4681cbd4583bf40160373ec1b5e4e070</anchor>
      <arglist>(istream &amp;in, Token &amp;token, int nimages, int npsets)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>string</type>
      <name>TermName</name>
      <anchorfile>classmirtk_1_1RegistrationEnergyParser.html</anchorfile>
      <anchor>ae7b6054702471788bc3c4b1144714c3a</anchor>
      <arglist>(const string &amp;str, const ImageSimilarityInfo &amp;info, int i=-1) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>string</type>
      <name>TermName</name>
      <anchorfile>classmirtk_1_1RegistrationEnergyParser.html</anchorfile>
      <anchor>a6e5c2d5c1159acace300002b7c946136</anchor>
      <arglist>(const string &amp;str, const PointSetDistanceInfo &amp;info, int i=-1) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>string</type>
      <name>TermName</name>
      <anchorfile>classmirtk_1_1RegistrationEnergyParser.html</anchorfile>
      <anchor>adfa87bd1afc66280c372d310d814f506</anchor>
      <arglist>(const string &amp;str, const PointSetConstraintInfo &amp;info, int i=-1) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::RegistrationFilter</name>
    <filename>classmirtk_1_1RegistrationFilter.html</filename>
    <base>mirtk::Observable</base>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1RegistrationFilter.html</anchorfile>
      <anchor>a0a0c09c309bddf17abdb6c837448fdb9</anchor>
      <arglist>(istream &amp;, bool=false)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1RegistrationFilter.html</anchorfile>
      <anchor>a8524a8326a3becf61c8ce5ed7fb2a1d5</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1RegistrationFilter.html</anchorfile>
      <anchor>a9d1671c484b949d2a7246c99a9a04b35</anchor>
      <arglist>(const char *) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::RepeatExtrapolateImageFunction</name>
    <filename>classmirtk_1_1RepeatExtrapolateImageFunction.html</filename>
    <base>GenericRepeatExtrapolateImageFunction&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>RepeatExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1RepeatExtrapolateImageFunction.html</anchorfile>
      <anchor>abec51648e12444f4bb782ba46b46ca7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RepeatExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1RepeatExtrapolateImageFunction.html</anchorfile>
      <anchor>a0d8557b0d065ae98f8f464b608db7b98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericRepeatExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericRepeatExtrapolateImageFunction.html</anchorfile>
      <anchor>a0730ec007ba4e824c0cfd826fd5ed714</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>TransformIndex</name>
      <anchorfile>classmirtk_1_1GenericRepeatExtrapolateImageFunction.html</anchorfile>
      <anchor>af2188c70bceb2172b8328ca62f1666c4</anchor>
      <arglist>(int &amp;index, int max) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericRepeatExtrapolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericRepeatExtrapolateImageFunction.html</anchorfile>
      <anchor>acddc01b690d3840df5e32002af08766b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Apply</name>
      <anchorfile>classmirtk_1_1GenericRepeatExtrapolateImageFunction.html</anchorfile>
      <anchor>af3aed13f0f9b58871824b967b7a2b4e9</anchor>
      <arglist>(int &amp;index, int max)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Apply</name>
      <anchorfile>classmirtk_1_1GenericRepeatExtrapolateImageFunction.html</anchorfile>
      <anchor>ae2d280ef564ede3e0ff408cbe001eba9</anchor>
      <arglist>(double &amp;cindex, int max)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::RepulsiveForce</name>
    <filename>classmirtk_1_1RepulsiveForce.html</filename>
    <base>mirtk::InternalForce</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1RepulsiveForce.html</anchorfile>
      <anchor>a20c2ef247b3cac1fa3601fb17a3ae943</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RepulsiveForce &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1RepulsiveForce.html</anchorfile>
      <anchor>af2a67d9af586b9d70c8a3d6e89ef4b30</anchor>
      <arglist>(const RepulsiveForce &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1RepulsiveForce.html</anchorfile>
      <anchor>ae598875b2bd51a0782caafbc3ac2714b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Reinitialize</name>
      <anchorfile>classmirtk_1_1RepulsiveForce.html</anchorfile>
      <anchor>a0b2fb108779cc3a419693a4ed1d6df78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RepulsiveForce</name>
      <anchorfile>classmirtk_1_1RepulsiveForce.html</anchorfile>
      <anchor>a698db272f56a395c344c04f9ff267301</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RepulsiveForce</name>
      <anchorfile>classmirtk_1_1RepulsiveForce.html</anchorfile>
      <anchor>a31f6b9a2d9537db24d8d8e608bc7e4a5</anchor>
      <arglist>(const RepulsiveForce &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1RepulsiveForce.html</anchorfile>
      <anchor>a0599d5cf8f5ce8538572b64ca94804dc</anchor>
      <arglist>(bool=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RepulsiveForce</name>
      <anchorfile>classmirtk_1_1RepulsiveForce.html</anchorfile>
      <anchor>a18565b06d51c867e528937eb74998162</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1RepulsiveForce.html</anchorfile>
      <anchor>acbffa4740ec73f3eb9e455407abce7cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateGradient</name>
      <anchorfile>classmirtk_1_1RepulsiveForce.html</anchorfile>
      <anchor>a70b81bcffb2f4673b8878b8ef969b51d</anchor>
      <arglist>(double *, double, double)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetWithoutPrefix</name>
      <anchorfile>classmirtk_1_1RepulsiveForce.html</anchorfile>
      <anchor>ac50b36f7201d730a542631383d76c082</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::Resampling</name>
    <filename>classmirtk_1_1Resampling.html</filename>
    <templarg></templarg>
    <base>mirtk::ImageToImage</base>
    <member kind="function">
      <type></type>
      <name>Resampling</name>
      <anchorfile>classmirtk_1_1Resampling.html</anchorfile>
      <anchor>abecef9772a36fc7d2e69ca9ed1c66212</anchor>
      <arglist>(double, double, double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Resampling</name>
      <anchorfile>classmirtk_1_1Resampling.html</anchorfile>
      <anchor>a0787ed6237826e7aa4036ca89cdcffad</anchor>
      <arglist>(int, int, int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Resampling</name>
      <anchorfile>classmirtk_1_1Resampling.html</anchorfile>
      <anchor>a1083de1867ce3ebf2b5369d967a83010</anchor>
      <arglist>(int, int, int, double, double, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1Resampling.html</anchorfile>
      <anchor>ae258a94795419c187d1c22163a9ebb9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1Resampling.html</anchorfile>
      <anchor>a7eecc28a1421480a9116ce0b52c79dbc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>InitializeOutput</name>
      <anchorfile>classmirtk_1_1Resampling.html</anchorfile>
      <anchor>a6f00244045e307d2c4e514699bec3a40</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ResamplingWithPadding</name>
    <filename>classmirtk_1_1ResamplingWithPadding.html</filename>
    <templarg></templarg>
    <base>mirtk::Resampling</base>
    <member kind="function">
      <type></type>
      <name>ResamplingWithPadding</name>
      <anchorfile>classmirtk_1_1ResamplingWithPadding.html</anchorfile>
      <anchor>a1f19fd6ffbdf151292fba8349dd8e28a</anchor>
      <arglist>(double, double, double, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ResamplingWithPadding</name>
      <anchorfile>classmirtk_1_1ResamplingWithPadding.html</anchorfile>
      <anchor>a8cdfbf3bfc612e571d0fcb125809f3d7</anchor>
      <arglist>(int, int, int, VoxelType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ResamplingWithPadding</name>
      <anchorfile>classmirtk_1_1ResamplingWithPadding.html</anchorfile>
      <anchor>a8d880834bbd473fed6128e8303006658</anchor>
      <arglist>(int, int, int, double, double, double, VoxelType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1ResamplingWithPadding.html</anchorfile>
      <anchor>a1b0a81ff7093e6f6da2e54b39084a582</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1ResamplingWithPadding.html</anchorfile>
      <anchor>a27a0ee0a4d81d243bd3f3df7865f7ed7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1ResamplingWithPadding.html</anchorfile>
      <anchor>afb3fe7c3c75ecfbb62cc34c29ecc0214</anchor>
      <arglist>(VoxelType, PaddingValue)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::RigidTransformation</name>
    <filename>classmirtk_1_1RigidTransformation.html</filename>
    <base>mirtk::HomogeneousTransformation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateDOFs</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>a331c03f8b2add3b5343eded749491360</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, const double *, int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DeriveJacobianWrtDOF</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>afec8069a05a4fdb3d22236bdd2d239a3</anchor>
      <arglist>(Matrix &amp;, int, double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDOFs</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>aee9e1c0e17b9d4073ff0c6d7592e2b3d</anchor>
      <arglist>(double[3], int, double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>a280c28e2ca00378a0bc1f779f83a4e89</anchor>
      <arglist>(Indent=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>UpdateDOFs</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>a5da6f062c162183a16e766abd93b7839</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>UpdateMatrix</name>
      <anchorfile>classmirtk_1_1RigidTransformation.html</anchorfile>
      <anchor>a79f397c05a95713e627e7e2bbc8f0b9a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::RobustClosestPoint</name>
    <filename>classmirtk_1_1RobustClosestPoint.html</filename>
    <base>mirtk::FuzzyCorrespondence</base>
    <member kind="function" virtualness="virtual">
      <type>virtual PointCorrespondence *</type>
      <name>NewInstance</name>
      <anchorfile>classmirtk_1_1RobustClosestPoint.html</anchorfile>
      <anchor>ad7d70db43ed6fdc403589c2866db413c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1RobustClosestPoint.html</anchorfile>
      <anchor>a546631d5e75954bc7b6217603a7c8078</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RobustClosestPoint</name>
      <anchorfile>classmirtk_1_1RobustClosestPoint.html</anchorfile>
      <anchor>ab02ca820b3d81e36962f3217f7049be6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RobustClosestPoint</name>
      <anchorfile>classmirtk_1_1RobustClosestPoint.html</anchorfile>
      <anchor>a563cb2ce523efe20b64c647ce92643ec</anchor>
      <arglist>(const RegisteredPointSet *, const RegisteredPointSet *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RobustClosestPoint</name>
      <anchorfile>classmirtk_1_1RobustClosestPoint.html</anchorfile>
      <anchor>ae8ef810e74caf291e97ffdbdf4bddf0b</anchor>
      <arglist>(const RobustClosestPoint &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1RobustClosestPoint.html</anchorfile>
      <anchor>a9a694b96cd47fdb78806de1598c18358</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TypeId</type>
      <name>Type</name>
      <anchorfile>classmirtk_1_1RobustClosestPoint.html</anchorfile>
      <anchor>a9492c6930be7c9149a463136a4b1932b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RobustClosestPoint</name>
      <anchorfile>classmirtk_1_1RobustClosestPoint.html</anchorfile>
      <anchor>a09f382d66d67589b803d9595aa5c5dba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>CalculateWeights</name>
      <anchorfile>classmirtk_1_1RobustClosestPoint.html</anchorfile>
      <anchor>a5678241e9cbb8f14eaf262907504290c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1RobustClosestPoint.html</anchorfile>
      <anchor>a4799d74020d229b72fdaf9027ade06be</anchor>
      <arglist>(double, Sigma)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::RobustPointMatch</name>
    <filename>classmirtk_1_1RobustPointMatch.html</filename>
    <base>mirtk::FuzzyCorrespondence</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1RobustPointMatch.html</anchorfile>
      <anchor>abe2490b39cfc5615fb359b709bc376ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PointCorrespondence *</type>
      <name>NewInstance</name>
      <anchorfile>classmirtk_1_1RobustPointMatch.html</anchorfile>
      <anchor>a3427d3eb5f879573fe780df4a78acb1c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1RobustPointMatch.html</anchorfile>
      <anchor>a6d1b97491c66d0c0771e10731fc4f5a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RobustPointMatch</name>
      <anchorfile>classmirtk_1_1RobustPointMatch.html</anchorfile>
      <anchor>acf5f129256ac184fbaa3fc226931c121</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RobustPointMatch</name>
      <anchorfile>classmirtk_1_1RobustPointMatch.html</anchorfile>
      <anchor>ad8902fdb642f88c9bdb41cd4a57cbe2d</anchor>
      <arglist>(const RegisteredPointSet *, const RegisteredPointSet *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RobustPointMatch</name>
      <anchorfile>classmirtk_1_1RobustPointMatch.html</anchorfile>
      <anchor>aa72feb3d44b5322278bbd151e39577fd</anchor>
      <arglist>(const RobustPointMatch &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1RobustPointMatch.html</anchorfile>
      <anchor>a64fe4fdb6a9afd377a77ae0ff4f9360a</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TypeId</type>
      <name>Type</name>
      <anchorfile>classmirtk_1_1RobustPointMatch.html</anchorfile>
      <anchor>a7fb8f133bd161aa92cab6a6af8987b57</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Upgrade</name>
      <anchorfile>classmirtk_1_1RobustPointMatch.html</anchorfile>
      <anchor>a742fc680699818c7aeef3b563543dbee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RobustPointMatch</name>
      <anchorfile>classmirtk_1_1RobustPointMatch.html</anchorfile>
      <anchor>a66c1e3652f9f85eab3ab4764bb0af262</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>CalculateWeights</name>
      <anchorfile>classmirtk_1_1RobustPointMatch.html</anchorfile>
      <anchor>a4304504301ed305036b74bf8805e44e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>InitializeAnnealing</name>
      <anchorfile>classmirtk_1_1RobustPointMatch.html</anchorfile>
      <anchor>ae1c6cd315e22e397af272abd15f58e17</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ScalarFunction</name>
    <filename>classmirtk_1_1ScalarFunction.html</filename>
    <base>mirtk::Object</base>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1ScalarFunction.html</anchorfile>
      <anchor>aafc5c13ab6c322554b1b85e68eec39a2</anchor>
      <arglist>(double x, double y, double z)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ScalarFunction</name>
      <anchorfile>classmirtk_1_1ScalarFunction.html</anchorfile>
      <anchor>a4d7bd6574a7c73fc7d274108972b4e98</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ScalarFunctionToImage</name>
    <filename>classmirtk_1_1ScalarFunctionToImage.html</filename>
    <templarg></templarg>
    <base>mirtk::Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1ScalarFunctionToImage.html</anchorfile>
      <anchor>a62a3df0991e0b7f6326dd5321c24358d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScalarFunctionToImage</name>
      <anchorfile>classmirtk_1_1ScalarFunctionToImage.html</anchorfile>
      <anchor>a1d1e8c39e192a52eab6a8fc50506dd21</anchor>
      <arglist>(bool=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ScalarFunctionToImage</name>
      <anchorfile>classmirtk_1_1ScalarFunctionToImage.html</anchorfile>
      <anchor>a774e0a9468d2f25eeb7b64310c357d96</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ScalarGaussian</name>
    <filename>classmirtk_1_1ScalarGaussian.html</filename>
    <base>mirtk::ScalarFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1ScalarGaussian.html</anchorfile>
      <anchor>a2425f192755dc32c079c4d865d53b981</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1ScalarGaussian.html</anchorfile>
      <anchor>af769e7105254bcea27b1bbea9ec3bb72</anchor>
      <arglist>(double, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1ScalarGaussian.html</anchorfile>
      <anchor>a600bc01cfe8bd62796fc763f6510ffb5</anchor>
      <arglist>(double, double, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1ScalarGaussian.html</anchorfile>
      <anchor>ab94f20b7652dcb8eb506e6cc5273a2dd</anchor>
      <arglist>(double, double, double, double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScalarGaussian</name>
      <anchorfile>classmirtk_1_1ScalarGaussian.html</anchorfile>
      <anchor>a7fc0bee0392a4e2de2df01c3b7213af7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScalarGaussian</name>
      <anchorfile>classmirtk_1_1ScalarGaussian.html</anchorfile>
      <anchor>ad3755aef48edbc3281def97056789271</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScalarGaussian</name>
      <anchorfile>classmirtk_1_1ScalarGaussian.html</anchorfile>
      <anchor>a91926e798fe2a38df7546c0a92a344f1</anchor>
      <arglist>(double, double, double, double=.0, double=.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScalarGaussian</name>
      <anchorfile>classmirtk_1_1ScalarGaussian.html</anchorfile>
      <anchor>a9c2d0a1b17c6c2f369932393a7f9211d</anchor>
      <arglist>(double, double, double, double, double, double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScalarGaussian</name>
      <anchorfile>classmirtk_1_1ScalarGaussian.html</anchorfile>
      <anchor>ab6485e0d98db94e8780fb3332f1559a3</anchor>
      <arglist>(double, double, double, double, double, double, double, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ScalarGaussian</name>
      <anchorfile>classmirtk_1_1ScalarGaussian.html</anchorfile>
      <anchor>aa409ff331e441ac0cfa731beed347296</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ComputeNorm</name>
      <anchorfile>classmirtk_1_1ScalarGaussian.html</anchorfile>
      <anchor>aa3c8e4cfbde0e1ae199744f54733762c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector4D&lt; double &gt;</type>
      <name>_Center</name>
      <anchorfile>classmirtk_1_1ScalarGaussian.html</anchorfile>
      <anchor>abac4853838d6bc1d2377ead37bcbf73b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_Norm</name>
      <anchorfile>classmirtk_1_1ScalarGaussian.html</anchorfile>
      <anchor>aaeddbf5db5c0a80d1ec1da079173977e</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector4D&lt; double &gt;</type>
      <name>_Variance</name>
      <anchorfile>classmirtk_1_1ScalarGaussian.html</anchorfile>
      <anchor>acfb6cc061e52d8cd2cb9864aa8921485</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ScalingAndSquaring</name>
    <filename>classmirtk_1_1ScalingAndSquaring.html</filename>
    <templarg></templarg>
    <base>mirtk::Object</base>
    <member kind="typedef">
      <type>GenericInterpolateImageFunction&lt; ImageType &gt;</type>
      <name>DisplacementField</name>
      <anchorfile>classmirtk_1_1ScalingAndSquaring.html</anchorfile>
      <anchor>ac58bddbed10d44a125eb636bfbd1f6e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericImage&lt; TReal &gt;</type>
      <name>ImageType</name>
      <anchorfile>classmirtk_1_1ScalingAndSquaring.html</anchorfile>
      <anchor>ae38d18113b6f8ea41bd1c434d27dcaa0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericInterpolateImageFunction&lt; ImageType &gt;</type>
      <name>JacobianField</name>
      <anchorfile>classmirtk_1_1ScalingAndSquaring.html</anchorfile>
      <anchor>a65199550762915ff08cbef0a493bcc59</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericFastCubicBSplineInterpolateImageFunction&lt; ImageType &gt;</type>
      <name>VelocityField</name>
      <anchorfile>classmirtk_1_1ScalingAndSquaring.html</anchorfile>
      <anchor>a4a38aaf961e2163b36312467ea3c5b9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1ScalingAndSquaring.html</anchorfile>
      <anchor>a95d4d897850e0ee19ba1ffbd16195a81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScalingAndSquaring</name>
      <anchorfile>classmirtk_1_1ScalingAndSquaring.html</anchorfile>
      <anchor>a07e1341336df088ffef925b16ea77c14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ScalingAndSquaring</name>
      <anchorfile>classmirtk_1_1ScalingAndSquaring.html</anchorfile>
      <anchor>a60b3dd1376f0e58190c9b6227612b9b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Finalize</name>
      <anchorfile>classmirtk_1_1ScalingAndSquaring.html</anchorfile>
      <anchor>adbd8aff85a5229007ea048aa927a38c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1ScalingAndSquaring.html</anchorfile>
      <anchor>aa0c1f81cbfbcef1ae96b06913f9b413a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Resample</name>
      <anchorfile>classmirtk_1_1ScalingAndSquaring.html</anchorfile>
      <anchor>aa0da59d1ed5f2994c6b1d2d10cc99ec4</anchor>
      <arglist>(ImageType *, TInterpolator *)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SenaryForEachVoxelBody</name>
    <filename>structmirtk_1_1SenaryForEachVoxelBody.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody.html</anchorfile>
      <anchor>af1b3caca54f1534b5af0c2d87d98d50d</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody.html</anchorfile>
      <anchor>a64ab9864ce10137705557f0db835135e</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody.html</anchorfile>
      <anchor>ae3dc9b90969c6a100b3585618efe20f6</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody.html</anchorfile>
      <anchor>ad83a0d31b3a49a322ae4512d908faeda</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelBody</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody.html</anchorfile>
      <anchor>af5a20cd160e94685317793b27fcdbf90</anchor>
      <arglist>(GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelBody</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody.html</anchorfile>
      <anchor>a4fd3ff211227441a8742d93fb37564e0</anchor>
      <arglist>(const SenaryForEachVoxelBody &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelBody</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody.html</anchorfile>
      <anchor>a4057deb97f8b2420b1ba3a7f10eac64a</anchor>
      <arglist>(SenaryForEachVoxelBody &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SenaryForEachVoxelBody_1Const</name>
    <filename>structmirtk_1_1SenaryForEachVoxelBody__1Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a0d0b24a67988c10c829ab4d218b91418</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a0ef1109fce3a787bcee9429dd647e053</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a20a7937bab5c24d518dd02545411fea3</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>ae9853e926bf3fcf5abb7ce55268021eb</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelBody_1Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a86759e34782ad37b08bda7881f0a6d09</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelBody_1Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a8a23730a172df91b436d33c4b6b9e8f2</anchor>
      <arglist>(const SenaryForEachVoxelBody_1Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelBody_1Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a8773f5a396b038a97d5c9a0543599050</anchor>
      <arglist>(SenaryForEachVoxelBody_1Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SenaryForEachVoxelBody_2Const</name>
    <filename>structmirtk_1_1SenaryForEachVoxelBody__2Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>af706d7283da1e59cc8a8a8cfc449affa</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a556fcb1719e87835182f59342a62c8e0</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a154544090183470e3b663120b2ae1d10</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>ade71f0248e193261c4488597848145fe</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelBody_2Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>aa90474c1b37d18d2b60a87449a55cc05</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelBody_2Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a6ad75545022fc969c5b702b0f82b8c17</anchor>
      <arglist>(const SenaryForEachVoxelBody_2Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelBody_2Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>af560a8481c803d6c3eae71a48c5b2f38</anchor>
      <arglist>(SenaryForEachVoxelBody_2Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SenaryForEachVoxelBody_3Const</name>
    <filename>structmirtk_1_1SenaryForEachVoxelBody__3Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>a88e3078f9512eab3076f5aed1c0c4b9c</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>a014eddb8f91db4b0035f637832ea58dc</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>a55b7c73696f5fd394fe4ad2df57723d0</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>a62613fe8622ba07421935683758d0fed</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelBody_3Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>ab013c34516b3549ee5f729633bad4b14</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelBody_3Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>a3d7fe9d00cd2b5ca236fed989247f8aa</anchor>
      <arglist>(const SenaryForEachVoxelBody_3Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelBody_3Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>ad6282eb45e0f9345c13a04f2a52cc270</anchor>
      <arglist>(SenaryForEachVoxelBody_3Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SenaryForEachVoxelBody_4Const</name>
    <filename>structmirtk_1_1SenaryForEachVoxelBody__4Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>a4014813061dac8deab17bf76ad04403b</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>ae80a0c0b646c1128f35d798b22180121</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>aee0000d055e823c1a3d9c1ff0381bd80</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>aaa1140b9fefb03ac968498c07b694209</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelBody_4Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>ae36e7c9bbf3eeec1567ed71f0af98ea3</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelBody_4Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>addc2a86b267428cfc921f22fda9ff6b7</anchor>
      <arglist>(const SenaryForEachVoxelBody_4Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelBody_4Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>a014cec0f7d7a522c26827cc8b0854539</anchor>
      <arglist>(SenaryForEachVoxelBody_4Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SenaryForEachVoxelBody_5Const</name>
    <filename>structmirtk_1_1SenaryForEachVoxelBody__5Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__5Const.html</anchorfile>
      <anchor>a81b9c697b027c059d62149beebfbf98e</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__5Const.html</anchorfile>
      <anchor>ab0976396144419e77be6aeb25f81ffa5</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__5Const.html</anchorfile>
      <anchor>aaaf03f15be9a614337d0a63079e156dd</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__5Const.html</anchorfile>
      <anchor>a4c6cedc1442ad059df2bec5d57f46776</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelBody_5Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__5Const.html</anchorfile>
      <anchor>a6285a5fac67ebefd72b9b3f16a903f13</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, const GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelBody_5Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__5Const.html</anchorfile>
      <anchor>a164458b27bd1664f8e673998e410beac</anchor>
      <arglist>(const SenaryForEachVoxelBody_5Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelBody_5Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__5Const.html</anchorfile>
      <anchor>aa825a583f472a99d388ff77313b66f29</anchor>
      <arglist>(SenaryForEachVoxelBody_5Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SenaryForEachVoxelBody_Const</name>
    <filename>structmirtk_1_1SenaryForEachVoxelBody__Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a68d8a8b13711d5369113cfea73561830</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>ac58382c01d46d922901e319c93f99234</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a0a00af0606d45d3fe1bd9ffaad77ec54</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a240a8abc3f8d52c7b08bbe3fa2108a21</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelBody_Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>abbedd6bee41447abfa72b278910ce808</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, const GenericImage&lt; T5 &gt; &amp;im5, const GenericImage&lt; T6 &gt; &amp;im6, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelBody_Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a0c94426ed55834483b965e4f5374edff</anchor>
      <arglist>(const SenaryForEachVoxelBody_Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelBody_Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a7317b6f2c6d95be2d740c59ac28ef51a</anchor>
      <arglist>(SenaryForEachVoxelBody_Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SenaryForEachVoxelIfBody</name>
    <filename>structmirtk_1_1SenaryForEachVoxelIfBody.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a55f316ce480bf41ae5729159f2eacaa8</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody.html</anchorfile>
      <anchor>ad7c807a7342b88c8ad1d71af662973a3</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a18b982165db77d1a4ae1bd8e72402c06</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a2fca634680e65c14c0220bfe185c9b60</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelIfBody</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a21f4b9bf52744c66f1dd82f7047fd2e6</anchor>
      <arglist>(GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelIfBody</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a93070008de390e2818ff8cd0c787e030</anchor>
      <arglist>(const SenaryForEachVoxelIfBody &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelIfBody</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody.html</anchorfile>
      <anchor>ab41d13890082f6fa9771c69ef599411c</anchor>
      <arglist>(SenaryForEachVoxelIfBody &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SenaryForEachVoxelIfBody_1Const</name>
    <filename>structmirtk_1_1SenaryForEachVoxelIfBody__1Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>aa06ce87ffe8b5e3140d0b0025dd74bd5</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a325cfc9365c93c3a7d19a96a90f6cb32</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>ac7e5d15e67b95e5a4e315b2cdfb3a26a</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>adb366cd918e39e39d363ba60b66a976c</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelIfBody_1Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>ac360aeb51efade31b8e960d9487a393a</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelIfBody_1Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a1a5e7f6d191ff5541d0831eb0a24cc0b</anchor>
      <arglist>(const SenaryForEachVoxelIfBody_1Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelIfBody_1Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>aa848ddd3d74521499e1494ce3a446d3b</anchor>
      <arglist>(SenaryForEachVoxelIfBody_1Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SenaryForEachVoxelIfBody_2Const</name>
    <filename>structmirtk_1_1SenaryForEachVoxelIfBody__2Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>a532eb21425c189eb87e44dec29c07046</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>ab24b4852f554a15d1207057adf74e448</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>ac28dec7d66893f3475bd14d8e92b741d</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>ae4e5d0eafe9a69be73d606558fe698df</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelIfBody_2Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>aeab1c1316df4f26424e85202d563fa4c</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelIfBody_2Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>a7a4efcafcc816a7efc2d73c7c1ae6284</anchor>
      <arglist>(const SenaryForEachVoxelIfBody_2Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelIfBody_2Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>a5ea8f153c20fa1e59f8bafd0e595710a</anchor>
      <arglist>(SenaryForEachVoxelIfBody_2Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SenaryForEachVoxelIfBody_3Const</name>
    <filename>structmirtk_1_1SenaryForEachVoxelIfBody__3Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>a0c9d490045d9a5b83d5a4000bb3eecf9</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>a819610f90e744c59bd34388f67a79e58</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>ae523ce2049078778baacb9cee8f66e19</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>af6700e03fcdce3f27386ad6615fcd3ec</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelIfBody_3Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>a8f13a054607036be0d46fa2a99012df2</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelIfBody_3Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>ab0c177b07966f8072c246bc71599a527</anchor>
      <arglist>(const SenaryForEachVoxelIfBody_3Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelIfBody_3Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>a9a3af54c63229336e58d5dc401aa0306</anchor>
      <arglist>(SenaryForEachVoxelIfBody_3Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SenaryForEachVoxelIfBody_4Const</name>
    <filename>structmirtk_1_1SenaryForEachVoxelIfBody__4Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>ab2f4c7175b27a1bb19617d93828e95d8</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>a76054e198960a641bde6540b2a8ce82c</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>a54618722a9e17d9a78e682d5d0f00013</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>ac1b5e30341a6d2f0aeb14e85895c7eea</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelIfBody_4Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>ac8897e70431c6257b8bbd334be2eec6b</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelIfBody_4Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>a0ccf17b2a5c07076e4fcc3cc26018639</anchor>
      <arglist>(const SenaryForEachVoxelIfBody_4Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelIfBody_4Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>a0f7377dd3890352f51a2af8b74d6a04c</anchor>
      <arglist>(SenaryForEachVoxelIfBody_4Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SenaryForEachVoxelIfBody_5Const</name>
    <filename>structmirtk_1_1SenaryForEachVoxelIfBody__5Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__5Const.html</anchorfile>
      <anchor>a537b85d176ff01605f83472e65681001</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__5Const.html</anchorfile>
      <anchor>a6a947d6f919afdc8b8b3ae49afac7f05</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__5Const.html</anchorfile>
      <anchor>ab493e01a80f56b171adae267fc5a14d4</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__5Const.html</anchorfile>
      <anchor>ac76c2cc52e61ad6aecac53c59f95235f</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelIfBody_5Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__5Const.html</anchorfile>
      <anchor>afc24e92bfcd3dd95207ba01c4850d511</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, const GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelIfBody_5Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__5Const.html</anchorfile>
      <anchor>aa75f71eb90f127ce7cd7ec8a390b9dc8</anchor>
      <arglist>(const SenaryForEachVoxelIfBody_5Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelIfBody_5Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__5Const.html</anchorfile>
      <anchor>ab0ace08f35b66561d075392bbcd32be5</anchor>
      <arglist>(SenaryForEachVoxelIfBody_5Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SenaryForEachVoxelIfBody_Const</name>
    <filename>structmirtk_1_1SenaryForEachVoxelIfBody__Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a1b82d841b8e15a56b3f8fbc0c2149dfb</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>ac802f8ac8cf2133b2fcc90d0e9f466d5</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a2d6e499fa220338d41219d131d55cae9</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>af6c72d0ea04071bf2280d371147207d3</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelIfBody_Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a06cb81cbd59827f3e0957fe17b86c6a2</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, const GenericImage&lt; T5 &gt; &amp;im5, const GenericImage&lt; T6 &gt; &amp;im6, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelIfBody_Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>ab2305f3f6e949edaaf636af9945d3daf</anchor>
      <arglist>(const SenaryForEachVoxelIfBody_Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SenaryForEachVoxelIfBody_Const</name>
      <anchorfile>structmirtk_1_1SenaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>ab88ea1f10a65069dc9f7ac7b79e97456</anchor>
      <arglist>(SenaryForEachVoxelIfBody_Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SeptenaryForEachVoxelBody</name>
    <filename>structmirtk_1_1SeptenaryForEachVoxelBody.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody.html</anchorfile>
      <anchor>a02ccc104a66b4e0b1d3a8795e341a4ce</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody.html</anchorfile>
      <anchor>ad7746ccce93d1537ad7968818c07ae60</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody.html</anchorfile>
      <anchor>ab2118146a05b26987a24602073b906f1</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody.html</anchorfile>
      <anchor>a24f4206181fec3eb86f5696bc280afe6</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelBody</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody.html</anchorfile>
      <anchor>ab0648650950f11237594d768b9e47562</anchor>
      <arglist>(GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelBody</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody.html</anchorfile>
      <anchor>a7a603498fbadfd80c9d686cd029b4228</anchor>
      <arglist>(const SeptenaryForEachVoxelBody &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelBody</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody.html</anchorfile>
      <anchor>ae3c59bb23b67c5777c59d1ca2e349079</anchor>
      <arglist>(SeptenaryForEachVoxelBody &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SeptenaryForEachVoxelBody_1Const</name>
    <filename>structmirtk_1_1SeptenaryForEachVoxelBody__1Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>abf8a9062aaf6cc339dda9bcf0f50c4ec</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a9bdf9eac68c741365a74565df372a09e</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>af7a52339f6d9ea83aac679e5e55dd90f</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a20981582aaeb63cea6adad1a243ff0f9</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelBody_1Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a3e8f64ebb165e9e363926a7ea4ae5180</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelBody_1Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>af30fc256a8204e854841fc43be87d1db</anchor>
      <arglist>(const SeptenaryForEachVoxelBody_1Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelBody_1Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>ae3a1f9f694d2b46f96a6e045195ae84e</anchor>
      <arglist>(SeptenaryForEachVoxelBody_1Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SeptenaryForEachVoxelBody_2Const</name>
    <filename>structmirtk_1_1SeptenaryForEachVoxelBody__2Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a3ccb00c98b12c2c999bae81611aa004b</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a779c0319206091bf7d9c5834bfbbc6ab</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>afb61948546613c2835c37f5ffec7c3a0</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>aaa092887508aef79f287ffbcbbe5af4f</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelBody_2Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>af109f490add4eba1df731956cd775ba2</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelBody_2Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a2ab0b70ecfd711e0f3df181bd8f469d4</anchor>
      <arglist>(const SeptenaryForEachVoxelBody_2Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelBody_2Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a767287659f9c5eaf43bfe060aa10e367</anchor>
      <arglist>(SeptenaryForEachVoxelBody_2Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SeptenaryForEachVoxelBody_3Const</name>
    <filename>structmirtk_1_1SeptenaryForEachVoxelBody__3Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>a3d7fb9ad9f0f63b9b2c34c5cd8644a68</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>a9fb995134bb3c92cb06ca6f559a29226</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>a5028ce7e96b84f33c24465d423211165</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>ab1015939a0ecce2b0afa3ce43cceacf4</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelBody_3Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>aec8e64365beea0d68367553ad5bf2728</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelBody_3Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>ab5f646e752fe60d1b518ccf1a02586fa</anchor>
      <arglist>(const SeptenaryForEachVoxelBody_3Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelBody_3Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__3Const.html</anchorfile>
      <anchor>a571ed63b19683bd595fe417a3e95c38b</anchor>
      <arglist>(SeptenaryForEachVoxelBody_3Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SeptenaryForEachVoxelBody_4Const</name>
    <filename>structmirtk_1_1SeptenaryForEachVoxelBody__4Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>a18fc9b5a28bc24e402f8ab2c8676d182</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>a09c6ab10669ef3f353d3cbbc7b48882e</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>ad0b678717aecafee21a6a5f1432e5bb4</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>a96e8a446feb90302bd4dfd8eed9c297c</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelBody_4Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>a2951ee71b4e39fad27ca4da256209e99</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelBody_4Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>af3c631ce14be257aeb7f9e80497acd30</anchor>
      <arglist>(const SeptenaryForEachVoxelBody_4Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelBody_4Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__4Const.html</anchorfile>
      <anchor>a54ff0fdcb811507d9fe4729f7002d528</anchor>
      <arglist>(SeptenaryForEachVoxelBody_4Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SeptenaryForEachVoxelBody_5Const</name>
    <filename>structmirtk_1_1SeptenaryForEachVoxelBody__5Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__5Const.html</anchorfile>
      <anchor>a31159dec7cb29e1819ceb04e7832476c</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__5Const.html</anchorfile>
      <anchor>a42cab88c8f6aa8bb6a2f87d54b895919</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__5Const.html</anchorfile>
      <anchor>a0926af8b223d19e8bece758a1fd1e9ad</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__5Const.html</anchorfile>
      <anchor>aecfff7af3960a300c45d50c0efcde478</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelBody_5Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__5Const.html</anchorfile>
      <anchor>a5096eba0b10fbae159d5ff3ee937dd41</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, const GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelBody_5Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__5Const.html</anchorfile>
      <anchor>a6351335593d227c4e4e6aa7b864c6266</anchor>
      <arglist>(const SeptenaryForEachVoxelBody_5Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelBody_5Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__5Const.html</anchorfile>
      <anchor>aabda24936b696e52de8d0e2d99a67420</anchor>
      <arglist>(SeptenaryForEachVoxelBody_5Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SeptenaryForEachVoxelBody_6Const</name>
    <filename>structmirtk_1_1SeptenaryForEachVoxelBody__6Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__6Const.html</anchorfile>
      <anchor>a613525bf7c94e065236b99c9f8889cf3</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__6Const.html</anchorfile>
      <anchor>a520153d0699d5b8cb9cad20d3a8f118e</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__6Const.html</anchorfile>
      <anchor>a5620c54d3d0ee1adec633d10ee0f3ee6</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__6Const.html</anchorfile>
      <anchor>aaa69660324a377a6f2ac22af7a75a395</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelBody_6Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__6Const.html</anchorfile>
      <anchor>a952de3de332e331350d181d176971d78</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, const GenericImage&lt; T5 &gt; &amp;im5, const GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelBody_6Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__6Const.html</anchorfile>
      <anchor>adb2c15c0c0daa7eb79e2389eec41c088</anchor>
      <arglist>(const SeptenaryForEachVoxelBody_6Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelBody_6Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__6Const.html</anchorfile>
      <anchor>a4cc68d06f803ea6e40e7a6788aef1545</anchor>
      <arglist>(SeptenaryForEachVoxelBody_6Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SeptenaryForEachVoxelBody_Const</name>
    <filename>structmirtk_1_1SeptenaryForEachVoxelBody__Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a4177e872b124add2020c57505de9d979</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>ac4a3a7474f35ac59f01fba45600f003e</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a469c5b3f0ae66d6c3954398f6db038eb</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a49fd9b685c8ea68a12b8e7a057039263</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelBody_Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a25b912a7b2d96cba9bfce13e684b7078</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, const GenericImage&lt; T5 &gt; &amp;im5, const GenericImage&lt; T6 &gt; &amp;im6, const GenericImage&lt; T7 &gt; &amp;im7, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelBody_Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>ac85c9ab21112e56a080d2dc46f42a5a1</anchor>
      <arglist>(const SeptenaryForEachVoxelBody_Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelBody_Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a9c700129fd2eb7d916c0115b63ff8952</anchor>
      <arglist>(SeptenaryForEachVoxelBody_Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SeptenaryForEachVoxelIfBody</name>
    <filename>structmirtk_1_1SeptenaryForEachVoxelIfBody.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a0dbe6f086554819ef635aa6737152968</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a430d6ce3d2596e2df45ff6a14013145b</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody.html</anchorfile>
      <anchor>ae63a60019f94d7440d9cca60dae29946</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody.html</anchorfile>
      <anchor>ae246b330f7b81a58c2359342a239342d</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelIfBody</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a7d8df6a64fa3500fee007adda980933c</anchor>
      <arglist>(GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelIfBody</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a038440cd20a31bcee45caaab24a36c32</anchor>
      <arglist>(const SeptenaryForEachVoxelIfBody &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelIfBody</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a380771135982e9193f94339b84ece168</anchor>
      <arglist>(SeptenaryForEachVoxelIfBody &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SeptenaryForEachVoxelIfBody_1Const</name>
    <filename>structmirtk_1_1SeptenaryForEachVoxelIfBody__1Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>ad60b70510477ca8334c21a7e15012255</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a41862a78d5ce8b4565c66c1db3a7162e</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a8fe9a868a2713c3967a02627dcce9ac3</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a763c6377593e95aa74342a3a2bd680c1</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelIfBody_1Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a1a905351749eff14c5cc976709a1d755</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelIfBody_1Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a9888b50734633b0f498db67665a0cf1f</anchor>
      <arglist>(const SeptenaryForEachVoxelIfBody_1Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelIfBody_1Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>af86068ccb5c35c7a3b5a8caf7434c306</anchor>
      <arglist>(SeptenaryForEachVoxelIfBody_1Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SeptenaryForEachVoxelIfBody_2Const</name>
    <filename>structmirtk_1_1SeptenaryForEachVoxelIfBody__2Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>a2d03fa512cf0bc22a512f22ed70d6aaf</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>a42e427049eb210e9620c7a53f722ed39</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>a4f43b4e9ba9299161dffc670edd17e25</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>ad58420baa2a356ffb7ad2dc717cac638</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelIfBody_2Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>aaee05e52c1d59cea2397502a8f2199fa</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelIfBody_2Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>a61d90d8bb471f7bfc022ece6d5485122</anchor>
      <arglist>(const SeptenaryForEachVoxelIfBody_2Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelIfBody_2Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>ad7426f47278d142e5d7b64b3d393b59e</anchor>
      <arglist>(SeptenaryForEachVoxelIfBody_2Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SeptenaryForEachVoxelIfBody_3Const</name>
    <filename>structmirtk_1_1SeptenaryForEachVoxelIfBody__3Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>ac4727ff6b54c5c8f89755069b1427768</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>ae22295e1d294422ddffd86f3298adf4a</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>ac29c71a2be8c2d41b7417706792facfa</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>a5a77bbb811982d643d3cc18f275e0dd9</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelIfBody_3Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>a9db3127f51ad11dae70b99ce9c7bf68e</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelIfBody_3Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>a83053e653b98915b5edf95f47dd100c0</anchor>
      <arglist>(const SeptenaryForEachVoxelIfBody_3Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelIfBody_3Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__3Const.html</anchorfile>
      <anchor>af4dfc3059f28e2df38330511ec39cdba</anchor>
      <arglist>(SeptenaryForEachVoxelIfBody_3Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SeptenaryForEachVoxelIfBody_4Const</name>
    <filename>structmirtk_1_1SeptenaryForEachVoxelIfBody__4Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>a7036000254ea5623ecd70c63d201cb18</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>af525b255b4ed015d51a64475c5323ce4</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>a29de5f367c59c18ec39ef778a1fa6b83</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>a55f002609ae974ff5cd3ec8999687691</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelIfBody_4Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>a09de611cc1d1fce16c89f23b3e43cc7d</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelIfBody_4Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>a11cd714c7773e51609b3c9943a7014dc</anchor>
      <arglist>(const SeptenaryForEachVoxelIfBody_4Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelIfBody_4Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__4Const.html</anchorfile>
      <anchor>aec1bd535256e91bc2a27c647bb277dc1</anchor>
      <arglist>(SeptenaryForEachVoxelIfBody_4Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SeptenaryForEachVoxelIfBody_5Const</name>
    <filename>structmirtk_1_1SeptenaryForEachVoxelIfBody__5Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__5Const.html</anchorfile>
      <anchor>af2b6d52c55b0c68e22be372c75144aa9</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__5Const.html</anchorfile>
      <anchor>a04966de7a63b044eb9d8952cc7f5458a</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__5Const.html</anchorfile>
      <anchor>a86c4aaf59636b2f438e8d2bb2e83b485</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__5Const.html</anchorfile>
      <anchor>a1bc17012fc2b958710c79faf85a720a6</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelIfBody_5Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__5Const.html</anchorfile>
      <anchor>ae45df7b6e6e1a7d0b8b53a635b7e5c81</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, const GenericImage&lt; T5 &gt; &amp;im5, GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelIfBody_5Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__5Const.html</anchorfile>
      <anchor>a61c8081015deaa2300c1b0d429393136</anchor>
      <arglist>(const SeptenaryForEachVoxelIfBody_5Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelIfBody_5Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__5Const.html</anchorfile>
      <anchor>a05de3c82d0d9e4ed77f67034573efb3e</anchor>
      <arglist>(SeptenaryForEachVoxelIfBody_5Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SeptenaryForEachVoxelIfBody_6Const</name>
    <filename>structmirtk_1_1SeptenaryForEachVoxelIfBody__6Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__6Const.html</anchorfile>
      <anchor>aa76344893575bdb606065e3ec603785b</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__6Const.html</anchorfile>
      <anchor>a553b543b24cf324fbb773ef2a41ae2aa</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__6Const.html</anchorfile>
      <anchor>a97709464d84931d984b42c33fa910595</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__6Const.html</anchorfile>
      <anchor>a3eb80bacde7ece0a90b73aba44489344</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelIfBody_6Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__6Const.html</anchorfile>
      <anchor>a9fdb98abcfcec240dbbb3416d95edd1c</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, const GenericImage&lt; T5 &gt; &amp;im5, const GenericImage&lt; T6 &gt; &amp;im6, GenericImage&lt; T7 &gt; &amp;im7, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelIfBody_6Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__6Const.html</anchorfile>
      <anchor>ad63194b828f30b33abcc590df3ae10cf</anchor>
      <arglist>(const SeptenaryForEachVoxelIfBody_6Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelIfBody_6Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__6Const.html</anchorfile>
      <anchor>a5a4e1b08f1eb2db7620880ddcf2306d1</anchor>
      <arglist>(SeptenaryForEachVoxelIfBody_6Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SeptenaryForEachVoxelIfBody_Const</name>
    <filename>structmirtk_1_1SeptenaryForEachVoxelIfBody__Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>adc594b8eaa87d6743abbc968cc41c9d9</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>ad8cfdc9b2df14fdf238443e506bce703</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a21d8f5869d3000de010106d75e446753</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>ac2db0244cff0f9d7d7016b52546be897</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelIfBody_Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>af2fbcedec93b402f493fea0e936b4654</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, const GenericImage&lt; T4 &gt; &amp;im4, const GenericImage&lt; T5 &gt; &amp;im5, const GenericImage&lt; T6 &gt; &amp;im6, const GenericImage&lt; T7 &gt; &amp;im7, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelIfBody_Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a532c4caca77232a50fa63703ddf05e63</anchor>
      <arglist>(const SeptenaryForEachVoxelIfBody_Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeptenaryForEachVoxelIfBody_Const</name>
      <anchorfile>structmirtk_1_1SeptenaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>ac730ed46ea140179e87ea25fdfcaf964</anchor>
      <arglist>(SeptenaryForEachVoxelIfBody_Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ShapeBasedInterpolateImageFunction</name>
    <filename>classmirtk_1_1ShapeBasedInterpolateImageFunction.html</filename>
    <base>mirtk::InterpolateImageFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingInterval</name>
      <anchorfile>classmirtk_1_1ShapeBasedInterpolateImageFunction.html</anchorfile>
      <anchor>accb99c714b91a5009197da73ea56b091</anchor>
      <arglist>(double, int &amp;, int &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>EvaluateInside</name>
      <anchorfile>classmirtk_1_1ShapeBasedInterpolateImageFunction.html</anchorfile>
      <anchor>a37595ac75e32a25e4c744311322b161e</anchor>
      <arglist>(double, double, double, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateInside</name>
      <anchorfile>classmirtk_1_1ShapeBasedInterpolateImageFunction.html</anchorfile>
      <anchor>a4fd263fb9e942107564165677c808d89</anchor>
      <arglist>(Vector &amp;, double, double, double, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>EvaluateInsideLinear</name>
      <anchorfile>classmirtk_1_1ShapeBasedInterpolateImageFunction.html</anchorfile>
      <anchor>a191e723effaa808fd95afb7d882b71bf</anchor>
      <arglist>(double, double, double, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>EvaluateLinear</name>
      <anchorfile>classmirtk_1_1ShapeBasedInterpolateImageFunction.html</anchorfile>
      <anchor>a28eb00b3eaaf8e21a6fae56b3b87aa11</anchor>
      <arglist>(double, double, double, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>EvaluateOutside</name>
      <anchorfile>classmirtk_1_1ShapeBasedInterpolateImageFunction.html</anchorfile>
      <anchor>a3ad9cb195f9a01a5c7c7332d453c6775</anchor>
      <arglist>(double, double, double, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateOutside</name>
      <anchorfile>classmirtk_1_1ShapeBasedInterpolateImageFunction.html</anchorfile>
      <anchor>a022db6898687a83e828f98ea4c93260f</anchor>
      <arglist>(Vector &amp;, double, double, double, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>EvaluateOutsideLinear</name>
      <anchorfile>classmirtk_1_1ShapeBasedInterpolateImageFunction.html</anchorfile>
      <anchor>a27aea5641b16c61fbda122fad9ecd112</anchor>
      <arglist>(double, double, double, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>EvaluateWithPaddingInside</name>
      <anchorfile>classmirtk_1_1ShapeBasedInterpolateImageFunction.html</anchorfile>
      <anchor>afdce6b888648410ec03c6ce793d7bbe7</anchor>
      <arglist>(double, double, double, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateWithPaddingInside</name>
      <anchorfile>classmirtk_1_1ShapeBasedInterpolateImageFunction.html</anchorfile>
      <anchor>a0b57a8357fc77528783765fbf33daacf</anchor>
      <arglist>(Vector &amp;, double, double, double, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>EvaluateWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1ShapeBasedInterpolateImageFunction.html</anchorfile>
      <anchor>aa13c37c228916af42b57390ae10c460b</anchor>
      <arglist>(double, double, double, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1ShapeBasedInterpolateImageFunction.html</anchorfile>
      <anchor>a8a7e4b905cc26dfc1926961973a1c774</anchor>
      <arglist>(Vector &amp;, double, double, double, double=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1ShapeBasedInterpolateImageFunction.html</anchorfile>
      <anchor>af6be274014b895557deacaf6de30e5b2</anchor>
      <arglist>(bool=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ShapeBasedInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1ShapeBasedInterpolateImageFunction.html</anchorfile>
      <anchor>a63e54576cc3817f3a022ca470cc89330</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ShapeBasedInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1ShapeBasedInterpolateImageFunction.html</anchorfile>
      <anchor>af2a4107d9ffeafa3d0b30f7acc971c5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Refine</name>
      <anchorfile>classmirtk_1_1ShapeBasedInterpolateImageFunction.html</anchorfile>
      <anchor>a22a7f539093eddcc925b6e84afe9aa96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealImage</type>
      <name>_dmap</name>
      <anchorfile>classmirtk_1_1ShapeBasedInterpolateImageFunction.html</anchorfile>
      <anchor>a984deed038147bea026f33a125969f20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LinearInterpolateImageFunction</type>
      <name>_linear_interpolator</name>
      <anchorfile>classmirtk_1_1ShapeBasedInterpolateImageFunction.html</anchorfile>
      <anchor>ae89d1b6f9e47179a05d8ef7f3f7a7a9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NearestNeighborInterpolateImageFunction</type>
      <name>_nn_interpolator</name>
      <anchorfile>classmirtk_1_1ShapeBasedInterpolateImageFunction.html</anchorfile>
      <anchor>aece249d54ee9e22db5ff223665a26e7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealImage</type>
      <name>_rcdmap</name>
      <anchorfile>classmirtk_1_1ShapeBasedInterpolateImageFunction.html</anchorfile>
      <anchor>a5cc57a0067e7a927b69183b95feba851</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealImage</type>
      <name>_rdmap</name>
      <anchorfile>classmirtk_1_1ShapeBasedInterpolateImageFunction.html</anchorfile>
      <anchor>a8c7a20e6af4b711f3a83d7983a444fc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealImage</type>
      <name>_rinput</name>
      <anchorfile>classmirtk_1_1ShapeBasedInterpolateImageFunction.html</anchorfile>
      <anchor>a6770e3a180338ef52b4643b00360e7b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealImage</type>
      <name>_tinput</name>
      <anchorfile>classmirtk_1_1ShapeBasedInterpolateImageFunction.html</anchorfile>
      <anchor>a9ce89856b8281722cc6978c3ecbc7953</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::SimilarityTransformation</name>
    <filename>classmirtk_1_1SimilarityTransformation.html</filename>
    <base>mirtk::RigidTransformation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ApproximateDOFs</name>
      <anchorfile>classmirtk_1_1SimilarityTransformation.html</anchorfile>
      <anchor>a41895b12cafabc8241ad2592feafdf65</anchor>
      <arglist>(const double *, const double *, const double *, const double *, const double *, const double *, const double *, int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>CanRead</name>
      <anchorfile>classmirtk_1_1SimilarityTransformation.html</anchorfile>
      <anchor>afc5fc7d6c59f3b7d3e478e66595b6e98</anchor>
      <arglist>(TransformationType) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>CopyFrom</name>
      <anchorfile>classmirtk_1_1SimilarityTransformation.html</anchorfile>
      <anchor>acb45daecae419e2d6f58bb34a0c6c041</anchor>
      <arglist>(const Transformation *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DeriveJacobianWrtDOF</name>
      <anchorfile>classmirtk_1_1SimilarityTransformation.html</anchorfile>
      <anchor>a39ea74d29b732d98dc0cd8a3201cae20</anchor>
      <arglist>(Matrix &amp;, int, double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GetScale</name>
      <anchorfile>classmirtk_1_1SimilarityTransformation.html</anchorfile>
      <anchor>a6553a2187c62763c62a646627a1dc29b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>JacobianDOFs</name>
      <anchorfile>classmirtk_1_1SimilarityTransformation.html</anchorfile>
      <anchor>a12a85f4a63a98b4199da2242a746e73a</anchor>
      <arglist>(double[3], int, double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1SimilarityTransformation.html</anchorfile>
      <anchor>a42cf9c4c1abf6ccef4641098c6560f0b</anchor>
      <arglist>(Indent=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PutScale</name>
      <anchorfile>classmirtk_1_1SimilarityTransformation.html</anchorfile>
      <anchor>a7685435472cd7d049b1a8731b00bdb6a</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cofstream &amp;</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1SimilarityTransformation.html</anchorfile>
      <anchor>abedd4aff97dad5ea8b4092c58a3e2171</anchor>
      <arglist>(Cofstream &amp;) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Cifstream &amp;</type>
      <name>ReadDOFs</name>
      <anchorfile>classmirtk_1_1SimilarityTransformation.html</anchorfile>
      <anchor>a111cf37852c6147c75e8c17a1537394e</anchor>
      <arglist>(Cifstream &amp;, TransformationType)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>UpdateDOFs</name>
      <anchorfile>classmirtk_1_1SimilarityTransformation.html</anchorfile>
      <anchor>acbec79d334ce3ecd12b27f53bb0fc345</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>UpdateMatrix</name>
      <anchorfile>classmirtk_1_1SimilarityTransformation.html</anchorfile>
      <anchor>a1574f1ae9313e0d6a0d4ee1b9063f402</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::Sinc</name>
    <filename>classmirtk_1_1Sinc.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>TReal</type>
      <name>Real</name>
      <anchorfile>classmirtk_1_1Sinc.html</anchorfile>
      <anchor>a0a9546e5f1c8011aa2e1c2f35adc6bfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1Sinc.html</anchorfile>
      <anchor>a28f7e653030446d451f75a69bb4a36a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MIRTKCU_API Real</type>
      <name>Lookup</name>
      <anchorfile>classmirtk_1_1Sinc.html</anchorfile>
      <anchor>afd582fbff4f0ecd2edf45c1a300d87b6</anchor>
      <arglist>(TReal)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MIRTKCU_API const int</type>
      <name>KernelSize</name>
      <anchorfile>classmirtk_1_1Sinc.html</anchorfile>
      <anchor>a95ee318065577532e197cf81462eba9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>MIRTK_Numerics_EXPORT static MIRTKCU_API Real *</type>
      <name>LookupTable</name>
      <anchorfile>classmirtk_1_1Sinc.html</anchorfile>
      <anchor>aa8b3d5f82d3ebfed9a62b392f334ecc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MIRTKCU_API const int</type>
      <name>LookupTableSize</name>
      <anchorfile>classmirtk_1_1Sinc.html</anchorfile>
      <anchor>a4ec3042a8370f54a684d846f0e9562c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MIRTKCU_API const int</type>
      <name>Radius</name>
      <anchorfile>classmirtk_1_1Sinc.html</anchorfile>
      <anchor>a1aeb66fa15dad1ef7fa1dff409f2abe3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::SincInterpolateImageFunction</name>
    <filename>classmirtk_1_1SincInterpolateImageFunction.html</filename>
    <base>GenericSincInterpolateImageFunction&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>SincInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1SincInterpolateImageFunction.html</anchorfile>
      <anchor>a55648eaf99800d5c0049fb776463031f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BoundingInterval</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>a051a0cc1ce1440b1e96dabc2542f479f</anchor>
      <arglist>(double, int &amp;, int &amp;) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericSincInterpolateImageFunction</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>aeefbeb6fdbef74cad4945f359bf2c622</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>a3ca207aa88d892879128d771546668f3</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>abafad35ce4df1c4573f88617a881e242</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>ab9c861075994d1b837168b584d6a258a</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get2D</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>acfb7a2d9e64b3db0af1a863d7683eab9</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>a0b5aae503239d0b3cad8f17a9e789f2d</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get3D</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>a8e18420c0e43304955e200957dabccd2</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>a9a4a04837a4744cf217a5b966a946220</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get4D</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>ab7d4d402c43811f7682d3eb8bb804d90</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>ab4b3bb181cbe2827fa51afda4d78fcd8</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>ac8e79e190e0d35736eb3b49223a24b7f</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>a8cb1db0d044caa779342cffa3f0c0edc</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>aad84a4668efa9fc56cf2773161c5b2f1</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>a6b4a30fb95d9ef24d836fc37eb06d516</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding2D</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>a321c270f797a7c1bd0e865ddb98998c0</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>abc03d2eea72e40c8d8ad56ab7d9fb8b2</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding3D</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>a9f8d42f377ea438bfdf4bf720256a9de</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>aac8684c22992a4940e779420d4c8d9b8</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding4D</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>a46499b9d0a60552c6c33d98873a2b2ee</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>a756c68ef884a661143b419533e6afc5d</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>ac08cbc8455a0dec75171114c4e4f58ee</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>a398270d0b1c13f726279f5aff660aff4</anchor>
      <arglist>(bool=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>af41e9e7f1bdfe330cf29c1352ae043c9</anchor>
      <arglist>(double, Epsilon)</arglist>
    </member>
    <member kind="typedef">
      <type>Sinc&lt; Real &gt;</type>
      <name>Kernel</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction.html</anchorfile>
      <anchor>adec693f02718893e6853ab4793d79735</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::SincInterpolateImageFunction2D</name>
    <filename>classmirtk_1_1SincInterpolateImageFunction2D.html</filename>
    <base>GenericSincInterpolateImageFunction2D&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>SincInterpolateImageFunction2D</name>
      <anchorfile>classmirtk_1_1SincInterpolateImageFunction2D.html</anchorfile>
      <anchor>afdebbe25e4f18b4117aa29f736f29fda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericSincInterpolateImageFunction2D</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction2D.html</anchorfile>
      <anchor>aa81402ec3fa9df5a763c150d8f65722b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction2D.html</anchorfile>
      <anchor>ac7c9db53bf8a8dfacd8ca8e44d83e0ba</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction2D.html</anchorfile>
      <anchor>ab0de61eeca7cbc7e0ff0f1187f4521e3</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction2D.html</anchorfile>
      <anchor>aca72e983e7a095b3751b50a90aed95fb</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction2D.html</anchorfile>
      <anchor>a7db2636029f7b0f9a105497954a30d43</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction2D.html</anchorfile>
      <anchor>a230a828a095128061f7dc312520daf54</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction2D.html</anchorfile>
      <anchor>aa916b401e873fb485a710a62172c07b5</anchor>
      <arglist>(const TOtherImage *, double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction2D.html</anchorfile>
      <anchor>aaf4de5e496ec66a03da9f26a8c959b70</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction2D.html</anchorfile>
      <anchor>a73d55b39c72b79e26d3627e1ad23fd64</anchor>
      <arglist>(double, double, double=0, double=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::SincInterpolateImageFunction3D</name>
    <filename>classmirtk_1_1SincInterpolateImageFunction3D.html</filename>
    <base>GenericSincInterpolateImageFunction3D&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>SincInterpolateImageFunction3D</name>
      <anchorfile>classmirtk_1_1SincInterpolateImageFunction3D.html</anchorfile>
      <anchor>ac3cb073c49f91638b1409ab3162d97d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericSincInterpolateImageFunction3D</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction3D.html</anchorfile>
      <anchor>a517debf34f0a492a016be0e9010c68a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction3D.html</anchorfile>
      <anchor>a3a276b8c41906f935eb134258749a783</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction3D.html</anchorfile>
      <anchor>acc65a6998951c5e36a25d6a2bc34aa03</anchor>
      <arglist>(const TOtherImage *, double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction3D.html</anchorfile>
      <anchor>a028ddd9acf1343b62ca0f32bce2b161c</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction3D.html</anchorfile>
      <anchor>ab75837d5f6a5e3a2064d18c02689a061</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction3D.html</anchorfile>
      <anchor>a1de39a97e893af627bfa42f23b1b5e1a</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction3D.html</anchorfile>
      <anchor>af726587a1cbc44d50491a47ff728e6ff</anchor>
      <arglist>(const TOtherImage *, double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction3D.html</anchorfile>
      <anchor>a62a15f58f773d056c226bef1a2bf2a5b</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction3D.html</anchorfile>
      <anchor>a393bf5431d8acc7d3cc2ad59a700bcd2</anchor>
      <arglist>(double, double, double, double=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::SincInterpolateImageFunction4D</name>
    <filename>classmirtk_1_1SincInterpolateImageFunction4D.html</filename>
    <base>GenericSincInterpolateImageFunction4D&lt; BaseImage &gt;</base>
    <member kind="function">
      <type></type>
      <name>SincInterpolateImageFunction4D</name>
      <anchorfile>classmirtk_1_1SincInterpolateImageFunction4D.html</anchorfile>
      <anchor>a422811b74571a08139ee6edf47cc2f69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericSincInterpolateImageFunction4D</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction4D.html</anchorfile>
      <anchor>ab80b584c4f5a77243a91e8af8b6f4e78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction4D.html</anchorfile>
      <anchor>a8a8e1c89d10aec9cd31d9015ef30d0d9</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction4D.html</anchorfile>
      <anchor>a54c9dc148d13feea0fa652904789cf86</anchor>
      <arglist>(const TOtherImage *, double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetInside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction4D.html</anchorfile>
      <anchor>ab3ae8b18bd581bdbb855a5db6719762e</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetOutside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction4D.html</anchorfile>
      <anchor>aa1a828e82ab32ca7f73b9ddf169e199e</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction4D.html</anchorfile>
      <anchor>a88ece9374629c344149a920fa449adec</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function">
      <type>TOtherImage::VoxelType</type>
      <name>GetWithPadding</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction4D.html</anchorfile>
      <anchor>aca4d95de516c96e9ad4721381f872a93</anchor>
      <arglist>(const TOtherImage *, double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingInside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction4D.html</anchorfile>
      <anchor>ab2909108ac77914240d999089a0615c5</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VoxelType</type>
      <name>GetWithPaddingOutside</name>
      <anchorfile>classmirtk_1_1GenericSincInterpolateImageFunction4D.html</anchorfile>
      <anchor>a633e4bc0df198e9ffa9d75a5787bfa76</anchor>
      <arglist>(double, double, double, double) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::SmoothnessConstraint</name>
    <filename>classmirtk_1_1SmoothnessConstraint.html</filename>
    <base>mirtk::TransformationConstraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1SmoothnessConstraint.html</anchorfile>
      <anchor>ae8e8fcb4fc4c4e71207b47bda4deac7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1SmoothnessConstraint.html</anchorfile>
      <anchor>a9fd659f020883e14ec452947628486a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SmoothnessConstraint</name>
      <anchorfile>classmirtk_1_1SmoothnessConstraint.html</anchorfile>
      <anchor>ad4ab07bd2d596ed3e7d23f87d283bf09</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Upgrade</name>
      <anchorfile>classmirtk_1_1SmoothnessConstraint.html</anchorfile>
      <anchor>a08866a73248f82985520fb799b6a982f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteGradient</name>
      <anchorfile>classmirtk_1_1SmoothnessConstraint.html</anchorfile>
      <anchor>ae8fcea7facadef5b60991c4fdbdd9b52</anchor>
      <arglist>(const char *, const char *) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1SmoothnessConstraint.html</anchorfile>
      <anchor>a153dc16ab0b01872757c7a8023ec71b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateGradient</name>
      <anchorfile>classmirtk_1_1SmoothnessConstraint.html</anchorfile>
      <anchor>a2228b8330509ceaf00ba129049797849</anchor>
      <arglist>(double *, double, double)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetWithoutPrefix</name>
      <anchorfile>classmirtk_1_1SmoothnessConstraint.html</anchorfile>
      <anchor>a557c57de787d1bb4372c0dc35aca412f</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>WriteFFDGradient</name>
      <anchorfile>classmirtk_1_1SmoothnessConstraint.html</anchorfile>
      <anchor>aaafa4e09c0211857b35eb7969e1ab75f</anchor>
      <arglist>(const char *, const FreeFormTransformation *, const double *) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::SortIndicesOfArray</name>
    <filename>classmirtk_1_1SortIndicesOfArray.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>mirtk::SparsityConstraint</name>
    <filename>classmirtk_1_1SparsityConstraint.html</filename>
    <base>mirtk::TransformationConstraint</base>
    <member kind="function">
      <type>void</type>
      <name>Gradient</name>
      <anchorfile>classmirtk_1_1SparsityConstraint.html</anchorfile>
      <anchor>a61084ef7e73654195c294ebb8a88d466</anchor>
      <arglist>(double *gradient, double step, bool *sgn_chg=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GradientStep</name>
      <anchorfile>classmirtk_1_1SparsityConstraint.html</anchorfile>
      <anchor>a530257e86fad60ad97431f41ea85d061</anchor>
      <arglist>(const double *gradient, double &amp;min, double &amp;max) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparsityConstraint</name>
      <anchorfile>classmirtk_1_1SparsityConstraint.html</anchorfile>
      <anchor>a6407ffea7db56a9ded5e7eee2d2c1d54</anchor>
      <arglist>(const char *=&quot;&quot;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1SparsityConstraint.html</anchorfile>
      <anchor>a65a8ed39c10e4bfba154f6ada94f3864</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateGradient</name>
      <anchorfile>classmirtk_1_1SparsityConstraint.html</anchorfile>
      <anchor>a008a250ab9f10fc3c0dcab9ec801dca6</anchor>
      <arglist>(double *, double, double)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateGradient</name>
      <anchorfile>classmirtk_1_1SparsityConstraint.html</anchorfile>
      <anchor>a9b32d94ac7cf42ff2366140254978c3d</anchor>
      <arglist>(double *, double, double, bool *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::SpectralMatch</name>
    <filename>classmirtk_1_1SpectralMatch.html</filename>
    <base>mirtk::PointCorrespondence</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>GetInputSourcePoint</name>
      <anchorfile>classmirtk_1_1SpectralMatch.html</anchorfile>
      <anchor>a51632c11f8e5dcdd6b7181b00c826097</anchor>
      <arglist>(int, Point &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>GetInputTargetPoint</name>
      <anchorfile>classmirtk_1_1SpectralMatch.html</anchorfile>
      <anchor>ab4a74b39d0c3cf8c3212b535bc43e5ca</anchor>
      <arglist>(int, Point &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>GetSourcePoint</name>
      <anchorfile>classmirtk_1_1SpectralMatch.html</anchorfile>
      <anchor>a86a4f3d27763c393e04459599e0f24a1</anchor>
      <arglist>(int, Point &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>GetTargetPoint</name>
      <anchorfile>classmirtk_1_1SpectralMatch.html</anchorfile>
      <anchor>a5b04ef5a2a316d498ef6e921ceb06162</anchor>
      <arglist>(int, Point &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1SpectralMatch.html</anchorfile>
      <anchor>aea6beebd1abbdbd0ccac6d960b1139d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PointCorrespondence *</type>
      <name>NewInstance</name>
      <anchorfile>classmirtk_1_1SpectralMatch.html</anchorfile>
      <anchor>afe74c5e478a81e68c5ef6e04900d86f0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1SpectralMatch.html</anchorfile>
      <anchor>aca265b1d96cf178a66c4ea414c8a9463</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1SpectralMatch.html</anchorfile>
      <anchor>aca3032676565a591a56f4e0667073c68</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpectralMatch</name>
      <anchorfile>classmirtk_1_1SpectralMatch.html</anchorfile>
      <anchor>a699fde52afb558f13b3800ee2f652fe8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpectralMatch</name>
      <anchorfile>classmirtk_1_1SpectralMatch.html</anchorfile>
      <anchor>ac26efae7558a574009c5dab1a0759ad8</anchor>
      <arglist>(const SpectralMatch &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TypeId</type>
      <name>Type</name>
      <anchorfile>classmirtk_1_1SpectralMatch.html</anchorfile>
      <anchor>ad46ce387579870b515f7b2186ad4bddb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1SpectralMatch.html</anchorfile>
      <anchor>ab058339ca4b9b6fa33ae401d562610df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Upgrade</name>
      <anchorfile>classmirtk_1_1SpectralMatch.html</anchorfile>
      <anchor>a9ba1df961415f2b405e372a922727468</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SpectralMatch</name>
      <anchorfile>classmirtk_1_1SpectralMatch.html</anchorfile>
      <anchor>ad4dc5b99a2e1688df7c505ce2ccd8c46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1SpectralMatch.html</anchorfile>
      <anchor>a400bf311d9423e574526029b7911edf8</anchor>
      <arglist>(PointSet, TargetPoints)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkAttributeMacro</name>
      <anchorfile>classmirtk_1_1SpectralMatch.html</anchorfile>
      <anchor>a3624c28dc54406a74a6d5b36787ad48c</anchor>
      <arglist>(PointSet, SourcePoints)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1SpectralMatch.html</anchorfile>
      <anchor>afd953d3d97734b377ea331ed2e566614</anchor>
      <arglist>(int, NumberOfNeighbors)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>mirtkPublicAttributeMacro</name>
      <anchorfile>classmirtk_1_1SpectralMatch.html</anchorfile>
      <anchor>a0b6ad8239bddf7035d4bd2f3d1f7bce6</anchor>
      <arglist>(double, Sigma)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::split</name>
    <filename>structmirtk_1_1split.html</filename>
  </compound>
  <compound kind="class">
    <name>mirtk::SpringForce</name>
    <filename>classmirtk_1_1SpringForce.html</filename>
    <base>mirtk::SurfaceConstraint</base>
    <member kind="function">
      <type>SpringForce &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1SpringForce.html</anchorfile>
      <anchor>a9f454f46966dcf46207d071cab0ff889</anchor>
      <arglist>(const SpringForce &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpringForce</name>
      <anchorfile>classmirtk_1_1SpringForce.html</anchorfile>
      <anchor>a0b1019bec4f6bc18dde63aecf8aff62e</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpringForce</name>
      <anchorfile>classmirtk_1_1SpringForce.html</anchorfile>
      <anchor>aee02f266d1a8c93f36cf591f9d45ea24</anchor>
      <arglist>(const SpringForce &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SpringForce</name>
      <anchorfile>classmirtk_1_1SpringForce.html</anchorfile>
      <anchor>aec9731e20a7b60532b0bb992d943e16d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1SpringForce.html</anchorfile>
      <anchor>ab77150a4d82571d4c15cc0b9e8aef730</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateGradient</name>
      <anchorfile>classmirtk_1_1SpringForce.html</anchorfile>
      <anchor>afa932b9107e9b621a1f10894f8d8d420</anchor>
      <arglist>(double *, double, double)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::SquaredErrorFunction</name>
    <filename>classmirtk_1_1SquaredErrorFunction.html</filename>
    <base>mirtk::RadialErrorFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Derivative</name>
      <anchorfile>classmirtk_1_1SquaredErrorFunction.html</anchorfile>
      <anchor>a43386071caa8d8d3d60ae1f9769fa057</anchor>
      <arglist>(double d) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RadialErrorFunction *</type>
      <name>NewInstance</name>
      <anchorfile>classmirtk_1_1SquaredErrorFunction.html</anchorfile>
      <anchor>a2f1361f63fbf19014d37e641b21d8fea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SquaredErrorFunction</name>
      <anchorfile>classmirtk_1_1SquaredErrorFunction.html</anchorfile>
      <anchor>a97ceae609663406677f3625a737e55cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SquaredErrorFunction</name>
      <anchorfile>classmirtk_1_1SquaredErrorFunction.html</anchorfile>
      <anchor>a25d6b229f78654e66b80d46c58a81345</anchor>
      <arglist>(const SquaredErrorFunction &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TypeId</type>
      <name>Type</name>
      <anchorfile>classmirtk_1_1SquaredErrorFunction.html</anchorfile>
      <anchor>a9704ae02fd5432cf096c25c6cf285bc8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Value</name>
      <anchorfile>classmirtk_1_1SquaredErrorFunction.html</anchorfile>
      <anchor>a9ec3dd190f9fa5e63fa654f0e5a13a3d</anchor>
      <arglist>(double d) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SquaredErrorFunction</name>
      <anchorfile>classmirtk_1_1SquaredErrorFunction.html</anchorfile>
      <anchor>a94c225d361be96179fbcee9e8bf3e423</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::StoppingCriterion</name>
    <filename>classmirtk_1_1StoppingCriterion.html</filename>
    <base>mirtk::Object</base>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>Fulfilled</name>
      <anchorfile>classmirtk_1_1StoppingCriterion.html</anchorfile>
      <anchor>a2c8e3905a937bf7f79dc1f4c318ef0d4</anchor>
      <arglist>(int iter, double prev, double value, const double *delta)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual StoppingCriterion *</type>
      <name>New</name>
      <anchorfile>classmirtk_1_1StoppingCriterion.html</anchorfile>
      <anchor>a6d4237250e3fe7e71e4628ff47c6b036</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1StoppingCriterion.html</anchorfile>
      <anchor>af001748cb1c1c4238d31522f3cd100db</anchor>
      <arglist>(ostream &amp;) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::StretchingForce</name>
    <filename>classmirtk_1_1StretchingForce.html</filename>
    <base>mirtk::InternalForce</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1StretchingForce.html</anchorfile>
      <anchor>ac61f8c717e3f7e17e990b6a94736ad0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StretchingForce &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1StretchingForce.html</anchorfile>
      <anchor>a4374798b2c851f12f5a65a15722343b7</anchor>
      <arglist>(const StretchingForce &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParameterList</type>
      <name>Parameter</name>
      <anchorfile>classmirtk_1_1StretchingForce.html</anchorfile>
      <anchor>a3cf21e857e8436f672b334f9b58e4846</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Reinitialize</name>
      <anchorfile>classmirtk_1_1StretchingForce.html</anchorfile>
      <anchor>a7f27e8feade596bf4a8fe68f96818f19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StretchingForce</name>
      <anchorfile>classmirtk_1_1StretchingForce.html</anchorfile>
      <anchor>ab66b847618ccdf8cd41f04d6ef3f3780</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StretchingForce</name>
      <anchorfile>classmirtk_1_1StretchingForce.html</anchorfile>
      <anchor>a805df71316ae6e87f050d6270e917538</anchor>
      <arglist>(const StretchingForce &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StretchingForce</name>
      <anchorfile>classmirtk_1_1StretchingForce.html</anchorfile>
      <anchor>ad30fc58e08e2617fcaffdc16a20d8f89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1StretchingForce.html</anchorfile>
      <anchor>a03fd402f68d73a4ad994d7366674ae79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>EvaluateGradient</name>
      <anchorfile>classmirtk_1_1StretchingForce.html</anchorfile>
      <anchor>aaa1460853fc244b30896567421dde3a7</anchor>
      <arglist>(double *, double, double)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Init</name>
      <anchorfile>classmirtk_1_1StretchingForce.html</anchorfile>
      <anchor>a1e96fcbd87cbe1b27eef1c8a32bebda3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>SetWithoutPrefix</name>
      <anchorfile>classmirtk_1_1StretchingForce.html</anchorfile>
      <anchor>a1f880324ec6fc69657d511fd49c64426</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::SumOfSquaredIntensityDifferences</name>
    <filename>classmirtk_1_1SumOfSquaredIntensityDifferences.html</filename>
    <base>mirtk::ImageSimilarity</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1SumOfSquaredIntensityDifferences.html</anchorfile>
      <anchor>a844def15f74c869c05387873670079ed</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::SurfaceCollisions</name>
    <filename>classmirtk_1_1SurfaceCollisions.html</filename>
    <base>mirtk::Object</base>
    <class kind="struct">mirtk::SurfaceCollisions::CollisionInfo</class>
    <class kind="struct">mirtk::SurfaceCollisions::IntersectionInfo</class>
    <member kind="enumeration">
      <type></type>
      <name>CollisionType</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>a4fed86a64222a6738f8f0e7911eee58a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NoCollision</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>a4fed86a64222a6738f8f0e7911eee58aa660d304a4d75aef6dce2141c48c8c52f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Collision</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>a4fed86a64222a6738f8f0e7911eee58aa6ffe5f86c612e131c29a1a7a25e0814d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FrontfaceCollision</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>a4fed86a64222a6738f8f0e7911eee58aad9d388b394f210108feef478a1898405</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BackfaceCollision</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>a4fed86a64222a6738f8f0e7911eee58aad76d3ae8b3cfcbcd9c178ee081f94f6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Intersection</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>a4fed86a64222a6738f8f0e7911eee58aa68347e4df745dc9fb212398f00252eb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SelfIntersection</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>a4fed86a64222a6738f8f0e7911eee58aa37935f63fe3759d1e9cdf3bcc12ed40d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>AdjacentIntersection</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>a4fed86a64222a6738f8f0e7911eee58aab24f4c35f1b449e2789bd6dca44947ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Ambiguous</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>a4fed86a64222a6738f8f0e7911eee58aa7a6b20f43504b9b6ace4b437cd1f397b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const CollisionsSet &amp;</type>
      <name>Collisions</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>af6d3a56765e30bed5a103378eae8526a</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FoundCollisions</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>a0763a21f7158bbf5a19a700ca95a53e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FoundIntersections</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>ae31a761a8b1d296e92e13df5190eedb8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>vtkDataArray *</type>
      <name>GetCenterArray</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>ac9c6c272f35447b722d35d0a08b14f94</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CollisionType</type>
      <name>GetCollisionType</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>a523f1d53485d7a955b25d3dbce27e918</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>CollisionType</type>
      <name>GetCollisionType</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>afb7a84ab46073fbea8c84e68abc3ccf1</anchor>
      <arglist>(vtkIdType) const </arglist>
    </member>
    <member kind="function">
      <type>vtkDataArray *</type>
      <name>GetCollisionTypeArray</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>a1dbb82bbcf2f206252b7538fbf8fc3d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>vtkDataArray *</type>
      <name>GetRadiusArray</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>a5f7b60bdcad71b1766b4bb40162b10bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const IntersectionsSet &amp;</type>
      <name>Intersections</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>a1402a548fa4e8349d039aa42fff331f4</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkOnOffMacro</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>add6648b3f83be54807c28d9a08ef44e6</anchor>
      <arglist>(AdjacentIntersectionTest)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkOnOffMacro</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>a130fcfaaa597701175974715cde8e264</anchor>
      <arglist>(NonAdjacentIntersectionTest)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkOnOffMacro</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>a6848cd8cc29fc2219c832a2284807529</anchor>
      <arglist>(FrontfaceCollisionTest)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkOnOffMacro</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>a7f67428b70eb13741fdef3b03a5235e7</anchor>
      <arglist>(BackfaceCollisionTest)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkOnOffMacro</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>a19e503c81495252ef185cebee83be260</anchor>
      <arglist>(StoreIntersectionDetails)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkOnOffMacro</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>acdead8d8e055c4d2a0b6b80a8d88b504</anchor>
      <arglist>(StoreCollisionDetails)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfCollisions</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>a3b890be04014b4a1073ab558a5e4471d</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfIntersections</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>a3b139d157bea808e0ecade1fea72e085</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>a3b8dda4ddc99c1ebac4b942e9dbace70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SurfaceCollisions</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>ae7f71fe969538ed21b5a3a5b82820c93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SurfaceCollisions</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>a9412bbd5e3ce053e2fd564feca0dd3bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>IsCollision</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>a856e867eedde42941ad1e220e2eee305</anchor>
      <arglist>(CollisionType)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>IsIntersection</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>a60bd8090f778dc83489f87df536a3175</anchor>
      <arglist>(CollisionType)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1SurfaceCollisions.html</anchorfile>
      <anchor>a4e92b8b6bad974ae5100fde864647c62</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SurfaceCollisions::CollisionInfo</name>
    <filename>structmirtk_1_1SurfaceCollisions_1_1CollisionInfo.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>_CellId</name>
      <anchorfile>structmirtk_1_1SurfaceCollisions_1_1CollisionInfo.html</anchorfile>
      <anchor>acfd0548d892b6925894361cb5b9717ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_Distance</name>
      <anchorfile>structmirtk_1_1SurfaceCollisions_1_1CollisionInfo.html</anchorfile>
      <anchor>a2d71867043993f12652cc97372e08f60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_Point1</name>
      <anchorfile>structmirtk_1_1SurfaceCollisions_1_1CollisionInfo.html</anchorfile>
      <anchor>a89737ae2a3c5c937de80896ba5aea37a</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_Point2</name>
      <anchorfile>structmirtk_1_1SurfaceCollisions_1_1CollisionInfo.html</anchorfile>
      <anchor>ae223dd28c16b10ebd0ff8587b9e06eb9</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>CollisionType</type>
      <name>_Type</name>
      <anchorfile>structmirtk_1_1SurfaceCollisions_1_1CollisionInfo.html</anchorfile>
      <anchor>a83e4b9d01d94e0417003cc886792fb5e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::SurfaceCollisions::IntersectionInfo</name>
    <filename>structmirtk_1_1SurfaceCollisions_1_1IntersectionInfo.html</filename>
    <member kind="variable">
      <type>bool</type>
      <name>_Adjacent</name>
      <anchorfile>structmirtk_1_1SurfaceCollisions_1_1IntersectionInfo.html</anchorfile>
      <anchor>a76c112dd5b42652d067715cab94c8646</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_CellId</name>
      <anchorfile>structmirtk_1_1SurfaceCollisions_1_1IntersectionInfo.html</anchorfile>
      <anchor>a492de7565f924f951317a3733916fdd6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::SurfaceConstraint</name>
    <filename>classmirtk_1_1SurfaceConstraint.html</filename>
    <base>mirtk::InternalForce</base>
  </compound>
  <compound kind="class">
    <name>mirtk::SurfaceDistance</name>
    <filename>classmirtk_1_1SurfaceDistance.html</filename>
    <base>mirtk::PointSetDistance</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1SurfaceDistance.html</anchorfile>
      <anchor>af5184ac35b6d1d66fe3e680e2397f9b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Reinitialize</name>
      <anchorfile>classmirtk_1_1SurfaceDistance.html</anchorfile>
      <anchor>a230bb3eedc621824b875238407ff493a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteDataSets</name>
      <anchorfile>classmirtk_1_1SurfaceDistance.html</anchorfile>
      <anchor>a3c4cce6da3256006d756200e25139b83</anchor>
      <arglist>(const char *, const char *, bool=true) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SurfaceDistance</name>
      <anchorfile>classmirtk_1_1SurfaceDistance.html</anchorfile>
      <anchor>a5e3880a8dae95371254ff787839645ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>CopyAttributes</name>
      <anchorfile>classmirtk_1_1SurfaceDistance.html</anchorfile>
      <anchor>ad01939a3010f2009aafe00620ab2e00f</anchor>
      <arglist>(const SurfaceDistance &amp;, int=-1, int=-1)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SurfaceDistance &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1SurfaceDistance.html</anchorfile>
      <anchor>a4c39d8aa09ff98e15cf8cfa35df23214</anchor>
      <arglist>(const SurfaceDistance &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>ParametricGradient</name>
      <anchorfile>classmirtk_1_1SurfaceDistance.html</anchorfile>
      <anchor>a5eaa396f5d3ea961b561229e06063d68</anchor>
      <arglist>(const RegisteredPointSet *target, const GradientType *np_gradient, double *gradient, double weight)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SurfaceDistance</name>
      <anchorfile>classmirtk_1_1SurfaceDistance.html</anchorfile>
      <anchor>a26b601f55b2ce742a2c0eb380fd039ef</anchor>
      <arglist>(const char *=&quot;&quot;, double=1.0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SurfaceDistance</name>
      <anchorfile>classmirtk_1_1SurfaceDistance.html</anchorfile>
      <anchor>a6710c0088ce80965da3da7e5e19c1bf4</anchor>
      <arglist>(const SurfaceDistance &amp;, int=-1, int=-1)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>WriteGradient</name>
      <anchorfile>classmirtk_1_1SurfaceDistance.html</anchorfile>
      <anchor>a99c60f3f9d82cc45b4aba64aca426564</anchor>
      <arglist>(const char *, const RegisteredPointSet *, const GradientType *, const Array&lt; int &gt; *=NULL) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::SurfaceForce</name>
    <filename>classmirtk_1_1SurfaceForce.html</filename>
    <base>mirtk::ExternalForce</base>
  </compound>
  <compound kind="class">
    <name>mirtk::task_scheduler_init</name>
    <filename>classmirtk_1_1task__scheduler__init.html</filename>
  </compound>
  <compound kind="struct">
    <name>mirtk::TernaryForEachVoxelBody</name>
    <filename>structmirtk_1_1TernaryForEachVoxelBody.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelBody.html</anchorfile>
      <anchor>a84c0d6621ed38f5b8ac754a1c355cd65</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelBody.html</anchorfile>
      <anchor>a8d384e5944f0147d7045520dac1b6c0a</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelBody.html</anchorfile>
      <anchor>ac2969a96a72e49b3f2bac11ea365da5c</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelBody.html</anchorfile>
      <anchor>ad6041a6e739a207d4b5b7d4dcff6ba1f</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TernaryForEachVoxelBody</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelBody.html</anchorfile>
      <anchor>ae08fcc3d7d76fe3fec7aca40b7a5c738</anchor>
      <arglist>(GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TernaryForEachVoxelBody</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelBody.html</anchorfile>
      <anchor>af6f5e41e193f8887dbb75442417d447f</anchor>
      <arglist>(const TernaryForEachVoxelBody &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TernaryForEachVoxelBody</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelBody.html</anchorfile>
      <anchor>abcfb314e1e16fda1f3638bd5c690d6d7</anchor>
      <arglist>(TernaryForEachVoxelBody &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::TernaryForEachVoxelBody_1Const</name>
    <filename>structmirtk_1_1TernaryForEachVoxelBody__1Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a8044e5e64c0917db17d3fda65f0ff460</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a51b2a0cc8e9f4f04cd40b5a1b87f92ab</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a1066cb15a4ed3001d78ec3eb611fedc1</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a1b5124c6a4002f98c0df7e0958b311fc</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TernaryForEachVoxelBody_1Const</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a609710b43e2fb474176703c08fbadc92</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TernaryForEachVoxelBody_1Const</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>a3248e065f69d405f1fda58934e8a5b97</anchor>
      <arglist>(const TernaryForEachVoxelBody_1Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TernaryForEachVoxelBody_1Const</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelBody__1Const.html</anchorfile>
      <anchor>ae2db3cf659d6ec484395f27633755a55</anchor>
      <arglist>(TernaryForEachVoxelBody_1Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::TernaryForEachVoxelBody_2Const</name>
    <filename>structmirtk_1_1TernaryForEachVoxelBody__2Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a76268ebe6b6542b7d63b01d1651c9140</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>acdc872fb756fd94b93d44f957e8d9388</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a8b42e7d656882ea400c3821ad6bfab6d</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a9fbd72ff338b706eeda2f34c4d0b7995</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TernaryForEachVoxelBody_2Const</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>ab240ffc3e4246ffb6e98f654d0a10b65</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TernaryForEachVoxelBody_2Const</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a1418aa5d129f4cc690b36a3d88d60c3f</anchor>
      <arglist>(const TernaryForEachVoxelBody_2Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TernaryForEachVoxelBody_2Const</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelBody__2Const.html</anchorfile>
      <anchor>a1ef90604956ce9c0a2a90ce6c0e8a623</anchor>
      <arglist>(TernaryForEachVoxelBody_2Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::TernaryForEachVoxelBody_Const</name>
    <filename>structmirtk_1_1TernaryForEachVoxelBody__Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a3e3c5507ad168159726f652d198b85bb</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>adc5e7d1dcc85820d5ca9d3b3e2a6e098</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>ad8d981070520dcae6b812902b92b3b16</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a9b6cde1201807d1913781a5f0ff8c125</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TernaryForEachVoxelBody_Const</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>afd9a366077cf019b9614bde09a379623</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TernaryForEachVoxelBody_Const</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>af70cd9b580799b7fae6625fd8496248e</anchor>
      <arglist>(const TernaryForEachVoxelBody_Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TernaryForEachVoxelBody_Const</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>aa5491ad98c7c86911376a0313edcaed8</anchor>
      <arglist>(TernaryForEachVoxelBody_Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::TernaryForEachVoxelIfBody</name>
    <filename>structmirtk_1_1TernaryForEachVoxelIfBody.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a64f2d1ec39d19cbf9c0e2ce6a7d8a833</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelIfBody.html</anchorfile>
      <anchor>ad95a7ff01f193022ce029420e9538df7</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a5a1f1f8665f6e8b2419fe1a343f67a78</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a816ea2e0e99c71b4285500cbd3b3daed</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TernaryForEachVoxelIfBody</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelIfBody.html</anchorfile>
      <anchor>abd365a1cd71f9af344fd41317cfb6772</anchor>
      <arglist>(GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TernaryForEachVoxelIfBody</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelIfBody.html</anchorfile>
      <anchor>adbabd3fe0c531cc5865bfa73ac0338b1</anchor>
      <arglist>(const TernaryForEachVoxelIfBody &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TernaryForEachVoxelIfBody</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a1928f1ea11f6baaf728822fbba7bd6b9</anchor>
      <arglist>(TernaryForEachVoxelIfBody &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::TernaryForEachVoxelIfBody_1Const</name>
    <filename>structmirtk_1_1TernaryForEachVoxelIfBody__1Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>ac7cec22e86ae16ad08e3f7044b74534b</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a491cc52fbe867721adc9ac118827ac40</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>af0a874c9e231efb5bcec022c475894e1</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a615ab19da835193ce76751fc8d8b1880</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TernaryForEachVoxelIfBody_1Const</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>ac02e00f99630ff9b62b2b0f97af97671</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TernaryForEachVoxelIfBody_1Const</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>a285af8ae95fa519af56f5ad5a7daeded</anchor>
      <arglist>(const TernaryForEachVoxelIfBody_1Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TernaryForEachVoxelIfBody_1Const</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelIfBody__1Const.html</anchorfile>
      <anchor>ac897007319cfa42ff13ff38b7d37b513</anchor>
      <arglist>(TernaryForEachVoxelIfBody_1Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::TernaryForEachVoxelIfBody_2Const</name>
    <filename>structmirtk_1_1TernaryForEachVoxelIfBody__2Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>a62eaaea6ec97af27b47323d41b9780be</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>a5d05604b289d62e5afb239a98c4a2699</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>ae2261fb78c1b2297added4859ffd13bb</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>a61ddfe2ff43e3d1c8cbb1405e6dcc611</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TernaryForEachVoxelIfBody_2Const</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>abf783e14aa55104190d693183f565e86</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, GenericImage&lt; T3 &gt; &amp;im3, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TernaryForEachVoxelIfBody_2Const</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>a971a38183ff3a045cf403a7e2e17ea90</anchor>
      <arglist>(const TernaryForEachVoxelIfBody_2Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TernaryForEachVoxelIfBody_2Const</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelIfBody__2Const.html</anchorfile>
      <anchor>a2dae6dc2d147cee1638e8acf828a12e5</anchor>
      <arglist>(TernaryForEachVoxelIfBody_2Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::TernaryForEachVoxelIfBody_Const</name>
    <filename>structmirtk_1_1TernaryForEachVoxelIfBody__Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>af9311ffacc74aea904d4fd89efb3907e</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a28c4f8ce8743cd6ae39abe08768a4058</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a85ef70ade785c7b066ea91bfed7b23be</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>ad9ff296123f810c74e9fd084652830ac</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TernaryForEachVoxelIfBody_Const</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a981fa62d035e38be04f19bda005ac797</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, const GenericImage&lt; T2 &gt; &amp;im2, const GenericImage&lt; T3 &gt; &amp;im3, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TernaryForEachVoxelIfBody_Const</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>aa03d092a5318eb315bda4156cc4b46d6</anchor>
      <arglist>(const TernaryForEachVoxelIfBody_Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TernaryForEachVoxelIfBody_Const</name>
      <anchorfile>structmirtk_1_1TernaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a5ec55a6478e0edad5fda75893c290332</anchor>
      <arglist>(TernaryForEachVoxelIfBody_Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::TetrahedralVolumeParameterizer</name>
    <filename>classmirtk_1_1TetrahedralVolumeParameterizer.html</filename>
    <base>mirtk::VolumeParameterizer</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1TetrahedralVolumeParameterizer.html</anchorfile>
      <anchor>a52d10c1a7b1d9d09046323605ab10974</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>Parameterize</name>
      <anchorfile>classmirtk_1_1VolumeParameterizer.html</anchorfile>
      <anchor>a6c8192d8fe9a4f3f2c8f2ececb47ce13</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::TopologyPreservationConstraint</name>
    <filename>classmirtk_1_1TopologyPreservationConstraint.html</filename>
    <base>mirtk::TransformationConstraint</base>
    <member kind="function">
      <type></type>
      <name>TopologyPreservationConstraint</name>
      <anchorfile>classmirtk_1_1TopologyPreservationConstraint.html</anchorfile>
      <anchor>abf5e7605aeb7bb1a8f150b9d3948b314</anchor>
      <arglist>(const char *=&quot;&quot;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1TopologyPreservationConstraint.html</anchorfile>
      <anchor>a9cf8be0f1123f44995c5458cfe983522</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>EvaluateGradient</name>
      <anchorfile>classmirtk_1_1TopologyPreservationConstraint.html</anchorfile>
      <anchor>a5e0616c14907d7ab3e3befc2fdc749d0</anchor>
      <arglist>(double *, double, double)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::Transformation</name>
    <filename>classmirtk_1_1Transformation.html</filename>
    <base>mirtk::Observable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GlobalInverse</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>af83471994b0c4e3cb02ad414ab3b8791</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GlobalJacobian</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>ab95c479fe37f2a7ecfa1f3dfa6566081</anchor>
      <arglist>(Matrix &amp;, double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>GlobalTransform</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a99644584c048330ca0d2625051f51979</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=-1) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Inverse</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a6175fdd22fed457595af1b64a4f6cc03</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Jacobian</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>a19574fc823c7e27fb60d3cc11858d540</anchor>
      <arglist>(Matrix &amp;, double, double, double, double=0, double=-1) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>abad66141143c429b876336b65fae3e07</anchor>
      <arglist>(Indent=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Transform</name>
      <anchorfile>classmirtk_1_1Transformation.html</anchorfile>
      <anchor>aea74363048689ca71c61982b8bf649e1</anchor>
      <arglist>(double &amp;, double &amp;, double &amp;, double=0, double=-1) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::TransformationApproximationError</name>
    <filename>classmirtk_1_1TransformationApproximationError.html</filename>
    <base>mirtk::ObjectiveFunction</base>
    <member kind="function">
      <type>void</type>
      <name>CenterPoints</name>
      <anchorfile>classmirtk_1_1TransformationApproximationError.html</anchorfile>
      <anchor>af698b4c166ebfd2efc3b05aa1412eb99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1TransformationApproximationError.html</anchorfile>
      <anchor>afac2ac7f5b93241a5ac665c186f31c72</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1TransformationApproximationError.html</anchorfile>
      <anchor>a40dfc85452aff6825b1b250b17723549</anchor>
      <arglist>(double *x) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Gradient</name>
      <anchorfile>classmirtk_1_1TransformationApproximationError.html</anchorfile>
      <anchor>a7c27f5a7e0d5d852287fefaa6aa2408d</anchor>
      <arglist>(double *dx, double step=.0, bool *sgn_chg=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>GradientNorm</name>
      <anchorfile>classmirtk_1_1TransformationApproximationError.html</anchorfile>
      <anchor>a5f8bb6a7b40e0fd4f0c2097fddf0cb9e</anchor>
      <arglist>(const double *dx) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumberOfDOFs</name>
      <anchorfile>classmirtk_1_1TransformationApproximationError.html</anchorfile>
      <anchor>a61c3e5693e1c89f0c72f1a04c4536c0d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1TransformationApproximationError.html</anchorfile>
      <anchor>ada73494e911555ca229fcbdfa0ef22f9</anchor>
      <arglist>(const double *x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Step</name>
      <anchorfile>classmirtk_1_1TransformationApproximationError.html</anchorfile>
      <anchor>a75a490d52e1d9f70db9aec7a9afa33a3</anchor>
      <arglist>(double *dx)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TransformationApproximationError</name>
      <anchorfile>classmirtk_1_1TransformationApproximationError.html</anchorfile>
      <anchor>aae5116a6e39916c820eb0e6b60766840</anchor>
      <arglist>(class Transformation *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Update</name>
      <anchorfile>classmirtk_1_1TransformationApproximationError.html</anchorfile>
      <anchor>aa113cbe5465e50c29d2a72dcb4d757e5</anchor>
      <arglist>(bool gradient=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Value</name>
      <anchorfile>classmirtk_1_1TransformationApproximationError.html</anchorfile>
      <anchor>a232eb8a778ba64ab7e031a6fa9fb9751</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TransformationApproximationError</name>
      <anchorfile>classmirtk_1_1TransformationApproximationError.html</anchorfile>
      <anchor>a823ee46740a470d73ccc8248e18f91c3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::TransformationConstraint</name>
    <filename>classmirtk_1_1TransformationConstraint.html</filename>
    <base>mirtk::EnergyTerm</base>
  </compound>
  <compound kind="class">
    <name>mirtk::TransformationJacobian</name>
    <filename>classmirtk_1_1TransformationJacobian.html</filename>
    <base>mirtk::Object</base>
    <member kind="function">
      <type>TransformationJacobian &amp;</type>
      <name>add</name>
      <anchorfile>classmirtk_1_1TransformationJacobian.html</anchorfile>
      <anchor>aa029581fd37637e248f4aecb1232fea8</anchor>
      <arglist>(const TransformationJacobian &amp;, double)</arglist>
    </member>
    <member kind="function">
      <type>ColumnIterator</type>
      <name>Begin</name>
      <anchorfile>classmirtk_1_1TransformationJacobian.html</anchorfile>
      <anchor>a97429541d217b1314ae4f8c8c015bbe6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstColumnIterator</type>
      <name>Begin</name>
      <anchorfile>classmirtk_1_1TransformationJacobian.html</anchorfile>
      <anchor>a049d2a2f6bf0b8b4661a500e9d2f8bc0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classmirtk_1_1TransformationJacobian.html</anchorfile>
      <anchor>a3a6323c7f2a015a6ad6c86b6cea9c41e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ColumnType &amp;</type>
      <name>Column</name>
      <anchorfile>classmirtk_1_1TransformationJacobian.html</anchorfile>
      <anchor>aa2bbfbebd4e2261a582167d53cd9d8a9</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ColumnIndex</name>
      <anchorfile>classmirtk_1_1TransformationJacobian.html</anchorfile>
      <anchor>a1c5818af39f378bf4a6f330f1aff39a4</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>ColumnType &amp;</type>
      <name>ColumnVector</name>
      <anchorfile>classmirtk_1_1TransformationJacobian.html</anchorfile>
      <anchor>a9568d35ff59fa4dfe31e9f136a23b9dd</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const ColumnType &amp;</type>
      <name>ColumnVector</name>
      <anchorfile>classmirtk_1_1TransformationJacobian.html</anchorfile>
      <anchor>abeb8d23ba90742b89bc1cef83f56434e</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>ColumnIterator</type>
      <name>End</name>
      <anchorfile>classmirtk_1_1TransformationJacobian.html</anchorfile>
      <anchor>ac1e7165f9a9ec557c578d71a066c2c1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstColumnIterator</type>
      <name>End</name>
      <anchorfile>classmirtk_1_1TransformationJacobian.html</anchorfile>
      <anchor>ab1b2daaa56c8fa49e5c2dcd714657ab5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ColumnIterator</type>
      <name>Find</name>
      <anchorfile>classmirtk_1_1TransformationJacobian.html</anchorfile>
      <anchor>a1c6ce43fc91f2cef7b9b11cb94777620</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>ConstColumnIterator</type>
      <name>Find</name>
      <anchorfile>classmirtk_1_1TransformationJacobian.html</anchorfile>
      <anchor>aa3be4063aee5e004bae2b0369033d648</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>ColumnIterator</type>
      <name>GetNonZeroColumn</name>
      <anchorfile>classmirtk_1_1TransformationJacobian.html</anchorfile>
      <anchor>ab356eddfcf8d20d4ca761b718804a05e</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>ConstColumnIterator</type>
      <name>GetNonZeroColumn</name>
      <anchorfile>classmirtk_1_1TransformationJacobian.html</anchorfile>
      <anchor>a89d2181eb4a063dec0a2b4df4a45c8f3</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfNonZeroColumns</name>
      <anchorfile>classmirtk_1_1TransformationJacobian.html</anchorfile>
      <anchor>a7ac67d5afa773f00d1ee0bc3b1183897</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ColumnType &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1TransformationJacobian.html</anchorfile>
      <anchor>a437dc61e1233480d8a78c38e20f66f3f</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>TransformationJacobian &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1TransformationJacobian.html</anchorfile>
      <anchor>a876abce32c5ca8367d2bb1782ca6109e</anchor>
      <arglist>(const double)</arglist>
    </member>
    <member kind="function">
      <type>TransformationJacobian &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1TransformationJacobian.html</anchorfile>
      <anchor>a57bb64686116b726c8ec8d9b3a351ec2</anchor>
      <arglist>(const Matrix &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TransformationJacobian &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1TransformationJacobian.html</anchorfile>
      <anchor>ac4254927f065ca51c42bb5f89cee21f9</anchor>
      <arglist>(const TransformationJacobian &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ColumnType &amp;</type>
      <name>operator[]</name>
      <anchorfile>classmirtk_1_1TransformationJacobian.html</anchorfile>
      <anchor>ac84fd94aa0f4cbbb29daf71e0fdf938a</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const ColumnType &amp;</type>
      <name>operator[]</name>
      <anchorfile>classmirtk_1_1TransformationJacobian.html</anchorfile>
      <anchor>a409319b3164d7f5514c7e9fe1f63e6c7</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TransformationJacobian</name>
      <anchorfile>classmirtk_1_1TransformationJacobian.html</anchorfile>
      <anchor>a4f51bb0d1e74f6e2a59df44346e2d39b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TransformationJacobian</name>
      <anchorfile>classmirtk_1_1TransformationJacobian.html</anchorfile>
      <anchor>abf26071cb2a8d8f9ff288fc16fdd698d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseMatrixType</type>
      <name>_Columns</name>
      <anchorfile>classmirtk_1_1TransformationJacobian.html</anchorfile>
      <anchor>ac9fe57cc88dc26a127cb9a30460deb8c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::Triangle</name>
    <filename>classmirtk_1_1Triangle.html</filename>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>DistanceBetweenTriangles</name>
      <anchorfile>classmirtk_1_1Triangle.html</anchorfile>
      <anchor>ae2a60495e995cd5dbf392371249a5375</anchor>
      <arglist>(double a1[3], double b1[3], double c1[3], double n1[3], double a2[3], double b2[3], double c2[3], double n2[3], double *p1, double *p2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>DistanceBetweenTriangles</name>
      <anchorfile>classmirtk_1_1Triangle.html</anchorfile>
      <anchor>a26bc92a99564e4db20335c8b43109b92</anchor>
      <arglist>(const double a1[3], const double b1[3], const double c1[3], const double n1[3], const double a2[3], const double b2[3], const double c2[3], const double n2[3], double *p1, double *p2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>DistanceBetweenTriangles</name>
      <anchorfile>classmirtk_1_1Triangle.html</anchorfile>
      <anchor>a329fe0c45d3e2e8d8e797510c7c0891b</anchor>
      <arglist>(const double a1[3], const double b1[3], const double c1[3], const double a2[3], const double b2[3], const double c2[3], double *p1, double *p2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>TriangleTriangleIntersection</name>
      <anchorfile>classmirtk_1_1Triangle.html</anchorfile>
      <anchor>a82cd0ceafa93a0def8905c7fc26a8705</anchor>
      <arglist>(const double a1[3], const double b1[3], const double c1[3], const double a2[3], const double b2[3], const double c2[3])</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::UnaryForEachVoxelBody</name>
    <filename>structmirtk_1_1UnaryForEachVoxelBody.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1UnaryForEachVoxelBody.html</anchorfile>
      <anchor>a2a8708997e71413c8a24a7e237a103cc</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1UnaryForEachVoxelBody.html</anchorfile>
      <anchor>a0653aeb581c821a870c812d1ccb8cce5</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1UnaryForEachVoxelBody.html</anchorfile>
      <anchor>a542e72be0eec28c30347a5872367a73f</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1UnaryForEachVoxelBody.html</anchorfile>
      <anchor>a0b3ccab8228a6cbc6b56e1ddecc1de37</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnaryForEachVoxelBody</name>
      <anchorfile>structmirtk_1_1UnaryForEachVoxelBody.html</anchorfile>
      <anchor>af6fcd9fd5a0f726232ad1f59ea81e3c1</anchor>
      <arglist>(GenericImage&lt; T1 &gt; &amp;im1, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnaryForEachVoxelBody</name>
      <anchorfile>structmirtk_1_1UnaryForEachVoxelBody.html</anchorfile>
      <anchor>ac81739762f262e57ad498008fa431c24</anchor>
      <arglist>(const UnaryForEachVoxelBody &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnaryForEachVoxelBody</name>
      <anchorfile>structmirtk_1_1UnaryForEachVoxelBody.html</anchorfile>
      <anchor>a9888dc9d5f4279b8d7622d002535ef70</anchor>
      <arglist>(UnaryForEachVoxelBody &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::UnaryForEachVoxelBody_Const</name>
    <filename>structmirtk_1_1UnaryForEachVoxelBody__Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1UnaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>af5873720c1ffde0d096f80b8873551fa</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1UnaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>afe12ddd0fef822e226b482d99611e243</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1UnaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a13687be9435d6384b239b9ece7e9d4b4</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1UnaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a9ca245dd4db489c9ed148f6a7bb9ec12</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnaryForEachVoxelBody_Const</name>
      <anchorfile>structmirtk_1_1UnaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>ac3c3549e79647fb86b5a9288cdcfa874</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, VoxelFunc &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnaryForEachVoxelBody_Const</name>
      <anchorfile>structmirtk_1_1UnaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a58696611b9e2d70b6d576190eff2648b</anchor>
      <arglist>(const UnaryForEachVoxelBody_Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnaryForEachVoxelBody_Const</name>
      <anchorfile>structmirtk_1_1UnaryForEachVoxelBody__Const.html</anchorfile>
      <anchor>a7af7e04f2be78599571fc633c1111247</anchor>
      <arglist>(UnaryForEachVoxelBody_Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::UnaryForEachVoxelIfBody</name>
    <filename>structmirtk_1_1UnaryForEachVoxelIfBody.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1UnaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a2c4355680c9f71d425ed4754c475bc01</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1UnaryForEachVoxelIfBody.html</anchorfile>
      <anchor>abe2847463122276aceca076ef9d55d4f</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1UnaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a7b38ab0381dc1f98bcf6740a3a480c3d</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1UnaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a692d8aa29d9504243bbfd6ddf5679e2c</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnaryForEachVoxelIfBody</name>
      <anchorfile>structmirtk_1_1UnaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a73c6066d9038c86a1ff318733cbb84c9</anchor>
      <arglist>(GenericImage&lt; T1 &gt; &amp;im1, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnaryForEachVoxelIfBody</name>
      <anchorfile>structmirtk_1_1UnaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a05ad948a340370e05eecc55e0ed04a62</anchor>
      <arglist>(const UnaryForEachVoxelIfBody &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnaryForEachVoxelIfBody</name>
      <anchorfile>structmirtk_1_1UnaryForEachVoxelIfBody.html</anchorfile>
      <anchor>a206d1c4920b4f38849294bd3881e41bf</anchor>
      <arglist>(UnaryForEachVoxelIfBody &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::UnaryForEachVoxelIfBody_Const</name>
    <filename>structmirtk_1_1UnaryForEachVoxelIfBody__Const.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ForEachVoxelIfBody</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1UnaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a8f1a0077068c893c4188f4c65f350879</anchor>
      <arglist>(const ImageAttributes &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1UnaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a91ff54ff5907089acfbf6f308fa6df26</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1UnaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>ad750906ca87c2aaa29b103584fff597c</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1UnaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>abdbc0be8affa40644fa30dcf119c7a36</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnaryForEachVoxelIfBody_Const</name>
      <anchorfile>structmirtk_1_1UnaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a712ce2e8449dcdb4c0742690a09485cf</anchor>
      <arglist>(const GenericImage&lt; T1 &gt; &amp;im1, VoxelFunc &amp;vf, OutsideFunc &amp;of)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnaryForEachVoxelIfBody_Const</name>
      <anchorfile>structmirtk_1_1UnaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a2eb60ad7672b52b18c2d9405d144d812</anchor>
      <arglist>(const UnaryForEachVoxelIfBody_Const &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnaryForEachVoxelIfBody_Const</name>
      <anchorfile>structmirtk_1_1UnaryForEachVoxelIfBody__Const.html</anchorfile>
      <anchor>a9e6f528a851a3b31aa0dfaa5184dcb6a</anchor>
      <arglist>(UnaryForEachVoxelIfBody_Const &amp;o, split s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::Vector</name>
    <filename>classmirtk_1_1Vector.html</filename>
    <base>mirtk::Object</base>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a7b64a76026480e8a977c96d98d76cd21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>CrossProduct</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>ab43d015fb514fb837a4706165137727b</anchor>
      <arglist>(const Vector &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>DotProduct</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a56da0a15b3770c08d565e64527f49eb6</anchor>
      <arglist>(const Vector &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a31c9de6f243e844c49a6d15607e2b182</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a73f48fee37c5d445ec219909e37a94de</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a0cafc6faaf0d84294ec134e335fad347</anchor>
      <arglist>(int, double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a262090af37155824acd8a50cb426c082</anchor>
      <arglist>(int, double *)</arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>Inverse</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a8e9ee5b7cba97593ff525e2798246456</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Norm</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>ad3a9fd0a8a2a526408c8db9fa2d915cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>Normalize</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a7acbf3584b2264021fe2b44d097e20f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a4ac89310781a188a61374c743a8abdc0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a836accc58a49853f4266295bd257ae67</anchor>
      <arglist>(const Vector &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a00439ae849e76b1aae47886eb98cb39c</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>ad29e3f000eb7a275e5c62f773cc913cc</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a10f3577780503638c36fb59247778a55</anchor>
      <arglist>(double) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>operator*</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a7b4197fdb2909bd8f19ae478ad27dfee</anchor>
      <arglist>(const Vector &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a7a487e4f63e5b59e3c7331a68723d051</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>afca1b87fc20f9fc041670ab8dc06ca7a</anchor>
      <arglist>(const Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>operator+</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a31116a14bb357ac45263ade8d64146e4</anchor>
      <arglist>(double) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>operator+</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a5f0f87796f18bfd4624e2c6c08b1febb</anchor>
      <arglist>(const Vector &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a0031ec2451fdffc57ab99946ed1f8778</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a5d6ea342201073971993a04f0d4f7ada</anchor>
      <arglist>(const Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>operator-</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>ae174bdaf9c94410a7825bbd6d0286907</anchor>
      <arglist>(double) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>operator-</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>aec50904f8a18265b05d9a0b406cf226e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>operator-</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>ab489887956758eb27959f908c5fe1834</anchor>
      <arglist>(const Vector &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a924eda4b66246ed5478a6f76813aa592</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a646970f68d0996a2af9e41da5c0efc72</anchor>
      <arglist>(const Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>operator/</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a2c676a98a97245a2f0e4969622e173da</anchor>
      <arglist>(double) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>operator/</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a2a2eaa4d19f6f94f814c7c3c57e2634c</anchor>
      <arglist>(const Vector &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a9787ac6056031fd7ddd68d68acb61ab7</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a4396692388cbbde2fcab9ea9a579b943</anchor>
      <arglist>(const Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a9b5a6e19aa2a6713798eee67c498aff3</anchor>
      <arglist>(const Vector &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>aafc84cdb7f46423250eb8f64f382dd29</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>ad770af6ed1286aad05ef46d9180a6814</anchor>
      <arglist>(const Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>ab712af0e3b751eb25bcc8b0251db01b3</anchor>
      <arglist>(const Vector &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Permute</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a90023cd9494830d87296cbffbc0019f0</anchor>
      <arglist>(const Array&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PermuteRows</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a559594ad5994ecc3168b12ce046b6dd9</anchor>
      <arglist>(Array&lt; int &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a272cc0d74fcd281651b7b54168a672fe</anchor>
      <arglist>(Indent=0) const </arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>abd0527b31f1b39f71cc69a6245ea3f58</anchor>
      <arglist>(const Vector3D&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>ae563046f0202568abc24eb9bdca4164f</anchor>
      <arglist>(const Vector4D&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Put</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a34fe9b54168082e203f45181763f6e6a</anchor>
      <arglist>(int, double)</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>RawPointer</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a7f11d08f1123e77223fcdec4ca34efe3</anchor>
      <arglist>(int r=0)</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>RawPointer</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>aab10a4620576b27159f4cb971972aeb2</anchor>
      <arglist>(int r=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Read</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>abfc5cb53c638dc9025d795f8251b2cc9</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Resize</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>ad0dbc92428ca56bb5729f2bed539559b</anchor>
      <arglist>(int, double=.0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Rows</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>aad7e85296069530e7f1b23a0ccea479c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ScalarProduct</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a1dac95412f2d7eae5e910f1852af2d80</anchor>
      <arglist>(const Vector &amp;) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a9780b27c351ae051d803f374b9a3cb75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a9fdb1f239c9ae954090237f552b5a147</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a3e197933a62e48ddccbe587cec897d2a</anchor>
      <arglist>(int, double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a39fa2d5c445af6808d26ca4be388cc71</anchor>
      <arglist>(int, double *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a49d39649ebb2d23cade103b307239751</anchor>
      <arglist>(const Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a058420d1d6cfec2dc56027350c1b0177</anchor>
      <arglist>(const Vector3D&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a96af007e6d6e63cfeac7458fc98a5b23</anchor>
      <arglist>(const Vector4D&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a39f3f4d94cb67898296175d5a7702d70</anchor>
      <arglist>(const char *) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WriteMAT</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a810c6ab48ae22566471750b0f8869c34</anchor>
      <arglist>(const char *, const char *=&quot;A&quot;) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Vector</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a12c94b0f55bd8d79ef4b04cc90964373</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_rows</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a88f1245e27ebb6e92889d2d9285f9938</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>_vector</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>adee60dea6f11855fad16d7b686576d15</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a0edd5c61d73c078c2a97dc644d6d882f</anchor>
      <arglist>(ostream &amp;, const Vector &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend Cofstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a01aa0dfae58a0e105ca0db66fab890d9</anchor>
      <arglist>(Cofstream &amp;, const Vector &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a2f3bba64d9d7479a0ef7f2db7b774cd1</anchor>
      <arglist>(istream &amp;, Vector &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend Cifstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classmirtk_1_1Vector.html</anchorfile>
      <anchor>a4b8b3c5ca113ff2582c9efe48e0c09b3</anchor>
      <arglist>(Cifstream &amp;, Vector &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::Vector3</name>
    <filename>classmirtk_1_1Vector3.html</filename>
    <member kind="function">
      <type>double</type>
      <name>Unitize</name>
      <anchorfile>classmirtk_1_1Vector3.html</anchorfile>
      <anchor>af981ab6fa19ecec93fe25bd43f57c9d8</anchor>
      <arglist>(double fTolerance=1e-06)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::Vector3D</name>
    <filename>structmirtk_1_1Vector3D.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type>Vector3D</type>
      <name>CrossProduct</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a418657904920186229d27f1f72ba2720</anchor>
      <arglist>(const Vector3D &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>DotProduct</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a3a0fb023766e70f34c5109bc7aa4b4f5</anchor>
      <arglist>(const Vector3D &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Length</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a4a332bdb2e0a715b5651c7f064778f77</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Normalize</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a1c409fcc631a62f029fb156ae63a3ebe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>ab339cffd804ef4e9f319643f3c2bdc6a</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a1b971b9469cae161abcb2a5443cd446e</anchor>
      <arglist>(double) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>aa6143b04906213767a920606f609c379</anchor>
      <arglist>(const Vector3D&lt; T2 &gt; &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a322624774edf96aaff5a64e934a9703b</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a93c6fa4a7333bd802cbe83f13dccc6de</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>operator*</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>ac8e58f49282087793c9e5cfc501c5b2b</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>operator*</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>af6d7e6123d6dc145c8743b696e30a56a</anchor>
      <arglist>(double) const </arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>operator*</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a68a760372619f807d1836e78841bf748</anchor>
      <arglist>(const Vector3D&lt; T2 &gt; &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator*=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a6e2f848c913dbed986aaa36776fa22a1</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator*=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a2f7a935deb21348919ba4ac49067dbec</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator*=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a305d968e61c350a86a72ee956a18c7f2</anchor>
      <arglist>(const Vector3D&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>operator+</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>ad2a520963c6c7ecc3e0c9f40cb2f1f6d</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>operator+</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a999df1f86e2526311a4e606cb68b2132</anchor>
      <arglist>(double) const </arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>operator+</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a69c053e1ea03d82465b5274bd6af5da0</anchor>
      <arglist>(const Vector3D&lt; T2 &gt; &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator+=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a50d7b0a144f47db552935804049be7cb</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator+=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a0e8bc0dc35bfef64101588c35b4251e0</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator+=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>ac24da72d6005aa446bb3825f246c4a26</anchor>
      <arglist>(const Vector3D&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>operator-</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a68e27058d94b961e3c8530bdbf4e8279</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>operator-</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a1c75c5ff47766b65341fcdc4918279d0</anchor>
      <arglist>(double) const </arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>operator-</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a6e99f5bd917dc5508c99a706bb13ef6a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>operator-</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a5e73791bd1d066f177068ad4ea9e5dd6</anchor>
      <arglist>(const Vector3D&lt; T2 &gt; &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator-=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a9b7c42177197e0b495bc00ca1ef19aab</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator-=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a194a05cbca7207d0969b604838864104</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator-=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a0fcb19e18939c8a7801710640ef66598</anchor>
      <arglist>(const Vector3D&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>operator/</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a84bdef53585a48102348279f9dd8a76c</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>operator/</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>aaf8c24d2eb30a53ec04239e6614a4b60</anchor>
      <arglist>(double) const </arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>operator/</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a90ebb1707ac790566f8004631993b2c2</anchor>
      <arglist>(const Vector3D&lt; T2 &gt; &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator/=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>aa68defc3e8a6de5156f4f7189d1ecd34</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator/=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a6dad592b82f289306ed59361da206537</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator/=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a629441e86d4061ecb5a2026989c93993</anchor>
      <arglist>(const Vector3D&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>ac3ca88d3d430c55f6c87c30d5da0efa8</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a7fb991001b07729a254845cf4fd7675e</anchor>
      <arglist>(double) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>aab7375ea67febc4d135e1050210815c3</anchor>
      <arglist>(const Vector3D&lt; T2 &gt; &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a57eef6de33b35340866b8221b729c6de</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>ab60d79ed8c64a35a02d57e312a90609f</anchor>
      <arglist>(double) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a5470e8b9527ad6a8cc76bc584a49ea86</anchor>
      <arglist>(const Vector3D&lt; T2 &gt; &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a192141fa87c6067e5623b0aa9543ff96</anchor>
      <arglist>(const Vector3D &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a78b78c06ed1f78f06c50249d4e5c695d</anchor>
      <arglist>(const Point &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>ae964bb88747d3e92705f5a026f3bc389</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a2a83b106582921f7f06b1170388f413d</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D &amp;</type>
      <name>operator=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a44a088940b98eb06dda505ba8f3d15a2</anchor>
      <arglist>(const Vector3D&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a1f5de72d370a21b27d8586b02ef6ca62</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>ae2e15d4bc9e6586a7d3b2261d26b7955</anchor>
      <arglist>(double) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>ae761367072ccc84686a35f33246be70d</anchor>
      <arglist>(const Vector3D&lt; T2 &gt; &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a5c3a7aa98ecd6015c4db3cc8091bf5c3</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a237a00bb6758944515f605461fb7a28b</anchor>
      <arglist>(double) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a1b0d0c9ef078ada79370933260722163</anchor>
      <arglist>(const Vector3D&lt; T2 &gt; &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>ae18b5aa41eeeacd1b93eec6e6aeb203f</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a45b1fd1b9761696670cc272b0e199b06</anchor>
      <arglist>(double) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a70cd0ff9995e7918fc71280853bf9e6d</anchor>
      <arglist>(const Vector3D&lt; T2 &gt; &amp;) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector3D</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a55c3c0031b78fe3d8f9c99449df50589</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector3D</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a32560aa4bcb55a9c8d82c84e455fb675</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector3D</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>af5272b93e4a26179be6959dc1f24b921</anchor>
      <arglist>(T, T, T)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector3D</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>af183afa44ddcd410614b2ff519cf982d</anchor>
      <arglist>(const Point &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector3D</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a92575ace55965e1d7c38bd57f931c5aa</anchor>
      <arglist>(const Vector3D&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector3D</type>
      <name>CrossProduct</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>acfdf6520fae5ed7ca2ef91bbfb4b3794</anchor>
      <arglist>(const Vector3D &amp;, const Vector3D &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>DotProduct</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a9b52d40eaa79a82c9faabb67d38658ae</anchor>
      <arglist>(const Vector3D &amp;, const Vector3D &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>Rows</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>aedded55db69128ed10cf47c05833e7f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>_x</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>ad71c6b691b830fa2b51d739eefcaf080</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>_y</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>a6d38e46af4229f6e5af7c4fc1da3ba2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>_z</name>
      <anchorfile>structmirtk_1_1Vector3D.html</anchorfile>
      <anchor>aac59f571106db9c9642e2db5673b4040</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::Vector4D</name>
    <filename>structmirtk_1_1Vector4D.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type>double</type>
      <name>Length</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>af590b7eabc9d3055128eb38713d9d277</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Normalize</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a9e519cd9eea754a1acc672a1a15880b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a86f0a40e4fbb5bf5eacbd17c7a5c38e0</anchor>
      <arglist>(const Vector4D &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>Vector4D</type>
      <name>operator*</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>ae43af4608d846f5685daa70a3f2f4979</anchor>
      <arglist>(S s) const </arglist>
    </member>
    <member kind="function">
      <type>Vector4D &amp;</type>
      <name>operator*=</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>ac1d323b54a6399f598d2e03b90edb4b5</anchor>
      <arglist>(S s)</arglist>
    </member>
    <member kind="function">
      <type>Vector4D &amp;</type>
      <name>operator*=</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a51b14776c159830bd11cdb12d9b1f0bf</anchor>
      <arglist>(const Vector4D &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vector4D</type>
      <name>operator+</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a1342b5838fd082a8e566d976b6c3b40f</anchor>
      <arglist>(S s) const </arglist>
    </member>
    <member kind="function">
      <type>Vector4D</type>
      <name>operator+</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>aa4579fc5d88bc94cf7a3da831731cbb7</anchor>
      <arglist>(const Vector4D &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>Vector4D &amp;</type>
      <name>operator+=</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a53abb880049fe456341be9fa099f3e8c</anchor>
      <arglist>(S s)</arglist>
    </member>
    <member kind="function">
      <type>Vector4D &amp;</type>
      <name>operator+=</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>afbea5576128c21cbd94ae3e65e081ed5</anchor>
      <arglist>(const Vector4D &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vector4D</type>
      <name>operator-</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a78eab63102fd5dda5a6fd078a175b3ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vector4D</type>
      <name>operator-</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a0b90a7a59b51152908c543463e9918d1</anchor>
      <arglist>(S s) const </arglist>
    </member>
    <member kind="function">
      <type>Vector4D</type>
      <name>operator-</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a2e2f47f18b7e1e8f2509a4b1226019dc</anchor>
      <arglist>(const Vector4D &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>Vector4D &amp;</type>
      <name>operator-=</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a94878a053b718b08769e98a63e13faf9</anchor>
      <arglist>(S s)</arglist>
    </member>
    <member kind="function">
      <type>Vector4D &amp;</type>
      <name>operator-=</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>ae6c1ce9af65a1ec07d75d6029cf4a5ee</anchor>
      <arglist>(const Vector4D &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vector4D</type>
      <name>operator/</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a08f0ed0ae451badcaf303b420bac4d40</anchor>
      <arglist>(const Vector4D &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>Vector4D</type>
      <name>operator/</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>aabda00d420161ab966e214ffbef578fd</anchor>
      <arglist>(S s) const </arglist>
    </member>
    <member kind="function">
      <type>Vector4D &amp;</type>
      <name>operator/=</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a85674e3648aa62b5469141e65ff39e74</anchor>
      <arglist>(const Vector4D &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vector4D &amp;</type>
      <name>operator/=</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a75fa101561918f8844bb0b83b5690191</anchor>
      <arglist>(S s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a2d6bb9c5bd285edb346422175a20f4f0</anchor>
      <arglist>(const Vector4D &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a239817477911908bf63744baff0e63e7</anchor>
      <arglist>(const Vector4D &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>Vector4D &amp;</type>
      <name>operator=</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>afbc865ae5233999a7e89dc4de075f4b8</anchor>
      <arglist>(T s)</arglist>
    </member>
    <member kind="function">
      <type>Vector4D &amp;</type>
      <name>operator=</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a29d264e35f994c79e8b1a5c0173605a9</anchor>
      <arglist>(const Vector4D &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a0c110578d98859cb399923b7be8389b4</anchor>
      <arglist>(const Vector4D &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>aa85b1aa2e484513506c9d017398e0300</anchor>
      <arglist>(const Vector4D &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>adaca0333e07b147f1b2ffef123df205c</anchor>
      <arglist>(const Vector4D &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector4D</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a6f8fed7a4345657cf71359150147184a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector4D</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a329f3b1de67d296ade5a827ba7649308</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector4D</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a94b2a8d9d939faff642fd974d55bddfd</anchor>
      <arglist>(T x, T y, T z, T t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector4D</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>ad4b80fefdd95b839277e3c9bea52d7b0</anchor>
      <arglist>(const Vector4D &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>DotProduct</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>ab9c6a079e9c06a0019bb84183891d369</anchor>
      <arglist>(const Vector4D &amp;v1, const Vector4D &amp;v2)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>_t</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a34fbc4663200b93e8118c279e703e94d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>_x</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a73e89ed0c1350fbc289a5afaf3e803da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>_y</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>a0e949bc751ff49daaa7b6397a20c09b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>_z</name>
      <anchorfile>structmirtk_1_1Vector4D.html</anchorfile>
      <anchor>ad5c63ce5bac22b6f056edcc0562c4215</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::VelocityToDisplacementField</name>
    <filename>classmirtk_1_1VelocityToDisplacementField.html</filename>
    <templarg></templarg>
    <base>mirtk::ImageToImage</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Input</name>
      <anchorfile>classmirtk_1_1VelocityToDisplacementField.html</anchorfile>
      <anchor>afa0568e3c82ae1a08c28dc7e3035f6d8</anchor>
      <arglist>(int, const ImageType *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ImageType *</type>
      <name>Input</name>
      <anchorfile>classmirtk_1_1VelocityToDisplacementField.html</anchorfile>
      <anchor>a3efb87a104266d9e06405308c804f7e1</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VelocityToDisplacementField</name>
      <anchorfile>classmirtk_1_1VelocityToDisplacementField.html</anchorfile>
      <anchor>a03c1a7202ccf1b6d47c726a47f40e6d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Finalize</name>
      <anchorfile>classmirtk_1_1VelocityToDisplacementField.html</anchorfile>
      <anchor>abb33f1573ab69afc3c12af31175cc0d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1VelocityToDisplacementField.html</anchorfile>
      <anchor>ae07e3ed548871410747bcbedcdb04f8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>VelocityToDisplacementField</name>
      <anchorfile>classmirtk_1_1VelocityToDisplacementField.html</anchorfile>
      <anchor>ad5f1241e87d96756709002632a4d768b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ImageType *</type>
      <name>_InputDisplacementField</name>
      <anchorfile>classmirtk_1_1VelocityToDisplacementField.html</anchorfile>
      <anchor>a4030e54979ecc32a8395cb14b9458784</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::VelocityToDisplacementFieldEuler</name>
    <filename>classmirtk_1_1VelocityToDisplacementFieldEuler.html</filename>
    <templarg></templarg>
    <base>mirtk::VelocityToDisplacementField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1VelocityToDisplacementFieldEuler.html</anchorfile>
      <anchor>ad596ff689f226b813e4ca5d6d2593239</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VelocityToDisplacementFieldEuler</name>
      <anchorfile>classmirtk_1_1VelocityToDisplacementFieldEuler.html</anchorfile>
      <anchor>af51a95a1ef8f0debfadeb5e9cc7a6985</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VelocityToDisplacementFieldEuler</name>
      <anchorfile>classmirtk_1_1VelocityToDisplacementFieldEuler.html</anchorfile>
      <anchor>a4b507f1374ae3aeb5d7e6e82757d6b4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1VelocityToDisplacementFieldEuler.html</anchorfile>
      <anchor>a6ebcbf5fa40d78aa6dc1c5905d575758</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>InterpolateImageFunction *</type>
      <name>_VelocityInterpolator</name>
      <anchorfile>classmirtk_1_1VelocityToDisplacementFieldEuler.html</anchorfile>
      <anchor>a3af92d3d4b648b0b1759606bc7cd79cb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::VelocityToDisplacementFieldSS</name>
    <filename>classmirtk_1_1VelocityToDisplacementFieldSS.html</filename>
    <templarg>TVoxel</templarg>
    <base>mirtk::VelocityToDisplacementField</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1VelocityToDisplacementFieldSS.html</anchorfile>
      <anchor>aebf2703708b0f9ff16fd637710502127</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VelocityToDisplacementFieldSS</name>
      <anchorfile>classmirtk_1_1VelocityToDisplacementFieldSS.html</anchorfile>
      <anchor>a722ca27eca8a986024cd4096bbced310</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VelocityToDisplacementFieldSS</name>
      <anchorfile>classmirtk_1_1VelocityToDisplacementFieldSS.html</anchorfile>
      <anchor>a8f6fdbc2288fdbb605b719512ba35838</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Finalize</name>
      <anchorfile>classmirtk_1_1VelocityToDisplacementFieldSS.html</anchorfile>
      <anchor>a11eb61a95b17ea73c102b771fe7074e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1VelocityToDisplacementFieldSS.html</anchorfile>
      <anchor>a67b1d3a505a898c7dfe540050f020a5f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::Version</name>
    <filename>classmirtk_1_1Version.html</filename>
    <base>mirtk::Object</base>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classmirtk_1_1Version.html</anchorfile>
      <anchor>a49819f1668a635c36487f5602203e6fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classmirtk_1_1Version.html</anchorfile>
      <anchor>a515f61170b4950c381d48b30f6d38d31</anchor>
      <arglist>(const Version &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classmirtk_1_1Version.html</anchorfile>
      <anchor>adfc16deec5b0aaa88134f723ff1effd2</anchor>
      <arglist>(const Version &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classmirtk_1_1Version.html</anchorfile>
      <anchor>a6059469989c0857c11c8cbc0aeae1948</anchor>
      <arglist>(const Version &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Version &amp;</type>
      <name>operator=</name>
      <anchorfile>classmirtk_1_1Version.html</anchorfile>
      <anchor>af6cf15926ee9d596a4ba37a47daccf63</anchor>
      <arglist>(const Version &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmirtk_1_1Version.html</anchorfile>
      <anchor>a410186880aa39be0db5bae06bb8b197f</anchor>
      <arglist>(const Version &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classmirtk_1_1Version.html</anchorfile>
      <anchor>a13ced6202b8f18754ead74d04b31a9de</anchor>
      <arglist>(const Version &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classmirtk_1_1Version.html</anchorfile>
      <anchor>afd418cdc894b828921cdd6f9743ce249</anchor>
      <arglist>(const Version &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>ToString</name>
      <anchorfile>classmirtk_1_1Version.html</anchorfile>
      <anchor>a124f6781c3afaba277913fc0628801fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Version</name>
      <anchorfile>classmirtk_1_1Version.html</anchorfile>
      <anchor>a5d82b6da925b02adb5cc8d3df96c7fba</anchor>
      <arglist>(unsigned int major=0u, unsigned int minor=0u, unsigned int patch=0u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Version</name>
      <anchorfile>classmirtk_1_1Version.html</anchorfile>
      <anchor>a928757bbda7d0697dd44d3b1837b609e</anchor>
      <arglist>(int major, int minor=0, int patch=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Version</name>
      <anchorfile>classmirtk_1_1Version.html</anchorfile>
      <anchor>a0179ebf30bcc07360ae3db6750d27cdc</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Version</name>
      <anchorfile>classmirtk_1_1Version.html</anchorfile>
      <anchor>af509c3c10f3c0caaa02e7a9c33982058</anchor>
      <arglist>(const Version &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::VolumeParameterizer</name>
    <filename>classmirtk_1_1VolumeParameterizer.html</filename>
    <base>mirtk::Object</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1VolumeParameterizer.html</anchorfile>
      <anchor>ac49c01418ea1e4dbcca91e144a36f9b7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::VolumePreservationConstraint</name>
    <filename>classmirtk_1_1VolumePreservationConstraint.html</filename>
    <base>mirtk::LogJacobianConstraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Jacobian</name>
      <anchorfile>classmirtk_1_1VolumePreservationConstraint.html</anchorfile>
      <anchor>a4bcfd8a1053f30d762175a59f2a0abf2</anchor>
      <arglist>(const FreeFormTransformation *ffd, double x, double y, double z, double t, Matrix &amp;adj) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VolumePreservationConstraint</name>
      <anchorfile>classmirtk_1_1VolumePreservationConstraint.html</anchorfile>
      <anchor>a4c226e363d1034f7a69f073da8d0219c</anchor>
      <arglist>(const char *name=&quot;&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VolumePreservationConstraint</name>
      <anchorfile>classmirtk_1_1VolumePreservationConstraint.html</anchorfile>
      <anchor>a0ed111bf205eb47339ffaec26c635039</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::VolumetricMap</name>
    <filename>classmirtk_1_1VolumetricMap.html</filename>
    <base>mirtk::Object</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>BoundingBox</name>
      <anchorfile>classmirtk_1_1VolumetricMap.html</anchorfile>
      <anchor>a6a780be9d373d2f659e2a39be99d3940</anchor>
      <arglist>(double &amp;x1, double &amp;y1, double &amp;z1, double &amp;x2, double &amp;y2, double &amp;z2) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Initialize</name>
      <anchorfile>classmirtk_1_1VolumetricMap.html</anchorfile>
      <anchor>a2dbc357765c1a80f074ed1062d732a71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>NumberOfComponents</name>
      <anchorfile>classmirtk_1_1VolumetricMap.html</anchorfile>
      <anchor>ae95f156da8bc5ba20532019169447ea3</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::VoxelCaster</name>
    <filename>structmirtk_1_1VoxelCaster.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static TOut</type>
      <name>Convert</name>
      <anchorfile>structmirtk_1_1VoxelCaster.html</anchorfile>
      <anchor>abdd8cf3bedf6d65f74a44b717e939584</anchor>
      <arglist>(const TIn &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::VoxelFunction</name>
    <filename>structmirtk_1_1VoxelFunction.html</filename>
  </compound>
  <compound kind="struct">
    <name>mirtk::VoxelReduction</name>
    <filename>structmirtk_1_1VoxelReduction.html</filename>
    <base>mirtk::VoxelFunction</base>
    <member kind="function">
      <type>void</type>
      <name>join</name>
      <anchorfile>structmirtk_1_1VoxelReduction.html</anchorfile>
      <anchor>ad6b6eaabaa8f3cf4d2dd6689d64db75c</anchor>
      <arglist>(VoxelFunction &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>split</name>
      <anchorfile>structmirtk_1_1VoxelReduction.html</anchorfile>
      <anchor>a321994f6f54e131772f1fab215cf4ff4</anchor>
      <arglist>(VoxelFunction &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>IsReduction</name>
      <anchorfile>structmirtk_1_1VoxelReduction.html</anchorfile>
      <anchor>a91737a664b29b5dfe74fa3927ed4109e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::BinaryVoxelFunction::Add</name>
    <filename>structmirtk_1_1BinaryVoxelFunction_1_1Add.html</filename>
    <base>mirtk::VoxelFunction</base>
  </compound>
  <compound kind="struct">
    <name>mirtk::BinaryVoxelFunction::ComposeDisplacementFields2D</name>
    <filename>structmirtk_1_1BinaryVoxelFunction_1_1ComposeDisplacementFields2D.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::VoxelFunction</base>
  </compound>
  <compound kind="struct">
    <name>mirtk::BinaryVoxelFunction::ComposeDisplacementFields3D</name>
    <filename>structmirtk_1_1BinaryVoxelFunction_1_1ComposeDisplacementFields3D.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::VoxelFunction</base>
  </compound>
  <compound kind="struct">
    <name>mirtk::BinaryVoxelFunction::Copy</name>
    <filename>structmirtk_1_1BinaryVoxelFunction_1_1Copy.html</filename>
    <base>mirtk::VoxelFunction</base>
  </compound>
  <compound kind="class">
    <name>mirtk::BinaryVoxelFunction::Dilate</name>
    <filename>classmirtk_1_1BinaryVoxelFunction_1_1Dilate.html</filename>
    <base>mirtk::VoxelFunction</base>
  </compound>
  <compound kind="struct">
    <name>mirtk::BinaryVoxelFunction::Div</name>
    <filename>structmirtk_1_1BinaryVoxelFunction_1_1Div.html</filename>
    <base>mirtk::VoxelFunction</base>
  </compound>
  <compound kind="class">
    <name>mirtk::BinaryVoxelFunction::Erode</name>
    <filename>classmirtk_1_1BinaryVoxelFunction_1_1Erode.html</filename>
    <base>mirtk::VoxelFunction</base>
  </compound>
  <compound kind="struct">
    <name>mirtk::BinaryVoxelFunction::Mul</name>
    <filename>structmirtk_1_1BinaryVoxelFunction_1_1Mul.html</filename>
    <base>mirtk::VoxelFunction</base>
  </compound>
  <compound kind="struct">
    <name>mirtk::BinaryVoxelFunction::SSD</name>
    <filename>structmirtk_1_1BinaryVoxelFunction_1_1SSD.html</filename>
    <base>mirtk::VoxelReduction</base>
  </compound>
  <compound kind="struct">
    <name>mirtk::BinaryVoxelFunction::Sub</name>
    <filename>structmirtk_1_1BinaryVoxelFunction_1_1Sub.html</filename>
    <base>mirtk::VoxelFunction</base>
  </compound>
  <compound kind="namespace">
    <name>mirtk::ConvolutionFunction</name>
    <filename>namespacemirtk_1_1ConvolutionFunction.html</filename>
    <class kind="struct">mirtk::ConvolutionFunction::ConvolveExtendedForegroundInT</class>
    <class kind="struct">mirtk::ConvolutionFunction::ConvolveExtendedForegroundInX</class>
    <class kind="struct">mirtk::ConvolutionFunction::ConvolveExtendedForegroundInY</class>
    <class kind="struct">mirtk::ConvolutionFunction::ConvolveExtendedForegroundInZ</class>
    <class kind="struct">mirtk::ConvolutionFunction::ConvolveForegroundInT</class>
    <class kind="struct">mirtk::ConvolutionFunction::ConvolveForegroundInX</class>
    <class kind="struct">mirtk::ConvolutionFunction::ConvolveForegroundInY</class>
    <class kind="struct">mirtk::ConvolutionFunction::ConvolveForegroundInZ</class>
    <class kind="struct">mirtk::ConvolutionFunction::ConvolveInT</class>
    <class kind="struct">mirtk::ConvolutionFunction::ConvolveInX</class>
    <class kind="struct">mirtk::ConvolutionFunction::ConvolveInY</class>
    <class kind="struct">mirtk::ConvolutionFunction::ConvolveInZ</class>
    <class kind="struct">mirtk::ConvolutionFunction::ConvolveMirroredForegroundInT</class>
    <class kind="struct">mirtk::ConvolutionFunction::ConvolveMirroredForegroundInX</class>
    <class kind="struct">mirtk::ConvolutionFunction::ConvolveMirroredForegroundInY</class>
    <class kind="struct">mirtk::ConvolutionFunction::ConvolveMirroredForegroundInZ</class>
    <class kind="struct">mirtk::ConvolutionFunction::ConvolveTruncatedForegroundInT</class>
    <class kind="struct">mirtk::ConvolutionFunction::ConvolveTruncatedForegroundInX</class>
    <class kind="struct">mirtk::ConvolutionFunction::ConvolveTruncatedForegroundInY</class>
    <class kind="struct">mirtk::ConvolutionFunction::ConvolveTruncatedForegroundInZ</class>
    <class kind="struct">mirtk::ConvolutionFunction::ConvolveWeightedImageInT</class>
    <class kind="struct">mirtk::ConvolutionFunction::ConvolveWeightedImageInX</class>
    <class kind="struct">mirtk::ConvolutionFunction::ConvolveWeightedImageInY</class>
    <class kind="struct">mirtk::ConvolutionFunction::ConvolveWeightedImageInZ</class>
    <class kind="struct">mirtk::ConvolutionFunction::DownsampleConvolvedExtendedForegroundInX</class>
    <class kind="struct">mirtk::ConvolutionFunction::DownsampleConvolvedExtendedForegroundInY</class>
    <class kind="struct">mirtk::ConvolutionFunction::DownsampleConvolvedExtendedForegroundInZ</class>
    <class kind="struct">mirtk::ConvolutionFunction::DownsampleConvolvedMirroredForegroundInX</class>
    <class kind="struct">mirtk::ConvolutionFunction::DownsampleConvolvedMirroredForegroundInY</class>
    <class kind="struct">mirtk::ConvolutionFunction::DownsampleConvolvedMirroredForegroundInZ</class>
    <class kind="class">mirtk::ConvolutionFunction::ExtendedForegroundConvolution1D</class>
    <class kind="struct">mirtk::ConvolutionFunction::MirrorBoundaryCondition</class>
    <class kind="class">mirtk::ConvolutionFunction::MirroredForegroundConvolution1D</class>
    <class kind="class">mirtk::ConvolutionFunction::TruncatedForegroundConvolution1D</class>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::ConvolveExtendedForegroundInT</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1ConvolveExtendedForegroundInT.html</filename>
    <templarg></templarg>
    <base>mirtk::ConvolutionFunction::ExtendedForegroundConvolution1D</base>
    <member kind="variable">
      <type>int</type>
      <name>_T</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveExtendedForegroundInT.html</anchorfile>
      <anchor>a7590287f93a94a326fc8c114818efb8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_XYZ</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveExtendedForegroundInT.html</anchorfile>
      <anchor>a29afcb9c9e9effd3391127b49e552c48</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>ConvolveCenterVoxel</name>
      <anchorfile>classmirtk_1_1ConvolutionFunction_1_1ExtendedForegroundConvolution1D.html</anchorfile>
      <anchor>a5d64bd63960ae9cd3241f31f2cc2737f</anchor>
      <arglist>(const T *in, double &amp;acc) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ConvolveLeftNeighbors</name>
      <anchorfile>classmirtk_1_1ConvolutionFunction_1_1ExtendedForegroundConvolution1D.html</anchorfile>
      <anchor>aba4e3109f8dcd4087f53c9f6b10cb0ab</anchor>
      <arglist>(int i, int n, const T *in, int s, double &amp;acc) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ConvolveRightNeighbors</name>
      <anchorfile>classmirtk_1_1ConvolutionFunction_1_1ExtendedForegroundConvolution1D.html</anchorfile>
      <anchor>a8f795dec5cecd673449c049374e7f0f8</anchor>
      <arglist>(int i, int n, const T *in, int s, double &amp;acc) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ExtendedForegroundConvolution1D</name>
      <anchorfile>classmirtk_1_1ConvolutionFunction_1_1ExtendedForegroundConvolution1D.html</anchorfile>
      <anchor>ad03ea5b4e0c084505fd81c86e9f4ab84</anchor>
      <arglist>(const BaseImage *image, const TKernel *kernel, int size, double norm=1.0)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::ConvolveExtendedForegroundInX</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1ConvolveExtendedForegroundInX.html</filename>
    <templarg></templarg>
    <base>mirtk::ConvolutionFunction::ExtendedForegroundConvolution1D</base>
    <member kind="variable">
      <type>int</type>
      <name>_X</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveExtendedForegroundInX.html</anchorfile>
      <anchor>ae3cd543de42bf3925413513c42e0262c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::ConvolveExtendedForegroundInY</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1ConvolveExtendedForegroundInY.html</filename>
    <templarg></templarg>
    <base>mirtk::ConvolutionFunction::ExtendedForegroundConvolution1D</base>
    <member kind="variable">
      <type>int</type>
      <name>_X</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveExtendedForegroundInY.html</anchorfile>
      <anchor>a17df92c160a2b059e9b257a72dd9dfcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Y</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveExtendedForegroundInY.html</anchorfile>
      <anchor>a07b15409ad1b704eeaa63445c985f079</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::ConvolveExtendedForegroundInZ</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1ConvolveExtendedForegroundInZ.html</filename>
    <templarg></templarg>
    <base>mirtk::ConvolutionFunction::ExtendedForegroundConvolution1D</base>
    <member kind="variable">
      <type>int</type>
      <name>_XY</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveExtendedForegroundInZ.html</anchorfile>
      <anchor>ad8df8a3b125cf88fa216c0df52ebb3fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Z</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveExtendedForegroundInZ.html</anchorfile>
      <anchor>ae18fd183a4252217e1ee4785c4b58b5c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::ConvolveForegroundInT</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1ConvolveForegroundInT.html</filename>
    <templarg></templarg>
    <base>mirtk::VoxelFunction</base>
    <member kind="variable">
      <type>const BaseImage *</type>
      <name>_Image</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveForegroundInT.html</anchorfile>
      <anchor>a3949998367a0b818f0650c6ddaf498e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TKernel *</type>
      <name>_Kernel</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveForegroundInT.html</anchorfile>
      <anchor>a0ba564ee92d274bf5f459e4883f37561</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>_Normalize</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveForegroundInT.html</anchorfile>
      <anchor>af6a7e70b921c5dde60bbb2f32a7c9a1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Radius</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveForegroundInT.html</anchorfile>
      <anchor>ac1c02445733217e500f0f8016c2798b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_T</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveForegroundInT.html</anchorfile>
      <anchor>a319d65765571df19d0bb7cbf6f6ea5e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_XYZ</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveForegroundInT.html</anchorfile>
      <anchor>ac4eb6a581b7c43203b69549669cfec74</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::ConvolveForegroundInX</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1ConvolveForegroundInX.html</filename>
    <templarg></templarg>
    <base>mirtk::VoxelFunction</base>
    <member kind="variable">
      <type>const BaseImage *</type>
      <name>_Image</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveForegroundInX.html</anchorfile>
      <anchor>a51cf85a5119989d372e0142a12b9aaa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TKernel *</type>
      <name>_Kernel</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveForegroundInX.html</anchorfile>
      <anchor>a74d146ee558ead411b0a360c11464a51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>_Normalize</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveForegroundInX.html</anchorfile>
      <anchor>a359f7d6fbfd10b33a4a89da4bd4d8adb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Offset</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveForegroundInX.html</anchorfile>
      <anchor>a9b18c7d033527dcaae693f0ab029252a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Radius</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveForegroundInX.html</anchorfile>
      <anchor>aee347c6c0d5b59acce7eab99967ee968</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_X</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveForegroundInX.html</anchorfile>
      <anchor>a4d8c7b7d8ea3f9280735e9445c8c4688</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::ConvolveForegroundInY</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1ConvolveForegroundInY.html</filename>
    <templarg></templarg>
    <base>mirtk::VoxelFunction</base>
    <member kind="variable">
      <type>const BaseImage *</type>
      <name>_Image</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveForegroundInY.html</anchorfile>
      <anchor>a1e40f7ae4e4d84fbcd29456c511d7d5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TKernel *</type>
      <name>_Kernel</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveForegroundInY.html</anchorfile>
      <anchor>a7a6e9f499b626eae9004b38ef11fda89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>_Normalize</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveForegroundInY.html</anchorfile>
      <anchor>a725fe2fda84550c7a3124952a3bad017</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Offset</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveForegroundInY.html</anchorfile>
      <anchor>a0b0ed46d25cbc07de1816c2522a79e59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Radius</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveForegroundInY.html</anchorfile>
      <anchor>a1183f7c700b8df3022a299b800efeafb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_X</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveForegroundInY.html</anchorfile>
      <anchor>aff09cf9fbf6b164237c8ac6406ff0599</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Y</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveForegroundInY.html</anchorfile>
      <anchor>aa48790df99aa0ea5e9c639cf0064f82d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::ConvolveForegroundInZ</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1ConvolveForegroundInZ.html</filename>
    <templarg></templarg>
    <base>mirtk::VoxelFunction</base>
    <member kind="variable">
      <type>const BaseImage *</type>
      <name>_Image</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveForegroundInZ.html</anchorfile>
      <anchor>a3cd24be1ad54d7bdf3497693541c81f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TKernel *</type>
      <name>_Kernel</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveForegroundInZ.html</anchorfile>
      <anchor>ac55a5b9a29de7719e29fd40337c28cee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>_Normalize</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveForegroundInZ.html</anchorfile>
      <anchor>a50f958eb5b38629890ee7312cee9385d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Offset</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveForegroundInZ.html</anchorfile>
      <anchor>a0a635c283d9215f40b7e295336f2b524</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Radius</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveForegroundInZ.html</anchorfile>
      <anchor>a3db7f78eeee39f5e269f1d5bb7da8997</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_XY</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveForegroundInZ.html</anchorfile>
      <anchor>a8d792c6f0e6ce3934cb8b2b69b522117</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Z</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveForegroundInZ.html</anchorfile>
      <anchor>af90a484a66187e9a08ae9673c6e69897</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::ConvolveInT</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1ConvolveInT.html</filename>
    <templarg></templarg>
    <base>mirtk::VoxelFunction</base>
    <member kind="variable">
      <type>const TKernel *</type>
      <name>_Kernel</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveInT.html</anchorfile>
      <anchor>af835ead4fa92f06589ac48d8e0b25a3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>_Normalize</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveInT.html</anchorfile>
      <anchor>a97b211419fa2627833f5354a5f012147</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Radius</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveInT.html</anchorfile>
      <anchor>ac280c7fbc84f029200eee093b0aa0972</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_T</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveInT.html</anchorfile>
      <anchor>a7e3dc925d545ded13aaf650135693a2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_XYZ</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveInT.html</anchorfile>
      <anchor>a5b574e708c3117e86c790f743e882a2e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::ConvolveInX</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1ConvolveInX.html</filename>
    <templarg></templarg>
    <base>mirtk::VoxelFunction</base>
    <member kind="variable">
      <type>const TKernel *</type>
      <name>_Kernel</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveInX.html</anchorfile>
      <anchor>a3b039bba3bd896acdb3552a6b484a554</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>_Normalize</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveInX.html</anchorfile>
      <anchor>a33f9bd32436642ae552725b16f4b5b2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Offset</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveInX.html</anchorfile>
      <anchor>a1bddf8d1190bd51d90fbe982e6a348e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Radius</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveInX.html</anchorfile>
      <anchor>a766d68d12b8989b946273ffcedff1a06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_X</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveInX.html</anchorfile>
      <anchor>a29a24cd0b4492005653e4007d498f73c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::ConvolveInY</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1ConvolveInY.html</filename>
    <templarg></templarg>
    <base>mirtk::VoxelFunction</base>
    <member kind="variable">
      <type>const TKernel *</type>
      <name>_Kernel</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveInY.html</anchorfile>
      <anchor>a0bfe8c261ca006d90e62cbf94dfa40ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>_Normalize</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveInY.html</anchorfile>
      <anchor>ae9e981eb77dd3be111a44d92b3565c97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Offset</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveInY.html</anchorfile>
      <anchor>a89996fa52b3680119438972011c842e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Radius</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveInY.html</anchorfile>
      <anchor>a76c1488419e0e30057b3d6faf03213a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_X</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveInY.html</anchorfile>
      <anchor>ae70e0637c4500029634641d47fe7be2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Y</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveInY.html</anchorfile>
      <anchor>ac80933437aaf13fdcc76930405d2c854</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::ConvolveInZ</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1ConvolveInZ.html</filename>
    <templarg></templarg>
    <base>mirtk::VoxelFunction</base>
    <member kind="variable">
      <type>const TKernel *</type>
      <name>_Kernel</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveInZ.html</anchorfile>
      <anchor>a043c644bbcc07468615b7f43100badf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>_Normalize</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveInZ.html</anchorfile>
      <anchor>a1948407dfb050e27ec56ef5b035502bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Offset</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveInZ.html</anchorfile>
      <anchor>ab7d3101d4f1e5b3453331be53c3b3108</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Radius</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveInZ.html</anchorfile>
      <anchor>a5ad5662cb891a4040ae58ae92a8135c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_XY</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveInZ.html</anchorfile>
      <anchor>a0ff6651472b3744635c404d87181d5bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Z</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveInZ.html</anchorfile>
      <anchor>a8330e8b6dcca4460b83e0fe334deea3c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::ConvolveMirroredForegroundInT</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1ConvolveMirroredForegroundInT.html</filename>
    <templarg></templarg>
    <base>mirtk::ConvolutionFunction::MirroredForegroundConvolution1D</base>
    <member kind="variable">
      <type>int</type>
      <name>_T</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveMirroredForegroundInT.html</anchorfile>
      <anchor>a1577bd4cc22bb06ce160ff1a0b0b9573</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_XYZ</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveMirroredForegroundInT.html</anchorfile>
      <anchor>acc6204dcc125f8386eb7109a009ca68a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>ConvolveCenterVoxel</name>
      <anchorfile>classmirtk_1_1ConvolutionFunction_1_1MirroredForegroundConvolution1D.html</anchorfile>
      <anchor>a16d25eb713f45a60f654562a81436c56</anchor>
      <arglist>(const T *in, double &amp;acc) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ConvolveLeftNeighbors</name>
      <anchorfile>classmirtk_1_1ConvolutionFunction_1_1MirroredForegroundConvolution1D.html</anchorfile>
      <anchor>a020502b1f36f166723d2d7a263902f7a</anchor>
      <arglist>(int i, int n, const T *in, int s, double &amp;acc) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ConvolveRightNeighbors</name>
      <anchorfile>classmirtk_1_1ConvolutionFunction_1_1MirroredForegroundConvolution1D.html</anchorfile>
      <anchor>ae300b9a682cb47624382e087c95865a0</anchor>
      <arglist>(int i, int n, const T *in, int s, double &amp;acc) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MirroredForegroundConvolution1D</name>
      <anchorfile>classmirtk_1_1ConvolutionFunction_1_1MirroredForegroundConvolution1D.html</anchorfile>
      <anchor>adc50f194cfaef2d8acb46e4d63d51529</anchor>
      <arglist>(const BaseImage *image, const TKernel *kernel, int size, double norm=1.0)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::ConvolveMirroredForegroundInX</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1ConvolveMirroredForegroundInX.html</filename>
    <templarg></templarg>
    <base>mirtk::ConvolutionFunction::MirroredForegroundConvolution1D</base>
    <member kind="variable">
      <type>int</type>
      <name>_X</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveMirroredForegroundInX.html</anchorfile>
      <anchor>a0dac90515219a9ef386663dacdf02ca4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::ConvolveMirroredForegroundInY</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1ConvolveMirroredForegroundInY.html</filename>
    <templarg></templarg>
    <base>mirtk::ConvolutionFunction::MirroredForegroundConvolution1D</base>
    <member kind="variable">
      <type>int</type>
      <name>_X</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveMirroredForegroundInY.html</anchorfile>
      <anchor>a969c30a261ba978b1b93f227293d0622</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Y</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveMirroredForegroundInY.html</anchorfile>
      <anchor>a2a7f9feaa2d6d055077d748bff67038b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::ConvolveMirroredForegroundInZ</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1ConvolveMirroredForegroundInZ.html</filename>
    <templarg></templarg>
    <base>mirtk::ConvolutionFunction::MirroredForegroundConvolution1D</base>
    <member kind="variable">
      <type>int</type>
      <name>_XY</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveMirroredForegroundInZ.html</anchorfile>
      <anchor>a15069012523871d77596d433dbbf8e03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Z</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveMirroredForegroundInZ.html</anchorfile>
      <anchor>ad209f96242f907c7c5e2068de83d609b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::ConvolveTruncatedForegroundInT</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1ConvolveTruncatedForegroundInT.html</filename>
    <templarg></templarg>
    <base>mirtk::ConvolutionFunction::TruncatedForegroundConvolution1D</base>
    <member kind="variable">
      <type>int</type>
      <name>_T</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveTruncatedForegroundInT.html</anchorfile>
      <anchor>a665106b29dddccff0de86571b9b24951</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_XYZ</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveTruncatedForegroundInT.html</anchorfile>
      <anchor>ad694361495343f496708df56e37ed512</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>ConvolveCenterVoxel</name>
      <anchorfile>classmirtk_1_1ConvolutionFunction_1_1TruncatedForegroundConvolution1D.html</anchorfile>
      <anchor>adc8a2ffd3c2dfae4af1ae252c0799c5b</anchor>
      <arglist>(const T *in, double &amp;acc, double &amp;sum) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ConvolveLeftNeighbors</name>
      <anchorfile>classmirtk_1_1ConvolutionFunction_1_1TruncatedForegroundConvolution1D.html</anchorfile>
      <anchor>a2a29243251cda047954fec845497ad4d</anchor>
      <arglist>(int i, int n, const T *in, int s, double &amp;acc, double &amp;sum) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ConvolveRightNeighbors</name>
      <anchorfile>classmirtk_1_1ConvolutionFunction_1_1TruncatedForegroundConvolution1D.html</anchorfile>
      <anchor>a6229612d5396b2534ed210c2e51efef7</anchor>
      <arglist>(int i, int n, const T *in, int s, double &amp;acc, double &amp;sum) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TruncatedForegroundConvolution1D</name>
      <anchorfile>classmirtk_1_1ConvolutionFunction_1_1TruncatedForegroundConvolution1D.html</anchorfile>
      <anchor>ab9350390dffa655c236faa4c5c9588ce</anchor>
      <arglist>(const BaseImage *image, const TKernel *kernel, int size, bool norm=true)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_Background</name>
      <anchorfile>classmirtk_1_1ConvolutionFunction_1_1TruncatedForegroundConvolution1D.html</anchorfile>
      <anchor>a8c7d82d391c3d274cc870c06c6496ccc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const TKernel *</type>
      <name>_Kernel</name>
      <anchorfile>classmirtk_1_1ConvolutionFunction_1_1TruncatedForegroundConvolution1D.html</anchorfile>
      <anchor>ac44e9514411f3acfa4a4828a66a10777</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_Normalize</name>
      <anchorfile>classmirtk_1_1ConvolutionFunction_1_1TruncatedForegroundConvolution1D.html</anchorfile>
      <anchor>a957e02e4978e06025d23b0f00b5aacd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_Radius</name>
      <anchorfile>classmirtk_1_1ConvolutionFunction_1_1TruncatedForegroundConvolution1D.html</anchorfile>
      <anchor>af77d73127230e35e6dbf38a1877db27e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_Size</name>
      <anchorfile>classmirtk_1_1ConvolutionFunction_1_1TruncatedForegroundConvolution1D.html</anchorfile>
      <anchor>ad72225c1bd51c62c79a4ab9023369238</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::ConvolveTruncatedForegroundInX</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1ConvolveTruncatedForegroundInX.html</filename>
    <templarg></templarg>
    <base>mirtk::ConvolutionFunction::TruncatedForegroundConvolution1D</base>
    <member kind="variable">
      <type>int</type>
      <name>_Offset</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveTruncatedForegroundInX.html</anchorfile>
      <anchor>ae13b68365a3f86fdd25102f7631dba2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_X</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveTruncatedForegroundInX.html</anchorfile>
      <anchor>a431b4684611c96cc49b9082ebb20969d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::ConvolveTruncatedForegroundInY</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1ConvolveTruncatedForegroundInY.html</filename>
    <templarg></templarg>
    <base>mirtk::ConvolutionFunction::TruncatedForegroundConvolution1D</base>
    <member kind="variable">
      <type>int</type>
      <name>_Offset</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveTruncatedForegroundInY.html</anchorfile>
      <anchor>a6656101048955d2be5aa25f908f943a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_X</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveTruncatedForegroundInY.html</anchorfile>
      <anchor>a03f27a9630e8dfa49500ca168b1ba01f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Y</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveTruncatedForegroundInY.html</anchorfile>
      <anchor>af24804e24ef36522b0739f2784e8a484</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::ConvolveTruncatedForegroundInZ</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1ConvolveTruncatedForegroundInZ.html</filename>
    <templarg></templarg>
    <base>mirtk::ConvolutionFunction::TruncatedForegroundConvolution1D</base>
    <member kind="variable">
      <type>int</type>
      <name>_Offset</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveTruncatedForegroundInZ.html</anchorfile>
      <anchor>a037d5edffc939a891370570d9f982305</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_XY</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveTruncatedForegroundInZ.html</anchorfile>
      <anchor>acf3ad726cdc11d657d2d375cef6eb471</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Z</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveTruncatedForegroundInZ.html</anchorfile>
      <anchor>a774c74c70084bc406ec63e2605b4b49d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::ConvolveWeightedImageInT</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1ConvolveWeightedImageInT.html</filename>
    <templarg></templarg>
    <base>mirtk::VoxelFunction</base>
    <member kind="variable">
      <type>const TKernel *</type>
      <name>_Kernel</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveWeightedImageInT.html</anchorfile>
      <anchor>a9adce2fb1a945dce20795e01850216f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Radius</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveWeightedImageInT.html</anchorfile>
      <anchor>ad1f1e87de4f483e4448a45d3f5b9606f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_T</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveWeightedImageInT.html</anchorfile>
      <anchor>a78ce96d70f44a74daf333e1973bbc4fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_XYZ</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveWeightedImageInT.html</anchorfile>
      <anchor>a6db60e6a8a9cafc47acbac4e917576d5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::ConvolveWeightedImageInX</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1ConvolveWeightedImageInX.html</filename>
    <templarg></templarg>
    <base>mirtk::VoxelFunction</base>
    <member kind="variable">
      <type>const TKernel *</type>
      <name>_Kernel</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveWeightedImageInX.html</anchorfile>
      <anchor>a59eea1745611d299cf02ff7082aae8e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Offset1</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveWeightedImageInX.html</anchorfile>
      <anchor>aaca98dce15c9b3a45cdc8996483f8a9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Offset2</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveWeightedImageInX.html</anchorfile>
      <anchor>a59a7ef82c4c3f942b932e560e7a38d37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Radius</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveWeightedImageInX.html</anchorfile>
      <anchor>a7fe7a4e17d565c15e5a4789f92829262</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_X</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveWeightedImageInX.html</anchorfile>
      <anchor>a28a387fd1adf2b232ca60d35e8c224e1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::ConvolveWeightedImageInY</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1ConvolveWeightedImageInY.html</filename>
    <templarg></templarg>
    <base>mirtk::VoxelFunction</base>
    <member kind="variable">
      <type>const TKernel *</type>
      <name>_Kernel</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveWeightedImageInY.html</anchorfile>
      <anchor>ac86ad359977ade806ff3c651511e489a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Offset1</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveWeightedImageInY.html</anchorfile>
      <anchor>ada52f48b3eb7e634ddef005f0d5e8b7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Offset2</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveWeightedImageInY.html</anchorfile>
      <anchor>aeea127803ab7273742bee42cc61e9ee8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Radius</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveWeightedImageInY.html</anchorfile>
      <anchor>a1ac59ac54606051e54b595ee16919018</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_X</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveWeightedImageInY.html</anchorfile>
      <anchor>addec932f619876dedeadbc42420795bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Y</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveWeightedImageInY.html</anchorfile>
      <anchor>a9fd3039a4910c352cae4ab3298390c4c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::ConvolveWeightedImageInZ</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1ConvolveWeightedImageInZ.html</filename>
    <templarg></templarg>
    <base>mirtk::VoxelFunction</base>
    <member kind="variable">
      <type>const TKernel *</type>
      <name>_Kernel</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveWeightedImageInZ.html</anchorfile>
      <anchor>a2a758254010d80f85859ca505828b435</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Offset1</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveWeightedImageInZ.html</anchorfile>
      <anchor>a4fdfcae2852ee1f0b5869ab9e0ab9973</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Offset2</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveWeightedImageInZ.html</anchorfile>
      <anchor>af19a398272670f14ef93cc15260d0c9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Radius</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveWeightedImageInZ.html</anchorfile>
      <anchor>a1bdf3961ac6b6d12986447c3e516191a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_XY</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveWeightedImageInZ.html</anchorfile>
      <anchor>a81724074387096d09b2d5163d8d47b8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Z</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1ConvolveWeightedImageInZ.html</anchorfile>
      <anchor>a2e33e6af71a417cd24f0b94446ef5ef6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::DownsampleConvolvedExtendedForegroundInX</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1DownsampleConvolvedExtendedForegroundInX.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ConvolutionFunction::ConvolveExtendedForegroundInX</base>
    <member kind="variable">
      <type>int</type>
      <name>_Factor</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1DownsampleConvolvedExtendedForegroundInX.html</anchorfile>
      <anchor>ade21fb5891f9cd0ef3ebcdc751b21067</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const GenericImage&lt; TVoxel &gt; *</type>
      <name>_Input</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1DownsampleConvolvedExtendedForegroundInX.html</anchorfile>
      <anchor>a717070ce6d1e43f4d7e955406d86f674</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Offset</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1DownsampleConvolvedExtendedForegroundInX.html</anchorfile>
      <anchor>a0776b0c2e971167e58cee619b9c1c2e1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::DownsampleConvolvedExtendedForegroundInY</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1DownsampleConvolvedExtendedForegroundInY.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ConvolutionFunction::ConvolveExtendedForegroundInY</base>
    <member kind="variable">
      <type>int</type>
      <name>_Factor</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1DownsampleConvolvedExtendedForegroundInY.html</anchorfile>
      <anchor>aeefb0bffdbed045b23fa3ec3eb46bb8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const GenericImage&lt; TVoxel &gt; *</type>
      <name>_Input</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1DownsampleConvolvedExtendedForegroundInY.html</anchorfile>
      <anchor>a008035e43519b6871f6f082b05193594</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Offset</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1DownsampleConvolvedExtendedForegroundInY.html</anchorfile>
      <anchor>a157c203916e390e13b6ce24bd7e5a8a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::DownsampleConvolvedExtendedForegroundInZ</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1DownsampleConvolvedExtendedForegroundInZ.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ConvolutionFunction::ConvolveExtendedForegroundInZ</base>
    <member kind="variable">
      <type>int</type>
      <name>_Factor</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1DownsampleConvolvedExtendedForegroundInZ.html</anchorfile>
      <anchor>a25da99b4c6ca8fbb3409a4c60fcf344a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const GenericImage&lt; TVoxel &gt; *</type>
      <name>_Input</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1DownsampleConvolvedExtendedForegroundInZ.html</anchorfile>
      <anchor>ab17374b8b18c912ec9c8c4200bbdcb26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Offset</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1DownsampleConvolvedExtendedForegroundInZ.html</anchorfile>
      <anchor>ad48e721eff134bde536aae0bc5d8f24c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::DownsampleConvolvedMirroredForegroundInX</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1DownsampleConvolvedMirroredForegroundInX.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ConvolutionFunction::ConvolveMirroredForegroundInX</base>
    <member kind="variable">
      <type>int</type>
      <name>_Factor</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1DownsampleConvolvedMirroredForegroundInX.html</anchorfile>
      <anchor>a61a1faca454ac2210faa58f6f54c70fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const GenericImage&lt; TVoxel &gt; *</type>
      <name>_Input</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1DownsampleConvolvedMirroredForegroundInX.html</anchorfile>
      <anchor>a89cee059b908fc9624579683e71bbf88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Offset</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1DownsampleConvolvedMirroredForegroundInX.html</anchorfile>
      <anchor>a97735f632f7b226e5392e87b8c1bc930</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::DownsampleConvolvedMirroredForegroundInY</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1DownsampleConvolvedMirroredForegroundInY.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ConvolutionFunction::ConvolveMirroredForegroundInY</base>
    <member kind="variable">
      <type>int</type>
      <name>_Factor</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1DownsampleConvolvedMirroredForegroundInY.html</anchorfile>
      <anchor>a81c0c8966218fbdb42b1c2665735705b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const GenericImage&lt; TVoxel &gt; *</type>
      <name>_Input</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1DownsampleConvolvedMirroredForegroundInY.html</anchorfile>
      <anchor>afd1e122d94e8c8b69bd77c181ad4af5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Offset</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1DownsampleConvolvedMirroredForegroundInY.html</anchorfile>
      <anchor>a3ebf26906d4d39b50b175fac3f63d819</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::DownsampleConvolvedMirroredForegroundInZ</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1DownsampleConvolvedMirroredForegroundInZ.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::ConvolutionFunction::ConvolveMirroredForegroundInZ</base>
    <member kind="variable">
      <type>int</type>
      <name>_Factor</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1DownsampleConvolvedMirroredForegroundInZ.html</anchorfile>
      <anchor>ad35cec9c38794c09404e05eefa87b13c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const GenericImage&lt; TVoxel &gt; *</type>
      <name>_Input</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1DownsampleConvolvedMirroredForegroundInZ.html</anchorfile>
      <anchor>a08a983092dcd726802043b8e61815407</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Offset</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1DownsampleConvolvedMirroredForegroundInZ.html</anchorfile>
      <anchor>a65699b643c64d91cc02a197443ae24ce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ConvolutionFunction::ExtendedForegroundConvolution1D</name>
    <filename>classmirtk_1_1ConvolutionFunction_1_1ExtendedForegroundConvolution1D.html</filename>
    <templarg></templarg>
    <base>mirtk::VoxelFunction</base>
  </compound>
  <compound kind="struct">
    <name>mirtk::ConvolutionFunction::MirrorBoundaryCondition</name>
    <filename>structmirtk_1_1ConvolutionFunction_1_1MirrorBoundaryCondition.html</filename>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1MirrorBoundaryCondition.html</anchorfile>
      <anchor>af6a1ece03f550b9929c73a52a0769130</anchor>
      <arglist>(int i, int N) const </arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1ConvolutionFunction_1_1MirrorBoundaryCondition.html</anchorfile>
      <anchor>ac484d2671c92ba46ebe62eb2ad6ac20a</anchor>
      <arglist>(int i, int N, const T *p, int stride)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::ConvolutionFunction::MirroredForegroundConvolution1D</name>
    <filename>classmirtk_1_1ConvolutionFunction_1_1MirroredForegroundConvolution1D.html</filename>
    <templarg></templarg>
    <base>mirtk::VoxelFunction</base>
  </compound>
  <compound kind="class">
    <name>mirtk::ConvolutionFunction::TruncatedForegroundConvolution1D</name>
    <filename>classmirtk_1_1ConvolutionFunction_1_1TruncatedForegroundConvolution1D.html</filename>
    <templarg></templarg>
    <base>mirtk::VoxelFunction</base>
  </compound>
  <compound kind="class">
    <name>mirtk::data::Op</name>
    <filename>classmirtk_1_1data_1_1Op.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1Op.html</anchorfile>
      <anchor>aa1429eeb16992aa12ed3ef7cf05c7878</anchor>
      <arglist>(int, double *, bool *=NULL)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Op</name>
      <anchorfile>classmirtk_1_1data_1_1Op.html</anchorfile>
      <anchor>a4064e24e845aa41ce3eb2eeffd2291d1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::Write</name>
    <filename>classmirtk_1_1data_1_1Write.html</filename>
    <base>mirtk::data::Op</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1Write.html</anchorfile>
      <anchor>ab14b4dd0c62360c0c16c7402492d5fc1</anchor>
      <arglist>(int n, double *data, bool *=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Write</name>
      <anchorfile>classmirtk_1_1data_1_1Write.html</anchorfile>
      <anchor>a255a6d4515e8340db05796e4213537bb</anchor>
      <arglist>(const char *fname, int dtype=MIRTK_VOXEL_DOUBLE, ImageAttributes attr=ImageAttributes())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::Abs</name>
    <filename>classmirtk_1_1data_1_1op_1_1Abs.html</filename>
    <base>mirtk::data::op::ElementWiseUnaryOp</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Op</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Abs.html</anchorfile>
      <anchor>a5111c66a074052ce07d9e4aa9ac5684a</anchor>
      <arglist>(double value, bool &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Abs.html</anchorfile>
      <anchor>aefe8da91a3a34ee8d8ab4aba24215cd0</anchor>
      <arglist>(int n, double *data, bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::Add</name>
    <filename>classmirtk_1_1data_1_1op_1_1Add.html</filename>
    <base>mirtk::data::op::ElementWiseBinaryOp</base>
    <member kind="function">
      <type></type>
      <name>Add</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Add.html</anchorfile>
      <anchor>a17793c37b0968fade50faf3c14b9d2dc</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Add</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Add.html</anchorfile>
      <anchor>a2ad7a8194abf23610eaf7dc5c860ddb1</anchor>
      <arglist>(const char *fname)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Op</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Add.html</anchorfile>
      <anchor>a77d4c905b8d01fe09c1d86f0ef1a343c</anchor>
      <arglist>(double value, double constant, bool &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Add.html</anchorfile>
      <anchor>a745b49445565297cb8aa37b8f1a7201a</anchor>
      <arglist>(int n, double *data, bool *mask=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ElementWiseBinaryOp</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1ElementWiseBinaryOp.html</anchorfile>
      <anchor>a07b3a9dfa21f5492636527597cf308b7</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ElementWiseBinaryOp</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1ElementWiseBinaryOp.html</anchorfile>
      <anchor>a47343c1da7765c2cee5e96fb6e041804</anchor>
      <arglist>(const char *fname)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::Binarize</name>
    <filename>classmirtk_1_1data_1_1op_1_1Binarize.html</filename>
    <base>mirtk::data::op::ElementWiseUnaryOp</base>
    <member kind="function">
      <type></type>
      <name>Binarize</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Binarize.html</anchorfile>
      <anchor>a0e6d09ce48a7047982097d73babc03b2</anchor>
      <arglist>(double l, double u=numeric_limits&lt; double &gt;::infinity())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Op</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Binarize.html</anchorfile>
      <anchor>a5a07673df8344982c9c6cc22792a0393</anchor>
      <arglist>(double value, bool &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Binarize.html</anchorfile>
      <anchor>a493e6844d396d8ac714ba56e727289c5</anchor>
      <arglist>(int n, double *data, bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::Clamp</name>
    <filename>classmirtk_1_1data_1_1op_1_1Clamp.html</filename>
    <base>mirtk::data::op::ElementWiseUnaryOp</base>
    <member kind="function">
      <type></type>
      <name>Clamp</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Clamp.html</anchorfile>
      <anchor>ac69577f6db4b2c780d4f9b56ca9d1d05</anchor>
      <arglist>(double l, double u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Clamp</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Clamp.html</anchorfile>
      <anchor>a2048d9e38f6c2b74a8354dbff2b60034</anchor>
      <arglist>(const double *l, const double *u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Clamp</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Clamp.html</anchorfile>
      <anchor>a4a03f4388d92e33df656269af07ddf17</anchor>
      <arglist>(double l, const double *u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Clamp</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Clamp.html</anchorfile>
      <anchor>ac8710b59e0e759736aa796a3bb6933b1</anchor>
      <arglist>(const double *l, double u)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Op</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Clamp.html</anchorfile>
      <anchor>ae203d0db27ae0e31818af817ed30f089</anchor>
      <arglist>(double value, bool &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Clamp.html</anchorfile>
      <anchor>aa2a63da5a0f9098426d0d80415eb0759</anchor>
      <arglist>(int n, double *data, bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::Div</name>
    <filename>classmirtk_1_1data_1_1op_1_1Div.html</filename>
    <base>mirtk::data::op::ElementWiseBinaryOp</base>
    <member kind="function">
      <type></type>
      <name>Div</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Div.html</anchorfile>
      <anchor>aadf5cc740ab3d4b0ad0cd52c642a7480</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Div</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Div.html</anchorfile>
      <anchor>a80062714d1c49d189f6fca414b8fc7c2</anchor>
      <arglist>(const char *fname)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Op</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Div.html</anchorfile>
      <anchor>acbf9119c4ed0ff6b47f8d6b40807ba27</anchor>
      <arglist>(double value, double constant, bool &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Div.html</anchorfile>
      <anchor>a38ea7c65f9c049a3561ddb40a17d3bdb</anchor>
      <arglist>(int n, double *data, bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::DivWithZero</name>
    <filename>classmirtk_1_1data_1_1op_1_1DivWithZero.html</filename>
    <base>mirtk::data::op::ElementWiseBinaryOp</base>
    <member kind="function">
      <type></type>
      <name>DivWithZero</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1DivWithZero.html</anchorfile>
      <anchor>a252f58f55aedba156e5c77a859384ab0</anchor>
      <arglist>(const char *fname)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Op</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1DivWithZero.html</anchorfile>
      <anchor>af4f2ba2ecd213dfe81ed367a45d7215f</anchor>
      <arglist>(double value, double constant, bool &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1DivWithZero.html</anchorfile>
      <anchor>a821b3d1f69ab08529fdd184c70a34746</anchor>
      <arglist>(int n, double *data, bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::ElementWiseBinaryOp</name>
    <filename>classmirtk_1_1data_1_1op_1_1ElementWiseBinaryOp.html</filename>
    <base>mirtk::data::Op</base>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>Op</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1ElementWiseBinaryOp.html</anchorfile>
      <anchor>a70f5f9c4acc1fd0335862e0af325bc9c</anchor>
      <arglist>(double value, double, bool &amp;) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1ElementWiseBinaryOp.html</anchorfile>
      <anchor>ab748826dae78e95487e1f4b17dc5229f</anchor>
      <arglist>(int n, double *data, bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::ElementWiseUnaryOp</name>
    <filename>classmirtk_1_1data_1_1op_1_1ElementWiseUnaryOp.html</filename>
    <base>mirtk::data::Op</base>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>Op</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1ElementWiseUnaryOp.html</anchorfile>
      <anchor>a74675e9a2d7086915ac5d777bc7c05a0</anchor>
      <arglist>(double value, bool &amp;) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1ElementWiseUnaryOp.html</anchorfile>
      <anchor>a582c30da156156f40f9d2e0f21d17a82</anchor>
      <arglist>(int n, double *data, bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::Exp</name>
    <filename>classmirtk_1_1data_1_1op_1_1Exp.html</filename>
    <base>mirtk::data::op::ElementWiseUnaryOp</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Op</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Exp.html</anchorfile>
      <anchor>a3d76ccdb4e9494380f66a59b6d531a8a</anchor>
      <arglist>(double value, bool &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Exp.html</anchorfile>
      <anchor>a365d26875c0664cc8103b97d7cd71d6f</anchor>
      <arglist>(int n, double *data, bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::InvertMask</name>
    <filename>classmirtk_1_1data_1_1op_1_1InvertMask.html</filename>
    <base>mirtk::data::Op</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1InvertMask.html</anchorfile>
      <anchor>a2b9d33bfac17ff29388068edc7b51d22</anchor>
      <arglist>(int n, double *, bool *mask=nullptr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::Lb</name>
    <filename>classmirtk_1_1data_1_1op_1_1Lb.html</filename>
    <base>mirtk::data::op::ElementWiseUnaryOp</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Op</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Lb.html</anchorfile>
      <anchor>a57492671c557761ec1371f23fc488c18</anchor>
      <arglist>(double value, bool &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Lb.html</anchorfile>
      <anchor>ad49a1e1971b3d64329a900b2ee7f85fd</anchor>
      <arglist>(int n, double *data, bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::Lg</name>
    <filename>classmirtk_1_1data_1_1op_1_1Lg.html</filename>
    <base>mirtk::data::op::ElementWiseUnaryOp</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Op</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Lg.html</anchorfile>
      <anchor>a6e26bb862fbff13aa64060d9c7e968d9</anchor>
      <arglist>(double value, bool &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Lg.html</anchorfile>
      <anchor>a4167f244fc983760d523763189dcf001</anchor>
      <arglist>(int n, double *data, bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::Ln</name>
    <filename>classmirtk_1_1data_1_1op_1_1Ln.html</filename>
    <base>mirtk::data::op::ElementWiseUnaryOp</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Op</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Ln.html</anchorfile>
      <anchor>a3c5c78fcb0e10102b5bc33e1fbe850ac</anchor>
      <arglist>(double value, bool &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Ln.html</anchorfile>
      <anchor>aeb1008af5f97852be78afd00ce7361a9</anchor>
      <arglist>(int n, double *data, bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::Log</name>
    <filename>classmirtk_1_1data_1_1op_1_1Log.html</filename>
    <base>mirtk::data::op::ElementWiseUnaryOp</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Op</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Log.html</anchorfile>
      <anchor>a7515c58ca91a04353abc94da1b757968</anchor>
      <arglist>(double value, bool &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Log.html</anchorfile>
      <anchor>ace7ff9d1183574e82b78197a716da1a8</anchor>
      <arglist>(int n, double *data, bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::LowerThreshold</name>
    <filename>classmirtk_1_1data_1_1op_1_1LowerThreshold.html</filename>
    <base>mirtk::data::op::ElementWiseUnaryOp</base>
    <member kind="function">
      <type></type>
      <name>LowerThreshold</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1LowerThreshold.html</anchorfile>
      <anchor>a42c6dbbfd7e8c5b106dc35a4da5ba575</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LowerThreshold</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1LowerThreshold.html</anchorfile>
      <anchor>a34c0c04f25220835b0e3f4ceae9d9147</anchor>
      <arglist>(const double *value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Op</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1LowerThreshold.html</anchorfile>
      <anchor>acd25714a217fb23e3b7bdc27fa4920c1</anchor>
      <arglist>(double value, bool &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1LowerThreshold.html</anchorfile>
      <anchor>a42231a8eb36fa13e7b5505dcd5953466</anchor>
      <arglist>(int n, double *data, bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::Mask</name>
    <filename>classmirtk_1_1data_1_1op_1_1Mask.html</filename>
    <base>mirtk::data::op::ElementWiseBinaryOp</base>
    <member kind="function">
      <type></type>
      <name>Mask</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Mask.html</anchorfile>
      <anchor>a332705a45b1ada7ff9aaf779060ed14a</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mask</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Mask.html</anchorfile>
      <anchor>afa1d80a48bc1dc06aa69a04002eacb6f</anchor>
      <arglist>(const char *fname)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Op</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Mask.html</anchorfile>
      <anchor>a961f09cc54f67623443f6f302a789a4c</anchor>
      <arglist>(double value, double constant, bool &amp;mask) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Mask.html</anchorfile>
      <anchor>a9b36d994cf3fdfabb92b714f9a90c2ee</anchor>
      <arglist>(int n, double *data, bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::MaskEvenValues</name>
    <filename>classmirtk_1_1data_1_1op_1_1MaskEvenValues.html</filename>
    <base>mirtk::data::op::ElementWiseUnaryOp</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Op</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1MaskEvenValues.html</anchorfile>
      <anchor>a1351ba914933549af03953c7a91cee1d</anchor>
      <arglist>(double value, bool &amp;mask) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1MaskEvenValues.html</anchorfile>
      <anchor>a3c2c3c301f408d3ae4fbaed95bd80d6c</anchor>
      <arglist>(int n, double *data, bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::MaskInsideInterval</name>
    <filename>classmirtk_1_1data_1_1op_1_1MaskInsideInterval.html</filename>
    <base>mirtk::data::op::ElementWiseUnaryOp</base>
    <member kind="function">
      <type></type>
      <name>MaskInsideInterval</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1MaskInsideInterval.html</anchorfile>
      <anchor>ac8de35982dcad1cd88c60e92f0aa2839</anchor>
      <arglist>(double l, double u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MaskInsideInterval</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1MaskInsideInterval.html</anchorfile>
      <anchor>ab338d5cf31e7eb898007acb2d71e8bd5</anchor>
      <arglist>(const double *l, const double *u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MaskInsideInterval</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1MaskInsideInterval.html</anchorfile>
      <anchor>a7edf3f4eed7399b98d70ba9bc76ff0b6</anchor>
      <arglist>(double l, const double *u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MaskInsideInterval</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1MaskInsideInterval.html</anchorfile>
      <anchor>ad66b9ecce5c1846cca5e57901b84b60e</anchor>
      <arglist>(const double *l, double u)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Op</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1MaskInsideInterval.html</anchorfile>
      <anchor>ab32315a29a7a4cb93a8d8ee7f091910e</anchor>
      <arglist>(double value, bool &amp;mask) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1MaskInsideInterval.html</anchorfile>
      <anchor>a86bd7214eba5b41d1fd9c206392f07b9</anchor>
      <arglist>(int n, double *data, bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::MaskInsideOpenInterval</name>
    <filename>classmirtk_1_1data_1_1op_1_1MaskInsideOpenInterval.html</filename>
    <base>mirtk::data::op::ElementWiseUnaryOp</base>
    <member kind="function">
      <type></type>
      <name>MaskInsideOpenInterval</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1MaskInsideOpenInterval.html</anchorfile>
      <anchor>aca4317e66806ead09c0ce538ec5615ae</anchor>
      <arglist>(double l, double u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MaskInsideOpenInterval</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1MaskInsideOpenInterval.html</anchorfile>
      <anchor>aefa8c8f0cd731ca52120644bd9c2fa26</anchor>
      <arglist>(const double *l, const double *u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MaskInsideOpenInterval</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1MaskInsideOpenInterval.html</anchorfile>
      <anchor>a5c8ed10d31da144b47f79a95bde5d399</anchor>
      <arglist>(double l, const double *u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MaskInsideOpenInterval</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1MaskInsideOpenInterval.html</anchorfile>
      <anchor>a78873d8faacbd3b7deee08348729db92</anchor>
      <arglist>(const double *l, double u)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Op</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1MaskInsideOpenInterval.html</anchorfile>
      <anchor>a95113c6977a3770d69d8556b3c81607a</anchor>
      <arglist>(double value, bool &amp;mask) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1MaskInsideOpenInterval.html</anchorfile>
      <anchor>a911520e5f322a126be237b3fdca32cc0</anchor>
      <arglist>(int n, double *data, bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::MaskOddValues</name>
    <filename>classmirtk_1_1data_1_1op_1_1MaskOddValues.html</filename>
    <base>mirtk::data::op::ElementWiseUnaryOp</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Op</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1MaskOddValues.html</anchorfile>
      <anchor>aaa3aa18c99fa5f4069636776f04f982f</anchor>
      <arglist>(double value, bool &amp;mask) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1MaskOddValues.html</anchorfile>
      <anchor>aada0770573cc54bf531d0f3635c886f6</anchor>
      <arglist>(int n, double *data, bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::MaskOutsideInterval</name>
    <filename>classmirtk_1_1data_1_1op_1_1MaskOutsideInterval.html</filename>
    <base>mirtk::data::op::ElementWiseUnaryOp</base>
    <member kind="function">
      <type></type>
      <name>MaskOutsideInterval</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1MaskOutsideInterval.html</anchorfile>
      <anchor>ad983416d9560a3b76ff1abb593c7c249</anchor>
      <arglist>(double l, double u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MaskOutsideInterval</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1MaskOutsideInterval.html</anchorfile>
      <anchor>a447b4543ebf8e58c83d7807766032124</anchor>
      <arglist>(const double *l, const double *u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MaskOutsideInterval</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1MaskOutsideInterval.html</anchorfile>
      <anchor>a5d2d07af542503d2d796252889da3b15</anchor>
      <arglist>(double l, const double *u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MaskOutsideInterval</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1MaskOutsideInterval.html</anchorfile>
      <anchor>a3e9f80c53a42e1d016fbc6bd0de1409e</anchor>
      <arglist>(const double *l, double u)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Op</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1MaskOutsideInterval.html</anchorfile>
      <anchor>a1e0600f8b2058d7676bdc58a4b55af83</anchor>
      <arglist>(double value, bool &amp;mask) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1MaskOutsideInterval.html</anchorfile>
      <anchor>ab83747f1ede15e61cbc4745673aba45a</anchor>
      <arglist>(int n, double *data, bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::MaskOutsideOpenInterval</name>
    <filename>classmirtk_1_1data_1_1op_1_1MaskOutsideOpenInterval.html</filename>
    <base>mirtk::data::op::ElementWiseUnaryOp</base>
    <member kind="function">
      <type></type>
      <name>MaskOutsideOpenInterval</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1MaskOutsideOpenInterval.html</anchorfile>
      <anchor>a9af73c853c32e4e70c9cfeba5c378587</anchor>
      <arglist>(double l, double u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MaskOutsideOpenInterval</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1MaskOutsideOpenInterval.html</anchorfile>
      <anchor>a0b7a2dd1142d53106bf6dc1716eae0c3</anchor>
      <arglist>(const double *l, const double *u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MaskOutsideOpenInterval</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1MaskOutsideOpenInterval.html</anchorfile>
      <anchor>a9f6436bf592e111496b13d906131a03e</anchor>
      <arglist>(double l, const double *u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MaskOutsideOpenInterval</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1MaskOutsideOpenInterval.html</anchorfile>
      <anchor>afc519f79f344da31070c045f1eba018f</anchor>
      <arglist>(const double *l, double u)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Op</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1MaskOutsideOpenInterval.html</anchorfile>
      <anchor>a26df0365258f81725ee9f3b9944ba619</anchor>
      <arglist>(double value, bool &amp;mask) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1MaskOutsideOpenInterval.html</anchorfile>
      <anchor>a30ff623b82841c6dc785fcc78111b20a</anchor>
      <arglist>(int n, double *data, bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::Mul</name>
    <filename>classmirtk_1_1data_1_1op_1_1Mul.html</filename>
    <base>mirtk::data::op::ElementWiseBinaryOp</base>
    <member kind="function">
      <type></type>
      <name>Mul</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Mul.html</anchorfile>
      <anchor>a1d0e07aac9410eb7c3dcde9c546ab18a</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mul</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Mul.html</anchorfile>
      <anchor>ac940bcf78b7019121ff051b32c13b091</anchor>
      <arglist>(const char *fname)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Op</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Mul.html</anchorfile>
      <anchor>acef8d41eb1c4a83ea728dc51fabc732e</anchor>
      <arglist>(double value, double constant, bool &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Mul.html</anchorfile>
      <anchor>a55453d90a5e7b448d4c9bc007484d9ff</anchor>
      <arglist>(int n, double *data, bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::Pow</name>
    <filename>classmirtk_1_1data_1_1op_1_1Pow.html</filename>
    <base>mirtk::data::op::ElementWiseUnaryOp</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Op</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Pow.html</anchorfile>
      <anchor>a5cd7d6920a2045dcea8d37c0c34b5506</anchor>
      <arglist>(double value, bool &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Pow.html</anchorfile>
      <anchor>a08bb9f28f553cacbb31ce80de1eab1a9</anchor>
      <arglist>(int n, double *data, bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::Rescale</name>
    <filename>classmirtk_1_1data_1_1op_1_1Rescale.html</filename>
    <base>mirtk::data::Op</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Rescale.html</anchorfile>
      <anchor>ac15148cf2d600eccadd94f96f5bbd6d4</anchor>
      <arglist>(int n, double *data, bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::ResetMask</name>
    <filename>classmirtk_1_1data_1_1op_1_1ResetMask.html</filename>
    <base>mirtk::data::Op</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1ResetMask.html</anchorfile>
      <anchor>a7dd8b39f5eb8d21f65a7059b063e5814</anchor>
      <arglist>(int n, double *, bool *mask=nullptr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::SetInsideValue</name>
    <filename>classmirtk_1_1data_1_1op_1_1SetInsideValue.html</filename>
    <base>mirtk::data::Op</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1SetInsideValue.html</anchorfile>
      <anchor>a43c32a7787cadaed3ce9e94654737857</anchor>
      <arglist>(int n, double *data, bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::SetOutsideValue</name>
    <filename>classmirtk_1_1data_1_1op_1_1SetOutsideValue.html</filename>
    <base>mirtk::data::Op</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1SetOutsideValue.html</anchorfile>
      <anchor>aebd8b1c8ddd0962dac752031945ace3f</anchor>
      <arglist>(int n, double *data, bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::Sub</name>
    <filename>classmirtk_1_1data_1_1op_1_1Sub.html</filename>
    <base>mirtk::data::op::ElementWiseBinaryOp</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Op</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Sub.html</anchorfile>
      <anchor>a06e0a2c6f2521bd69fb6d7d4f44d5bdf</anchor>
      <arglist>(double value, double constant, bool &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Sub.html</anchorfile>
      <anchor>a3380a01b951d6a3aa345192cbd7c05fc</anchor>
      <arglist>(int n, double *data, bool *mask=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Sub</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Sub.html</anchorfile>
      <anchor>ad36e2c57ec9a8d894ce2077f0c5d9ae2</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Sub</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1Sub.html</anchorfile>
      <anchor>ac214eb003b9d96b8b3f0cf40ab812526</anchor>
      <arglist>(const char *fname)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::op::UpperThreshold</name>
    <filename>classmirtk_1_1data_1_1op_1_1UpperThreshold.html</filename>
    <base>mirtk::data::op::ElementWiseUnaryOp</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Op</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1UpperThreshold.html</anchorfile>
      <anchor>a6be72fd6c21c44f6cfdb82310306e36c</anchor>
      <arglist>(double value, bool &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1UpperThreshold.html</anchorfile>
      <anchor>ae1aae892767054b3c9bc20d1749b49bd</anchor>
      <arglist>(int n, double *data, bool *mask=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UpperThreshold</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1UpperThreshold.html</anchorfile>
      <anchor>a0a9d4a97286a88e661037e87bc1f9816</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UpperThreshold</name>
      <anchorfile>classmirtk_1_1data_1_1op_1_1UpperThreshold.html</anchorfile>
      <anchor>a02dbd94543c8703a21d620e4900efdad</anchor>
      <arglist>(const double *value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::statistic::AbsPercentile</name>
    <filename>classmirtk_1_1data_1_1statistic_1_1AbsPercentile.html</filename>
    <base>mirtk::data::statistic::Statistic</base>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1data_1_1statistic_1_1AbsPercentile.html</anchorfile>
      <anchor>ab1704b5a0f69b6c4b30e9b6b5532607e</anchor>
      <arglist>(int n, const double *data, const bool *mask=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mirtkOnOffMacro</name>
      <anchorfile>classmirtk_1_1data_1_1statistic_1_1Statistic.html</anchorfile>
      <anchor>a0d9077abe466ffd7ae1a7e55ff647dc7</anchor>
      <arglist>(Hidden)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>classmirtk_1_1data_1_1statistic_1_1Statistic.html</anchorfile>
      <anchor>aaaeffce52c4a2df8101c562ad776c232</anchor>
      <arglist>(ostream &amp;os=cout, int digits=5, const char *prefix=&quot;&quot;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintHeader</name>
      <anchorfile>classmirtk_1_1data_1_1statistic_1_1Statistic.html</anchorfile>
      <anchor>a2e3b39ee1b98b9f9c2df1524eff3f4ab</anchor>
      <arglist>(ostream &amp;os=cout, const char *delimiter=&quot;,&quot;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>PrintValues</name>
      <anchorfile>classmirtk_1_1data_1_1statistic_1_1Statistic.html</anchorfile>
      <anchor>af9e2487ec8d07d472c6179d20582a862</anchor>
      <arglist>(ostream &amp;os=cout, int digits=5, const char *delimiter=&quot;,&quot;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Process</name>
      <anchorfile>classmirtk_1_1data_1_1statistic_1_1Statistic.html</anchorfile>
      <anchor>a65c1e619c89725c376636cda121ff4a3</anchor>
      <arglist>(int n, double *data, bool *mask=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const double &amp;</type>
      <name>Value</name>
      <anchorfile>classmirtk_1_1data_1_1statistic_1_1Statistic.html</anchorfile>
      <anchor>adf88b2e3e4cbccd517b41e18344d60d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Statistic</name>
      <anchorfile>classmirtk_1_1data_1_1statistic_1_1Statistic.html</anchorfile>
      <anchor>a5b40709f951609e7d3b939b3a7093ae8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Statistic</name>
      <anchorfile>classmirtk_1_1data_1_1statistic_1_1Statistic.html</anchorfile>
      <anchor>ad1316fa6a11b2f98ece845b9dbc126f8</anchor>
      <arglist>(const char *desc=NULL, const Array&lt; string &gt; *names=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>Value</name>
      <anchorfile>classmirtk_1_1data_1_1statistic_1_1Statistic.html</anchorfile>
      <anchor>a325a00176b4ab09b4d5b6a8064a77e93</anchor>
      <arglist>(double v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::statistic::Extrema</name>
    <filename>classmirtk_1_1data_1_1statistic_1_1Extrema.html</filename>
    <base>mirtk::data::statistic::Statistic</base>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1data_1_1statistic_1_1Extrema.html</anchorfile>
      <anchor>acc431866bdb9322a23a863a72e402ff7</anchor>
      <arglist>(int n, const double *data, const bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::statistic::LowerPercentileMean</name>
    <filename>classmirtk_1_1data_1_1statistic_1_1LowerPercentileMean.html</filename>
    <base>mirtk::data::statistic::Percentile</base>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1data_1_1statistic_1_1LowerPercentileMean.html</anchorfile>
      <anchor>aa22a5fb0ec8eaf85be303958a7717f61</anchor>
      <arglist>(int n, const double *data, const bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::statistic::Max</name>
    <filename>classmirtk_1_1data_1_1statistic_1_1Max.html</filename>
    <base>mirtk::data::statistic::Statistic</base>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1data_1_1statistic_1_1Max.html</anchorfile>
      <anchor>a4e779250ab6639522d8e981afe367607</anchor>
      <arglist>(int n, const double *data, const bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::statistic::MaxAbs</name>
    <filename>classmirtk_1_1data_1_1statistic_1_1MaxAbs.html</filename>
    <base>mirtk::data::statistic::Statistic</base>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1data_1_1statistic_1_1MaxAbs.html</anchorfile>
      <anchor>a95048b5887160280ed0d5adc47c1fce0</anchor>
      <arglist>(int n, const double *data, const bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::statistic::Mean</name>
    <filename>classmirtk_1_1data_1_1statistic_1_1Mean.html</filename>
    <base>mirtk::data::statistic::Statistic</base>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1data_1_1statistic_1_1Mean.html</anchorfile>
      <anchor>a83d8991edfd6500d31720f7a92fc6be1</anchor>
      <arglist>(int n, const double *data, const bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::statistic::Min</name>
    <filename>classmirtk_1_1data_1_1statistic_1_1Min.html</filename>
    <base>mirtk::data::statistic::Statistic</base>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1data_1_1statistic_1_1Min.html</anchorfile>
      <anchor>a4d86a5aba5aee5ffea22446eace4bdc5</anchor>
      <arglist>(int n, const double *data, const bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::statistic::MinAbs</name>
    <filename>classmirtk_1_1data_1_1statistic_1_1MinAbs.html</filename>
    <base>mirtk::data::statistic::Statistic</base>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1data_1_1statistic_1_1MinAbs.html</anchorfile>
      <anchor>ad2cc58e698312fdb363a107fd2dceef3</anchor>
      <arglist>(int n, const double *data, const bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::statistic::NormalDistribution</name>
    <filename>classmirtk_1_1data_1_1statistic_1_1NormalDistribution.html</filename>
    <base>mirtk::data::statistic::StDev</base>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1data_1_1statistic_1_1NormalDistribution.html</anchorfile>
      <anchor>a0d981fda6268484a7c22cba9a751ebf8</anchor>
      <arglist>(int n, const double *data, const bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::statistic::Percentile</name>
    <filename>classmirtk_1_1data_1_1statistic_1_1Percentile.html</filename>
    <base>mirtk::data::statistic::Statistic</base>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1data_1_1statistic_1_1Percentile.html</anchorfile>
      <anchor>a945f240d1887d722d3e611a36c962906</anchor>
      <arglist>(int n, const double *data, const bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::statistic::Range</name>
    <filename>classmirtk_1_1data_1_1statistic_1_1Range.html</filename>
    <base>mirtk::data::statistic::Statistic</base>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1data_1_1statistic_1_1Range.html</anchorfile>
      <anchor>a47db666e3b9347569663fc8c1e236b7e</anchor>
      <arglist>(int n, const double *data, const bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::statistic::RobustMean</name>
    <filename>classmirtk_1_1data_1_1statistic_1_1RobustMean.html</filename>
    <base>mirtk::data::statistic::Percentile</base>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1data_1_1statistic_1_1RobustMean.html</anchorfile>
      <anchor>a6079f147e9ea84a4302063a2bff68af3</anchor>
      <arglist>(int n, const double *data, const bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::statistic::Statistic</name>
    <filename>classmirtk_1_1data_1_1statistic_1_1Statistic.html</filename>
    <base>mirtk::data::Op</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1data_1_1statistic_1_1Statistic.html</anchorfile>
      <anchor>a649399cc9a748f6a2bbe983ce5638777</anchor>
      <arglist>(int, const double *, const bool *=NULL)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::statistic::StDev</name>
    <filename>classmirtk_1_1data_1_1statistic_1_1StDev.html</filename>
    <base>mirtk::data::statistic::Var</base>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1data_1_1statistic_1_1StDev.html</anchorfile>
      <anchor>acf2fb24c0df9a106fd9efa03638f81fd</anchor>
      <arglist>(int n, const double *data, const bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::statistic::UpperPercentileMean</name>
    <filename>classmirtk_1_1data_1_1statistic_1_1UpperPercentileMean.html</filename>
    <base>mirtk::data::statistic::Percentile</base>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1data_1_1statistic_1_1UpperPercentileMean.html</anchorfile>
      <anchor>a34a1d897e5449ea29c85e7b87acd8b32</anchor>
      <arglist>(int n, const double *data, const bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::data::statistic::Var</name>
    <filename>classmirtk_1_1data_1_1statistic_1_1Var.html</filename>
    <base>mirtk::data::statistic::Statistic</base>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1data_1_1statistic_1_1Var.html</anchorfile>
      <anchor>a9b7c802057013815018a9516c8e3a5b7</anchor>
      <arglist>(int n, const double *data, const bool *mask=NULL)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>mirtk::ForEachVoxelDomain</name>
    <filename>namespacemirtk_1_1ForEachVoxelDomain.html</filename>
    <class kind="struct">mirtk::ForEachVoxelDomain::AboveBackgroundLevel</class>
    <class kind="struct">mirtk::ForEachVoxelDomain::Background</class>
    <class kind="struct">mirtk::ForEachVoxelDomain::BackgroundValue</class>
    <class kind="struct">mirtk::ForEachVoxelDomain::Foreground</class>
    <class kind="struct">mirtk::ForEachVoxelDomain::InMask</class>
    <class kind="struct">mirtk::ForEachVoxelDomain::InSpatialMask</class>
    <class kind="struct">mirtk::ForEachVoxelDomain::NotBackgroundValue</class>
  </compound>
  <compound kind="struct">
    <name>mirtk::ForEachVoxelDomain::AboveBackgroundLevel</name>
    <filename>structmirtk_1_1ForEachVoxelDomain_1_1AboveBackgroundLevel.html</filename>
  </compound>
  <compound kind="struct">
    <name>mirtk::ForEachVoxelDomain::Background</name>
    <filename>structmirtk_1_1ForEachVoxelDomain_1_1Background.html</filename>
  </compound>
  <compound kind="struct">
    <name>mirtk::ForEachVoxelDomain::BackgroundValue</name>
    <filename>structmirtk_1_1ForEachVoxelDomain_1_1BackgroundValue.html</filename>
  </compound>
  <compound kind="struct">
    <name>mirtk::ForEachVoxelDomain::Foreground</name>
    <filename>structmirtk_1_1ForEachVoxelDomain_1_1Foreground.html</filename>
  </compound>
  <compound kind="struct">
    <name>mirtk::ForEachVoxelDomain::InMask</name>
    <filename>structmirtk_1_1ForEachVoxelDomain_1_1InMask.html</filename>
  </compound>
  <compound kind="struct">
    <name>mirtk::ForEachVoxelDomain::InSpatialMask</name>
    <filename>structmirtk_1_1ForEachVoxelDomain_1_1InSpatialMask.html</filename>
  </compound>
  <compound kind="struct">
    <name>mirtk::ForEachVoxelDomain::NotBackgroundValue</name>
    <filename>structmirtk_1_1ForEachVoxelDomain_1_1NotBackgroundValue.html</filename>
  </compound>
  <compound kind="class">
    <name>mirtk::ImplicitSurfaceUtils::DistanceMeasurement</name>
    <filename>classmirtk_1_1ImplicitSurfaceUtils_1_1DistanceMeasurement.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceUtils_1_1DistanceMeasurement.html</anchorfile>
      <anchor>afd73ea23c232cc97c52a9a6bdbda3077</anchor>
      <arglist>(const double p[3], const PointSamples &amp;dirs, double mind, double minh, double maxd, const DistanceFunction &amp;distance, double offset=.0, double tol=1e-3)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Evaluate</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceUtils_1_1DistanceMeasurement.html</anchorfile>
      <anchor>a62dfe3608ca6e24ef19e0c34ba3ffb21</anchor>
      <arglist>(const double p[3], const PointSamples &amp;dirs, double minh, double maxd, const DistanceFunction &amp;distance, double offset=.0, double tol=1e-3)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Get</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceUtils_1_1DistanceMeasurement.html</anchorfile>
      <anchor>a6fef38cc4211d66b6b1241d480d88ea9</anchor>
      <arglist>(int i=0) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumberOfValues</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceUtils_1_1DistanceMeasurement.html</anchorfile>
      <anchor>a26be39cb6f6bf5f01ead5bf0e9dc4cb0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceUtils_1_1DistanceMeasurement.html</anchorfile>
      <anchor>ad798ff402aa4e18baa2c0f63cb1d4f18</anchor>
      <arglist>(double v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Set</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceUtils_1_1DistanceMeasurement.html</anchorfile>
      <anchor>ac1217d149ec96f6033d36b622c277098</anchor>
      <arglist>(int i, double v)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DistanceMeasurement</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceUtils_1_1DistanceMeasurement.html</anchorfile>
      <anchor>abedb212ef23b5ba065d792b35a445fd2</anchor>
      <arglist>(int nvalues=1)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~DistanceMeasurement</name>
      <anchorfile>classmirtk_1_1ImplicitSurfaceUtils_1_1DistanceMeasurement.html</anchorfile>
      <anchor>ab1ccfb89aa646e028ab0e24cba2e84ef</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ImplicitSurfaceUtils::MaxWidth</name>
    <filename>structmirtk_1_1ImplicitSurfaceUtils_1_1MaxWidth.html</filename>
    <base>mirtk::ImplicitSurfaceUtils::DistanceMeasurement</base>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>structmirtk_1_1ImplicitSurfaceUtils_1_1MaxWidth.html</anchorfile>
      <anchor>a6b092373f9b66ca18df236a3d90458fa</anchor>
      <arglist>(const double p[3], const PointSamples &amp;dirs, double mind, double minh, double maxw, const DistanceFunction &amp;distance, double offset=.0, double tol=1e-3)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ImplicitSurfaceUtils::MeanWidth</name>
    <filename>structmirtk_1_1ImplicitSurfaceUtils_1_1MeanWidth.html</filename>
    <base>mirtk::ImplicitSurfaceUtils::DistanceMeasurement</base>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>structmirtk_1_1ImplicitSurfaceUtils_1_1MeanWidth.html</anchorfile>
      <anchor>a874b80345121ed4cd2c1956f50a9fc17</anchor>
      <arglist>(const double p[3], const PointSamples &amp;dirs, double mind, double minh, double maxw, const DistanceFunction &amp;distance, double offset=.0, double tol=1e-3)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ImplicitSurfaceUtils::MedianWidth</name>
    <filename>structmirtk_1_1ImplicitSurfaceUtils_1_1MedianWidth.html</filename>
    <base>mirtk::ImplicitSurfaceUtils::DistanceMeasurement</base>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>structmirtk_1_1ImplicitSurfaceUtils_1_1MedianWidth.html</anchorfile>
      <anchor>a7598667ae92305677dbbc66ff2ef8143</anchor>
      <arglist>(const double p[3], const PointSamples &amp;dirs, double mind, double minh, double maxw, const DistanceFunction &amp;distance, double offset=.0, double tol=1e-3)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ImplicitSurfaceUtils::MinWidth</name>
    <filename>structmirtk_1_1ImplicitSurfaceUtils_1_1MinWidth.html</filename>
    <base>mirtk::ImplicitSurfaceUtils::DistanceMeasurement</base>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>structmirtk_1_1ImplicitSurfaceUtils_1_1MinWidth.html</anchorfile>
      <anchor>ad83d056f525dcee464338ec8f420f42e</anchor>
      <arglist>(const double p[3], const PointSamples &amp;dirs, double mind, double minh, double maxw, const DistanceFunction &amp;distance, double offset=.0, double tol=1e-3)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::ImplicitSurfaceUtils::WidthExtrema</name>
    <filename>structmirtk_1_1ImplicitSurfaceUtils_1_1WidthExtrema.html</filename>
    <base>mirtk::ImplicitSurfaceUtils::DistanceMeasurement</base>
    <member kind="function">
      <type>void</type>
      <name>Evaluate</name>
      <anchorfile>structmirtk_1_1ImplicitSurfaceUtils_1_1WidthExtrema.html</anchorfile>
      <anchor>afbf44a7c62fec8db200e96b33e521f95</anchor>
      <arglist>(const double p[3], const PointSamples &amp;dirs, double mind, double minh, double maxw, const DistanceFunction &amp;distance, double offset=.0, double tol=1e-3)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>mirtk::InterpolationDomain</name>
    <filename>namespacemirtk_1_1InterpolationDomain.html</filename>
    <class kind="struct">mirtk::InterpolationDomain::Foreground</class>
    <class kind="struct">mirtk::InterpolationDomain::Inside</class>
  </compound>
  <compound kind="struct">
    <name>mirtk::InterpolationDomain::Foreground</name>
    <filename>structmirtk_1_1InterpolationDomain_1_1Foreground.html</filename>
  </compound>
  <compound kind="struct">
    <name>mirtk::InterpolationDomain::Inside</name>
    <filename>structmirtk_1_1InterpolationDomain_1_1Inside.html</filename>
  </compound>
  <compound kind="class">
    <name>mirtk::LieBracketImageFilter2DUtils::Run</name>
    <filename>classmirtk_1_1LieBracketImageFilter2DUtils_1_1Run.html</filename>
    <templarg>VoxelType</templarg>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter2DUtils_1_1Run.html</anchorfile>
      <anchor>a4759640ceea239e379f545608dab008e</anchor>
      <arglist>(const blocked_range2d&lt; int &gt; &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter2DUtils_1_1Run.html</anchorfile>
      <anchor>a95d5d3dd441ae7e0a4020cf32dfaeb10</anchor>
      <arglist>(FilterType *filter, ImageType *output)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::LieBracketImageFilter3DUtils::Run</name>
    <filename>classmirtk_1_1LieBracketImageFilter3DUtils_1_1Run.html</filename>
    <templarg>VoxelType</templarg>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter3DUtils_1_1Run.html</anchorfile>
      <anchor>a9197b485b5c50e7460b16536735f0e34</anchor>
      <arglist>(const blocked_range3d&lt; int &gt; &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1LieBracketImageFilter3DUtils_1_1Run.html</anchorfile>
      <anchor>a703a208df20ffbea51d5f72451dbd7db</anchor>
      <arglist>(FilterType *filter, ImageType *output)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>mirtk::MultipleVoxelTransformation</name>
    <filename>namespacemirtk_1_1MultipleVoxelTransformation.html</filename>
    <class kind="class">mirtk::MultipleVoxelTransformation::Base</class>
    <class kind="struct">mirtk::MultipleVoxelTransformation::BaseTransform</class>
    <class kind="struct">mirtk::MultipleVoxelTransformation::Interpolate</class>
    <class kind="struct">mirtk::MultipleVoxelTransformation::InterpolateRescale</class>
    <class kind="struct">mirtk::MultipleVoxelTransformation::InterpolateRescaleAsDouble</class>
    <class kind="struct">mirtk::MultipleVoxelTransformation::TransformData</class>
  </compound>
  <compound kind="class">
    <name>mirtk::MultipleVoxelTransformation::Base</name>
    <filename>classmirtk_1_1MultipleVoxelTransformation_1_1Base.html</filename>
    <base>mirtk::VoxelFunction</base>
    <member kind="function">
      <type>T &amp;</type>
      <name>x_</name>
      <anchorfile>classmirtk_1_1MultipleVoxelTransformation_1_1Base.html</anchorfile>
      <anchor>a62aa4eadc6dfecc1cd2333d555bbe072</anchor>
      <arglist>(T *p) const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>x_</name>
      <anchorfile>classmirtk_1_1MultipleVoxelTransformation_1_1Base.html</anchorfile>
      <anchor>a53921fd47f4a7a248dec12c243ba8fbe</anchor>
      <arglist>(const T *p) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>y_</name>
      <anchorfile>classmirtk_1_1MultipleVoxelTransformation_1_1Base.html</anchorfile>
      <anchor>a5f3ea07a92ffe58f7144009790fb7708</anchor>
      <arglist>(T *p) const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>y_</name>
      <anchorfile>classmirtk_1_1MultipleVoxelTransformation_1_1Base.html</anchorfile>
      <anchor>a05c4244f6d53805f248f18542b655a3f</anchor>
      <arglist>(const T *p) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>z_</name>
      <anchorfile>classmirtk_1_1MultipleVoxelTransformation_1_1Base.html</anchorfile>
      <anchor>ac687a60193a3d627472625acf1f4249b</anchor>
      <arglist>(T *p) const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>z_</name>
      <anchorfile>classmirtk_1_1MultipleVoxelTransformation_1_1Base.html</anchorfile>
      <anchor>aef60ad0ae42520a36791b5efffa03578</anchor>
      <arglist>(const T *p) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Base</name>
      <anchorfile>classmirtk_1_1MultipleVoxelTransformation_1_1Base.html</anchorfile>
      <anchor>ae2d6de1f4adbf9f1d4e59c3d3d82bf32</anchor>
      <arglist>(int numvox=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Base</name>
      <anchorfile>classmirtk_1_1MultipleVoxelTransformation_1_1Base.html</anchorfile>
      <anchor>aff41b5795422e23cb147dc9f90a0ff15</anchor>
      <arglist>(const Base &amp;other)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_NumberOfVoxels</name>
      <anchorfile>classmirtk_1_1MultipleVoxelTransformation_1_1Base.html</anchorfile>
      <anchor>af6ca60a7b686ff0c8900f1b7e50388d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_TwiceNumberOfVoxels</name>
      <anchorfile>classmirtk_1_1MultipleVoxelTransformation_1_1Base.html</anchorfile>
      <anchor>a863b3d86a042ba203dcb3bfee1a7e5bf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::MultipleVoxelTransformation::BaseTransform</name>
    <filename>structmirtk_1_1MultipleVoxelTransformation_1_1BaseTransform.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>mirtk::MultipleVoxelTransformation::TransformData</base>
    <base>mirtk::MultipleVoxelTransformation::Base</base>
    <member kind="function">
      <type>void</type>
      <name>ApplyDisplacement</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1BaseTransform.html</anchorfile>
      <anchor>ac36ca93b4bf002d0558f97ac295ac0c8</anchor>
      <arglist>(const double *disp1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyDisplacementAndTransformation</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1BaseTransform.html</anchorfile>
      <anchor>af5086aac187ef7003d74cdfcf6cc8271</anchor>
      <arglist>(const double *disp1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyDisplacements</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1BaseTransform.html</anchorfile>
      <anchor>a3237417f5ad7dc04260f368d42e0dab6</anchor>
      <arglist>(const double *disp1, const double *disp2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyTransformation</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1BaseTransform.html</anchorfile>
      <anchor>a1cca3411e587a279d51e5b207bcf3672</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyTransformations</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1BaseTransform.html</anchorfile>
      <anchor>a19ab7ddb6a413cda908efd4b2738b691</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>InterpolateImageFunction *</type>
      <name>GetInterpolator</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1BaseTransform.html</anchorfile>
      <anchor>a2ca65b04e7d9a17dc0054c98a57c7f74</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>InterpolateImageFunction *</type>
      <name>GetInterpolator</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1BaseTransform.html</anchorfile>
      <anchor>ad531523bee69e07c5143514ee2775ea8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InterpolatePut</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1BaseTransform.html</anchorfile>
      <anchor>ad149f27eee1ae8ae881400540aaac8ad</anchor>
      <arglist>(int i, int j, int k, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InterpolatePut</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1BaseTransform.html</anchorfile>
      <anchor>a5571fa1182b07566dfdb0bbbbe6ec4cb</anchor>
      <arglist>(int i, int j, int k, OutputVoxelType *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InterpolatePutAsDouble</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1BaseTransform.html</anchorfile>
      <anchor>a09dabac84c339c7e0dc9162b0299ae53</anchor>
      <arglist>(int i, int j, int k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InterpolateRescalePut</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1BaseTransform.html</anchorfile>
      <anchor>adcbdad758a1c425e089eb508f141585b</anchor>
      <arglist>(int i, int j, int k, OutputVoxelType *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InterpolateRescalePutAsDouble</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1BaseTransform.html</anchorfile>
      <anchor>ab667b7b0f741e664e5fd27f612abee67</anchor>
      <arglist>(int i, int j, int k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>OutputToWorld</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1BaseTransform.html</anchorfile>
      <anchor>aaa9b85deee091f7f98be30d4648868fe</anchor>
      <arglist>(int i, int j, int k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>OutputToWorld</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1BaseTransform.html</anchorfile>
      <anchor>aff103f4e631f01933e4019e669bf8f72</anchor>
      <arglist>(const double *i2w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutOutsideValue</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1BaseTransform.html</anchorfile>
      <anchor>ad0ee3ad2a6b217637704c5f47c46f4a2</anchor>
      <arglist>(int i, int j, int k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutOutsideValueAsDouble</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1BaseTransform.html</anchorfile>
      <anchor>a3dec903c86a3ad716e580a3711961a68</anchor>
      <arglist>(int i, int j, int k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PutVoxelTransformation</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1BaseTransform.html</anchorfile>
      <anchor>a69384bd8c582740f902e30fb798896d1</anchor>
      <arglist>(int i, int j, int k, double *o2i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WorldToInput</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1BaseTransform.html</anchorfile>
      <anchor>a278f705336b8532813351775d0c69c35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseTransform</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1BaseTransform.html</anchorfile>
      <anchor>a34e37a2e8867012a5ef6ddd55ea1e7c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TransformData</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1TransformData.html</anchorfile>
      <anchor>affd212d46f687a5ec74c2fda721deb83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BaseTransform</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1BaseTransform.html</anchorfile>
      <anchor>a2b9e465042c6ea3ab4019b5e3016b6a5</anchor>
      <arglist>(const TransformData &amp;data)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BaseTransform</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1BaseTransform.html</anchorfile>
      <anchor>a80b712e118d690132b1e065df1181750</anchor>
      <arglist>(const BaseTransform &amp;other)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_Begin</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1TransformData.html</anchorfile>
      <anchor>a0a7b70699efdefea65bfc5ef66d4fe4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_End</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1TransformData.html</anchorfile>
      <anchor>a7e2c834cfd20d9859580788e27e48f85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BaseImage *</type>
      <name>_Input</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1TransformData.html</anchorfile>
      <anchor>aecbc233648a4934ff4e9a091138c8c4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BaseImage **</type>
      <name>_Inputs</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1TransformData.html</anchorfile>
      <anchor>a3124cf2287420b5f40449c13311189f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>InterpolateImageFunction *</type>
      <name>_Interpolator</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1TransformData.html</anchorfile>
      <anchor>a15485308981bb7db22084da187f0bd97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>InterpolateImageFunction **</type>
      <name>_Interpolators</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1TransformData.html</anchorfile>
      <anchor>a18aaba58aa922cf1e9d189f5c269cd89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>_Invert</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1TransformData.html</anchorfile>
      <anchor>a4f9ad8c00c84ef4a80907b36df74fab2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BinaryImage *</type>
      <name>_Mask</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1TransformData.html</anchorfile>
      <anchor>af5392347dc169d604b224eeeb18b4be6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_MaxNumberOfComponents</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1TransformData.html</anchorfile>
      <anchor>ab5568ea4c541fabff747b1bbd1d1e50e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_NumberOfImages</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1TransformData.html</anchorfile>
      <anchor>a74cb81a75263b404b8dfd05324456ac5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_Offset</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1TransformData.html</anchorfile>
      <anchor>a6491eba437286a252a4e70d4000b79f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Image *</type>
      <name>_Output</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1TransformData.html</anchorfile>
      <anchor>a9a2ca01d3b472c31824d335dd1f5966f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Image **</type>
      <name>_Outputs</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1TransformData.html</anchorfile>
      <anchor>ab2d356a2d2b09356acc4891ee4272736</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_PaddingValue</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1TransformData.html</anchorfile>
      <anchor>a259dd0e22ac1d9a231b57db0e6c00388</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double *</type>
      <name>_PaddingValues</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1TransformData.html</anchorfile>
      <anchor>a674fdaa946d539f48dc3ad0f10402e18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_ScaleFactor</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1TransformData.html</anchorfile>
      <anchor>aeec7f2766fab5ea669a932bcb86d0487</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Transformation *</type>
      <name>_Transformation1</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1TransformData.html</anchorfile>
      <anchor>ac207884a5648cefd54b90d48ee86459b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Transformation *</type>
      <name>_Transformation2</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1TransformData.html</anchorfile>
      <anchor>a98a508f35a09fad73a44c50a4895b4d6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::MultipleVoxelTransformation::Interpolate</name>
    <filename>structmirtk_1_1MultipleVoxelTransformation_1_1Interpolate.html</filename>
    <templarg></templarg>
    <base>mirtk::MultipleVoxelTransformation::Base</base>
    <member kind="function">
      <type>void</type>
      <name>InitializeMemory</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1Interpolate.html</anchorfile>
      <anchor>a406862ce55b8d0097d44b94b1d7a82e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Interpolate</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1Interpolate.html</anchorfile>
      <anchor>a2cac78063b1e7bcc5cb66fa8690bce2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Interpolate</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1Interpolate.html</anchorfile>
      <anchor>a909ee3040783d5c1fcd2be72abb23db4</anchor>
      <arglist>(const Interpolate &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Interpolate</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1Interpolate.html</anchorfile>
      <anchor>a668a0cc639d354cf7894e5460beb8c4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double *</type>
      <name>_v</name>
      <anchorfile>structmirtk_1_1MultipleVoxelTransformation_1_1Interpolate.html</anchorfile>
      <anchor>a1335f9a81124611663bb1d77302e486c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::MultipleVoxelTransformation::InterpolateRescale</name>
    <filename>structmirtk_1_1MultipleVoxelTransformation_1_1InterpolateRescale.html</filename>
    <templarg></templarg>
    <base>mirtk::MultipleVoxelTransformation::Interpolate</base>
  </compound>
  <compound kind="struct">
    <name>mirtk::MultipleVoxelTransformation::InterpolateRescaleAsDouble</name>
    <filename>structmirtk_1_1MultipleVoxelTransformation_1_1InterpolateRescaleAsDouble.html</filename>
    <templarg></templarg>
    <base>mirtk::MultipleVoxelTransformation::InterpolateRescale</base>
  </compound>
  <compound kind="struct">
    <name>mirtk::MultipleVoxelTransformation::TransformData</name>
    <filename>structmirtk_1_1MultipleVoxelTransformation_1_1TransformData.html</filename>
  </compound>
  <compound kind="namespace">
    <name>mirtk::NaryVoxelFunction</name>
    <filename>namespacemirtk_1_1NaryVoxelFunction.html</filename>
    <class kind="struct">mirtk::NaryVoxelFunction::EvaluateBCHFormula</class>
    <class kind="struct">mirtk::NaryVoxelFunction::EvaluateBCHUpdate</class>
    <class kind="struct">mirtk::NaryVoxelFunction::ExpVelocityFieldEuler2D</class>
    <class kind="struct">mirtk::NaryVoxelFunction::ExpVelocityFieldEuler3D</class>
    <class kind="struct">mirtk::NaryVoxelFunction::NOP</class>
    <class kind="struct">mirtk::NaryVoxelFunction::VoxelWiseWeightedSum</class>
  </compound>
  <compound kind="struct">
    <name>mirtk::NaryVoxelFunction::EvaluateBCHFormula</name>
    <filename>structmirtk_1_1NaryVoxelFunction_1_1EvaluateBCHFormula.html</filename>
    <base>mirtk::VoxelFunction</base>
  </compound>
  <compound kind="struct">
    <name>mirtk::NaryVoxelFunction::EvaluateBCHUpdate</name>
    <filename>structmirtk_1_1NaryVoxelFunction_1_1EvaluateBCHUpdate.html</filename>
    <base>mirtk::VoxelFunction</base>
  </compound>
  <compound kind="struct">
    <name>mirtk::NaryVoxelFunction::ExpVelocityFieldEuler2D</name>
    <filename>structmirtk_1_1NaryVoxelFunction_1_1ExpVelocityFieldEuler2D.html</filename>
    <templarg></templarg>
    <base>mirtk::VoxelFunction</base>
    <member kind="variable">
      <type>double</type>
      <name>_dt</name>
      <anchorfile>structmirtk_1_1NaryVoxelFunction_1_1ExpVelocityFieldEuler2D.html</anchorfile>
      <anchor>a6c487cdea78d9a98035d4677a5d32366</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_NumberOfSteps</name>
      <anchorfile>structmirtk_1_1NaryVoxelFunction_1_1ExpVelocityFieldEuler2D.html</anchorfile>
      <anchor>a1d34eb8506700fca3519067981e4dbd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BaseImage *</type>
      <name>_VelocityField</name>
      <anchorfile>structmirtk_1_1NaryVoxelFunction_1_1ExpVelocityFieldEuler2D.html</anchorfile>
      <anchor>a35f9b7ec09930921a4a2c4fb142d6ede</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TInterpolator *</type>
      <name>_VelocityInterpolator</name>
      <anchorfile>structmirtk_1_1NaryVoxelFunction_1_1ExpVelocityFieldEuler2D.html</anchorfile>
      <anchor>a3dc1294ba7dc86115a02b270db38bb45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_y</name>
      <anchorfile>structmirtk_1_1NaryVoxelFunction_1_1ExpVelocityFieldEuler2D.html</anchorfile>
      <anchor>acb94900cebf33849cba95086d3972b83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>_x</name>
      <anchorfile>structmirtk_1_1NaryVoxelFunction_1_1ExpVelocityFieldEuler2D.html</anchorfile>
      <anchor>a61e014bbc75a8f0da0fb50494b5ca2c5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::NaryVoxelFunction::ExpVelocityFieldEuler3D</name>
    <filename>structmirtk_1_1NaryVoxelFunction_1_1ExpVelocityFieldEuler3D.html</filename>
    <templarg></templarg>
    <base>mirtk::VoxelFunction</base>
    <member kind="variable">
      <type>double</type>
      <name>_dt</name>
      <anchorfile>structmirtk_1_1NaryVoxelFunction_1_1ExpVelocityFieldEuler3D.html</anchorfile>
      <anchor>a358ef8add28c7729e35fc782581bfd86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_NumberOfSteps</name>
      <anchorfile>structmirtk_1_1NaryVoxelFunction_1_1ExpVelocityFieldEuler3D.html</anchorfile>
      <anchor>a0ef47ecde5cba0d99f89a1a933a894a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BaseImage *</type>
      <name>_VelocityField</name>
      <anchorfile>structmirtk_1_1NaryVoxelFunction_1_1ExpVelocityFieldEuler3D.html</anchorfile>
      <anchor>ab0b8ee02b6185b833f48c7d8b7bcbaba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TInterpolator *</type>
      <name>_VelocityInterpolator</name>
      <anchorfile>structmirtk_1_1NaryVoxelFunction_1_1ExpVelocityFieldEuler3D.html</anchorfile>
      <anchor>a21fe237135cf6b8aad6569b1d8d4d071</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_z</name>
      <anchorfile>structmirtk_1_1NaryVoxelFunction_1_1ExpVelocityFieldEuler3D.html</anchorfile>
      <anchor>a721ff2edf93e55ba3624b20ba37567cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>_x</name>
      <anchorfile>structmirtk_1_1NaryVoxelFunction_1_1ExpVelocityFieldEuler3D.html</anchorfile>
      <anchor>adfd68e533b66f3c34ffa66ddc3938038</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::NaryVoxelFunction::NOP</name>
    <filename>structmirtk_1_1NaryVoxelFunction_1_1NOP.html</filename>
    <base>mirtk::VoxelFunction</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NaryVoxelFunction_1_1NOP.html</anchorfile>
      <anchor>ac666f698223de4301033271ff36e0b39</anchor>
      <arglist>(const TImage &amp;, int, const void *) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NaryVoxelFunction_1_1NOP.html</anchorfile>
      <anchor>a32fb57ecf45de353a7b84803bb79351a</anchor>
      <arglist>(int, int, int, int, const void *) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NaryVoxelFunction_1_1NOP.html</anchorfile>
      <anchor>a94965a39c55b9de44300cfeee0389ae7</anchor>
      <arglist>(const TImage &amp;, int, const void *, const void *) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NaryVoxelFunction_1_1NOP.html</anchorfile>
      <anchor>aaac521c9713b11afbc1e98eccc96d78f</anchor>
      <arglist>(int, int, int, int, const void *, const void *) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NaryVoxelFunction_1_1NOP.html</anchorfile>
      <anchor>a8c882df4b67e2cae9f70235e8ea49c06</anchor>
      <arglist>(const TImage &amp;, int, const void *, const void *, const void *) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NaryVoxelFunction_1_1NOP.html</anchorfile>
      <anchor>a2c15d037069c71ef72404f0f9cf5900e</anchor>
      <arglist>(int, int, int, int, const void *, const void *, const void *) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NaryVoxelFunction_1_1NOP.html</anchorfile>
      <anchor>a4fc7340310e4a493fb8afe2a1c997356</anchor>
      <arglist>(const TImage &amp;, int, const void *, const void *, const void *, const void *) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NaryVoxelFunction_1_1NOP.html</anchorfile>
      <anchor>a05e8141aa57854752dfb8f53fa50a7c2</anchor>
      <arglist>(int, int, int, int, const void *, const void *, const void *, const void *) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NaryVoxelFunction_1_1NOP.html</anchorfile>
      <anchor>aa77b0c2edc20e04a79c417923f8ab0c8</anchor>
      <arglist>(const TImage &amp;, int, const void *, const void *, const void *, const void *, const void *) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NaryVoxelFunction_1_1NOP.html</anchorfile>
      <anchor>a81d3b8cbee43c0031fb7aeba5aa11b79</anchor>
      <arglist>(int, int, int, int, const void *, const void *, const void *, const void *, const void *) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NaryVoxelFunction_1_1NOP.html</anchorfile>
      <anchor>af38fd72f2a7f2ac6913992660c0732f5</anchor>
      <arglist>(const TImage &amp;, int, const void *, const void *, const void *, const void *, const void *, const void *) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NaryVoxelFunction_1_1NOP.html</anchorfile>
      <anchor>a2d41ce7f8409dbc0895b2f75aff72588</anchor>
      <arglist>(int, int, int, int, const void *, const void *, const void *, const void *, const void *, const void *) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NaryVoxelFunction_1_1NOP.html</anchorfile>
      <anchor>a749030c406447abf5e5e899e0704f5d5</anchor>
      <arglist>(const TImage &amp;, int, const void *, const void *, const void *, const void *, const void *, const void *, const void *) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NaryVoxelFunction_1_1NOP.html</anchorfile>
      <anchor>abce1f7a24c9631912c2985e83acfe1fa</anchor>
      <arglist>(int, int, int, int, const void *, const void *, const void *, const void *, const void *, const void *, const void *) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NaryVoxelFunction_1_1NOP.html</anchorfile>
      <anchor>aee23b0eed3ba67562ecc3493c7129960</anchor>
      <arglist>(const TImage &amp;, int, const void *, const void *, const void *, const void *, const void *, const void *, const void *, const void *) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NaryVoxelFunction_1_1NOP.html</anchorfile>
      <anchor>a7c7b91945b2d661a413c7bec18350423</anchor>
      <arglist>(int, int, int, int, const void *, const void *, const void *, const void *, const void *, const void *, const void *, const void *) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NaryVoxelFunction_1_1NOP.html</anchorfile>
      <anchor>a35e017468ed03f27f62f89d75553c16b</anchor>
      <arglist>(const TImage &amp;, int, const void *, const void *, const void *, const void *, const void *, const void *, const void *, const void *, const void *) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1NaryVoxelFunction_1_1NOP.html</anchorfile>
      <anchor>a0d2e0d863c7a03f7c8e66fd8e50eb2c1</anchor>
      <arglist>(int, int, int, int, const void *, const void *, const void *, const void *, const void *, const void *, const void *, const void *, const void *) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::NaryVoxelFunction::VoxelWiseWeightedSum</name>
    <filename>structmirtk_1_1NaryVoxelFunction_1_1VoxelWiseWeightedSum.html</filename>
    <base>mirtk::VoxelFunction</base>
  </compound>
  <compound kind="class">
    <name>mirtk::SpectralDecomposition::FindClosestNPoints</name>
    <filename>classmirtk_1_1SpectralDecomposition_1_1FindClosestNPoints.html</filename>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1SpectralDecomposition_1_1FindClosestNPoints.html</anchorfile>
      <anchor>aa0154e984b8bf62807472eaf98b8acdb</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Array&lt; Array&lt; int &gt; &gt;</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1SpectralDecomposition_1_1FindClosestNPoints.html</anchorfile>
      <anchor>af65f83f12fa7c8cf0fc01a47d95c72d9</anchor>
      <arglist>(const PointSet &amp;p1, const PointSet &amp;p2, int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mirtk::SpectralDecomposition::FindClosestPoints</name>
    <filename>classmirtk_1_1SpectralDecomposition_1_1FindClosestPoints.html</filename>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classmirtk_1_1SpectralDecomposition_1_1FindClosestPoints.html</anchorfile>
      <anchor>a87eb7834b2910e02e7ca8fd24e3bb4b5</anchor>
      <arglist>(const blocked_range&lt; int &gt; &amp;re) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Array&lt; int &gt;</type>
      <name>Run</name>
      <anchorfile>classmirtk_1_1SpectralDecomposition_1_1FindClosestPoints.html</anchorfile>
      <anchor>ad7659ccb2282d63b9a02e55ea1af1cd7</anchor>
      <arglist>(const PointSet &amp;p1, const PointSet &amp;p2)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>mirtk::TernaryVoxelFunction</name>
    <filename>namespacemirtk_1_1TernaryVoxelFunction.html</filename>
    <class kind="struct">mirtk::TernaryVoxelFunction::Diff</class>
    <class kind="struct">mirtk::TernaryVoxelFunction::Div</class>
    <class kind="struct">mirtk::TernaryVoxelFunction::Mul</class>
    <class kind="struct">mirtk::TernaryVoxelFunction::Sum</class>
    <member kind="typedef">
      <type>Mul</type>
      <name>Prod</name>
      <anchorfile>namespacemirtk_1_1TernaryVoxelFunction.html</anchorfile>
      <anchor>a134e93e3f07bbb6a8cc6f11938a3f2ec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::TernaryVoxelFunction::Diff</name>
    <filename>structmirtk_1_1TernaryVoxelFunction_1_1Diff.html</filename>
    <base>mirtk::VoxelFunction</base>
  </compound>
  <compound kind="struct">
    <name>mirtk::TernaryVoxelFunction::Div</name>
    <filename>structmirtk_1_1TernaryVoxelFunction_1_1Div.html</filename>
    <base>mirtk::VoxelFunction</base>
  </compound>
  <compound kind="struct">
    <name>mirtk::TernaryVoxelFunction::Mul</name>
    <filename>structmirtk_1_1TernaryVoxelFunction_1_1Mul.html</filename>
    <base>mirtk::VoxelFunction</base>
  </compound>
  <compound kind="struct">
    <name>mirtk::TernaryVoxelFunction::Sum</name>
    <filename>structmirtk_1_1TernaryVoxelFunction_1_1Sum.html</filename>
    <base>mirtk::VoxelFunction</base>
  </compound>
  <compound kind="class">
    <name>mirtk::TransformationUtils::SubDisplacements</name>
    <filename>classmirtk_1_1TransformationUtils_1_1SubDisplacements.html</filename>
  </compound>
  <compound kind="class">
    <name>mirtk::TransformationUtils::TransformPoints</name>
    <filename>classmirtk_1_1TransformationUtils_1_1TransformPoints.html</filename>
  </compound>
  <compound kind="class">
    <name>mirtk::TransformationUtils::TransformWorldCoords</name>
    <filename>classmirtk_1_1TransformationUtils_1_1TransformWorldCoords.html</filename>
  </compound>
  <compound kind="namespace">
    <name>mirtk::UnaryVoxelFunction</name>
    <filename>namespacemirtk_1_1UnaryVoxelFunction.html</filename>
    <class kind="struct">mirtk::UnaryVoxelFunction::CastToGreyValue</class>
    <class kind="struct">mirtk::UnaryVoxelFunction::Clamp</class>
    <class kind="struct">mirtk::UnaryVoxelFunction::GetMax</class>
    <class kind="struct">mirtk::UnaryVoxelFunction::GetMin</class>
    <class kind="struct">mirtk::UnaryVoxelFunction::GetMinMax</class>
    <class kind="struct">mirtk::UnaryVoxelFunction::InterpolateImage</class>
    <class kind="struct">mirtk::UnaryVoxelFunction::InterpolateMultiChannelImage</class>
    <class kind="struct">mirtk::UnaryVoxelFunction::InterpolateScalarImage</class>
    <class kind="struct">mirtk::UnaryVoxelFunction::LowerThreshold</class>
    <class kind="struct">mirtk::UnaryVoxelFunction::Sqrt</class>
    <class kind="struct">mirtk::UnaryVoxelFunction::UpperThreshold</class>
  </compound>
  <compound kind="struct">
    <name>mirtk::UnaryVoxelFunction::CastToGreyValue</name>
    <filename>structmirtk_1_1UnaryVoxelFunction_1_1CastToGreyValue.html</filename>
    <base>mirtk::VoxelFunction</base>
  </compound>
  <compound kind="struct">
    <name>mirtk::UnaryVoxelFunction::Clamp</name>
    <filename>structmirtk_1_1UnaryVoxelFunction_1_1Clamp.html</filename>
    <templarg></templarg>
    <base>mirtk::VoxelFunction</base>
    <member kind="variable">
      <type>T</type>
      <name>_LowerThreshold</name>
      <anchorfile>structmirtk_1_1UnaryVoxelFunction_1_1Clamp.html</anchorfile>
      <anchor>a13f3a918b0f2cf334d20ddc9f319f761</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>_UpperThreshold</name>
      <anchorfile>structmirtk_1_1UnaryVoxelFunction_1_1Clamp.html</anchorfile>
      <anchor>a840c23d9900453f9cdd3d7eaaebcd5e5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::UnaryVoxelFunction::GetMax</name>
    <filename>structmirtk_1_1UnaryVoxelFunction_1_1GetMax.html</filename>
    <base>mirtk::VoxelReduction</base>
  </compound>
  <compound kind="struct">
    <name>mirtk::UnaryVoxelFunction::GetMin</name>
    <filename>structmirtk_1_1UnaryVoxelFunction_1_1GetMin.html</filename>
    <base>mirtk::VoxelReduction</base>
  </compound>
  <compound kind="struct">
    <name>mirtk::UnaryVoxelFunction::GetMinMax</name>
    <filename>structmirtk_1_1UnaryVoxelFunction_1_1GetMinMax.html</filename>
    <base>mirtk::VoxelReduction</base>
  </compound>
  <compound kind="struct">
    <name>mirtk::UnaryVoxelFunction::InterpolateImage</name>
    <filename>structmirtk_1_1UnaryVoxelFunction_1_1InterpolateImage.html</filename>
    <templarg>TInterpolator</templarg>
    <base>mirtk::VoxelFunction</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1UnaryVoxelFunction_1_1InterpolateImage.html</anchorfile>
      <anchor>a8c0d467c5d33cb9320816839e7c9ca10</anchor>
      <arglist>(int i, int j, int k, int l, T *o)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::UnaryVoxelFunction::InterpolateMultiChannelImage</name>
    <filename>structmirtk_1_1UnaryVoxelFunction_1_1InterpolateMultiChannelImage.html</filename>
    <templarg>TInterpolator</templarg>
    <base>mirtk::VoxelFunction</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1UnaryVoxelFunction_1_1InterpolateMultiChannelImage.html</anchorfile>
      <anchor>a5593077b19613d071e2b5b319bec6af1</anchor>
      <arglist>(int i, int j, int k, int, T *o)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1UnaryVoxelFunction_1_1InterpolateMultiChannelImage.html</anchorfile>
      <anchor>a03d05446f2bbd2e2092c2e64dedb231a</anchor>
      <arglist>(int i, int j, int k, int, double *o)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::UnaryVoxelFunction::InterpolateScalarImage</name>
    <filename>structmirtk_1_1UnaryVoxelFunction_1_1InterpolateScalarImage.html</filename>
    <templarg>TInterpolator</templarg>
    <base>mirtk::VoxelFunction</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmirtk_1_1UnaryVoxelFunction_1_1InterpolateScalarImage.html</anchorfile>
      <anchor>abe97a1dc2bf45d9546f7fc2250382c21</anchor>
      <arglist>(int i, int j, int k, int l, T *o)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::UnaryVoxelFunction::LowerThreshold</name>
    <filename>structmirtk_1_1UnaryVoxelFunction_1_1LowerThreshold.html</filename>
    <templarg></templarg>
    <base>mirtk::VoxelFunction</base>
    <member kind="variable">
      <type>T</type>
      <name>_LowerThreshold</name>
      <anchorfile>structmirtk_1_1UnaryVoxelFunction_1_1LowerThreshold.html</anchorfile>
      <anchor>a14606319dfe8aa6cb5b9f62b73d111d2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mirtk::UnaryVoxelFunction::Sqrt</name>
    <filename>structmirtk_1_1UnaryVoxelFunction_1_1Sqrt.html</filename>
    <base>mirtk::VoxelFunction</base>
  </compound>
  <compound kind="struct">
    <name>mirtk::UnaryVoxelFunction::UpperThreshold</name>
    <filename>structmirtk_1_1UnaryVoxelFunction_1_1UpperThreshold.html</filename>
    <templarg></templarg>
    <base>mirtk::VoxelFunction</base>
    <member kind="variable">
      <type>T</type>
      <name>_UpperThreshold</name>
      <anchorfile>structmirtk_1_1UnaryVoxelFunction_1_1UpperThreshold.html</anchorfile>
      <anchor>a10e821d65c69b528680eb60c4fce3f39</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; mirtk::EnergyMeasure &gt;</name>
    <filename>structstd_1_1hash_3_01mirtk_1_1EnergyMeasure_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; mirtk::Event &gt;</name>
    <filename>structstd_1_1hash_3_01mirtk_1_1Event_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; mirtk::OptimizationMethod &gt;</name>
    <filename>structstd_1_1hash_3_01mirtk_1_1OptimizationMethod_01_4.html</filename>
  </compound>
  <compound kind="dir">
    <name>Applications</name>
    <path>/vol/biomedic/users/as12312/build/merapi/mirtk-release/Applications/</path>
    <filename>dir_d5adf64d21cd241215d6f1d222e03ae8.html</filename>
    <dir>CMakeFiles</dir>
  </compound>
  <compound kind="dir">
    <name>cmake</name>
    <path>/vol/biomedic/users/as12312/build/merapi/mirtk-release/lib/cmake/</path>
    <filename>dir_54c21190e6359fc4242d24892272c3b7.html</filename>
    <dir>mirtk</dir>
  </compound>
  <compound kind="dir">
    <name>CMake</name>
    <path>/vol/medic01/users/as12312/Software/MIRTK/CMake/</path>
    <filename>dir_393cc78db1ff03cd4ac9af6f99acfe55.html</filename>
    <dir>Config</dir>
  </compound>
  <compound kind="dir">
    <name>CMake</name>
    <path>/vol/biomedic/users/as12312/build/merapi/mirtk-release/CMake/</path>
    <filename>dir_79fe9ec94d1b4d6550ccd75becd32d83.html</filename>
    <dir>Config</dir>
  </compound>
  <compound kind="dir">
    <name>CMakeFiles</name>
    <path>/vol/biomedic/users/as12312/build/merapi/mirtk-release/Applications/CMakeFiles/</path>
    <filename>dir_11d14864b4a687a9ae1321ce51fe0c9d.html</filename>
    <dir>pythonlib.dir</dir>
  </compound>
  <compound kind="dir">
    <name>Common</name>
    <path>/vol/medic01/users/as12312/Software/MIRTK/Modules/Common/</path>
    <filename>dir_4a46a79507e5140cc88a49f5a0bcad37.html</filename>
    <dir>include</dir>
  </compound>
  <compound kind="dir">
    <name>Config</name>
    <path>/vol/medic01/users/as12312/Software/MIRTK/CMake/Config/</path>
    <filename>dir_222844435a559822c3e45e51e267c799.html</filename>
    <file>ConfigSettings.cmake</file>
    <file>Depends.cmake</file>
    <file>Settings.cmake</file>
  </compound>
  <compound kind="dir">
    <name>Config</name>
    <path>/vol/biomedic/users/as12312/build/merapi/mirtk-release/CMake/Config/</path>
    <filename>dir_b182acc04f7299b8602061cc25676beb.html</filename>
    <file>BasisScriptConfig.cmake</file>
    <file>Directories.cmake</file>
    <file>ProjectSettings.cmake</file>
  </compound>
  <compound kind="dir">
    <name>Deformable</name>
    <path>/vol/medic01/users/as12312/Software/MIRTK/Packages/Deformable/</path>
    <filename>dir_da127038d51fa35e9b11f2d613df4f3e.html</filename>
    <dir>include</dir>
  </compound>
  <compound kind="dir">
    <name>Image</name>
    <path>/vol/medic01/users/as12312/Software/MIRTK/Modules/Image/</path>
    <filename>dir_a8d03f49af5a1af4265157d62e8645b5.html</filename>
    <dir>include</dir>
    <dir>src</dir>
  </compound>
  <compound kind="dir">
    <name>include</name>
    <path>/vol/medic01/users/as12312/Software/MIRTK/Modules/IO/include/</path>
    <filename>dir_f01e65ddfae11688086c22bea1b59af4.html</filename>
    <dir>mirtk</dir>
  </compound>
  <compound kind="dir">
    <name>include</name>
    <path>/vol/medic01/users/as12312/Software/MIRTK/Modules/Registration/include/</path>
    <filename>dir_1a8d6a762e23a64997ed631182c22fe1.html</filename>
    <dir>mirtk</dir>
  </compound>
  <compound kind="dir">
    <name>include</name>
    <path>/vol/biomedic/users/as12312/build/merapi/mirtk-release/include/</path>
    <filename>dir_b2edc66425f0b79ace2667d4bbcd28bf.html</filename>
    <dir>mirtk</dir>
  </compound>
  <compound kind="dir">
    <name>include</name>
    <path>/vol/medic01/users/as12312/Software/MIRTK/Modules/PointSet/include/</path>
    <filename>dir_35a870b4c93c38e47556d2c8502fd8a3.html</filename>
    <dir>mirtk</dir>
  </compound>
  <compound kind="dir">
    <name>include</name>
    <path>/vol/medic01/users/as12312/Software/MIRTK/Modules/Image/include/</path>
    <filename>dir_51eaf808861f15e64c15b5092177deac.html</filename>
    <dir>mirtk</dir>
  </compound>
  <compound kind="dir">
    <name>include</name>
    <path>/vol/medic01/users/as12312/Software/MIRTK/Packages/Deformable/include/</path>
    <filename>dir_805ffa79b17090af7d64dfcd444ed5b2.html</filename>
    <dir>mirtk</dir>
  </compound>
  <compound kind="dir">
    <name>include</name>
    <path>/vol/medic01/users/as12312/Software/MIRTK/Packages/VolumetricMapping/include/</path>
    <filename>dir_b8a21e8a6865e98473d61ad6faf205ad.html</filename>
    <dir>mirtk</dir>
  </compound>
  <compound kind="dir">
    <name>include</name>
    <path>/vol/medic01/users/as12312/Software/MIRTK/Modules/Common/include/</path>
    <filename>dir_a190895ce7b260381fdf85c8b7d01128.html</filename>
    <dir>mirtk</dir>
  </compound>
  <compound kind="dir">
    <name>include</name>
    <path>/vol/medic01/users/as12312/Software/MIRTK/Modules/Transformation/include/</path>
    <filename>dir_a5f412470aa21bfeeccefa4615fa5946.html</filename>
    <dir>mirtk</dir>
  </compound>
  <compound kind="dir">
    <name>include</name>
    <path>/vol/medic01/users/as12312/Software/MIRTK/Modules/Numerics/include/</path>
    <filename>dir_212a2c59605177f73e7619c15ecc8ab9.html</filename>
    <dir>mirtk</dir>
  </compound>
  <compound kind="dir">
    <name>install</name>
    <path>/vol/biomedic/users/as12312/build/merapi/mirtk-release/Applications/CMakeFiles/pythonlib.dir/install/</path>
    <filename>dir_b6096ffe25e7ad941f76952964370dc2.html</filename>
    <dir>mirtk</dir>
  </compound>
  <compound kind="dir">
    <name>IO</name>
    <path>/vol/medic01/users/as12312/Software/MIRTK/Modules/IO/</path>
    <filename>dir_8f47f8821c3faa4e166ff79a4be84c79.html</filename>
    <dir>include</dir>
    <dir>src</dir>
  </compound>
  <compound kind="dir">
    <name>lib</name>
    <path>/vol/biomedic/users/as12312/build/merapi/mirtk-release/lib/</path>
    <filename>dir_8e641dff053a5a5d6b4499f8ecad9125.html</filename>
    <dir>cmake</dir>
  </compound>
  <compound kind="dir">
    <name>mirtk</name>
    <path>/vol/biomedic/users/as12312/build/merapi/mirtk-release/lib/cmake/mirtk/</path>
    <filename>dir_1efbcdf452b522a4af43bb20c8592148.html</filename>
    <file>MIRTKConfig.cmake</file>
    <file>MIRTKConfigVersion.cmake</file>
    <file>MIRTKUse.cmake</file>
  </compound>
  <compound kind="dir">
    <name>mirtk</name>
    <path>/vol/medic01/users/as12312/Software/MIRTK/Modules/IO/include/mirtk/</path>
    <filename>dir_e51b255984f6ab97e798e8d5c492d897.html</filename>
    <file>GIPLImageReader.h</file>
    <file>GIPLImageWriter.h</file>
    <file>NiftiImageInfo.h</file>
    <file>NiftiImageReader.h</file>
    <file>NiftiImageWriter.h</file>
    <file>PGMImageReader.h</file>
    <file>PGMImageWriter.h</file>
    <file>PNGImageWriter.h</file>
    <file>PointSetIO.h</file>
  </compound>
  <compound kind="dir">
    <name>mirtk</name>
    <path>/vol/medic01/users/as12312/Software/MIRTK/Modules/Registration/include/mirtk/</path>
    <filename>dir_ca96c6746677ccdc96ea64616a9df99a.html</filename>
    <file>CosineOfNormalizedGradientField.h</file>
    <file>CurrentsDistance.h</file>
    <file>DataFidelity.h</file>
    <file>FiducialRegistrationError.h</file>
    <file>GenericRegistrationDebugger.h</file>
    <file>GenericRegistrationFilter.h</file>
    <file>GenericRegistrationLogger.h</file>
    <file>GradientFieldSimilarity.h</file>
    <file>HistogramImageSimilarity.h</file>
    <file>ImageCovariance.h</file>
    <file>ImageSimilarity.h</file>
    <file>IntensityCorrelationRatioXY.h</file>
    <file>IntensityCorrelationRatioYX.h</file>
    <file>IntensityCrossCorrelation.h</file>
    <file>JointImageEntropy.h</file>
    <file>LabelConsistency.h</file>
    <file>MutualImageInformation.h</file>
    <file>NormalizedGradientFieldSimilarity.h</file>
    <file>NormalizedIntensityCrossCorrelation.h</file>
    <file>NormalizedMutualImageInformation.h</file>
    <file>PeakSignalToNoiseRatio.h</file>
    <file>PointCorrespondenceDistance.h</file>
    <file>PointSetDistance.h</file>
    <file>PointSetDistanceMeasure.h</file>
    <file>Registration.h</file>
    <file>RegistrationEnergy.h</file>
    <file>RegistrationFilter.h</file>
    <file>SimilarityMeasure.h</file>
    <file>SumOfSquaredIntensityDifferences.h</file>
    <file>SurfaceDistance.h</file>
  </compound>
  <compound kind="dir">
    <name>mirtk</name>
    <path>/vol/biomedic/users/as12312/build/merapi/mirtk-release/include/mirtk/</path>
    <filename>dir_475ad1a192a35498fb14804f96e2a655.html</filename>
    <file>CommonConfig.h</file>
    <file>CommonExport.h</file>
    <file>DeformableExport.h</file>
    <file>ImageConfig.h</file>
    <file>ImageExport.h</file>
    <file>IOConfig.h</file>
    <file>IOExport.h</file>
    <file>NumericsConfig.h</file>
    <file>NumericsExport.h</file>
    <file>PointSetExport.h</file>
    <file>RegistrationConfig.h</file>
    <file>RegistrationExport.h</file>
    <file>TransformationExport.h</file>
    <file>VersionInfo.h</file>
    <file>VolumetricMappingExport.h</file>
  </compound>
  <compound kind="dir">
    <name>mirtk</name>
    <path>/vol/medic01/users/as12312/Software/MIRTK/Modules/PointSet/include/mirtk/</path>
    <filename>dir_4baf7c54090ee22bf6e27975d42641d5.html</filename>
    <file>ClosestCell.h</file>
    <file>ClosestPoint.h</file>
    <file>ClosestPointLabel.h</file>
    <file>EdgeConnectivity.h</file>
    <file>EdgeTable.h</file>
    <file>FiducialMatch.h</file>
    <file>FuzzyCorrespondence.h</file>
    <file>ImplicitSurfaceUtils.h</file>
    <file>PointCorrespondence.h</file>
    <file>PointLocator.h</file>
    <file>PointSetUtils.h</file>
    <file>PolyDataCurvature.h</file>
    <file>PolyDataFilter.h</file>
    <file>PolyDataRemeshing.h</file>
    <file>PolyDataSmoothing.h</file>
    <file>Polyhedron.h</file>
    <file>RegisteredPointSet.h</file>
    <file>RegisteredSurface.h</file>
    <file>RobustClosestPoint.h</file>
    <file>RobustPointMatch.h</file>
    <file>SpectralDecomposition.h</file>
    <file>SpectralMatch.h</file>
    <file>SurfaceCollisions.h</file>
    <file>Triangle.h</file>
  </compound>
  <compound kind="dir">
    <name>mirtk</name>
    <path>/vol/medic01/users/as12312/Software/MIRTK/Modules/Image/include/mirtk/</path>
    <filename>dir_dd2d04a6f28851c3730aed34bf7dc3ee.html</filename>
    <file>BaseImage.h</file>
    <file>BinaryVoxelFunction.h</file>
    <file>BSplineInterpolateImageFunction.h</file>
    <file>BSplineInterpolateImageFunction.hxx</file>
    <file>BSplineInterpolateImageFunction2D.h</file>
    <file>BSplineInterpolateImageFunction2D.hxx</file>
    <file>BSplineInterpolateImageFunction3D.h</file>
    <file>BSplineInterpolateImageFunction3D.hxx</file>
    <file>BSplineInterpolateImageFunction4D.h</file>
    <file>BSplineInterpolateImageFunction4D.hxx</file>
    <file>CityBlockDistanceTransform.h</file>
    <file>ConnectedComponents.h</file>
    <file>ConstExtrapolateImageFunction.h</file>
    <file>ConstExtrapolateImageFunctionWithPeriodicTime.h</file>
    <file>ConstGenericImageIterator.h</file>
    <file>ConstImageIterator.h</file>
    <file>ConvolutionFunction.h</file>
    <file>CSplineInterpolateImageFunction.h</file>
    <file>CSplineInterpolateImageFunction.hxx</file>
    <file>CSplineInterpolateImageFunction2D.h</file>
    <file>CSplineInterpolateImageFunction2D.hxx</file>
    <file>CSplineInterpolateImageFunction3D.h</file>
    <file>CSplineInterpolateImageFunction3D.hxx</file>
    <file>CSplineInterpolateImageFunction4D.h</file>
    <file>CSplineInterpolateImageFunction4D.hxx</file>
    <file>CubicBSplineInterpolateImageFunction.h</file>
    <file>CubicBSplineInterpolateImageFunction.hxx</file>
    <file>CubicBSplineInterpolateImageFunction2D.h</file>
    <file>CubicBSplineInterpolateImageFunction2D.hxx</file>
    <file>CubicBSplineInterpolateImageFunction3D.h</file>
    <file>CubicBSplineInterpolateImageFunction3D.hxx</file>
    <file>CubicBSplineInterpolateImageFunction4D.h</file>
    <file>CubicBSplineInterpolateImageFunction4D.hxx</file>
    <file>DataFunctions.h</file>
    <file>DataOp.h</file>
    <file>DataStatistics.h</file>
    <file>DifferenceOfCompositionLieBracketImageFilter3D.h</file>
    <file>Dilation.h</file>
    <file>DisplacementFieldExp.h</file>
    <file>DisplacementToVelocityField.h</file>
    <file>DisplacementToVelocityFieldBCH.h</file>
    <file>Downsampling.h</file>
    <file>Erosion.h</file>
    <file>EuclideanDistanceTransform.h</file>
    <file>ExtrapolateImageFunction.h</file>
    <file>ExtrapolationMode.h</file>
    <file>FastCubicBSplineInterpolateImageFunction.h</file>
    <file>FastCubicBSplineInterpolateImageFunction.hxx</file>
    <file>FastCubicBSplineInterpolateImageFunction2D.h</file>
    <file>FastCubicBSplineInterpolateImageFunction2D.hxx</file>
    <file>FastCubicBSplineInterpolateImageFunction3D.h</file>
    <file>FastCubicBSplineInterpolateImageFunction3D.hxx</file>
    <file>FastCubicBSplineInterpolateImageFunction4D.h</file>
    <file>FastCubicBSplineInterpolateImageFunction4D.hxx</file>
    <file>FastLinearImageGradientFunction.h</file>
    <file>FastLinearImageGradientFunction.hxx</file>
    <file>FastLinearImageGradientFunction2D.h</file>
    <file>FastLinearImageGradientFunction2D.hxx</file>
    <file>FastLinearImageGradientFunction3D.h</file>
    <file>FastLinearImageGradientFunction3D.hxx</file>
    <file>ForEachBinaryVoxelFunction.h</file>
    <file>ForEachNonaryVoxelFunction.h</file>
    <file>ForEachOctaryVoxelFunction.h</file>
    <file>ForEachQuaternaryVoxelFunction.h</file>
    <file>ForEachQuinaryVoxelFunction.h</file>
    <file>ForEachSenaryVoxelFunction.h</file>
    <file>ForEachSeptenaryVoxelFunction.h</file>
    <file>ForEachTernaryVoxelFunction.h</file>
    <file>ForEachUnaryVoxelFunction.h</file>
    <file>GaussianBlurring.h</file>
    <file>GaussianBlurring2D.h</file>
    <file>GaussianBlurring4D.h</file>
    <file>GaussianBlurringWithPadding.h</file>
    <file>GaussianBlurringWithPadding2D.h</file>
    <file>GaussianInterpolateImageFunction.h</file>
    <file>GaussianInterpolateImageFunction.hxx</file>
    <file>GaussianInterpolateImageFunction2D.h</file>
    <file>GaussianInterpolateImageFunction2D.hxx</file>
    <file>GaussianInterpolateImageFunction3D.h</file>
    <file>GaussianInterpolateImageFunction3D.hxx</file>
    <file>GaussianInterpolateImageFunction4D.h</file>
    <file>GaussianInterpolateImageFunction4D.hxx</file>
    <file>GaussianPyramidFilter.h</file>
    <file>GenericImage.h</file>
    <file>GenericImageIterator.h</file>
    <file>GradientImageFilter.h</file>
    <file>HashImage.h</file>
    <file>HashImage.hxx</file>
    <file>HessianImageFilter.h</file>
    <file>Histogram1D.h</file>
    <file>Histogram2D.h</file>
    <file>Image.h</file>
    <file>ImageAttributes.h</file>
    <file>ImageFunction.h</file>
    <file>ImageGradientFunction.h</file>
    <file>ImageGradientFunction.hxx</file>
    <file>ImageIterator.h</file>
    <file>ImageReader.h</file>
    <file>ImageReaderFactory.h</file>
    <file>ImageRegion.h</file>
    <file>ImageSequence.h</file>
    <file>ImageSequence.hh</file>
    <file>ImageToImage.h</file>
    <file>ImageToInterpolationCoefficients.h</file>
    <file>ImageWriter.h</file>
    <file>ImageWriterFactory.h</file>
    <file>InterpolateImageFunction.h</file>
    <file>InterpolateImageFunction.hxx</file>
    <file>InterpolationMode.h</file>
    <file>LieBracketImageFilter.h</file>
    <file>LieBracketImageFilter2D.h</file>
    <file>LieBracketImageFilter3D.h</file>
    <file>LinearImageGradientFunction.h</file>
    <file>LinearImageGradientFunction.hxx</file>
    <file>LinearImageGradientFunction2D.h</file>
    <file>LinearImageGradientFunction2D.hxx</file>
    <file>LinearImageGradientFunction3D.h</file>
    <file>LinearImageGradientFunction3D.hxx</file>
    <file>LinearInterpolateImageFunction.h</file>
    <file>LinearInterpolateImageFunction.hxx</file>
    <file>LinearInterpolateImageFunction2D.h</file>
    <file>LinearInterpolateImageFunction2D.hxx</file>
    <file>LinearInterpolateImageFunction3D.h</file>
    <file>LinearInterpolateImageFunction3D.hxx</file>
    <file>LinearInterpolateImageFunction4D.h</file>
    <file>LinearInterpolateImageFunction4D.hxx</file>
    <file>MirrorExtrapolateImageFunction.h</file>
    <file>NaryVoxelFunction.h</file>
    <file>NearestNeighborExtrapolateImageFunction.h</file>
    <file>NearestNeighborInterpolateImageFunction.h</file>
    <file>NearestNeighborInterpolateImageFunction.hxx</file>
    <file>NeighborhoodOffsets.h</file>
    <file>RepeatExtrapolateImageFunction.h</file>
    <file>Resampling.h</file>
    <file>ResamplingWithPadding.h</file>
    <file>ScalarFunctionToImage.h</file>
    <file>ScalingAndSquaring.h</file>
    <file>ShapeBasedInterpolateImageFunction.h</file>
    <file>SincInterpolateImageFunction.h</file>
    <file>SincInterpolateImageFunction.hxx</file>
    <file>SincInterpolateImageFunction2D.h</file>
    <file>SincInterpolateImageFunction2D.hxx</file>
    <file>SincInterpolateImageFunction3D.h</file>
    <file>SincInterpolateImageFunction3D.hxx</file>
    <file>SincInterpolateImageFunction4D.h</file>
    <file>SincInterpolateImageFunction4D.hxx</file>
    <file>TernaryVoxelFunction.h</file>
    <file>UnaryVoxelFunction.h</file>
    <file>VelocityFieldExp.h</file>
    <file>VelocityToDisplacementField.h</file>
    <file>VelocityToDisplacementFieldEuler.h</file>
    <file>VelocityToDisplacementFieldSS.h</file>
    <file>Voxel.h</file>
    <file>VoxelCast.h</file>
    <file>VoxelDomain.h</file>
    <file>VoxelFunction.h</file>
  </compound>
  <compound kind="dir">
    <name>mirtk</name>
    <path>/vol/medic01/users/as12312/Software/MIRTK/Packages/Deformable/include/mirtk/</path>
    <filename>dir_c54c31ea650841e6f9674de8f4d8b462.html</filename>
    <file>BalloonForce.h</file>
    <file>CurvatureConstraint.h</file>
    <file>DeformableConfig.h</file>
    <file>DeformableSurfaceDebugger.h</file>
    <file>DeformableSurfaceLogger.h</file>
    <file>DeformableSurfaceModel.h</file>
    <file>EulerMethod.h</file>
    <file>EulerMethodWithDamping.h</file>
    <file>EulerMethodWithMomentum.h</file>
    <file>ExternalForce.h</file>
    <file>ExternalForceTerm.h</file>
    <file>ImageEdgeForce.h</file>
    <file>ImplicitSurfaceDistance.h</file>
    <file>ImplicitSurfaceForce.h</file>
    <file>ImplicitSurfaceSpringForce.h</file>
    <file>InflationForce.h</file>
    <file>InflationStoppingCriterion.h</file>
    <file>InternalForce.h</file>
    <file>InternalForceTerm.h</file>
    <file>MetricDistortion.h</file>
    <file>MinActiveStoppingCriterion.h</file>
    <file>NonSelfIntersectionConstraint.h</file>
    <file>PointSetForce.h</file>
    <file>QuadraticCurvatureConstraint.h</file>
    <file>RepulsiveForce.h</file>
    <file>SpringForce.h</file>
    <file>StretchingForce.h</file>
    <file>SurfaceConstraint.h</file>
    <file>SurfaceForce.h</file>
  </compound>
  <compound kind="dir">
    <name>mirtk</name>
    <path>/vol/medic01/users/as12312/Software/MIRTK/Packages/VolumetricMapping/include/mirtk/</path>
    <filename>dir_342ec9a9c3e4a51de0c008065ab55059.html</filename>
    <file>AsConformalAsPossibleVolumeParameterizer.h</file>
    <file>BiharmonicMap.h</file>
    <file>DiscreteMap.h</file>
    <file>FundamentalMap.h</file>
    <file>FundamentalVolumeParameterizer.h</file>
    <file>HarmonicFundamentalVolumeParameterizer.h</file>
    <file>HarmonicMap.h</file>
    <file>HarmonicTetrahedralVolumeParameterizer.h</file>
    <file>LinearTetrahedralVolumeParameterizer.h</file>
    <file>TetrahedralVolumeParameterizer.h</file>
    <file>VolumeParameterizer.h</file>
    <file>VolumetricMap.h</file>
  </compound>
  <compound kind="dir">
    <name>mirtk</name>
    <path>/vol/medic01/users/as12312/Software/MIRTK/Modules/Common/include/mirtk/</path>
    <filename>dir_bff1adafa7a3ec4b92b7f758c2930e09.html</filename>
    <file>Algorithm.h</file>
    <file>Allocate.h</file>
    <file>Array.h</file>
    <file>ArrayHeap.h</file>
    <file>Assert.h</file>
    <file>Cfstream.h</file>
    <file>Cifstream.h</file>
    <file>Cofstream.h</file>
    <file>Common.h</file>
    <file>Config.h</file>
    <file>Configurable.h</file>
    <file>Cuda.h</file>
    <file>CudaRuntime.h</file>
    <file>CutilMath.h</file>
    <file>Deallocate.h</file>
    <file>EnergyMeasure.h</file>
    <file>Event.h</file>
    <file>EventDelegate.h</file>
    <file>FastDelegate.h</file>
    <file>Indent.h</file>
    <file>List.h</file>
    <file>Math.h</file>
    <file>Matlab.h</file>
    <file>Memory.h</file>
    <file>Object.h</file>
    <file>ObjectFactory.h</file>
    <file>Observable.h</file>
    <file>Observer.h</file>
    <file>Options.h</file>
    <file>OrderedMap.h</file>
    <file>OrderedSet.h</file>
    <file>Pair.h</file>
    <file>Parallel.h</file>
    <file>Path.h</file>
    <file>PriorityQueue.h</file>
    <file>Profiling.h</file>
    <file>Queue.h</file>
    <file>Random.h</file>
    <file>Stack.h</file>
    <file>Status.h</file>
    <file>Stream.h</file>
    <file>String.h</file>
    <file>System.h</file>
    <file>Terminal.h</file>
    <file>TestProd.h</file>
    <file>UnorderedMap.h</file>
    <file>UnorderedSet.h</file>
    <file>Utils.h</file>
    <file>Version.h</file>
    <file>Vtk.h</file>
    <file>VtkMath.h</file>
  </compound>
  <compound kind="dir">
    <name>mirtk</name>
    <path>/vol/medic01/users/as12312/Software/MIRTK/Modules/Transformation/include/mirtk/</path>
    <filename>dir_c332e944c26cb4af04478e6b8791e747.html</filename>
    <file>AffineTransformation.h</file>
    <file>BSplineFreeFormTransformation3D.h</file>
    <file>BSplineFreeFormTransformation4D.h</file>
    <file>BSplineFreeFormTransformationStatistical.h</file>
    <file>BSplineFreeFormTransformationSV.h</file>
    <file>BSplineFreeFormTransformationTD.h</file>
    <file>ConstraintMeasure.h</file>
    <file>EnergyTerm.h</file>
    <file>FFDIntegrationMethod.h</file>
    <file>FluidFreeFormTransformation.h</file>
    <file>FreeFormTransformation.h</file>
    <file>FreeFormTransformation3D.h</file>
    <file>FreeFormTransformation4D.h</file>
    <file>HomogeneousTransformation.h</file>
    <file>HomogeneousTransformationIterator.h</file>
    <file>ImageTransformation.h</file>
    <file>InverseAffineTransformation.h</file>
    <file>JacobianConstraint.h</file>
    <file>LinearFreeFormTransformation3D.h</file>
    <file>LinearFreeFormTransformation4D.h</file>
    <file>LinearFreeFormTransformationTD.h</file>
    <file>LogJacobianConstraint.h</file>
    <file>MinJacobianConstraint.h</file>
    <file>MultiLevelFreeFormTransformation.h</file>
    <file>MultiLevelStationaryVelocityTransformation.h</file>
    <file>MultiLevelTransformation.h</file>
    <file>MultipleVoxelTransformation.h</file>
    <file>PartialAffineTransformation.h</file>
    <file>PartialBSplineFreeFormTransformationSV.h</file>
    <file>PartialMultiLevelStationaryVelocityTransformation.h</file>
    <file>RegisteredImage.h</file>
    <file>RigidTransformation.h</file>
    <file>SimilarityTransformation.h</file>
    <file>SmoothnessConstraint.h</file>
    <file>SparsityConstraint.h</file>
    <file>TopologyPreservationConstraint.h</file>
    <file>Transformation.h</file>
    <file>TransformationApproximationError.h</file>
    <file>TransformationConfig.h</file>
    <file>TransformationConstraint.h</file>
    <file>TransformationJacobian.h</file>
    <file>TransformationModel.h</file>
    <file>Transformations.h</file>
    <file>TransformationType.h</file>
    <file>VolumePreservationConstraint.h</file>
  </compound>
  <compound kind="dir">
    <name>mirtk</name>
    <path>/vol/medic01/users/as12312/Software/MIRTK/Modules/Numerics/include/mirtk/</path>
    <filename>dir_a3f4a8d5f11c80871c768a107999c570.html</filename>
    <file>AdaptiveLineSearch.h</file>
    <file>Arith.h</file>
    <file>Arpack.h</file>
    <file>BrentLineSearch.h</file>
    <file>BSpline.h</file>
    <file>CharbonnierErrorFunction.h</file>
    <file>ConjugateGradientDescent.h</file>
    <file>DistanceErrorFunction.h</file>
    <file>Eigen.h</file>
    <file>EnergyThreshold.h</file>
    <file>GaussianErrorFunction.h</file>
    <file>GradientDescent.h</file>
    <file>InexactLineSearch.h</file>
    <file>LimitedMemoryBFGSDescent.h</file>
    <file>LineSearch.h</file>
    <file>LocalOptimizer.h</file>
    <file>Matrix.h</file>
    <file>Matrix3x3.h</file>
    <file>MaxStepLineSearch.h</file>
    <file>Numerics.h</file>
    <file>ObjectiveFunction.h</file>
    <file>OptimizationMethod.h</file>
    <file>PeronaMalikErrorFunction.h</file>
    <file>Plane.h</file>
    <file>Point.h</file>
    <file>PointSamples.h</file>
    <file>PointSet.h</file>
    <file>Polynomial.h</file>
    <file>RadialErrorFunction.h</file>
    <file>ScalarFunction.h</file>
    <file>ScalarGaussian.h</file>
    <file>Sinc.h</file>
    <file>SparseMatrix.h</file>
    <file>SquaredErrorFunction.h</file>
    <file>StoppingCriterion.h</file>
    <file>Umfpack.h</file>
    <file>Vector.h</file>
    <file>Vector3.h</file>
    <file>Vector3D.h</file>
    <file>Vector4D.h</file>
  </compound>
  <compound kind="dir">
    <name>mirtk</name>
    <path>/vol/biomedic/users/as12312/build/merapi/mirtk-release/Applications/CMakeFiles/pythonlib.dir/install/mirtk/</path>
    <filename>dir_cd011ab9ea70992b226bdf6c3f959e2c.html</filename>
    <file>__init__.py</file>
    <file>subprocess.py</file>
  </compound>
  <compound kind="dir">
    <name>Modules</name>
    <path>/vol/medic01/users/as12312/Software/MIRTK/Modules/</path>
    <filename>dir_bf7909e7fa2b1c78387b173b96104b21.html</filename>
    <dir>Common</dir>
    <dir>Image</dir>
    <dir>IO</dir>
    <dir>Numerics</dir>
    <dir>PointSet</dir>
    <dir>Registration</dir>
    <dir>Transformation</dir>
  </compound>
  <compound kind="dir">
    <name>Numerics</name>
    <path>/vol/medic01/users/as12312/Software/MIRTK/Modules/Numerics/</path>
    <filename>dir_60123222f7dcf6893a7e55c038b13660.html</filename>
    <dir>include</dir>
  </compound>
  <compound kind="dir">
    <name>Packages</name>
    <path>/vol/medic01/users/as12312/Software/MIRTK/Packages/</path>
    <filename>dir_0894868dab91318acf20b91ac2a98f8e.html</filename>
    <dir>Deformable</dir>
    <dir>VolumetricMapping</dir>
  </compound>
  <compound kind="dir">
    <name>PointSet</name>
    <path>/vol/medic01/users/as12312/Software/MIRTK/Modules/PointSet/</path>
    <filename>dir_fe9cad0e3797b952da9482522263c901.html</filename>
    <dir>include</dir>
    <dir>src</dir>
  </compound>
  <compound kind="dir">
    <name>pythonlib.dir</name>
    <path>/vol/biomedic/users/as12312/build/merapi/mirtk-release/Applications/CMakeFiles/pythonlib.dir/</path>
    <filename>dir_1eecf9d1da0635341f0311013fb755da.html</filename>
    <dir>install</dir>
  </compound>
  <compound kind="dir">
    <name>Registration</name>
    <path>/vol/medic01/users/as12312/Software/MIRTK/Modules/Registration/</path>
    <filename>dir_dec1d1db9af78d322d74b9b969053f13.html</filename>
    <dir>include</dir>
    <dir>src</dir>
  </compound>
  <compound kind="dir">
    <name>src</name>
    <path>/vol/medic01/users/as12312/Software/MIRTK/Modules/Registration/src/</path>
    <filename>dir_aeac72c81c5840001ae697ff30f78748.html</filename>
    <file>RegistrationEnergyParser.h</file>
  </compound>
  <compound kind="dir">
    <name>src</name>
    <path>/vol/medic01/users/as12312/Software/MIRTK/Modules/IO/src/</path>
    <filename>dir_915cfd0a7aa9192ff57c6fbab4a6815d.html</filename>
    <file>GIPL.h</file>
    <file>NiftiImage.h</file>
    <file>PGM.h</file>
  </compound>
  <compound kind="dir">
    <name>src</name>
    <path>/vol/medic01/users/as12312/Software/MIRTK/Modules/PointSet/src/</path>
    <filename>dir_47ae01c5baf248c24ae17f7b4b8a91b2.html</filename>
    <file>FuzzyCorrespondenceUtils.h</file>
  </compound>
  <compound kind="dir">
    <name>src</name>
    <path>/vol/medic01/users/as12312/Software/MIRTK/Modules/Transformation/src/</path>
    <filename>dir_080add0177ba2280a7ee84ae6f933984.html</filename>
    <file>FreeFormTransformationIntegration.h</file>
    <file>FreeFormTransformationRungeKutta.h</file>
    <file>TransformationUtils.h</file>
  </compound>
  <compound kind="dir">
    <name>src</name>
    <path>/vol/medic01/users/as12312/Software/MIRTK/Modules/Image/src/</path>
    <filename>dir_993826a70773b4893c201fb161252fde.html</filename>
    <file>ForEachVoxelFunction.py</file>
  </compound>
  <compound kind="dir">
    <name>Transformation</name>
    <path>/vol/medic01/users/as12312/Software/MIRTK/Modules/Transformation/</path>
    <filename>dir_e11ab9dfe4ed421c5eeb5b6e91a6edf1.html</filename>
    <dir>include</dir>
    <dir>src</dir>
  </compound>
  <compound kind="dir">
    <name>VolumetricMapping</name>
    <path>/vol/medic01/users/as12312/Software/MIRTK/Packages/VolumetricMapping/</path>
    <filename>dir_3dc2689d3f0501ed1c503eadd23fe59b.html</filename>
    <dir>include</dir>
  </compound>
</tagfile>
